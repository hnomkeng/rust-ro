mspd_percentage_per_level: Option<Vec<i32>>,        => SpeedPercentage
mastery_atk_per_level: Option<Vec<i32>>,            => MasteryDamageUsingWeaponType(WeaponType,)
beast_bane_atk_per_level: Option<Vec<i32>>,         => AtkBaneAgainstRace(Insect,) + AtkBaneAgainstRace(Brute ,)
demon_bane_atk_per_level: Option<Vec<i32>>,         => AtkBaneAgainstRace(Demon,) + AtkBaneAgainstRace(Undead,)
aspd_percentage_per_level: Option<Vec<f32>>,        => AspdPercentage
success_percentage_per_level: Option<Vec<i32>>,     => SkillIdSuccessPercentage($SkillId$,)
atk_percentage_per_level: Option<Vec<i32>>,         => AtkPercentage
stun_chance_per_level: Option<Vec<i32>>,            => ChanceToInflictStatusOnAttackPercentage(Stun,)
trap_hp_per_level: Option<Vec<i32>>,                -> not bonus, unit hp
aoeact_per_level: Option<Vec<String>>,              -> not bonus
accuracy_percentage_per_level: Option<Vec<i32>>,    => AccuracyPercentage
dmg_waves_per_level: Option<Vec<i32>>,              -> not bonus
dmg_lv_per_level: Option<Vec<i32>>,                 -> not bonus
aoesize_per_level: Option<Vec<String>>,             -> not bonus
craft_per_level: Option<Vec<i32>>,                  -> not bonus
str_per_level: Option<Vec<i32>>                     => Str
flee_per_level: Option<Vec<i32>>,                   => Flee
freeze_chance_per_level: Option<Vec<i32>>,          => ChanceToInflictStatusOnAttackPercentage(Freeze,)
poison_chance_per_level: Option<Vec<i32>>,          => ChanceToInflictStatusOnAttackPercentage(Poison,)
atk_per_level: Option<Vec<i32>>,                    => Atk
autospell_chance_per_level: Option<Vec<f32>>,       => AutospellSkillIdChancePercentage($SkillId$,)
divest_chance_per_level: Option<Vec<i32>>,          => SkillIdSuccessPercentage($SkillId$,)
crit_chance_per_level: Option<Vec<f32>>,            => Crit
def_percentage_per_level: Option<Vec<i32>>,         => Def
agi_per_level: Option<Vec<i32>>,                    => Agi
bleed_chance_per_level: Option<Vec<i32>>,           => ChanceToInflictStatusOnAttackPercentage(Bleeding,)
dmg_per_level: Option<Vec<f32>>,                    -> not bonus
endow_chance_per_level: Option<Vec<i32>>,           => SkillIdSuccessPercentage($SkillId$,)
sp_loss_per_second: Option<f32>,                    => SpLossEveryMs
exp_percentage_per_level: Option<Vec<i32>>,         -> ignore for now
autospell_chance: Option<i32>,                      => AutospellSkillIdChancePercentage($SkillId$,)
skill_delay_in_sec_per_level: Option<Vec<f32>>,     -> not a bonus
sp_regen_bonus_flat_per_level: Option<Vec<i32>>,    => SpRegenEveryMs(,10_000ms)
sp_regen_bonus_percentage_per_level: Option<Vec<f32>>, => SpRecoveryMaxSpPercentage
nullifys_per_level: Option<Vec<i32>>,               => NullifyAttackChancePercentage(100) # TemporaryStatusBonus counter
dex_per_level: Option<Vec<i32>>,                    => Dex
int_per_level: Option<Vec<i32>>,                    => Int
blind_chance_per_level: Option<Vec<i32>>,           => ChanceToInflictStatusOnAttackPercentage(Blind,)
blind_chance: Option<i32>,                          => ChanceToInflictStatusOnAttackPercentage(Blind,)
recovery_percentage_per_level: Option<Vec<i32>>,    => HpRegenFromItemPercentage + SpRegenFromItemPercentage
hp_percentage_per_level: Option<Vec<i32>>,          => MaxhpPercentage
healsp_percentage_per_level: Option<Vec<f32>>,
sp_percentage_per_level: Option<Vec<i32>>,          => MaxspPercentage
sp_wave_per_level: Option<Vec<i32>>,                => SpDrainPerHit
hp_regen_bonus_flat_per_level: Option<Vec<i32>>,    => HpRegenEveryMs(,10000)
hp_regen_bonus_percentage_per_level: Option<Vec<f32>>, => HpRecoveryMaxSpPercentage
dmg_outer_per_level: Option<Vec<f32>>,              -> not a bonus
healbase_per_level: Option<Vec<f32>>,               -> not a bonus, skill formula
buy_price_percentage_per_level: Option<Vec<i32>>,
double_attack_chance_per_level: Option<Vec<i32>>,   => AutospellSkillIdChancePercentage($SkillId$,)
steal_chance_per_level: Option<Vec<i32>>,           => AutospellSkillIdChancePercentage($SkillId$,)
healhp_percentage_per_level: Option<Vec<i32>>,
healhp_per_level: Option<Vec<f32>>,
luk_per_level: Option<Vec<i32>>,                    => Luk
atk: Option<i32>,                                   => Atk
str: Option<i32>,                                   => Str
breakself_percentage_per_level: Option<Vec<f32>>,   => BreakSelfWeaponPercentage
snare_duration_per_level: Option<Vec<i32>>,         -> not a bonus by itself, should be a value of TemporaryStatusBonus
dmg_s_p_percentage_per_level: Option<Vec<i32>>,     -> not a bonus, remove a percentage of target sp
sdef_percentage: Option<i32>,                       => VitDefPercentage
max_lv_per_level: Option<Vec<i32>>,                 -> not a bonus, use for hocus pocus/plagiarism, to know level of skill to cast/copy
break_chance_per_level: Option<Vec<i32>>,           => BreakWeaponPercentage
plant_hp_per_level: Option<Vec<i32>>,               -> not a bonus
plant_type_per_level: Option<Vec<String>>,          -> not a bonus
block_chance_per_level: Option<Vec<i32>>,           => PhysicalAttackBlockChancePercentage
reflect_chance_per_level: Option<Vec<i32>>,         => PhysicalAttackReflectChancePercentage
performancemspd_percentage_per_level: Option<Vec<i32>>, => SpeedPercentage # When doing performance
heal_per_level: Option<Vec<i32>>,
heal_percentage_per_level: Option<Vec<i32>>,
matk_percentage_per_level: Option<Vec<i32>>,        => MatkPercentage
mspd_percentage: Option<i32>,                       => SpeedPercentage
flee: Option<i32>,                                  => Flee
stun_duration_per_level: Option<Vec<i32>>,          ->
sp_regen_bonus_flat: Option<i32>,                   => SpRegenEveryMs(,10000)
refine_per_level: Option<Vec<i32>>,                 -> not a bonus,
aspd_percentage: Option<i32>,                       => AspdPercentage
hit: Option<i32>,                                   => Hit
hp_recovery_percentage_per_level: Option<Vec<i32>>, => HpRegenFromItemPercentage
provoke_chance_per_level: Option<Vec<i32>>,         => SkillIdSuccessPercentage($SkillId$,)
mdef_per_level: Option<Vec<i32>>,                   => Mdef
sp_recovery_percentage_per_level: Option<Vec<i32>>, => SpRegenFromItemPercentage
dmg_decay_per_level: Option<Vec<f32>>,
petrify_chance_per_level: Option<Vec<i32>>,         => ChanceToInflictStatusOnAttackPercentage(Stone,)
memos_per_level: Option<Vec<i32>>,                  -> not a bonus by iteself
decrease_agi_chance_per_level: Option<Vec<i32>>,    => SkillIdSuccessPercentage($SkillId$,)
chance_percentage_per_level: Option<Vec<i32>>,      => SkillIdSuccessPercentage($SkillId$,)
sdef_percentage_per_level: Option<Vec<i32>>,        => VitDefPercentage
weight_limit_per_level: Option<Vec<i32>>,
sale_price_percentage_per_level: Option<Vec<i32>>,
items_per_level: Option<Vec<i32>>,                  -> not a bonus, number of vending items
agi_percentage_per_level: Option<Vec<i32>>,         => Agi
dex_percentage_per_level: Option<Vec<i32>>,         => Dex
katar_offhand_dmg_percentage_per_level: Option<Vec<i32>>,
mspdassassin_percentage_per_level: Option<Vec<i32>>,   => SpeedPercentage # but conditional of job
recursion_per_level: Option<Vec<i32>>,                  -> bowling bash
barrier_attacks_per_level: Option<Vec<i32>>,            => PhysicalAttackBlockChancePercentage # TemporaryStatusBonus expire after hp absorbed
silence_chance_per_level: Option<Vec<i32>>,            => ChanceToInflictStatusOnAttackPercentage(Silence,)
ohko_chance_per_level: Option<Vec<i32>>,               => SkillIdSuccessPercentage($SkillId$,)
wall_hp_per_level: Option<Vec<i32>>,
forge_atk_per_level: Option<Vec<i32>>,                  => Atk
fire_resist_percentage_per_level: Option<Vec<i32>>,     => ResistanceDamageFromElementPercentage(Fire,)
neutral_resist_percentage_per_level: Option<Vec<i32>>,  => ResistanceDamageFromElementPercentage(Neutral,)
aspdparty_percentage_per_level: Option<Vec<i32>>,       => AspdPercentage # BonusesToParty
aspdsmith_percentage_per_level: Option<Vec<i32>>,       => AspdPercentage
atkparty_percentage_per_level: Option<Vec<i32>>,        => AtkPercentage # BonusesToParty
atksmith_percentage_per_level: Option<Vec<i32>>,        => AtkPercentage
sleep_chance_per_level: Option<Vec<i32>>,              => ChanceToInflictStatusOnAttackPercentage(Sleep,)
blind_duration_per_level: Option<Vec<i32>>,             -> not a bonus by itself, should be a value of TemporaryStatusBonus
freeze_duration_per_level: Option<Vec<i32>>,           -> not a bonus by itself, should be a value of TemporaryStatusBonus
falcon_atk_per_level: Option<Vec<i32>>,
mspdwall_percentage_per_level: Option<Vec<i32>>,
autospell_limit_per_level: Option<Vec<i32>>,            -> not a bonus by itself, poison react support skill stop when autospell envenom counter is reached
healhp: Option<i32>,
hpmax_vit_per_level: Option<Vec<i32>>,
atk_percentage: Option<i32>,                            => AtkPercentage
dmg: Option<i32>,                                      -> dmg formula
stun_chance: Option<i32>,                               => ChanceToInflictStatusOnAttackPercentage(Stun,)
dmg_bow_per_level: Option<Vec<f32>>,                    -> not a bouns by itself, dmg formula is different when using a bow
snatch_chance_per_level: Option<Vec<i32>>,              => SkillIdSuccessPercentage($SkillId$,)
plant_quantity_per_level: Option<Vec<i32>>,             -> not a bonus
plant_move_per_level: Option<Vec<i32>>,                 -> not a bonus
holy_resist_percentage_per_level: Option<Vec<i32>>,     => ResistanceDamageFromElementPercentage(Holy,)
delayparty_in_sec_per_level: Option<Vec<f32>>,          -> not a bonus, delay after block attack with Guard
delayuser_in_sec_per_level: Option<Vec<f32>>,           -> not a bonus, delay after block attack with Guard
players_per_level: Option<Vec<i32>>,                    -> not a bonus, number of player that can be protected with sacrifice
demon_resist_chance_per_level: Option<Vec<i32>>,        => ResistanceDamageFromRacePercentage(Demon,)
holy_resist_chance_per_level: Option<Vec<i32>>,         => ResistanceDamageFromElementPercentage(Holy,)
max_spheres_per_level: Option<Vec<i32>>,            -> not a bonus
spheres_per_level: Option<Vec<i32>>,                -> not a bonus
disable_duration_per_level: Option<Vec<i32>>,       -> not a bonus, TemporaryStatusBonus
sp_loss_percentage_per_level: Option<Vec<i32>>,
atk_matk_vs_dragon_percentage_per_level: Option<Vec<i32>>,  => PhysicalDamageAgainstRacePercentage(Dragon) + MagicalDamageAgainstRacePercentage(Dragon)
dragon_resist_percentage_per_level: Option<Vec<i32>>,   => ResistanceDamageFromRacePercentage(Dragon)
dmg_fire_percentage_per_level: Option<Vec<i32>>,  => DamageUsingElementPercentage(Fire,)
dmg_water_percentage_per_level: Option<Vec<i32>>, => DamageUsingElementPercentage(Water,)
dmg_wind_percentage_per_level: Option<Vec<i32>>,  => DamageUsingElementPercentage(Wind,)
dispel_chance_per_level: Option<Vec<i32>>,          => SkillIdSuccessPercentage($SkillId$,)
def_per_level: Option<Vec<i32>>,                    => Def
status_resist_percentage_per_level: Option<Vec<i32>>,   => ResistanceToStatusPercentage(All)
freezeenemy_chance_per_level: Option<Vec<i32>>,     => ChanceToInflictStatusOnAttackPercentage(Freeze,)
freezeparty_chance_per_level: Option<Vec<i32>>,     => ChanceToInflictStatusToPartyOnAttackPercentage(Freeze,)
dmg_s_p_per_level: Option<Vec<i32>>,
stunenemy_chance_per_level: Option<Vec<i32>>,       => ChanceToInflictStatusOnAttackPercentage(Stun,)
stunparty_chance_per_level: Option<Vec<i32>>,       => ChanceToInflictStatusToPartyOnAttackPercentage(Stun,)
sp_regen_percentage_per_level: Option<Vec<i32>>,
hp_loss_percentage_per_level: Option<Vec<i32>>,
gospel_chance_per_level: Option<Vec<i32>>,           => SkillIdSuccessPercentage($SkillId$,)
hp_loss_per_level: Option<Vec<i32>>,
delay_per_level: Option<Vec<f32>>,                  -> not a bonus
dmg_h_p_per_level: Option<Vec<i32>>,
dmg_s_p_chance_per_level: Option<Vec<i32>>,
deadly_poison_chance_per_level: Option<Vec<f32>>,      => SkillIdSuccessPercentage($SkillId$,)
dmg_int_per_level: Option<Vec<i32>>,
all_stats_per_level: Option<Vec<i32>>,                  => AllStats
breakarmor_percentage_per_level: Option<Vec<f32>>,      => BreakArmorPercentage
breakweapon_percentage_per_level: Option<Vec<f32>>,     => BreakWeaponPercentage
status_chance_per_level: Option<Vec<i32>>,              => ChanceToInflictStatusOnAttackPercentage(VitalStrike)
curse_chance_per_level: Option<Vec<i32>>,               => ChanceToInflictStatusOnAttackPercentage(Curse,)
mind_break_chance_per_level: Option<Vec<i32>>,          => SkillIdSuccessPercentage($SkillId$,)
smdef_percentage_per_level: Option<Vec<i32>>,
skill_failure_chance: Option<i32>,                      -> enemy skill failure chance
snare_duration: Option<i32>,                            -> Duration(Effect, val)
success_chance: Option<i32>,                            => SkillIdSuccessPercentage($SkillId$,)
block_chance: Option<i32>,                              => PhysicalAttackBlockChancePercentage
sp_regen_bonus_ratio: Option<f32>,
sp_regen_bonus_percentage: Option<f32>,
distance_per_level: Option<Vec<i32>>,                   -> not a bonus, highjump distance
map_per_level: Option<Vec<String>>,                     -> not a bonus, sg feel
sdef_per_level: Option<Vec<i32>>,                       => VitDefPercentage
vision_percentage_per_level: Option<Vec<i32>>,          => VisionDistance
weight_percentage_limit_percentage_per_level: Option<Vec<i32>>,
aspdparty_percentage: Option<i32>,                          => AspdPercentage # BonusesToParty
aspdsmith_percentage: Option<i32>,                          => AspdPercentage # BonusesToTarget
sp_loss_per_level: Option<Vec<i32>>,
nullify_chance_per_level: Option<Vec<i32>>,                 => NullifyAttackChancePercentage(100)
reflect_per_level: Option<Vec<i32>>,                        => MagicAttackReflectChancePercentage(100) # TemporaryStatusBonus (count)
sp_per_level: Option<Vec<i32>>,                            => Maxsp
max_refine_per_level: Option<Vec<i32>>,                     -> not a bonus
dispel_chance: Option<i32>,                                 => SkillIdSuccessPercentage($SkillId$,)
tarot_chance_per_level: Option<Vec<i32>>,                   => SkillIdSuccessPercentage($SkillId$,)
summon_chance_per_level: Option<Vec<i32>>,                  => SkillIdSuccessPercentage($SkillId$,)
success_chance_per_level: Option<Vec<i32>>,                 => SkillIdSuccessPercentage($SkillId$,)
def: Option<i32>,                                           => Def
comabrute_percentage: Option<f32>,                          => ChanceToInflictStatusComaOnAttackOnRacePercentage(Brute,)
comademi_human_percentage: Option<f32>,                     => ChanceToInflictStatusComaOnAttackOnRacePercentage(DemiHuman,)
dmg_brute: Option<i32>,                                     => PhysicalDamageAgainstRacePercentage(Brute,)
dmg_demihuman: Option<i32>,                                 => PhysicalDamageAgainstRacePercentage(DemiHuman,)
agi: Option<i32>,                                           => Agi
dex: Option<i32>,                                           => Dex
dmg_pistol_per_level: Option<Vec<f32>>,                     -> not a bonus by itself, dmg formula is different when using a pistol
blindself_chance_per_level: Option<Vec<i32>>,               => ChanceToInflictStatusToSelfOnAttackPercentage(Blind, )
dmg_range_per_level: Option<Vec<(f32, f32)>>,               -> not a bonus, part of formula

--- aliases

    #[serde(rename = "dmgAtk", default)]
    dmg_atk: Option<f32>,
    #[serde(
    rename = "dmgMatkPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    dmg_matk_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "spLossPerSecondPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    sp_loss_per_second_per_level: Option<Vec<f32>>,
    #[serde(rename = "aoesplash", default)]
    aoesplash: Option<u32>,
    #[serde(
    rename = "knockbackPerLevel",
    deserialize_with = "deserialize_tuples_u32",
    default
    )]
    knockback_per_level: Option<Vec<u32>>,
    #[serde(rename = "knockback", default)]
    knockback: Option<u32>,
    #[serde(
    rename = "knockbackRangePerLevel",
    deserialize_with = "deserialize_tuples_range_u32",
    default
    )]
    knockback_range_per_level: Option<Vec<(u32, u32)>>,
    #[serde(
    rename = "mspdPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    mspd_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "masteryAtkPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    mastery_atk_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "aspdPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    aspd_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "successPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    success_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "atkPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    atk_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "stunChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    stun_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "trapHpPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    trap_hp_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "aoeactPerLevel",
    deserialize_with = "deserialize_tuples_string",
    default
    )]
    aoeact_per_level: Option<Vec<String>>,
    #[serde(
    rename = "accuracyPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    accuracy_percentage_per_level: Option<Vec<i32>>,
    #[serde(rename = "dmgMatk", default)]
    dmg_matk: Option<f32>,
    #[serde(
    rename = "dmgWavesPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_waves_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgLvPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_lv_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "aoesizePerLevel",
    deserialize_with = "deserialize_tuples_string",
    default
    )]
    aoesize_per_level: Option<Vec<String>>,
    #[serde(
    rename = "craftPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    craft_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "strPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    str_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "fleePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    flee_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "freezeChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    freeze_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "poisonChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    poison_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "atkPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    atk_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "autospellChancePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    autospell_chance_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "divestChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    divest_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "critChancePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    crit_chance_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "defPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    def_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "agiPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    agi_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "bleedChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    bleed_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    dmg_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "endowChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    endow_chance_per_level: Option<Vec<i32>>,
    #[serde(rename = "spLoss", default)]
    sp_loss: Option<f32>,
    #[serde(
    rename = "expPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    exp_percentage_per_level: Option<Vec<i32>>,
    #[serde(rename = "autospellChance", default)]
    autospell_chance: Option<i32>,
    #[serde(
    rename = "skillDelayInSecPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    skill_delay_in_sec_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "spRegenBonusFlatPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_regen_bonus_flat_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spRegenBonusPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    sp_regen_bonus_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "nullifysPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    nullifys_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dexPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dex_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "intPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    int_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "blindChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    blind_chance_per_level: Option<Vec<i32>>,
    #[serde(rename = "blindChance", default)]
    blind_chance: Option<i32>,
    #[serde(
    rename = "recoveryPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    recovery_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "hpPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    hp_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "healspPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    healsp_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "spPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spWavePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_wave_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "hpRegenBonusFlatPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    hp_regen_bonus_flat_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "hpRegenBonusPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    hp_regen_bonus_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "dmgOuterPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    dmg_outer_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "healbasePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    healbase_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "buyPricePercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    buy_price_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "doubleAttackChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    double_attack_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "stealChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    steal_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "healhpPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    healhp_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "healhpPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    healhp_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "lukPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    luk_per_level: Option<Vec<i32>>,
    #[serde(rename = "atk", default)]
    atk: Option<i32>,
    #[serde(rename = "str", default)]
    str: Option<i32>,
    #[serde(
    rename = "breakselfPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    breakself_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "snareDurationPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    snare_duration_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgSPPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_s_p_percentage_per_level: Option<Vec<i32>>,
    #[serde(rename = "sdefPercentage", default)]
    sdef_percentage: Option<i32>,
    #[serde(
    rename = "maxLvPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    max_lv_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "breakChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    break_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "plantHpPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    plant_hp_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "plantTypePerLevel",
    deserialize_with = "deserialize_tuples_string",
    default
    )]
    plant_type_per_level: Option<Vec<String>>,
    #[serde(
    rename = "blockChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    block_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "reflectChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    reflect_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "performancemspdPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    performancemspd_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "healPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    heal_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "healPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    heal_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "matkPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    matk_percentage_per_level: Option<Vec<i32>>,
    #[serde(rename = "mspdPercentage", default)]
    mspd_percentage: Option<i32>,
    #[serde(rename = "flee", default)]
    flee: Option<i32>,
    #[serde(
    rename = "stunDurationPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    stun_duration_per_level: Option<Vec<i32>>,
    #[serde(rename = "spRegenBonusFlat", default)]
    sp_regen_bonus_flat: Option<i32>,
    #[serde(
    rename = "refinePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    refine_per_level: Option<Vec<i32>>,
    #[serde(rename = "aspdPercentage", default)]
    aspd_percentage: Option<i32>,
    #[serde(rename = "hit", default)]
    hit: Option<i32>,
    #[serde(
    rename = "hpRecoveryPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    hp_recovery_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "provokeChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    provoke_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "mdefPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    mdef_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spRecoveryPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_recovery_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgDecayPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    dmg_decay_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "petrifyChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    petrify_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "memosPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    memos_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "decreaseAgiChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    decrease_agi_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "chancePercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    chance_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "sdefPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sdef_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "weightLimitPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    weight_limit_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "salePricePercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sale_price_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "itemsPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    items_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "agiPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    agi_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dexPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dex_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "katarOffhandDmgPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    katar_offhand_dmg_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "mspdassassinPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    mspdassassin_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "recursionPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    recursion_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "barrierAttacksPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    barrier_attacks_per_level: Option<Vec<i32>>,
    // #[serde(rename = "barrierHpPercentagePerLevel", deserialize_with = "deserialize_tuples_i32", default)]
    // barrier_hp_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "silenceChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    silence_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "ohkoChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    ohko_chance_per_level: Option<Vec<i32>>,
    // #[serde(rename = "wallHpLossPerLevel", deserialize_with = "deserialize_tuples_i32", default)]
    // wall_hp_loss_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "wallHpPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    wall_hp_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "forgeAtkPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    forge_atk_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "fireResistPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    fire_resist_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "neutralResistPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    neutral_resist_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "aspdpartyPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    aspdparty_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "aspdsmithPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    aspdsmith_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "atkpartyPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    atkparty_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "atksmithPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    atksmith_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "sleepChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sleep_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "blindDurationPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    blind_duration_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "freezeDurationPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    freeze_duration_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "falconAtkPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    falcon_atk_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "mspdwallPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    mspdwall_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "autospellLimitPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    autospell_limit_per_level: Option<Vec<i32>>,
    #[serde(rename = "healhp", default)]
    healhp: Option<i32>,
    #[serde(
    rename = "hpmaxVitPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    hpmax_vit_per_level: Option<Vec<i32>>,
    #[serde(rename = "atkPercentage", default)]
    atk_percentage: Option<i32>,
    #[serde(rename = "dmg", default)]
    dmg: Option<i32>,
    #[serde(rename = "stunChance", default)]
    stun_chance: Option<i32>,
    #[serde(
    rename = "dmgBowPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    dmg_bow_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "snatchChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    snatch_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "plantQuantityPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    plant_quantity_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "plantMovePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    plant_move_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "holyResistPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    holy_resist_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "delaypartyInSecPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    delayparty_in_sec_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "delaypartyInSecPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    delayuser_in_sec_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "guardLvPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    guard_lv_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "playersPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    players_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "demonResistChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    demon_resist_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "holyResistChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    holy_resist_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "maxSpheresPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    max_spheres_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spheresPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    spheres_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "disableDurationPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    disable_duration_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spLossPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_loss_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "atkMatkVsDragonPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    atk_matk_vs_dragon_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dragonResistPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dragon_resist_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgFirePercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_fire_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgWaterPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_water_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgWindPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_wind_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dispelChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dispel_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "intuserIntpartnerPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    intuser_intpartner_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "defPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    def_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "statusResistPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    status_resist_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "freezeenemyChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    freezeenemy_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "freezepartyChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    freezeparty_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgSPPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_s_p_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "stunenemyChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    stunenemy_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "stunpartyChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    stunparty_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spRegenPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_regen_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "hpLossPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    hp_loss_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "gospelChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    gospel_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "hpLossPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    hp_loss_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "delayPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    delay_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "dmgHPPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_h_p_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgSPChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_s_p_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "deadlyPoisonChancePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    deadly_poison_chance_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "dmgIntPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    dmg_int_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "allStatsPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    all_stats_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "breakarmorPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    breakarmor_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "breakweaponPercentagePerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    breakweapon_percentage_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "statusChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    status_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "curseChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    curse_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "mindBreakChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    mind_break_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "smdefPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    smdef_percentage_per_level: Option<Vec<i32>>,
    #[serde(rename = "skillFailureChance", default)]
    skill_failure_chance: Option<i32>,
    #[serde(rename = "snareDuration", default)]
    snare_duration: Option<i32>,
    #[serde(rename = "successChance", default)]
    success_chance: Option<i32>,
    #[serde(rename = "blockChance", default)]
    block_chance: Option<i32>,
    #[serde(rename = "spRegenBonusRatio", default)]
    sp_regen_bonus_ratio: Option<f32>,
    #[serde(rename = "spRegenBonusPercentage", default)]
    sp_regen_bonus_percentage: Option<f32>,
    #[serde(
    rename = "distancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    distance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "mapPerLevel",
    deserialize_with = "deserialize_tuples_string",
    default
    )]
    map_per_level: Option<Vec<String>>,
    #[serde(
    rename = "sdefPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sdef_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "visionPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    vision_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "autospellPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    autospell_percentage_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "weightPercentageLimitPercentagePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    weight_percentage_limit_percentage_per_level: Option<Vec<i32>>,
    #[serde(rename = "aspdpartyPercentage", default)]
    aspdparty_percentage: Option<i32>,
    #[serde(rename = "aspdsmithPercentage", default)]
    aspdsmith_percentage: Option<i32>,
    #[serde(
    rename = "spLossPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_loss_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "nullifyChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    nullify_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "reflectPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    reflect_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "spPerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    sp_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "maxRefinePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    max_refine_per_level: Option<Vec<i32>>,
    #[serde(rename = "dispelChance", default)]
    dispel_chance: Option<i32>,
    #[serde(
    rename = "tarotChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    tarot_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "summonChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    summon_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "successChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    success_chance_per_level: Option<Vec<i32>>,
    #[serde(rename = "def", default)]
    def: Option<i32>,
    #[serde(rename = "comabrutePercentage", default)]
    comabrute_percentage: Option<f32>,
    #[serde(rename = "comademiHumanPercentage", default)]
    comademi_human_percentage: Option<f32>,
    #[serde(rename = "dmgBrute", default)]
    dmg_brute: Option<i32>,
    #[serde(rename = "dmgDemi-human", default)]
    dmg_demihuman: Option<i32>,
    #[serde(rename = "agi", default)]
    agi: Option<i32>,
    #[serde(rename = "dex", default)]
    dex: Option<i32>,
    #[serde(
    rename = "dmgPistolPerLevel",
    deserialize_with = "deserialize_tuples_f32",
    default
    )]
    dmg_pistol_per_level: Option<Vec<f32>>,
    #[serde(
    rename = "blindselfChancePerLevel",
    deserialize_with = "deserialize_tuples_i32",
    default
    )]
    blindself_chance_per_level: Option<Vec<i32>>,
    #[serde(
    rename = "dmgRangePerLevel",
    deserialize_with = "deserialize_tuples_range_f32",
    default
    )]
    dmg_range_per_level: Option<Vec<(f32, f32)>>,
    #[serde(
    rename = "demonBaneAtkPerLevel",
    deserialize_with = "deserialize_tuples_range_f32",
    default
    )]
    demon_bane_atk_per_level: Option<Vec<(f32, f32)>>,
    #[serde(
    rename = "beastBaneAtkPerLevel",
    deserialize_with = "deserialize_tuples_range_f32",
    default
    )]
    beast_bane_atk_per_level: Option<Vec<(f32, f32)>>,