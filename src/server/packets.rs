// Generated by tools/packets_db/main.rs
// Auto generated file do not edit manually

use std::fmt::{Formatter, Debug};

pub fn parse(buffer: &[u8]) -> Box<dyn Packet> {
    if buffer[0] == 0x64 && buffer[1] == 0x00 {
        return Box::new(PacketCaLogin::from(buffer));
    }
    if buffer[0] == 0x65 && buffer[1] == 0x00 {
        return Box::new(PacketChEnter::from(buffer));
    }
    if buffer[0] == 0x66 && buffer[1] == 0x00 {
        return Box::new(PacketChSelectChar::from(buffer));
    }
    if buffer[0] == 0x67 && buffer[1] == 0x00 {
        return Box::new(PacketChMakeChar::from(buffer));
    }
    if buffer[0] == 0x68 && buffer[1] == 0x00 {
        return Box::new(PacketChDeleteChar::from(buffer));
    }
    if buffer[0] == 0x69 && buffer[1] == 0x00 {
        return Box::new(PacketAcAcceptLogin::from(buffer));
    }
    if buffer[0] == 0x6a && buffer[1] == 0x00 {
        return Box::new(PacketAcRefuseLogin::from(buffer));
    }
    if buffer[0] == 0x6b && buffer[1] == 0x00 {
        return Box::new(PacketHcAcceptEnterNeoUnion::from(buffer));
    }
    if buffer[0] == 0x6c && buffer[1] == 0x00 {
        return Box::new(PacketHcRefuseEnter::from(buffer));
    }
    if buffer[0] == 0x6d && buffer[1] == 0x00 {
        return Box::new(PacketHcAcceptMakecharNeoUnion::from(buffer));
    }
    if buffer[0] == 0x6e && buffer[1] == 0x00 {
        return Box::new(PacketHcRefuseMakechar::from(buffer));
    }
    if buffer[0] == 0x6f && buffer[1] == 0x00 {
        return Box::new(PacketHcAcceptDeletechar::from(buffer));
    }
    if buffer[0] == 0x70 && buffer[1] == 0x00 {
        return Box::new(PacketHcRefuseDeletechar::from(buffer));
    }
    if buffer[0] == 0x71 && buffer[1] == 0x00 {
        return Box::new(PacketHcNotifyZonesvr::from(buffer));
    }
    if buffer[0] == 0x72 && buffer[1] == 0x00 {
        return Box::new(PacketCzEnter::from(buffer));
    }
    if buffer[0] == 0x73 && buffer[1] == 0x00 {
        return Box::new(PacketZcAcceptEnter::from(buffer));
    }
    if buffer[0] == 0x74 && buffer[1] == 0x00 {
        return Box::new(PacketZcRefuseEnter::from(buffer));
    }
    if buffer[0] == 0x75 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyInitchar::from(buffer));
    }
    if buffer[0] == 0x76 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyUpdatechar::from(buffer));
    }
    if buffer[0] == 0x77 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyUpdateplayer::from(buffer));
    }
    if buffer[0] == 0x78 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyStandentry::from(buffer));
    }
    if buffer[0] == 0x79 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyNewentry::from(buffer));
    }
    if buffer[0] == 0x7a && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyActentry::from(buffer));
    }
    if buffer[0] == 0x7b && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyMoveentry::from(buffer));
    }
    if buffer[0] == 0x7c && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyStandentryNpc::from(buffer));
    }
    if buffer[0] == 0x7d && buffer[1] == 0x00 {
        return Box::new(PacketCzNotifyActorinit::from(buffer));
    }
    if buffer[0] == 0x7e && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestTime::from(buffer));
    }
    if buffer[0] == 0x7f && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyTime::from(buffer));
    }
    if buffer[0] == 0x80 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyVanish::from(buffer));
    }
    if buffer[0] == 0x81 && buffer[1] == 0x00 {
        return Box::new(PacketScNotifyBan::from(buffer));
    }
    if buffer[0] == 0x82 && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestQuit::from(buffer));
    }
    if buffer[0] == 0x83 && buffer[1] == 0x00 {
        return Box::new(PacketZcAcceptQuit::from(buffer));
    }
    if buffer[0] == 0x84 && buffer[1] == 0x00 {
        return Box::new(PacketZcRefuseQuit::from(buffer));
    }
    if buffer[0] == 0x85 && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestMove::from(buffer));
    }
    if buffer[0] == 0x86 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyMove::from(buffer));
    }
    if buffer[0] == 0x87 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyPlayermove::from(buffer));
    }
    if buffer[0] == 0x88 && buffer[1] == 0x00 {
        return Box::new(PacketZcStopmove::from(buffer));
    }
    if buffer[0] == 0x89 && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestAct::from(buffer));
    }
    if buffer[0] == 0x8a && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyAct::from(buffer));
    }
    if buffer[0] == 0x8b && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyActPosition::from(buffer));
    }
    if buffer[0] == 0x8c && buffer[1] == 0x00 {
        return Box::new(PacketCzRequestChat::from(buffer));
    }
    if buffer[0] == 0x8d && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyChat::from(buffer));
    }
    if buffer[0] == 0x8e && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyPlayerchat::from(buffer));
    }
    if buffer[0] == 0x8f && buffer[1] == 0x00 {
        return Box::new(PacketServerEntryAck::from(buffer));
    }
    if buffer[0] == 0x90 && buffer[1] == 0x00 {
        return Box::new(PacketCzContactnpc::from(buffer));
    }
    if buffer[0] == 0x91 && buffer[1] == 0x00 {
        return Box::new(PacketZcNpcackMapmove::from(buffer));
    }
    if buffer[0] == 0x92 && buffer[1] == 0x00 {
        return Box::new(PacketZcNpcackServermove::from(buffer));
    }
    if buffer[0] == 0x93 && buffer[1] == 0x00 {
        return Box::new(PacketZcNpcackEnable::from(buffer));
    }
    if buffer[0] == 0x94 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqname::from(buffer));
    }
    if buffer[0] == 0x95 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckReqname::from(buffer));
    }
    if buffer[0] == 0x96 && buffer[1] == 0x00 {
        return Box::new(PacketCzWhisper::from(buffer));
    }
    if buffer[0] == 0x97 && buffer[1] == 0x00 {
        return Box::new(PacketZcWhisper::from(buffer));
    }
    if buffer[0] == 0x98 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckWhisper::from(buffer));
    }
    if buffer[0] == 0x99 && buffer[1] == 0x00 {
        return Box::new(PacketCzBroadcast::from(buffer));
    }
    if buffer[0] == 0x9a && buffer[1] == 0x00 {
        return Box::new(PacketZcBroadcast::from(buffer));
    }
    if buffer[0] == 0x9b && buffer[1] == 0x00 {
        return Box::new(PacketCzChangeDirection::from(buffer));
    }
    if buffer[0] == 0x9c && buffer[1] == 0x00 {
        return Box::new(PacketZcChangeDirection::from(buffer));
    }
    if buffer[0] == 0x9d && buffer[1] == 0x00 {
        return Box::new(PacketZcItemEntry::from(buffer));
    }
    if buffer[0] == 0x9e && buffer[1] == 0x00 {
        return Box::new(PacketZcItemFallEntry::from(buffer));
    }
    if buffer[0] == 0x9f && buffer[1] == 0x00 {
        return Box::new(PacketCzItemPickup::from(buffer));
    }
    if buffer[0] == 0xa0 && buffer[1] == 0x00 {
        return Box::new(PacketZcItemPickupAck::from(buffer));
    }
    if buffer[0] == 0xa1 && buffer[1] == 0x00 {
        return Box::new(PacketZcItemDisappear::from(buffer));
    }
    if buffer[0] == 0xa2 && buffer[1] == 0x00 {
        return Box::new(PacketCzItemThrow::from(buffer));
    }
    if buffer[0] == 0xa3 && buffer[1] == 0x00 {
        return Box::new(PacketZcNormalItemlist::from(buffer));
    }
    if buffer[0] == 0xa4 && buffer[1] == 0x00 {
        return Box::new(PacketZcEquipmentItemlist::from(buffer));
    }
    if buffer[0] == 0xa5 && buffer[1] == 0x00 {
        return Box::new(PacketZcStoreNormalItemlist::from(buffer));
    }
    if buffer[0] == 0xa6 && buffer[1] == 0x00 {
        return Box::new(PacketZcStoreEquipmentItemlist::from(buffer));
    }
    if buffer[0] == 0xa7 && buffer[1] == 0x00 {
        return Box::new(PacketCzUseItem::from(buffer));
    }
    if buffer[0] == 0xa8 && buffer[1] == 0x00 {
        return Box::new(PacketZcUseItemAck::from(buffer));
    }
    if buffer[0] == 0xa9 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqWearEquip::from(buffer));
    }
    if buffer[0] == 0xaa && buffer[1] == 0x00 {
        return Box::new(PacketZcReqWearEquipAck::from(buffer));
    }
    if buffer[0] == 0xab && buffer[1] == 0x00 {
        return Box::new(PacketCzReqTakeoffEquip::from(buffer));
    }
    if buffer[0] == 0xac && buffer[1] == 0x00 {
        return Box::new(PacketZcReqTakeoffEquipAck::from(buffer));
    }
    if buffer[0] == 0xaf && buffer[1] == 0x00 {
        return Box::new(PacketZcItemThrowAck::from(buffer));
    }
    if buffer[0] == 0xb0 && buffer[1] == 0x00 {
        return Box::new(PacketZcParChange::from(buffer));
    }
    if buffer[0] == 0xb1 && buffer[1] == 0x00 {
        return Box::new(PacketZcLongparChange::from(buffer));
    }
    if buffer[0] == 0xb2 && buffer[1] == 0x00 {
        return Box::new(PacketCzRestart::from(buffer));
    }
    if buffer[0] == 0xb3 && buffer[1] == 0x00 {
        return Box::new(PacketZcRestartAck::from(buffer));
    }
    if buffer[0] == 0xb4 && buffer[1] == 0x00 {
        return Box::new(PacketZcSayDialog::from(buffer));
    }
    if buffer[0] == 0xb5 && buffer[1] == 0x00 {
        return Box::new(PacketZcWaitDialog::from(buffer));
    }
    if buffer[0] == 0xb6 && buffer[1] == 0x00 {
        return Box::new(PacketZcCloseDialog::from(buffer));
    }
    if buffer[0] == 0xb7 && buffer[1] == 0x00 {
        return Box::new(PacketZcMenuList::from(buffer));
    }
    if buffer[0] == 0xb8 && buffer[1] == 0x00 {
        return Box::new(PacketCzChooseMenu::from(buffer));
    }
    if buffer[0] == 0xb9 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqNextScript::from(buffer));
    }
    if buffer[0] == 0xba && buffer[1] == 0x00 {
        return Box::new(PacketCzReqStatus::from(buffer));
    }
    if buffer[0] == 0xbb && buffer[1] == 0x00 {
        return Box::new(PacketCzStatusChange::from(buffer));
    }
    if buffer[0] == 0xbc && buffer[1] == 0x00 {
        return Box::new(PacketZcStatusChangeAck::from(buffer));
    }
    if buffer[0] == 0xbd && buffer[1] == 0x00 {
        return Box::new(PacketZcStatus::from(buffer));
    }
    if buffer[0] == 0xbe && buffer[1] == 0x00 {
        return Box::new(PacketZcStatusChange::from(buffer));
    }
    if buffer[0] == 0xbf && buffer[1] == 0x00 {
        return Box::new(PacketCzReqEmotion::from(buffer));
    }
    if buffer[0] == 0xc0 && buffer[1] == 0x00 {
        return Box::new(PacketZcEmotion::from(buffer));
    }
    if buffer[0] == 0xc1 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqUserCount::from(buffer));
    }
    if buffer[0] == 0xc2 && buffer[1] == 0x00 {
        return Box::new(PacketZcUserCount::from(buffer));
    }
    if buffer[0] == 0xc3 && buffer[1] == 0x00 {
        return Box::new(PacketZcSpriteChange::from(buffer));
    }
    if buffer[0] == 0xc4 && buffer[1] == 0x00 {
        return Box::new(PacketZcSelectDealtype::from(buffer));
    }
    if buffer[0] == 0xc5 && buffer[1] == 0x00 {
        return Box::new(PacketCzAckSelectDealtype::from(buffer));
    }
    if buffer[0] == 0xc6 && buffer[1] == 0x00 {
        return Box::new(PacketZcPcPurchaseItemlist::from(buffer));
    }
    if buffer[0] == 0xc7 && buffer[1] == 0x00 {
        return Box::new(PacketZcPcSellItemlist::from(buffer));
    }
    if buffer[0] == 0xc8 && buffer[1] == 0x00 {
        return Box::new(PacketCzPcPurchaseItemlist::from(buffer));
    }
    if buffer[0] == 0xc9 && buffer[1] == 0x00 {
        return Box::new(PacketCzPcSellItemlist::from(buffer));
    }
    if buffer[0] == 0xca && buffer[1] == 0x00 {
        return Box::new(PacketZcPcPurchaseResult::from(buffer));
    }
    if buffer[0] == 0xcb && buffer[1] == 0x00 {
        return Box::new(PacketZcPcSellResult::from(buffer));
    }
    if buffer[0] == 0xcc && buffer[1] == 0x00 {
        return Box::new(PacketCzDisconnectCharacter::from(buffer));
    }
    if buffer[0] == 0xcd && buffer[1] == 0x00 {
        return Box::new(PacketZcAckDisconnectCharacter::from(buffer));
    }
    if buffer[0] == 0xce && buffer[1] == 0x00 {
        return Box::new(PacketCzDisconnectAllCharacter::from(buffer));
    }
    if buffer[0] == 0xcf && buffer[1] == 0x00 {
        return Box::new(PacketCzSettingWhisperPc::from(buffer));
    }
    if buffer[0] == 0xd0 && buffer[1] == 0x00 {
        return Box::new(PacketCzSettingWhisperState::from(buffer));
    }
    if buffer[0] == 0xd1 && buffer[1] == 0x00 {
        return Box::new(PacketZcSettingWhisperPc::from(buffer));
    }
    if buffer[0] == 0xd2 && buffer[1] == 0x00 {
        return Box::new(PacketZcSettingWhisperState::from(buffer));
    }
    if buffer[0] == 0xd3 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqWhisperList::from(buffer));
    }
    if buffer[0] == 0xd4 && buffer[1] == 0x00 {
        return Box::new(PacketZcWhisperList::from(buffer));
    }
    if buffer[0] == 0xd5 && buffer[1] == 0x00 {
        return Box::new(PacketCzCreateChatroom::from(buffer));
    }
    if buffer[0] == 0xd6 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckCreateChatroom::from(buffer));
    }
    if buffer[0] == 0xd7 && buffer[1] == 0x00 {
        return Box::new(PacketZcRoomNewentry::from(buffer));
    }
    if buffer[0] == 0xd8 && buffer[1] == 0x00 {
        return Box::new(PacketZcDestroyRoom::from(buffer));
    }
    if buffer[0] == 0xd9 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqEnterRoom::from(buffer));
    }
    if buffer[0] == 0xda && buffer[1] == 0x00 {
        return Box::new(PacketZcRefuseEnterRoom::from(buffer));
    }
    if buffer[0] == 0xdb && buffer[1] == 0x00 {
        return Box::new(PacketZcEnterRoom::from(buffer));
    }
    if buffer[0] == 0xdc && buffer[1] == 0x00 {
        return Box::new(PacketZcMemberNewentry::from(buffer));
    }
    if buffer[0] == 0xdd && buffer[1] == 0x00 {
        return Box::new(PacketZcMemberExit::from(buffer));
    }
    if buffer[0] == 0xde && buffer[1] == 0x00 {
        return Box::new(PacketCzChangeChatroom::from(buffer));
    }
    if buffer[0] == 0xdf && buffer[1] == 0x00 {
        return Box::new(PacketZcChangeChatroom::from(buffer));
    }
    if buffer[0] == 0xe0 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqRoleChange::from(buffer));
    }
    if buffer[0] == 0xe1 && buffer[1] == 0x00 {
        return Box::new(PacketZcRoleChange::from(buffer));
    }
    if buffer[0] == 0xe2 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqExpelMember::from(buffer));
    }
    if buffer[0] == 0xe3 && buffer[1] == 0x00 {
        return Box::new(PacketCzExitRoom::from(buffer));
    }
    if buffer[0] == 0xe4 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqExchangeItem::from(buffer));
    }
    if buffer[0] == 0xe5 && buffer[1] == 0x00 {
        return Box::new(PacketZcReqExchangeItem::from(buffer));
    }
    if buffer[0] == 0xe6 && buffer[1] == 0x00 {
        return Box::new(PacketCzAckExchangeItem::from(buffer));
    }
    if buffer[0] == 0xe7 && buffer[1] == 0x00 {
        return Box::new(PacketZcAckExchangeItem::from(buffer));
    }
    if buffer[0] == 0xe8 && buffer[1] == 0x00 {
        return Box::new(PacketCzAddExchangeItem::from(buffer));
    }
    if buffer[0] == 0xe9 && buffer[1] == 0x00 {
        return Box::new(PacketZcAddExchangeItem::from(buffer));
    }
    if buffer[0] == 0xea && buffer[1] == 0x00 {
        return Box::new(PacketZcAckAddExchangeItem::from(buffer));
    }
    if buffer[0] == 0xeb && buffer[1] == 0x00 {
        return Box::new(PacketCzConcludeExchangeItem::from(buffer));
    }
    if buffer[0] == 0xec && buffer[1] == 0x00 {
        return Box::new(PacketZcConcludeExchangeItem::from(buffer));
    }
    if buffer[0] == 0xed && buffer[1] == 0x00 {
        return Box::new(PacketCzCancelExchangeItem::from(buffer));
    }
    if buffer[0] == 0xee && buffer[1] == 0x00 {
        return Box::new(PacketZcCancelExchangeItem::from(buffer));
    }
    if buffer[0] == 0xef && buffer[1] == 0x00 {
        return Box::new(PacketCzExecExchangeItem::from(buffer));
    }
    if buffer[0] == 0xf0 && buffer[1] == 0x00 {
        return Box::new(PacketZcExecExchangeItem::from(buffer));
    }
    if buffer[0] == 0xf1 && buffer[1] == 0x00 {
        return Box::new(PacketZcExchangeitemUndo::from(buffer));
    }
    if buffer[0] == 0xf2 && buffer[1] == 0x00 {
        return Box::new(PacketZcNotifyStoreitemCountinfo::from(buffer));
    }
    if buffer[0] == 0xf3 && buffer[1] == 0x00 {
        return Box::new(PacketCzMoveItemFromBodyToStore::from(buffer));
    }
    if buffer[0] == 0xf4 && buffer[1] == 0x00 {
        return Box::new(PacketZcAddItemToStore::from(buffer));
    }
    if buffer[0] == 0xf5 && buffer[1] == 0x00 {
        return Box::new(PacketCzMoveItemFromStoreToBody::from(buffer));
    }
    if buffer[0] == 0xf6 && buffer[1] == 0x00 {
        return Box::new(PacketZcDeleteItemFromStore::from(buffer));
    }
    if buffer[0] == 0xf7 && buffer[1] == 0x00 {
        return Box::new(PacketCzCloseStore::from(buffer));
    }
    if buffer[0] == 0xf8 && buffer[1] == 0x00 {
        return Box::new(PacketZcCloseStore::from(buffer));
    }
    if buffer[0] == 0xf9 && buffer[1] == 0x00 {
        return Box::new(PacketCzMakeGroup::from(buffer));
    }
    if buffer[0] == 0xfa && buffer[1] == 0x00 {
        return Box::new(PacketZcAckMakeGroup::from(buffer));
    }
    if buffer[0] == 0xfb && buffer[1] == 0x00 {
        return Box::new(PacketZcGroupList::from(buffer));
    }
    if buffer[0] == 0xfc && buffer[1] == 0x00 {
        return Box::new(PacketCzReqJoinGroup::from(buffer));
    }
    if buffer[0] == 0xfd && buffer[1] == 0x00 {
        return Box::new(PacketZcAckReqJoinGroup::from(buffer));
    }
    if buffer[0] == 0xfe && buffer[1] == 0x00 {
        return Box::new(PacketZcReqJoinGroup::from(buffer));
    }
    if buffer[0] == 0xff && buffer[1] == 0x00 {
        return Box::new(PacketCzJoinGroup::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x00 {
        return Box::new(PacketCzReqLeaveGroup::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x01 {
        return Box::new(PacketZcGroupinfoChange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x02 {
        return Box::new(PacketCzChangeGroupexpoption::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x03 {
        return Box::new(PacketCzReqExpelGroupMember::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x04 {
        return Box::new(PacketZcAddMemberToGroup::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x05 {
        return Box::new(PacketZcDeleteMemberFromGroup::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x06 {
        return Box::new(PacketZcNotifyHpToGroupm::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x07 {
        return Box::new(PacketZcNotifyPositionToGroupm::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x08 {
        return Box::new(PacketCzRequestChatParty::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x09 {
        return Box::new(PacketZcNotifyChatParty::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x0a {
        return Box::new(PacketZcMvpGettingItem::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x0b {
        return Box::new(PacketZcMvpGettingSpecialExp::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x0c {
        return Box::new(PacketZcMvp::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x0d {
        return Box::new(PacketZcThrowMvpitem::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x0e {
        return Box::new(PacketZcSkillinfoUpdate::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x0f {
        return Box::new(PacketZcSkillinfoList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x10 {
        return Box::new(PacketZcAckTouseskill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x11 {
        return Box::new(PacketZcAddSkill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x12 {
        return Box::new(PacketCzUpgradeSkilllevel::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x13 {
        return Box::new(PacketCzUseSkill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x14 {
        return Box::new(PacketZcNotifySkill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x15 {
        return Box::new(PacketZcNotifySkillPosition::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x16 {
        return Box::new(PacketCzUseSkillToground::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x17 {
        return Box::new(PacketZcNotifyGroundskill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x18 {
        return Box::new(PacketCzCancelLockon::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x19 {
        return Box::new(PacketZcStateChange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x1a {
        return Box::new(PacketZcUseSkill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x1b {
        return Box::new(PacketCzSelectWarppoint::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x1c {
        return Box::new(PacketZcWarplist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x1d {
        return Box::new(PacketCzRememberWarppoint::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x1e {
        return Box::new(PacketZcAckRememberWarppoint::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x1f {
        return Box::new(PacketZcSkillEntry::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x20 {
        return Box::new(PacketZcSkillDisappear::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x21 {
        return Box::new(PacketZcNotifyCartitemCountinfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x22 {
        return Box::new(PacketZcCartEquipmentItemlist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x23 {
        return Box::new(PacketZcCartNormalItemlist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x24 {
        return Box::new(PacketZcAddItemToCart::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x25 {
        return Box::new(PacketZcDeleteItemFromCart::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x26 {
        return Box::new(PacketCzMoveItemFromBodyToCart::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x27 {
        return Box::new(PacketCzMoveItemFromCartToBody::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x28 {
        return Box::new(PacketCzMoveItemFromStoreToCart::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x29 {
        return Box::new(PacketCzMoveItemFromCartToStore::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x2a {
        return Box::new(PacketCzReqCartoff::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x2b {
        return Box::new(PacketZcCartoff::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x2c {
        return Box::new(PacketZcAckAdditemToCart::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x2d {
        return Box::new(PacketZcOpenstore::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x2e {
        return Box::new(PacketCzReqClosestore::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x2f {
        return Box::new(PacketCzReqOpenstore::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x30 {
        return Box::new(PacketCzReqBuyFrommc::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x31 {
        return Box::new(PacketZcStoreEntry::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x32 {
        return Box::new(PacketZcDisappearEntry::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x33 {
        return Box::new(PacketZcPcPurchaseItemlistFrommc::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x34 {
        return Box::new(PacketCzPcPurchaseItemlistFrommc::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x35 {
        return Box::new(PacketZcPcPurchaseResultFrommc::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x36 {
        return Box::new(PacketZcPcPurchaseMyitemlist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x37 {
        return Box::new(PacketZcDeleteitemFromMcstore::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x38 {
        return Box::new(PacketCzPkmodeChange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x39 {
        return Box::new(PacketZcAttackFailureForDistance::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x3a {
        return Box::new(PacketZcAttackRange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x3b {
        return Box::new(PacketZcActionFailure::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x3c {
        return Box::new(PacketZcEquipArrow::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x3d {
        return Box::new(PacketZcRecovery::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x3e {
        return Box::new(PacketZcUseskillAck::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x3f {
        return Box::new(PacketCzItemCreate::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x40 {
        return Box::new(PacketCzMovetoMap::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x41 {
        return Box::new(PacketZcCouplestatus::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x42 {
        return Box::new(PacketZcOpenEditdlg::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x43 {
        return Box::new(PacketCzInputEditdlg::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x44 {
        return Box::new(PacketZcCompass::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x45 {
        return Box::new(PacketZcShowImage::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x46 {
        return Box::new(PacketCzCloseDialog::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x47 {
        return Box::new(PacketZcAutorunSkill::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x48 {
        return Box::new(PacketZcResurrection::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x49 {
        return Box::new(PacketCzReqGiveMannerPoint::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x4a {
        return Box::new(PacketZcAckGiveMannerPoint::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x4b {
        return Box::new(PacketZcNotifyMannerPointGiven::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x4c {
        return Box::new(PacketZcMyguildBasicInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x4d {
        return Box::new(PacketCzReqGuildMenuinterface::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x4e {
        return Box::new(PacketZcAckGuildMenuinterface::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x4f {
        return Box::new(PacketCzReqGuildMenu::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x50 {
        return Box::new(PacketZcGuildInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x51 {
        return Box::new(PacketCzReqGuildEmblemImg::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x52 {
        return Box::new(PacketZcGuildEmblemImg::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x53 {
        return Box::new(PacketCzRegisterGuildEmblemImg::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x54 {
        return Box::new(PacketZcMembermgrInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x55 {
        return Box::new(PacketCzReqChangeMemberpos::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x56 {
        return Box::new(PacketZcAckReqChangeMembers::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x57 {
        return Box::new(PacketCzReqOpenMemberInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x58 {
        return Box::new(PacketZcAckOpenMemberInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x59 {
        return Box::new(PacketCzReqLeaveGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x5a {
        return Box::new(PacketZcAckLeaveGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x5b {
        return Box::new(PacketCzReqBanGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x5c {
        return Box::new(PacketZcAckBanGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x5d {
        return Box::new(PacketCzReqDisorganizeGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x5e {
        return Box::new(PacketZcAckDisorganizeGuildResult::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x5f {
        return Box::new(PacketZcAckDisorganizeGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x60 {
        return Box::new(PacketZcPositionInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x61 {
        return Box::new(PacketCzRegChangeGuildPositioninfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x62 {
        return Box::new(PacketZcGuildSkillinfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x63 {
        return Box::new(PacketZcBanList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x64 {
        return Box::new(PacketZcOtherGuildList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x65 {
        return Box::new(PacketCzReqMakeGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x66 {
        return Box::new(PacketZcPositionIdNameInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x67 {
        return Box::new(PacketZcResultMakeGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x68 {
        return Box::new(PacketCzReqJoinGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x69 {
        return Box::new(PacketZcAckReqJoinGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x6a {
        return Box::new(PacketZcReqJoinGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x6b {
        return Box::new(PacketCzJoinGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x6c {
        return Box::new(PacketZcUpdateGdid::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x6d {
        return Box::new(PacketZcUpdateCharstat::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x6e {
        return Box::new(PacketCzGuildNotice::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x6f {
        return Box::new(PacketZcGuildNotice::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x70 {
        return Box::new(PacketCzReqAllyGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x71 {
        return Box::new(PacketZcReqAllyGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x72 {
        return Box::new(PacketCzAllyGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x73 {
        return Box::new(PacketZcAckReqAllyGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x74 {
        return Box::new(PacketZcAckChangeGuildPositioninfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x75 {
        return Box::new(PacketCzReqGuildMemberInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x76 {
        return Box::new(PacketZcAckGuildMemberInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x77 {
        return Box::new(PacketZcItemidentifyList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x78 {
        return Box::new(PacketCzReqItemidentify::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x79 {
        return Box::new(PacketZcAckItemidentify::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x7a {
        return Box::new(PacketCzReqItemcompositionList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x7b {
        return Box::new(PacketZcItemcompositionList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x7c {
        return Box::new(PacketCzReqItemcomposition::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x7d {
        return Box::new(PacketZcAckItemcomposition::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x7e {
        return Box::new(PacketCzGuildChat::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x7f {
        return Box::new(PacketZcGuildChat::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x80 {
        return Box::new(PacketCzReqHostileGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x81 {
        return Box::new(PacketZcAckReqHostileGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x82 {
        return Box::new(PacketZcMemberAdd::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x83 {
        return Box::new(PacketCzReqDeleteRelatedGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x84 {
        return Box::new(PacketZcDeleteRelatedGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x85 {
        return Box::new(PacketZcAddRelatedGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x86 {
        return Box::new(PacketCollectordead::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x87 {
        return Box::new(PacketPing::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x88 {
        return Box::new(PacketZcAckItemrefining::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x89 {
        return Box::new(PacketZcNotifyMapinfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x8a {
        return Box::new(PacketCzReqDisconnect::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x8b {
        return Box::new(PacketZcAckReqDisconnect::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x8c {
        return Box::new(PacketZcMonsterInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x8d {
        return Box::new(PacketZcMakableitemlist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x8e {
        return Box::new(PacketCzReqmakingitem::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x8f {
        return Box::new(PacketZcAckReqmakingitem::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x90 {
        return Box::new(PacketCzUseSkillTogroundWithtalkbox::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x91 {
        return Box::new(PacketZcTalkboxChatcontents::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x92 {
        return Box::new(PacketZcUpdateMapinfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x93 {
        return Box::new(PacketCzReqnameBygid::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x94 {
        return Box::new(PacketZcAckReqnameBygid::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x95 {
        return Box::new(PacketZcAckReqnameall::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x96 {
        return Box::new(PacketZcMsgStateChange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x97 {
        return Box::new(PacketCzReset::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x98 {
        return Box::new(PacketCzChangeMaptype::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x99 {
        return Box::new(PacketZcNotifyMapproperty::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x9a {
        return Box::new(PacketZcNotifyRanking::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x9b {
        return Box::new(PacketZcNotifyEffect::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x9d {
        return Box::new(PacketCzChangeEffectstate::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x9e {
        return Box::new(PacketZcStartCapture::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0x9f {
        return Box::new(PacketCzTrycaptureMonster::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa0 {
        return Box::new(PacketZcTrycaptureMonster::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa1 {
        return Box::new(PacketCzCommandPet::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa2 {
        return Box::new(PacketZcPropertyPet::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa3 {
        return Box::new(PacketZcFeedPet::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa4 {
        return Box::new(PacketZcChangestatePet::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa5 {
        return Box::new(PacketCzRenamePet::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa6 {
        return Box::new(PacketZcPeteggList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa7 {
        return Box::new(PacketCzSelectPetegg::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa8 {
        return Box::new(PacketCzPeteggInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xa9 {
        return Box::new(PacketCzPetAct::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xaa {
        return Box::new(PacketZcPetAct::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xab {
        return Box::new(PacketZcParChangeUser::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xac {
        return Box::new(PacketZcSkillUpdate::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xad {
        return Box::new(PacketZcMakingarrowList::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xae {
        return Box::new(PacketCzReqMakingarrow::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xaf {
        return Box::new(PacketCzReqChangecart::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb0 {
        return Box::new(PacketZcNpcspriteChange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb1 {
        return Box::new(PacketZcShowdigit::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb2 {
        return Box::new(PacketCzReqOpenstore2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb3 {
        return Box::new(PacketZcShowImage2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb4 {
        return Box::new(PacketZcChangeGuild::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb5 {
        return Box::new(PacketScBillingInfo::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb6 {
        return Box::new(PacketZcGuildInfo2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb7 {
        return Box::new(PacketCzGuildZeny::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb8 {
        return Box::new(PacketZcGuildZenyAck::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xb9 {
        return Box::new(PacketZcDispel::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xba {
        return Box::new(PacketCzRemoveAid::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xbb {
        return Box::new(PacketCzShift::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xbc {
        return Box::new(PacketCzRecall::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xbd {
        return Box::new(PacketCzRecallGid::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xbe {
        return Box::new(PacketAcAskPngameroom::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xbf {
        return Box::new(PacketCaReplyPngameroom::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc0 {
        return Box::new(PacketCzReqRemaintime::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc1 {
        return Box::new(PacketZcReplyRemaintime::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc2 {
        return Box::new(PacketZcInfoRemaintime::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc3 {
        return Box::new(PacketZcBroadcast2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc4 {
        return Box::new(PacketZcAddItemToStore2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc5 {
        return Box::new(PacketZcAddItemToCart2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc6 {
        return Box::new(PacketCsReqEncryption::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc7 {
        return Box::new(PacketScAckEncryption::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc8 {
        return Box::new(PacketZcUseItemAck2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xc9 {
        return Box::new(PacketZcSkillEntry2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xca {
        return Box::new(PacketCzReqmakinghomun::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xcb {
        return Box::new(PacketCzMonsterTalk::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xcc {
        return Box::new(PacketZcMonsterTalk::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xcd {
        return Box::new(PacketZcAutospelllist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xce {
        return Box::new(PacketCzSelectautospell::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xcf {
        return Box::new(PacketZcDevotionlist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd0 {
        return Box::new(PacketZcSpirits::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd1 {
        return Box::new(PacketZcBladestop::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd2 {
        return Box::new(PacketZcCombodelay::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd3 {
        return Box::new(PacketZcSound::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd4 {
        return Box::new(PacketZcOpenEditdlgstr::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd5 {
        return Box::new(PacketCzInputEditdlgstr::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd6 {
        return Box::new(PacketZcNotifyMapproperty2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd7 {
        return Box::new(PacketZcSpriteChange2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd8 {
        return Box::new(PacketZcNotifyStandentry2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xd9 {
        return Box::new(PacketZcNotifyNewentry2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xda {
        return Box::new(PacketZcNotifyMoveentry2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xdb {
        return Box::new(PacketCaReqHash::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xdc {
        return Box::new(PacketAcAckHash::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xdd {
        return Box::new(PacketCaLogin2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xde {
        return Box::new(PacketZcNotifySkill2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xdf {
        return Box::new(PacketCzReqAccountname::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe0 {
        return Box::new(PacketZcAckAccountname::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe1 {
        return Box::new(PacketZcSpirits2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe2 {
        return Box::new(PacketZcReqCouple::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe3 {
        return Box::new(PacketCzJoinCouple::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe4 {
        return Box::new(PacketZcStartCouple::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe5 {
        return Box::new(PacketCzReqJoinCouple::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe6 {
        return Box::new(PacketZcCouplename::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe7 {
        return Box::new(PacketCzDoridori::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe8 {
        return Box::new(PacketCzMakeGroup2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xe9 {
        return Box::new(PacketZcAddMemberToGroup2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xea {
        return Box::new(PacketZcCongratulation::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xeb {
        return Box::new(PacketZcNotifyPositionToGuildm::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xec {
        return Box::new(PacketZcGuildMemberMapChange::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xed {
        return Box::new(PacketCzChopokgi::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xee {
        return Box::new(PacketZcNormalItemlist2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xef {
        return Box::new(PacketZcCartNormalItemlist2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf0 {
        return Box::new(PacketZcStoreNormalItemlist2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf1 {
        return Box::new(PacketAcNotifyError::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf2 {
        return Box::new(PacketZcUpdateCharstat2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf3 {
        return Box::new(PacketZcNotifyEffect2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf4 {
        return Box::new(PacketZcReqExchangeItem2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf5 {
        return Box::new(PacketZcAckExchangeItem2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf6 {
        return Box::new(PacketZcReqBaby::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf7 {
        return Box::new(PacketCzJoinBaby::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf8 {
        return Box::new(PacketZcStartBaby::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xf9 {
        return Box::new(PacketCzReqJoinBaby::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xfa {
        return Box::new(PacketCaLogin3::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xfb {
        return Box::new(PacketChDeleteChar2::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xfc {
        return Box::new(PacketZcRepairitemlist::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xfd {
        return Box::new(PacketCzReqItemrepair::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xfe {
        return Box::new(PacketZcAckItemrepair::from(buffer));
    }
    if buffer[0] == 0x01 && buffer[1] == 0xff {
        return Box::new(PacketZcHighjump::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x00 {
        return Box::new(PacketCaConnectInfoChanged::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x01 {
        return Box::new(PacketZcFriendsList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x02 {
        return Box::new(PacketCzAddFriends::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x03 {
        return Box::new(PacketCzDeleteFriends::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x04 {
        return Box::new(PacketCaExeHashcheck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x05 {
        return Box::new(PacketZcDivorce::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x06 {
        return Box::new(PacketZcFriendsState::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x07 {
        return Box::new(PacketZcReqAddFriends::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x08 {
        return Box::new(PacketCzAckReqAddFriends::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x09 {
        return Box::new(PacketZcAddFriendsList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x0a {
        return Box::new(PacketZcDeleteFriends::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x0b {
        return Box::new(PacketChExeHashcheck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x0c {
        return Box::new(PacketCzExeHashcheck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x0d {
        return Box::new(PacketHcBlockCharacter::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x0e {
        return Box::new(PacketZcStarskill::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x0f {
        return Box::new(PacketCzReqPvppoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x10 {
        return Box::new(PacketZcAckPvppoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x11 {
        return Box::new(PacketZhMovePvpworld::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x12 {
        return Box::new(PacketCzReqGiveMannerByname::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x13 {
        return Box::new(PacketCzReqStatusGm::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x14 {
        return Box::new(PacketZcAckStatusGm::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x15 {
        return Box::new(PacketZcSkillmsg::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x16 {
        return Box::new(PacketZcBabymsg::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x17 {
        return Box::new(PacketCzBlacksmithRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x18 {
        return Box::new(PacketCzAlchemistRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x19 {
        return Box::new(PacketZcBlacksmithRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x1a {
        return Box::new(PacketZcAlchemistRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x1b {
        return Box::new(PacketZcBlacksmithPoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x1c {
        return Box::new(PacketZcAlchemistPoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x1d {
        return Box::new(PacketCzLesseffect::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x1e {
        return Box::new(PacketZcLesseffect::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x1f {
        return Box::new(PacketZcNotifyPkinfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x20 {
        return Box::new(PacketZcNotifyCrazykiller::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x21 {
        return Box::new(PacketZcNotifyWeaponitemlist::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x22 {
        return Box::new(PacketCzReqWeaponrefine::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x23 {
        return Box::new(PacketZcAckWeaponrefine::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x24 {
        return Box::new(PacketZcTaekwonPoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x25 {
        return Box::new(PacketCzTaekwonRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x26 {
        return Box::new(PacketZcTaekwonRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x27 {
        return Box::new(PacketZcGameGuard::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x28 {
        return Box::new(PacketCzAckGameGuard::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x29 {
        return Box::new(PacketZcStateChange3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x2a {
        return Box::new(PacketZcNotifyStandentry3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x2b {
        return Box::new(PacketZcNotifyNewentry3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x2c {
        return Box::new(PacketZcNotifyMoveentry3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x2d {
        return Box::new(PacketCzCommandMer::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x2e {
        return Box::new(PacketZcPropertyHomun::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x30 {
        return Box::new(PacketZcChangestateMer::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x31 {
        return Box::new(PacketCzRenameMer::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x32 {
        return Box::new(PacketCzRequestMovenpc::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x33 {
        return Box::new(PacketCzRequestActnpc::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x34 {
        return Box::new(PacketCzRequestMovetoowner::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x3a {
        return Box::new(PacketZcReqStorePassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x3b {
        return Box::new(PacketCzAckStorePassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x3c {
        return Box::new(PacketZcResultStorePassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x3d {
        return Box::new(PacketAcEventResult::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x3e {
        return Box::new(PacketHcRequestCharacterPassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x3f {
        return Box::new(PacketCzMailGetList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x40 {
        return Box::new(PacketZcMailReqGetList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x41 {
        return Box::new(PacketCzMailOpen::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x42 {
        return Box::new(PacketZcMailReqOpen::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x43 {
        return Box::new(PacketCzMailDelete::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x44 {
        return Box::new(PacketCzMailGetItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x45 {
        return Box::new(PacketZcMailReqGetItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x46 {
        return Box::new(PacketCzMailResetItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x47 {
        return Box::new(PacketCzMailAddItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x48 {
        return Box::new(PacketCzMailSend::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x49 {
        return Box::new(PacketZcMailReqSend::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x4a {
        return Box::new(PacketZcMailReceive::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x4b {
        return Box::new(PacketCzAuctionCreate::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x4c {
        return Box::new(PacketCzAuctionAddItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x4d {
        return Box::new(PacketCzAuctionAdd::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x4e {
        return Box::new(PacketCzAuctionAddCancel::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x4f {
        return Box::new(PacketCzAuctionBuy::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x50 {
        return Box::new(PacketZcAuctionResult::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x51 {
        return Box::new(PacketCzAuctionItemSearch::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x52 {
        return Box::new(PacketZcAuctionItemReqSearch::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x53 {
        return Box::new(PacketZcStarplace::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x54 {
        return Box::new(PacketCzAgreeStarplace::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x55 {
        return Box::new(PacketZcAckMailAddItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x56 {
        return Box::new(PacketZcAckAuctionAddItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x57 {
        return Box::new(PacketZcAckMailDelete::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x58 {
        return Box::new(PacketCaReqGameGuardCheck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x59 {
        return Box::new(PacketAcAckGameGuard::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x5a {
        return Box::new(PacketZcMakingitemList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x5b {
        return Box::new(PacketCzReqMakingitem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x5c {
        return Box::new(PacketCzAuctionReqMyInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x5d {
        return Box::new(PacketCzAuctionReqMySellStop::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x5e {
        return Box::new(PacketZcAuctionAckMySellStop::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x5f {
        return Box::new(PacketZcAuctionWindows::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x60 {
        return Box::new(PacketZcMailWindows::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x61 {
        return Box::new(PacketAcReqLoginOldekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x62 {
        return Box::new(PacketAcReqLoginNewekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x63 {
        return Box::new(PacketAcReqLoginCardpass::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x64 {
        return Box::new(PacketCaAckLoginOldekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x65 {
        return Box::new(PacketCaAckLoginNewekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x66 {
        return Box::new(PacketCaAckLoginCardpass::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x67 {
        return Box::new(PacketAcAckEkeyFailNotexist::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x68 {
        return Box::new(PacketAcAckEkeyFailNotusesekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x69 {
        return Box::new(PacketAcAckEkeyFailNotusedekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x6a {
        return Box::new(PacketAcAckEkeyFailAuthrefuse::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x6b {
        return Box::new(PacketAcAckEkeyFailInputekey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x6c {
        return Box::new(PacketAcAckEkeyFailNotice::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x6d {
        return Box::new(PacketAcAckEkeyFailNeedcardpass::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x6e {
        return Box::new(PacketAcAckAuthekeyFailNotmatchcardpass::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x6f {
        return Box::new(PacketAcAckFirstLogin::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x70 {
        return Box::new(PacketAcReqLoginAccountInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x71 {
        return Box::new(PacketCaAckLoginAccountInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x72 {
        return Box::new(PacketAcAckPtIdInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x73 {
        return Box::new(PacketCzReqMailReturn::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x74 {
        return Box::new(PacketZcAckMailReturn::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x75 {
        return Box::new(PacketChEnter2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x76 {
        return Box::new(PacketAcAcceptLogin2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x77 {
        return Box::new(PacketCaLoginPcbang::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x78 {
        return Box::new(PacketZcNotifyPcbang::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x79 {
        return Box::new(PacketCzHuntinglist::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x7a {
        return Box::new(PacketZcHuntinglist::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x7b {
        return Box::new(PacketZcPcbangEffect::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x7c {
        return Box::new(PacketCaLogin4::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x7d {
        return Box::new(PacketZcPropertyMerce::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x7e {
        return Box::new(PacketZcShandaProtect::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x7f {
        return Box::new(PacketCaClientType::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x80 {
        return Box::new(PacketZcGangsiPoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x81 {
        return Box::new(PacketCzGangsiRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x82 {
        return Box::new(PacketZcGangsiRank::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x83 {
        return Box::new(PacketZcAid::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x84 {
        return Box::new(PacketZcNotifyEffect3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x85 {
        return Box::new(PacketZcDeathQuestion::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x86 {
        return Box::new(PacketCzDeathQuestion::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x87 {
        return Box::new(PacketZcPcCashPointItemlist::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x88 {
        return Box::new(PacketCzPcBuyCashPointItem::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x89 {
        return Box::new(PacketZcPcCashPointUpdate::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x8a {
        return Box::new(PacketZcNpcShowefstUpdate::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x8c {
        return Box::new(PacketChSelectCharGoingtobeused::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x8d {
        return Box::new(PacketChReqIsValidCharname::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x8e {
        return Box::new(PacketHcAckIsValidCharname::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x8f {
        return Box::new(PacketChReqChangeCharname::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x90 {
        return Box::new(PacketHcAckChangeCharname::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x91 {
        return Box::new(PacketZcMsg::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x92 {
        return Box::new(PacketCzStandingResurrection::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x93 {
        return Box::new(PacketZcBossInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x94 {
        return Box::new(PacketZcReadBook::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x95 {
        return Box::new(PacketZcEquipmentItemlist2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x96 {
        return Box::new(PacketZcStoreEquipmentItemlist2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x97 {
        return Box::new(PacketZcCartEquipmentItemlist2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x98 {
        return Box::new(PacketZcCashTimeCounter::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x99 {
        return Box::new(PacketZcCashItemDelete::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x9a {
        return Box::new(PacketZcItemPickupAck2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x9b {
        return Box::new(PacketZcMerInit::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x9c {
        return Box::new(PacketZcMerProperty::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x9d {
        return Box::new(PacketZcMerSkillinfoList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x9e {
        return Box::new(PacketZcMerSkillinfoUpdate::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0x9f {
        return Box::new(PacketCzMerCommand::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xa0 {
        return Box::new(UnusedPacketCzMerUseSkill::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xa1 {
        return Box::new(UnusedPacketCzMerUpgradeSkilllevel::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xa2 {
        return Box::new(PacketZcMerParChange::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xa3 {
        return Box::new(PacketZcGameguardLingoKey::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xa5 {
        return Box::new(PacketCzKsyEvent::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xaa {
        return Box::new(PacketZcReqCashPassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xab {
        return Box::new(PacketCzAckCashPassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xac {
        return Box::new(PacketZcResultCashPassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xad {
        return Box::new(PacketAcRequestSecondPassword::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb0 {
        return Box::new(PacketCaLoginHan::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb1 {
        return Box::new(PacketZcAllQuestList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb2 {
        return Box::new(PacketZcAllQuestMission::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb3 {
        return Box::new(PacketZcAddQuest::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb4 {
        return Box::new(PacketZcDelQuest::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb5 {
        return Box::new(PacketZcUpdateMissionHunt::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb6 {
        return Box::new(PacketCzActiveQuest::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb7 {
        return Box::new(PacketZcActiveQuest::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb8 {
        return Box::new(PacketZcItemPickupParty::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xb9 {
        return Box::new(PacketZcShortcutKeyList::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xba {
        return Box::new(PacketCzShortcutKeyChange::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xbb {
        return Box::new(PacketZcEquipitemDamaged::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xbc {
        return Box::new(PacketZcNotifyPcbangPlayingTime::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xbf {
        return Box::new(PacketZcSrpacketr2Init::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc0 {
        return Box::new(PacketCzSrpacketr2Start::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc1 {
        return Box::new(PacketZcNpcChat::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc2 {
        return Box::new(PacketZcFormatstringMsg::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc4 {
        return Box::new(PacketCzPartyJoinReq::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc5 {
        return Box::new(PacketZcPartyJoinReqAck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc6 {
        return Box::new(PacketZcPartyJoinReq::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc7 {
        return Box::new(PacketCzPartyJoinReqAck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc8 {
        return Box::new(PacketCzPartyConfig::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xc9 {
        return Box::new(PacketZcPartyConfig::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xca {
        return Box::new(PacketHcRefuseSelectchar::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xcb {
        return Box::new(PacketZcMemorialdungeonSubscriptionInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xcc {
        return Box::new(PacketZcMemorialdungeonSubscriptionNotify::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xcd {
        return Box::new(PacketZcMemorialdungeonInfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xce {
        return Box::new(PacketZcMemorialdungeonNotify::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xcf {
        return Box::new(PacketCzMemorialdungeonCommand::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd0 {
        return Box::new(PacketZcEquipmentItemlist3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd1 {
        return Box::new(PacketZcStoreEquipmentItemlist3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd2 {
        return Box::new(PacketZcCartEquipmentItemlist3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd3 {
        return Box::new(PacketZcNotifyBindOnEquip::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd4 {
        return Box::new(PacketZcItemPickupAck3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd5 {
        return Box::new(PacketZcIsvrDisconnect::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd6 {
        return Box::new(PacketCzEquipwinMicroscope::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd7 {
        return Box::new(PacketZcEquipwinMicroscope::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd8 {
        return Box::new(PacketCzConfig::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xd9 {
        return Box::new(PacketZcConfig::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xda {
        return Box::new(PacketZcConfigNotify::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xdb {
        return Box::new(PacketCzBattlefieldChat::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xdc {
        return Box::new(PacketZcBattlefieldChat::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xdd {
        return Box::new(PacketZcBattlefieldNotifyCampinfo::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xde {
        return Box::new(PacketZcBattlefieldNotifyPoint::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xdf {
        return Box::new(PacketZcBattlefieldNotifyPosition::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xe0 {
        return Box::new(PacketZcBattlefieldNotifyHp::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xe1 {
        return Box::new(PacketZcNotifyAct2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xe6 {
        return Box::new(PacketCzBotCheck::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xe7 {
        return Box::new(PacketZcMapproperty::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xe8 {
        return Box::new(PacketZcNormalItemlist3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xe9 {
        return Box::new(PacketZcCartNormalItemlist3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xea {
        return Box::new(PacketZcStoreNormalItemlist3::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xeb {
        return Box::new(PacketZcAcceptEnter2::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xec {
        return Box::new(PacketZcNotifyMoveentry4::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xed {
        return Box::new(PacketZcNotifyNewentry4::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xee {
        return Box::new(PacketZcNotifyStandentry4::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xef {
        return Box::new(PacketZcNotifyFont::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xf0 {
        return Box::new(PacketZcProgress::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xf1 {
        return Box::new(PacketCzProgress::from(buffer));
    }
    if buffer[0] == 0x02 && buffer[1] == 0xf2 {
        return Box::new(PacketZcProgressCancel::from(buffer));
    }
    if buffer[0] == 0x03 && buffer[1] == 0x5c {
        return Box::new(PacketCzOpenSimpleCashshopItemlist::from(buffer));
    }
    if buffer[0] == 0x03 && buffer[1] == 0x5d {
        return Box::new(PacketZcSimpleCashshopPointItemlist::from(buffer));
    }
    if buffer[0] == 0x03 && buffer[1] == 0x5e {
        return Box::new(PacketCzCloseWindow::from(buffer));
    }
    if buffer[0] == 0x03 && buffer[1] == 0xdd {
        return Box::new(PacketAhcGameGuard::from(buffer));
    }
    if buffer[0] == 0x03 && buffer[1] == 0xde {
        return Box::new(PacketCahAckGameGuard::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x36 {
        return Box::new(PacketCzEnter2::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x37 {
        return Box::new(PacketCzRequestAct2::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x38 {
        return Box::new(PacketCzUseSkill2::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x39 {
        return Box::new(PacketCzUseItem2::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x3d {
        return Box::new(PacketZcSkillPostdelay::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x3e {
        return Box::new(PacketZcSkillPostdelayList::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x3f {
        return Box::new(PacketZcMsgStateChange2::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x40 {
        return Box::new(PacketZcMillenniumshield::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x41 {
        return Box::new(PacketZcSkillinfoDelete::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x42 {
        return Box::new(PacketZcSkillSelectRequest::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x43 {
        return Box::new(PacketCzSkillSelectResponse::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x44 {
        return Box::new(PacketZcSimpleCashPointItemlist::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x45 {
        return Box::new(PacketCzSimpleBuyCashPointItem::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x46 {
        return Box::new(PacketZcQuestNotifyEffect::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x47 {
        return Box::new(PacketCzBlockingPlayCancel::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x48 {
        return Box::new(PacketHcCharacterList::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x49 {
        return Box::new(PacketZcHackshErrorMsg::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x4a {
        return Box::new(PacketCzClientVersion::from(buffer));
    }
    if buffer[0] == 0x04 && buffer[1] == 0x4b {
        return Box::new(PacketCzCloseSimplecashShop::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd0 {
        return Box::new(PacketZcEsResult::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd1 {
        return Box::new(PacketCzEsGetList::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd2 {
        return Box::new(PacketZcEsList::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd3 {
        return Box::new(PacketCzEsChoose::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd4 {
        return Box::new(PacketCzEsCancel::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd5 {
        return Box::new(PacketZcEsReady::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd6 {
        return Box::new(PacketZcEsGoto::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd7 {
        return Box::new(PacketCzGroupinfoChangeV2::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd8 {
        return Box::new(PacketZcReqGroupinfoChangeV2::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xd9 {
        return Box::new(PacketZcShortcutKeyListV2::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xda {
        return Box::new(PacketCzChangeGroupMaster::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xdb {
        return Box::new(PacketZcHoParChange::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xdc {
        return Box::new(PacketCzSeekParty::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xdd {
        return Box::new(PacketZcSeekParty::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xde {
        return Box::new(PacketCzSeekPartyMember::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xdf {
        return Box::new(PacketZcSeekPartyMember::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe0 {
        return Box::new(PacketZcEsNotiMyinfo::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe1 {
        return Box::new(PacketZcSkillinfoUpdate2::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe2 {
        return Box::new(PacketZcMsgValue::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe3 {
        return Box::new(PacketZcItemlistwinOpen::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe4 {
        return Box::new(PacketCzItemlistwinRes::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe5 {
        return Box::new(PacketChEnterCheckbot::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe6 {
        return Box::new(PacketZcMsgSkill::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe7 {
        return Box::new(PacketChCheckbot::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe8 {
        return Box::new(PacketHcCheckbot::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xe9 {
        return Box::new(PacketHcCheckbotResult::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xea {
        return Box::new(PacketCzBattleFieldList::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xeb {
        return Box::new(PacketZcBattleFieldList::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xec {
        return Box::new(PacketCzJoinBattleField::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xed {
        return Box::new(PacketZcJoinBattleField::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xee {
        return Box::new(PacketCzCancelBattleField::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xef {
        return Box::new(PacketZcCancelBattleField::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf0 {
        return Box::new(PacketCzReqBattleStateMonitor::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf1 {
        return Box::new(PacketZcAckBattleStateMonitor::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf2 {
        return Box::new(PacketZcBattleNotiStartStep::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf3 {
        return Box::new(PacketZcBattleJoinNotiDefer::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf4 {
        return Box::new(PacketZcBattleJoinDisableState::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf5 {
        return Box::new(PacketCzGmFullstrip::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf6 {
        return Box::new(PacketZcNotifyExp::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf7 {
        return Box::new(PacketZcNotifyMoveentry7::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf8 {
        return Box::new(PacketZcNotifyNewentry5::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xf9 {
        return Box::new(PacketZcNotifyStandentry5::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xfa {
        return Box::new(PacketZcDeleteItemFromBody::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xfb {
        return Box::new(PacketZcUseskillAck2::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xfc {
        return Box::new(PacketZcChangeGroupMaster::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xfe {
        return Box::new(PacketZcPlayNpcBgm::from(buffer));
    }
    if buffer[0] == 0x07 && buffer[1] == 0xff {
        return Box::new(PacketZcDefineCheck::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x00 {
        return Box::new(PacketZcPcPurchaseItemlistFrommc2::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x01 {
        return Box::new(PacketCzPcPurchaseItemlistFrommc2::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x02 {
        return Box::new(PacketCzPartyBookingReqRegister::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x03 {
        return Box::new(PacketZcPartyBookingAckRegister::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x04 {
        return Box::new(PacketCzPartyBookingReqSearch::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x05 {
        return Box::new(PacketZcPartyBookingAckSearch::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x06 {
        return Box::new(PacketCzPartyBookingReqDelete::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x07 {
        return Box::new(PacketZcPartyBookingAckDelete::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x08 {
        return Box::new(PacketCzPartyBookingReqUpdate::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x09 {
        return Box::new(PacketZcPartyBookingNotifyInsert::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0a {
        return Box::new(PacketZcPartyBookingNotifyUpdate::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0b {
        return Box::new(PacketZcPartyBookingNotifyDelete::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0c {
        return Box::new(PacketCzSimpleCashBtnshow::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0d {
        return Box::new(PacketZcSimpleCashBtnshow::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0e {
        return Box::new(PacketZcNotifyHpToGroupmR2::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x0f {
        return Box::new(PacketZcAddExchangeItem2::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x10 {
        return Box::new(PacketZcOpenBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x11 {
        return Box::new(PacketCzReqOpenBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x12 {
        return Box::new(PacketZcFailedOpenBuyingStoreToBuyer::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x13 {
        return Box::new(PacketZcMyitemlistBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x14 {
        return Box::new(PacketZcBuyingStoreEntry::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x15 {
        return Box::new(PacketCzReqCloseBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x16 {
        return Box::new(PacketZcDisappearBuyingStoreEntry::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x17 {
        return Box::new(PacketCzReqClickToBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x18 {
        return Box::new(PacketZcAckItemlistBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x19 {
        return Box::new(PacketCzReqTradeBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x1a {
        return Box::new(PacketZcFailedTradeBuyingStoreToBuyer::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x1b {
        return Box::new(PacketZcUpdateItemFromBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x1c {
        return Box::new(PacketZcItemDeleteBuyingStore::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x1d {
        return Box::new(PacketZcElInit::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x1e {
        return Box::new(PacketZcElParChange::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x1f {
        return Box::new(PacketZcBroadcast4::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x20 {
        return Box::new(PacketZcCostumeSpriteChange::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x21 {
        return Box::new(PacketAcOtpUser::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x22 {
        return Box::new(PacketCaOtpAuthReq::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x23 {
        return Box::new(PacketAcOtpAuthAck::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x24 {
        return Box::new(PacketZcFailedTradeBuyingStoreToSeller::from(buffer));
    }
    if buffer[0] == 0x82 && buffer[1] == 0x5a {
        return Box::new(PacketCaSsoLoginReqa::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x25 {
        return Box::new(PacketCaSsoLoginReq::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x26 {
        return Box::new(PacketAcSsoLoginAck::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x27 {
        return Box::new(PacketChDeleteChar3Reserved::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x28 {
        return Box::new(PacketHcDeleteChar3Reserved::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x29 {
        return Box::new(PacketChDeleteChar3::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x2a {
        return Box::new(PacketHcDeleteChar3::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x2b {
        return Box::new(PacketChDeleteChar3Cancel::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x2c {
        return Box::new(PacketHcDeleteChar3Cancel::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x35 {
        return Box::new(PacketCzSearchStoreInfo::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x36 {
        return Box::new(PacketZcSearchStoreInfoAck::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x37 {
        return Box::new(PacketZcSearchStoreInfoFailed::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x38 {
        return Box::new(PacketCzSearchStoreInfoNextPage::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x39 {
        return Box::new(PacketZcAckBanGuildSso::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x3a {
        return Box::new(PacketZcOpenSearchStoreInfo::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x3b {
        return Box::new(PacketCzCloseSearchStoreInfo::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x3c {
        return Box::new(PacketCzSsilistItemClick::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x3d {
        return Box::new(PacketZcSsilistItemClickAck::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x3e {
        return Box::new(PacketAcRefuseLoginR2::from(buffer));
    }
    if buffer[0] == 0x08 && buffer[1] == 0x41 {
        return Box::new(PacketChSelectAccessibleMapname::from(buffer));
    }
    Box::new(PacketUnknown::from(buffer))
}

pub trait Packet {
    fn id(&self) -> &str;
    fn debug(&self);
}

pub struct PacketCaLogin {
    pub packet_id: u16,
    pub version: u32,
    pub id: String,
    pub passwd: String,
    pub client_type: char,
}

impl PacketCaLogin {
    pub fn from(buffer: &[u8]) -> PacketCaLogin {
        PacketCaLogin {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            version: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            id: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            passwd: String::from_utf8_lossy(&buffer[30..54]).to_string(),
            client_type: buffer[54] as char,
        }
    }
}

impl Packet for PacketCaLogin {
    fn id(&self) -> &str {
       "0x6400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("version[2, 6]", &self.version)
            .field("id[6, 30]", &self.id)
            .field("passwd[30, 54]", &self.passwd)
            .field("client_type[54, 55]", &self.client_type)
        .finish()
    }
}

pub struct PacketChEnter {
    pub packet_id: u16,
    pub aid: u32,
    pub auth_code: u32,
    pub user_level: u32,
    pub client_type: u16,
    pub sex: char,
}

impl PacketChEnter {
    pub fn from(buffer: &[u8]) -> PacketChEnter {
        PacketChEnter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            auth_code: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            user_level: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            client_type: u16::from_le_bytes([buffer[14], buffer[15]]),
            sex: buffer[16] as char,
        }
    }
}

impl Packet for PacketChEnter {
    fn id(&self) -> &str {
       "0x6500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChEnter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("auth_code[6, 10]", &self.auth_code)
            .field("user_level[10, 14]", &self.user_level)
            .field("client_type[14, 16]", &self.client_type)
            .field("sex[16, 17]", &self.sex)
        .finish()
    }
}

pub struct PacketChSelectChar {
    pub packet_id: u16,
    pub char_num: char,
}

impl PacketChSelectChar {
    pub fn from(buffer: &[u8]) -> PacketChSelectChar {
        PacketChSelectChar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_num: buffer[2] as char,
        }
    }
}

impl Packet for PacketChSelectChar {
    fn id(&self) -> &str {
       "0x6600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChSelectChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSelectChar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_num[2, 3]", &self.char_num)
        .finish()
    }
}

pub struct PacketChMakeChar {
    pub packet_id: u16,
    pub name: String,
    pub str: char,
    pub agi: char,
    pub vit: char,
    pub int: char,
    pub dex: char,
    pub luk: char,
    pub char_num: char,
    pub head_pal: u16,
    pub head: u16,
}

impl PacketChMakeChar {
    pub fn from(buffer: &[u8]) -> PacketChMakeChar {
        PacketChMakeChar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            str: buffer[26] as char,
            agi: buffer[27] as char,
            vit: buffer[28] as char,
            int: buffer[29] as char,
            dex: buffer[30] as char,
            luk: buffer[31] as char,
            char_num: buffer[32] as char,
            head_pal: u16::from_le_bytes([buffer[33], buffer[34]]),
            head: u16::from_le_bytes([buffer[35], buffer[36]]),
        }
    }
}

impl Packet for PacketChMakeChar {
    fn id(&self) -> &str {
       "0x6700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChMakeChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChMakeChar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
            .field("str[26, 27]", &self.str)
            .field("agi[27, 28]", &self.agi)
            .field("vit[28, 29]", &self.vit)
            .field("int[29, 30]", &self.int)
            .field("dex[30, 31]", &self.dex)
            .field("luk[31, 32]", &self.luk)
            .field("char_num[32, 33]", &self.char_num)
            .field("head_pal[33, 35]", &self.head_pal)
            .field("head[35, 37]", &self.head)
        .finish()
    }
}

pub struct PacketChDeleteChar {
    pub packet_id: u16,
    pub gid: u32,
    pub key: String,
}

impl PacketChDeleteChar {
    pub fn from(buffer: &[u8]) -> PacketChDeleteChar {
        PacketChDeleteChar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            key: String::from_utf8_lossy(&buffer[6..46]).to_string(),
        }
    }
}

impl Packet for PacketChDeleteChar {
    fn id(&self) -> &str {
       "0x6800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChDeleteChar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("key[6, 46]", &self.key)
        .finish()
    }
}

pub struct PacketAcAcceptLogin {
    pub packet_id: u16,
    pub packet_length: u16,
    pub auth_code: u32,
    pub aid: u32,
    pub user_level: u32,
    pub last_login_ip: u32,
    pub last_login_time: String,
    pub sex: char,
    pub server_list: Vec<ServerAddr>,
}

impl PacketAcAcceptLogin {
    pub fn from(buffer: &[u8]) -> PacketAcAcceptLogin {
        let iter_count = &buffer.len() / 32;
        let mut vec_field: Vec<ServerAddr> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 47 * i;
            let end_pos = 79 * i;
            vec_field.push(ServerAddr::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketAcAcceptLogin {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            auth_code: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            aid: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            user_level: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            last_login_ip: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            last_login_time: String::from_utf8_lossy(&buffer[20..46]).to_string(),
            sex: buffer[46] as char,
            server_list: vec_field,
        }
    }
}

impl Packet for PacketAcAcceptLogin {
    fn id(&self) -> &str {
       "0x6900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAcceptLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAcceptLogin")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("auth_code[4, 8]", &self.auth_code)
            .field("aid[8, 12]", &self.aid)
            .field("user_level[12, 16]", &self.user_level)
            .field("last_login_ip[16, 20]", &self.last_login_ip)
            .field("last_login_time[20, 46]", &self.last_login_time)
            .field("sex[46, 47]", &self.sex)
            .field("server_list[47, 79]", &self.server_list)
        .finish()
    }
}

pub struct PacketAcRefuseLogin {
    pub packet_id: u16,
    pub error_code: char,
    pub block_date: String,
}

impl PacketAcRefuseLogin {
    pub fn from(buffer: &[u8]) -> PacketAcRefuseLogin {
        PacketAcRefuseLogin {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
            block_date: String::from_utf8_lossy(&buffer[3..23]).to_string(),
        }
    }
}

impl Packet for PacketAcRefuseLogin {
    fn id(&self) -> &str {
       "0x6a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcRefuseLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRefuseLogin")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
            .field("block_date[3, 23]", &self.block_date)
        .finish()
    }
}

pub struct PacketHcAcceptEnterNeoUnion {
    pub packet_id: u16,
    pub packet_length: u16,
    pub total_slot_num: char,
    pub premium_start_slot: char,
    pub premium_end_slot: char,
    pub dummy1_beginbilling: char,
    pub code: u32,
    pub time1: u32,
    pub time2: u32,
    pub dummy2_endbilling: String,
    pub char_info: Vec<CharacterInfoNeoUnion>,
}

impl PacketHcAcceptEnterNeoUnion {
    pub fn from(buffer: &[u8]) -> PacketHcAcceptEnterNeoUnion {
        let iter_count = &buffer.len() / 144;
        let mut vec_field: Vec<CharacterInfoNeoUnion> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 27 * i;
            let end_pos = 171 * i;
            vec_field.push(CharacterInfoNeoUnion::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketHcAcceptEnterNeoUnion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            total_slot_num: buffer[4] as char,
            premium_start_slot: buffer[5] as char,
            premium_end_slot: buffer[6] as char,
            dummy1_beginbilling: buffer[7] as char,
            code: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            time1: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            time2: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            dummy2_endbilling: String::from_utf8_lossy(&buffer[20..27]).to_string(),
            char_info: vec_field,
        }
    }
}

impl Packet for PacketHcAcceptEnterNeoUnion {
    fn id(&self) -> &str {
       "0x6b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcAcceptEnterNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptEnterNeoUnion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("total_slot_num[4, 5]", &self.total_slot_num)
            .field("premium_start_slot[5, 6]", &self.premium_start_slot)
            .field("premium_end_slot[6, 7]", &self.premium_end_slot)
            .field("dummy1_beginbilling[7, 8]", &self.dummy1_beginbilling)
            .field("code[8, 12]", &self.code)
            .field("time1[12, 16]", &self.time1)
            .field("time2[16, 20]", &self.time2)
            .field("dummy2_endbilling[20, 27]", &self.dummy2_endbilling)
            .field("char_info[27, 171]", &self.char_info)
        .finish()
    }
}

pub struct PacketHcRefuseEnter {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketHcRefuseEnter {
    pub fn from(buffer: &[u8]) -> PacketHcRefuseEnter {
        PacketHcRefuseEnter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketHcRefuseEnter {
    fn id(&self) -> &str {
       "0x6c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcRefuseEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseEnter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketHcAcceptMakecharNeoUnion {
    pub packet_id: u16,
    pub charinfo: CharacterInfoNeoUnion,
}

impl PacketHcAcceptMakecharNeoUnion {
    pub fn from(buffer: &[u8]) -> PacketHcAcceptMakecharNeoUnion {
        PacketHcAcceptMakecharNeoUnion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            charinfo: CharacterInfoNeoUnion::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketHcAcceptMakecharNeoUnion {
    fn id(&self) -> &str {
       "0x6d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcAcceptMakecharNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptMakecharNeoUnion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("charinfo[2, ?]", &self.charinfo)
        .finish()
    }
}

pub struct PacketHcRefuseMakechar {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketHcRefuseMakechar {
    pub fn from(buffer: &[u8]) -> PacketHcRefuseMakechar {
        PacketHcRefuseMakechar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketHcRefuseMakechar {
    fn id(&self) -> &str {
       "0x6e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcRefuseMakechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseMakechar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketHcAcceptDeletechar {
    pub packet_id: u16,
}

impl PacketHcAcceptDeletechar {
    pub fn from(buffer: &[u8]) -> PacketHcAcceptDeletechar {
        PacketHcAcceptDeletechar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketHcAcceptDeletechar {
    fn id(&self) -> &str {
       "0x6f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcAcceptDeletechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAcceptDeletechar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketHcRefuseDeletechar {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketHcRefuseDeletechar {
    pub fn from(buffer: &[u8]) -> PacketHcRefuseDeletechar {
        PacketHcRefuseDeletechar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketHcRefuseDeletechar {
    fn id(&self) -> &str {
       "0x7000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcRefuseDeletechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseDeletechar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketHcNotifyZonesvr {
    pub packet_id: u16,
    pub gid: u32,
    pub map_name: String,
    pub addr: ZserverAddr,
}

impl PacketHcNotifyZonesvr {
    pub fn from(buffer: &[u8]) -> PacketHcNotifyZonesvr {
        PacketHcNotifyZonesvr {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            map_name: String::from_utf8_lossy(&buffer[6..22]).to_string(),
            addr: ZserverAddr::from(&buffer[22..buffer.len()]),
        }
    }
}

impl Packet for PacketHcNotifyZonesvr {
    fn id(&self) -> &str {
       "0x7100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcNotifyZonesvr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcNotifyZonesvr")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("map_name[6, 22]", &self.map_name)
            .field("addr[22, ?]", &self.addr)
        .finish()
    }
}

pub struct PacketCzEnter {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub auth_code: u32,
    pub client_time: u32,
    pub sex: char,
}

impl PacketCzEnter {
    pub fn from(buffer: &[u8]) -> PacketCzEnter {
        PacketCzEnter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            auth_code: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            client_time: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            sex: buffer[18] as char,
        }
    }
}

impl Packet for PacketCzEnter {
    fn id(&self) -> &str {
       "0x7200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEnter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("auth_code[10, 14]", &self.auth_code)
            .field("client_time[14, 18]", &self.client_time)
            .field("sex[18, 19]", &self.sex)
        .finish()
    }
}

pub struct PacketZcAcceptEnter {
    pub packet_id: u16,
    pub start_time: u32,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
}

impl PacketZcAcceptEnter {
    pub fn from(buffer: &[u8]) -> PacketZcAcceptEnter {
        PacketZcAcceptEnter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            start_time: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            pos_dir: String::from_utf8_lossy(&buffer[6..9]).to_string(),
            x_size: buffer[9] as char,
            y_size: buffer[10] as char,
        }
    }
}

impl Packet for PacketZcAcceptEnter {
    fn id(&self) -> &str {
       "0x7300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAcceptEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAcceptEnter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("start_time[2, 6]", &self.start_time)
            .field("pos_dir[6, 9]", &self.pos_dir)
            .field("x_size[9, 10]", &self.x_size)
            .field("y_size[10, 11]", &self.y_size)
        .finish()
    }
}

pub struct PacketZcRefuseEnter {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketZcRefuseEnter {
    pub fn from(buffer: &[u8]) -> PacketZcRefuseEnter {
        PacketZcRefuseEnter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcRefuseEnter {
    fn id(&self) -> &str {
       "0x7400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRefuseEnter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRefuseEnter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketZcNotifyInitchar {
    pub packet_id: u16,
    pub packet_length: u16,
    pub gid: u32,
    pub style: u16,
    pub item: char,
}

impl PacketZcNotifyInitchar {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyInitchar {
        PacketZcNotifyInitchar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            style: u16::from_le_bytes([buffer[8], buffer[9]]),
            item: buffer[10] as char,
        }
    }
}

impl Packet for PacketZcNotifyInitchar {
    fn id(&self) -> &str {
       "0x7500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyInitchar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyInitchar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("gid[4, 8]", &self.gid)
            .field("style[8, 10]", &self.style)
            .field("item[10, 11]", &self.item)
        .finish()
    }
}

pub struct PacketZcNotifyUpdatechar {
    pub packet_id: u16,
    pub gid: u32,
    pub style: u16,
    pub item: char,
}

impl PacketZcNotifyUpdatechar {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyUpdatechar {
        PacketZcNotifyUpdatechar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            style: u16::from_le_bytes([buffer[6], buffer[7]]),
            item: buffer[8] as char,
        }
    }
}

impl Packet for PacketZcNotifyUpdatechar {
    fn id(&self) -> &str {
       "0x7600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyUpdatechar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyUpdatechar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("style[6, 8]", &self.style)
            .field("item[8, 9]", &self.item)
        .finish()
    }
}

pub struct PacketZcNotifyUpdateplayer {
    pub packet_id: u16,
    pub style: u16,
    pub item: char,
}

impl PacketZcNotifyUpdateplayer {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyUpdateplayer {
        PacketZcNotifyUpdateplayer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            style: u16::from_le_bytes([buffer[2], buffer[3]]),
            item: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcNotifyUpdateplayer {
    fn id(&self) -> &str {
       "0x7700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyUpdateplayer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyUpdateplayer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("style[2, 4]", &self.style)
            .field("item[4, 5]", &self.item)
        .finish()
    }
}

pub struct PacketZcNotifyStandentry {
    pub packet_id: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u16,
    pub accessory: u16,
    pub shield: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub state: char,
    pub clevel: u16,
}

impl PacketZcNotifyStandentry {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStandentry {
        PacketZcNotifyStandentry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            objecttype: buffer[2] as char,
            gid: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            speed: u16::from_le_bytes([buffer[7], buffer[8]]),
            body_state: u16::from_le_bytes([buffer[9], buffer[10]]),
            health_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            effect_state: u16::from_le_bytes([buffer[13], buffer[14]]),
            job: u16::from_le_bytes([buffer[15], buffer[16]]),
            head: u16::from_le_bytes([buffer[17], buffer[18]]),
            weapon: u16::from_le_bytes([buffer[19], buffer[20]]),
            accessory: u16::from_le_bytes([buffer[21], buffer[22]]),
            shield: u16::from_le_bytes([buffer[23], buffer[24]]),
            accessory2: u16::from_le_bytes([buffer[25], buffer[26]]),
            accessory3: u16::from_le_bytes([buffer[27], buffer[28]]),
            headpalette: u16::from_le_bytes([buffer[29], buffer[30]]),
            bodypalette: u16::from_le_bytes([buffer[31], buffer[32]]),
            head_dir: u16::from_le_bytes([buffer[33], buffer[34]]),
            guid: u32::from_le_bytes([buffer[35], buffer[36], buffer[37], buffer[38]]),
            gemblem_ver: u16::from_le_bytes([buffer[39], buffer[40]]),
            honor: u16::from_le_bytes([buffer[41], buffer[42]]),
            virtue: u16::from_le_bytes([buffer[43], buffer[44]]),
            is_pkmode_on: buffer[45] == 1,
            sex: buffer[46] as char,
            pos_dir: String::from_utf8_lossy(&buffer[47..50]).to_string(),
            x_size: buffer[50] as char,
            y_size: buffer[51] as char,
            state: buffer[52] as char,
            clevel: u16::from_le_bytes([buffer[53], buffer[54]]),
        }
    }
}

impl Packet for PacketZcNotifyStandentry {
    fn id(&self) -> &str {
       "0x7800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStandentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("objecttype[2, 3]", &self.objecttype)
            .field("gid[3, 7]", &self.gid)
            .field("speed[7, 9]", &self.speed)
            .field("body_state[9, 11]", &self.body_state)
            .field("health_state[11, 13]", &self.health_state)
            .field("effect_state[13, 15]", &self.effect_state)
            .field("job[15, 17]", &self.job)
            .field("head[17, 19]", &self.head)
            .field("weapon[19, 21]", &self.weapon)
            .field("accessory[21, 23]", &self.accessory)
            .field("shield[23, 25]", &self.shield)
            .field("accessory2[25, 27]", &self.accessory2)
            .field("accessory3[27, 29]", &self.accessory3)
            .field("headpalette[29, 31]", &self.headpalette)
            .field("bodypalette[31, 33]", &self.bodypalette)
            .field("head_dir[33, 35]", &self.head_dir)
            .field("guid[35, 39]", &self.guid)
            .field("gemblem_ver[39, 41]", &self.gemblem_ver)
            .field("honor[41, 43]", &self.honor)
            .field("virtue[43, 45]", &self.virtue)
            .field("is_pkmode_on[45, 46]", &self.is_pkmode_on)
            .field("sex[46, 47]", &self.sex)
            .field("pos_dir[47, 50]", &self.pos_dir)
            .field("x_size[50, 51]", &self.x_size)
            .field("y_size[51, 52]", &self.y_size)
            .field("state[52, 53]", &self.state)
            .field("clevel[53, 55]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyNewentry {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u16,
    pub accessory: u16,
    pub shield: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
}

impl PacketZcNotifyNewentry {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyNewentry {
        PacketZcNotifyNewentry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            weapon: u16::from_le_bytes([buffer[18], buffer[19]]),
            accessory: u16::from_le_bytes([buffer[20], buffer[21]]),
            shield: u16::from_le_bytes([buffer[22], buffer[23]]),
            accessory2: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory3: u16::from_le_bytes([buffer[26], buffer[27]]),
            headpalette: u16::from_le_bytes([buffer[28], buffer[29]]),
            bodypalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            head_dir: u16::from_le_bytes([buffer[32], buffer[33]]),
            guid: u32::from_le_bytes([buffer[34], buffer[35], buffer[36], buffer[37]]),
            gemblem_ver: u16::from_le_bytes([buffer[38], buffer[39]]),
            honor: u16::from_le_bytes([buffer[40], buffer[41]]),
            virtue: u16::from_le_bytes([buffer[42], buffer[43]]),
            is_pkmode_on: buffer[44] == 1,
            sex: buffer[45] as char,
            pos_dir: String::from_utf8_lossy(&buffer[46..49]).to_string(),
            x_size: buffer[49] as char,
            y_size: buffer[50] as char,
            clevel: u16::from_le_bytes([buffer[51], buffer[52]]),
        }
    }
}

impl Packet for PacketZcNotifyNewentry {
    fn id(&self) -> &str {
       "0x7900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 14]", &self.effect_state)
            .field("job[14, 16]", &self.job)
            .field("head[16, 18]", &self.head)
            .field("weapon[18, 20]", &self.weapon)
            .field("accessory[20, 22]", &self.accessory)
            .field("shield[22, 24]", &self.shield)
            .field("accessory2[24, 26]", &self.accessory2)
            .field("accessory3[26, 28]", &self.accessory3)
            .field("headpalette[28, 30]", &self.headpalette)
            .field("bodypalette[30, 32]", &self.bodypalette)
            .field("head_dir[32, 34]", &self.head_dir)
            .field("guid[34, 38]", &self.guid)
            .field("gemblem_ver[38, 40]", &self.gemblem_ver)
            .field("honor[40, 42]", &self.honor)
            .field("virtue[42, 44]", &self.virtue)
            .field("is_pkmode_on[44, 45]", &self.is_pkmode_on)
            .field("sex[45, 46]", &self.sex)
            .field("pos_dir[46, 49]", &self.pos_dir)
            .field("x_size[49, 50]", &self.x_size)
            .field("y_size[50, 51]", &self.y_size)
            .field("clevel[51, 53]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyActentry {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u16,
    pub accessory: u16,
    pub shield: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub action: char,
    pub act_start_time: u32,
    pub clevel: u16,
}

impl PacketZcNotifyActentry {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyActentry {
        PacketZcNotifyActentry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            weapon: u16::from_le_bytes([buffer[18], buffer[19]]),
            accessory: u16::from_le_bytes([buffer[20], buffer[21]]),
            shield: u16::from_le_bytes([buffer[22], buffer[23]]),
            accessory2: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory3: u16::from_le_bytes([buffer[26], buffer[27]]),
            headpalette: u16::from_le_bytes([buffer[28], buffer[29]]),
            bodypalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            head_dir: u16::from_le_bytes([buffer[32], buffer[33]]),
            guid: u32::from_le_bytes([buffer[34], buffer[35], buffer[36], buffer[37]]),
            gemblem_ver: u16::from_le_bytes([buffer[38], buffer[39]]),
            honor: u16::from_le_bytes([buffer[40], buffer[41]]),
            virtue: u16::from_le_bytes([buffer[42], buffer[43]]),
            is_pkmode_on: buffer[44] == 1,
            sex: buffer[45] as char,
            pos_dir: String::from_utf8_lossy(&buffer[46..49]).to_string(),
            x_size: buffer[49] as char,
            y_size: buffer[50] as char,
            action: buffer[51] as char,
            act_start_time: u32::from_le_bytes([buffer[52], buffer[53], buffer[54], buffer[55]]),
            clevel: u16::from_le_bytes([buffer[56], buffer[57]]),
        }
    }
}

impl Packet for PacketZcNotifyActentry {
    fn id(&self) -> &str {
       "0x7a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyActentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyActentry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 14]", &self.effect_state)
            .field("job[14, 16]", &self.job)
            .field("head[16, 18]", &self.head)
            .field("weapon[18, 20]", &self.weapon)
            .field("accessory[20, 22]", &self.accessory)
            .field("shield[22, 24]", &self.shield)
            .field("accessory2[24, 26]", &self.accessory2)
            .field("accessory3[26, 28]", &self.accessory3)
            .field("headpalette[28, 30]", &self.headpalette)
            .field("bodypalette[30, 32]", &self.bodypalette)
            .field("head_dir[32, 34]", &self.head_dir)
            .field("guid[34, 38]", &self.guid)
            .field("gemblem_ver[38, 40]", &self.gemblem_ver)
            .field("honor[40, 42]", &self.honor)
            .field("virtue[42, 44]", &self.virtue)
            .field("is_pkmode_on[44, 45]", &self.is_pkmode_on)
            .field("sex[45, 46]", &self.sex)
            .field("pos_dir[46, 49]", &self.pos_dir)
            .field("x_size[49, 50]", &self.x_size)
            .field("y_size[50, 51]", &self.y_size)
            .field("action[51, 52]", &self.action)
            .field("act_start_time[52, 56]", &self.act_start_time)
            .field("clevel[56, 58]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyMoveentry {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u16,
    pub accessory: u16,
    pub move_start_time: u32,
    pub shield: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub move_data: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
}

impl PacketZcNotifyMoveentry {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMoveentry {
        PacketZcNotifyMoveentry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            weapon: u16::from_le_bytes([buffer[18], buffer[19]]),
            accessory: u16::from_le_bytes([buffer[20], buffer[21]]),
            move_start_time: u32::from_le_bytes([buffer[22], buffer[23], buffer[24], buffer[25]]),
            shield: u16::from_le_bytes([buffer[26], buffer[27]]),
            accessory2: u16::from_le_bytes([buffer[28], buffer[29]]),
            accessory3: u16::from_le_bytes([buffer[30], buffer[31]]),
            headpalette: u16::from_le_bytes([buffer[32], buffer[33]]),
            bodypalette: u16::from_le_bytes([buffer[34], buffer[35]]),
            head_dir: u16::from_le_bytes([buffer[36], buffer[37]]),
            guid: u32::from_le_bytes([buffer[38], buffer[39], buffer[40], buffer[41]]),
            gemblem_ver: u16::from_le_bytes([buffer[42], buffer[43]]),
            honor: u16::from_le_bytes([buffer[44], buffer[45]]),
            virtue: u16::from_le_bytes([buffer[46], buffer[47]]),
            is_pkmode_on: buffer[48] == 1,
            sex: buffer[49] as char,
            move_data: String::from_utf8_lossy(&buffer[50..56]).to_string(),
            x_size: buffer[56] as char,
            y_size: buffer[57] as char,
            clevel: u16::from_le_bytes([buffer[58], buffer[59]]),
        }
    }
}

impl Packet for PacketZcNotifyMoveentry {
    fn id(&self) -> &str {
       "0x7b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMoveentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 14]", &self.effect_state)
            .field("job[14, 16]", &self.job)
            .field("head[16, 18]", &self.head)
            .field("weapon[18, 20]", &self.weapon)
            .field("accessory[20, 22]", &self.accessory)
            .field("move_start_time[22, 26]", &self.move_start_time)
            .field("shield[26, 28]", &self.shield)
            .field("accessory2[28, 30]", &self.accessory2)
            .field("accessory3[30, 32]", &self.accessory3)
            .field("headpalette[32, 34]", &self.headpalette)
            .field("bodypalette[34, 36]", &self.bodypalette)
            .field("head_dir[36, 38]", &self.head_dir)
            .field("guid[38, 42]", &self.guid)
            .field("gemblem_ver[42, 44]", &self.gemblem_ver)
            .field("honor[44, 46]", &self.honor)
            .field("virtue[46, 48]", &self.virtue)
            .field("is_pkmode_on[48, 49]", &self.is_pkmode_on)
            .field("sex[49, 50]", &self.sex)
            .field("move_data[50, 56]", &self.move_data)
            .field("x_size[56, 57]", &self.x_size)
            .field("y_size[57, 58]", &self.y_size)
            .field("clevel[58, 60]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyStandentryNpc {
    pub packet_id: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub head: u16,
    pub weapon: u16,
    pub accessory: u16,
    pub job: u16,
    pub shield: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
}

impl PacketZcNotifyStandentryNpc {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStandentryNpc {
        PacketZcNotifyStandentryNpc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            objecttype: buffer[2] as char,
            gid: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            speed: u16::from_le_bytes([buffer[7], buffer[8]]),
            body_state: u16::from_le_bytes([buffer[9], buffer[10]]),
            health_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            effect_state: u16::from_le_bytes([buffer[13], buffer[14]]),
            head: u16::from_le_bytes([buffer[15], buffer[16]]),
            weapon: u16::from_le_bytes([buffer[17], buffer[18]]),
            accessory: u16::from_le_bytes([buffer[19], buffer[20]]),
            job: u16::from_le_bytes([buffer[21], buffer[22]]),
            shield: u16::from_le_bytes([buffer[23], buffer[24]]),
            accessory2: u16::from_le_bytes([buffer[25], buffer[26]]),
            accessory3: u16::from_le_bytes([buffer[27], buffer[28]]),
            headpalette: u16::from_le_bytes([buffer[29], buffer[30]]),
            bodypalette: u16::from_le_bytes([buffer[31], buffer[32]]),
            head_dir: u16::from_le_bytes([buffer[33], buffer[34]]),
            is_pkmode_on: buffer[35] == 1,
            sex: buffer[36] as char,
            pos_dir: String::from_utf8_lossy(&buffer[37..40]).to_string(),
            x_size: buffer[40] as char,
            y_size: buffer[41] as char,
        }
    }
}

impl Packet for PacketZcNotifyStandentryNpc {
    fn id(&self) -> &str {
       "0x7c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStandentryNpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentryNpc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("objecttype[2, 3]", &self.objecttype)
            .field("gid[3, 7]", &self.gid)
            .field("speed[7, 9]", &self.speed)
            .field("body_state[9, 11]", &self.body_state)
            .field("health_state[11, 13]", &self.health_state)
            .field("effect_state[13, 15]", &self.effect_state)
            .field("head[15, 17]", &self.head)
            .field("weapon[17, 19]", &self.weapon)
            .field("accessory[19, 21]", &self.accessory)
            .field("job[21, 23]", &self.job)
            .field("shield[23, 25]", &self.shield)
            .field("accessory2[25, 27]", &self.accessory2)
            .field("accessory3[27, 29]", &self.accessory3)
            .field("headpalette[29, 31]", &self.headpalette)
            .field("bodypalette[31, 33]", &self.bodypalette)
            .field("head_dir[33, 35]", &self.head_dir)
            .field("is_pkmode_on[35, 36]", &self.is_pkmode_on)
            .field("sex[36, 37]", &self.sex)
            .field("pos_dir[37, 40]", &self.pos_dir)
            .field("x_size[40, 41]", &self.x_size)
            .field("y_size[41, 42]", &self.y_size)
        .finish()
    }
}

pub struct PacketCzNotifyActorinit {
    pub packet_id: u16,
}

impl PacketCzNotifyActorinit {
    pub fn from(buffer: &[u8]) -> PacketCzNotifyActorinit {
        PacketCzNotifyActorinit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzNotifyActorinit {
    fn id(&self) -> &str {
       "0x7d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzNotifyActorinit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzNotifyActorinit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzRequestTime {
    pub packet_id: u16,
    pub client_time: u32,
}

impl PacketCzRequestTime {
    pub fn from(buffer: &[u8]) -> PacketCzRequestTime {
        PacketCzRequestTime {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            client_time: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzRequestTime {
    fn id(&self) -> &str {
       "0x7e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestTime")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("client_time[2, 6]", &self.client_time)
        .finish()
    }
}

pub struct PacketZcNotifyTime {
    pub packet_id: u16,
    pub time: u32,
}

impl PacketZcNotifyTime {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyTime {
        PacketZcNotifyTime {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            time: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcNotifyTime {
    fn id(&self) -> &str {
       "0x7f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyTime")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("time[2, 6]", &self.time)
        .finish()
    }
}

pub struct PacketZcNotifyVanish {
    pub packet_id: u16,
    pub gid: u32,
    pub type_: char,
}

impl PacketZcNotifyVanish {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyVanish {
        PacketZcNotifyVanish {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
        }
    }
}

impl Packet for PacketZcNotifyVanish {
    fn id(&self) -> &str {
       "0x8000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyVanish {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyVanish")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("type_[6, 7]", &self.type_)
        .finish()
    }
}

pub struct PacketScNotifyBan {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketScNotifyBan {
    pub fn from(buffer: &[u8]) -> PacketScNotifyBan {
        PacketScNotifyBan {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketScNotifyBan {
    fn id(&self) -> &str {
       "0x8100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketScNotifyBan {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketScNotifyBan")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketCzRequestQuit {
    pub packet_id: u16,
}

impl PacketCzRequestQuit {
    pub fn from(buffer: &[u8]) -> PacketCzRequestQuit {
        PacketCzRequestQuit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzRequestQuit {
    fn id(&self) -> &str {
       "0x8200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestQuit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcAcceptQuit {
    pub packet_id: u16,
}

impl PacketZcAcceptQuit {
    pub fn from(buffer: &[u8]) -> PacketZcAcceptQuit {
        PacketZcAcceptQuit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcAcceptQuit {
    fn id(&self) -> &str {
       "0x8300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAcceptQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAcceptQuit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcRefuseQuit {
    pub packet_id: u16,
}

impl PacketZcRefuseQuit {
    pub fn from(buffer: &[u8]) -> PacketZcRefuseQuit {
        PacketZcRefuseQuit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcRefuseQuit {
    fn id(&self) -> &str {
       "0x8400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRefuseQuit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRefuseQuit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzRequestMove {
    pub packet_id: u16,
    pub dest: String,
}

impl PacketCzRequestMove {
    pub fn from(buffer: &[u8]) -> PacketCzRequestMove {
        PacketCzRequestMove {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            dest: String::from_utf8_lossy(&buffer[2..5]).to_string(),
        }
    }
}

impl Packet for PacketCzRequestMove {
    fn id(&self) -> &str {
       "0x8500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestMove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMove")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("dest[2, 5]", &self.dest)
        .finish()
    }
}

pub struct PacketZcNotifyMove {
    pub packet_id: u16,
    pub gid: u32,
    pub move_data: String,
    pub move_start_time: u32,
}

impl PacketZcNotifyMove {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMove {
        PacketZcNotifyMove {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            move_data: String::from_utf8_lossy(&buffer[6..12]).to_string(),
            move_start_time: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
        }
    }
}

impl Packet for PacketZcNotifyMove {
    fn id(&self) -> &str {
       "0x8600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMove")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("move_data[6, 12]", &self.move_data)
            .field("move_start_time[12, 16]", &self.move_start_time)
        .finish()
    }
}

pub struct PacketZcNotifyPlayermove {
    pub packet_id: u16,
    pub move_start_time: u32,
    pub move_data: String,
}

impl PacketZcNotifyPlayermove {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPlayermove {
        PacketZcNotifyPlayermove {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            move_start_time: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            move_data: String::from_utf8_lossy(&buffer[6..12]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyPlayermove {
    fn id(&self) -> &str {
       "0x8700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPlayermove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPlayermove")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("move_start_time[2, 6]", &self.move_start_time)
            .field("move_data[6, 12]", &self.move_data)
        .finish()
    }
}

pub struct PacketZcStopmove {
    pub packet_id: u16,
    pub aid: u32,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketZcStopmove {
    pub fn from(buffer: &[u8]) -> PacketZcStopmove {
        PacketZcStopmove {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcStopmove {
    fn id(&self) -> &str {
       "0x8800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStopmove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStopmove")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
        .finish()
    }
}

pub struct PacketCzRequestAct {
    pub packet_id: u16,
    pub target_gid: u32,
    pub action: char,
}

impl PacketCzRequestAct {
    pub fn from(buffer: &[u8]) -> PacketCzRequestAct {
        PacketCzRequestAct {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            target_gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            action: buffer[6] as char,
        }
    }
}

impl Packet for PacketCzRequestAct {
    fn id(&self) -> &str {
       "0x8900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestAct")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("target_gid[2, 6]", &self.target_gid)
            .field("action[6, 7]", &self.action)
        .finish()
    }
}

pub struct PacketZcNotifyAct {
    pub packet_id: u16,
    pub gid: u32,
    pub target_gid: u32,
    pub start_time: u32,
    pub attack_mt: u32,
    pub attacked_mt: u32,
    pub damage: u16,
    pub count: u16,
    pub action: char,
    pub left_damage: u16,
}

impl PacketZcNotifyAct {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyAct {
        PacketZcNotifyAct {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            start_time: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            attack_mt: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            attacked_mt: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            damage: u16::from_le_bytes([buffer[22], buffer[23]]),
            count: u16::from_le_bytes([buffer[24], buffer[25]]),
            action: buffer[26] as char,
            left_damage: u16::from_le_bytes([buffer[27], buffer[28]]),
        }
    }
}

impl Packet for PacketZcNotifyAct {
    fn id(&self) -> &str {
       "0x8a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyAct")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("target_gid[6, 10]", &self.target_gid)
            .field("start_time[10, 14]", &self.start_time)
            .field("attack_mt[14, 18]", &self.attack_mt)
            .field("attacked_mt[18, 22]", &self.attacked_mt)
            .field("damage[22, 24]", &self.damage)
            .field("count[24, 26]", &self.count)
            .field("action[26, 27]", &self.action)
            .field("left_damage[27, 29]", &self.left_damage)
        .finish()
    }
}

pub struct PacketZcNotifyActPosition {
    pub packet_id: u16,
    pub gid: u32,
    pub target_gid: u32,
    pub start_time: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub damage: u16,
    pub count: u16,
    pub action: char,
}

impl PacketZcNotifyActPosition {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyActPosition {
        PacketZcNotifyActPosition {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            start_time: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            x_pos: u16::from_le_bytes([buffer[14], buffer[15]]),
            y_pos: u16::from_le_bytes([buffer[16], buffer[17]]),
            damage: u16::from_le_bytes([buffer[18], buffer[19]]),
            count: u16::from_le_bytes([buffer[20], buffer[21]]),
            action: buffer[22] as char,
        }
    }
}

impl Packet for PacketZcNotifyActPosition {
    fn id(&self) -> &str {
       "0x8b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyActPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyActPosition")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("target_gid[6, 10]", &self.target_gid)
            .field("start_time[10, 14]", &self.start_time)
            .field("x_pos[14, 16]", &self.x_pos)
            .field("y_pos[16, 18]", &self.y_pos)
            .field("damage[18, 20]", &self.damage)
            .field("count[20, 22]", &self.count)
            .field("action[22, 23]", &self.action)
        .finish()
    }
}

pub struct PacketCzRequestChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketCzRequestChat {
    pub fn from(buffer: &[u8]) -> PacketCzRequestChat {
        PacketCzRequestChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzRequestChat {
    fn id(&self) -> &str {
       "0x8c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcNotifyChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub gid: u32,
    pub msg: String,
}

impl PacketZcNotifyChat {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyChat {
        PacketZcNotifyChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            msg: String::from_utf8_lossy(&buffer[8..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyChat {
    fn id(&self) -> &str {
       "0x8d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("gid[4, 8]", &self.gid)
            .field("msg[8, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcNotifyPlayerchat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketZcNotifyPlayerchat {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPlayerchat {
        PacketZcNotifyPlayerchat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyPlayerchat {
    fn id(&self) -> &str {
       "0x8e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPlayerchat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPlayerchat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketServerEntryAck {
    pub header: u16,
    pub aid: u32,
}

impl PacketServerEntryAck {
    pub fn from(buffer: &[u8]) -> PacketServerEntryAck {
        PacketServerEntryAck {
            header: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketServerEntryAck {
    fn id(&self) -> &str {
       "0x8f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketServerEntryAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketServerEntryAck")
            .field("id", &self.id())
            .field("header[0, 2]", &self.header)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketCzContactnpc {
    pub packet_id: u16,
    pub naid: u32,
    pub type_: char,
}

impl PacketCzContactnpc {
    pub fn from(buffer: &[u8]) -> PacketCzContactnpc {
        PacketCzContactnpc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
        }
    }
}

impl Packet for PacketCzContactnpc {
    fn id(&self) -> &str {
       "0x9000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzContactnpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzContactnpc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
            .field("type_[6, 7]", &self.type_)
        .finish()
    }
}

pub struct PacketZcNpcackMapmove {
    pub packet_id: u16,
    pub map_name: String,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketZcNpcackMapmove {
    pub fn from(buffer: &[u8]) -> PacketZcNpcackMapmove {
        PacketZcNpcackMapmove {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            map_name: String::from_utf8_lossy(&buffer[2..18]).to_string(),
            x_pos: u16::from_le_bytes([buffer[18], buffer[19]]),
            y_pos: u16::from_le_bytes([buffer[20], buffer[21]]),
        }
    }
}

impl Packet for PacketZcNpcackMapmove {
    fn id(&self) -> &str {
       "0x9100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNpcackMapmove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcackMapmove")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("map_name[2, 18]", &self.map_name)
            .field("x_pos[18, 20]", &self.x_pos)
            .field("y_pos[20, 22]", &self.y_pos)
        .finish()
    }
}

pub struct PacketZcNpcackServermove {
    pub packet_id: u16,
    pub map_name: String,
    pub x_pos: u16,
    pub y_pos: u16,
    pub addr: ZserverAddr,
}

impl PacketZcNpcackServermove {
    pub fn from(buffer: &[u8]) -> PacketZcNpcackServermove {
        PacketZcNpcackServermove {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            map_name: String::from_utf8_lossy(&buffer[2..18]).to_string(),
            x_pos: u16::from_le_bytes([buffer[18], buffer[19]]),
            y_pos: u16::from_le_bytes([buffer[20], buffer[21]]),
            addr: ZserverAddr::from(&buffer[22..buffer.len()]),
        }
    }
}

impl Packet for PacketZcNpcackServermove {
    fn id(&self) -> &str {
       "0x9200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNpcackServermove {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcackServermove")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("map_name[2, 18]", &self.map_name)
            .field("x_pos[18, 20]", &self.x_pos)
            .field("y_pos[20, 22]", &self.y_pos)
            .field("addr[22, ?]", &self.addr)
        .finish()
    }
}

pub struct PacketZcNpcackEnable {
    pub packet_id: u16,
}

impl PacketZcNpcackEnable {
    pub fn from(buffer: &[u8]) -> PacketZcNpcackEnable {
        PacketZcNpcackEnable {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcNpcackEnable {
    fn id(&self) -> &str {
       "0x9300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNpcackEnable {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcackEnable")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzReqname {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqname {
    pub fn from(buffer: &[u8]) -> PacketCzReqname {
        PacketCzReqname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqname {
    fn id(&self) -> &str {
       "0x9400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckReqname {
    pub packet_id: u16,
    pub aid: u32,
    pub cname: String,
}

impl PacketZcAckReqname {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqname {
        PacketZcAckReqname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            cname: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcAckReqname {
    fn id(&self) -> &str {
       "0x9500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("cname[6, 30]", &self.cname)
        .finish()
    }
}

pub struct PacketCzWhisper {
    pub packet_id: u16,
    pub packet_length: u16,
    pub receiver: String,
    pub msg: String,
}

impl PacketCzWhisper {
    pub fn from(buffer: &[u8]) -> PacketCzWhisper {
        PacketCzWhisper {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            receiver: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            msg: String::from_utf8_lossy(&buffer[44..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzWhisper {
    fn id(&self) -> &str {
       "0x9600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzWhisper")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("receiver[4, 28]", &self.receiver)
            .field("msg[44, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcWhisper {
    pub packet_id: u16,
    pub packet_length: u16,
    pub sender: String,
    pub msg: String,
}

impl PacketZcWhisper {
    pub fn from(buffer: &[u8]) -> PacketZcWhisper {
        PacketZcWhisper {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            sender: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            msg: String::from_utf8_lossy(&buffer[44..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcWhisper {
    fn id(&self) -> &str {
       "0x9700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWhisper")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("sender[4, 28]", &self.sender)
            .field("msg[44, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcAckWhisper {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckWhisper {
    pub fn from(buffer: &[u8]) -> PacketZcAckWhisper {
        PacketZcAckWhisper {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckWhisper {
    fn id(&self) -> &str {
       "0x9800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckWhisper {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckWhisper")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzBroadcast {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketCzBroadcast {
    pub fn from(buffer: &[u8]) -> PacketCzBroadcast {
        PacketCzBroadcast {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzBroadcast {
    fn id(&self) -> &str {
       "0x9900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzBroadcast {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBroadcast")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcBroadcast {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketZcBroadcast {
    pub fn from(buffer: &[u8]) -> PacketZcBroadcast {
        PacketZcBroadcast {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcBroadcast {
    fn id(&self) -> &str {
       "0x9a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBroadcast {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBroadcast")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketCzChangeDirection {
    pub packet_id: u16,
    pub head_dir: u16,
    pub dir: char,
}

impl PacketCzChangeDirection {
    pub fn from(buffer: &[u8]) -> PacketCzChangeDirection {
        PacketCzChangeDirection {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            head_dir: u16::from_le_bytes([buffer[2], buffer[3]]),
            dir: buffer[4] as char,
        }
    }
}

impl Packet for PacketCzChangeDirection {
    fn id(&self) -> &str {
       "0x9b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChangeDirection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeDirection")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("head_dir[2, 4]", &self.head_dir)
            .field("dir[4, 5]", &self.dir)
        .finish()
    }
}

pub struct PacketZcChangeDirection {
    pub packet_id: u16,
    pub aid: u32,
    pub head_dir: u16,
    pub dir: char,
}

impl PacketZcChangeDirection {
    pub fn from(buffer: &[u8]) -> PacketZcChangeDirection {
        PacketZcChangeDirection {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            head_dir: u16::from_le_bytes([buffer[6], buffer[7]]),
            dir: buffer[8] as char,
        }
    }
}

impl Packet for PacketZcChangeDirection {
    fn id(&self) -> &str {
       "0x9c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcChangeDirection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeDirection")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("head_dir[6, 8]", &self.head_dir)
            .field("dir[8, 9]", &self.dir)
        .finish()
    }
}

pub struct PacketZcItemEntry {
    pub packet_id: u16,
    pub itaid: u32,
    pub itid: u16,
    pub is_identified: bool,
    pub x_pos: u16,
    pub y_pos: u16,
    pub count: u16,
    pub sub_x: char,
    pub sub_y: char,
}

impl PacketZcItemEntry {
    pub fn from(buffer: &[u8]) -> PacketZcItemEntry {
        PacketZcItemEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itaid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            x_pos: u16::from_le_bytes([buffer[9], buffer[10]]),
            y_pos: u16::from_le_bytes([buffer[11], buffer[12]]),
            count: u16::from_le_bytes([buffer[13], buffer[14]]),
            sub_x: buffer[15] as char,
            sub_y: buffer[16] as char,
        }
    }
}

impl Packet for PacketZcItemEntry {
    fn id(&self) -> &str {
       "0x9d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itaid[2, 6]", &self.itaid)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("x_pos[9, 11]", &self.x_pos)
            .field("y_pos[11, 13]", &self.y_pos)
            .field("count[13, 15]", &self.count)
            .field("sub_x[15, 16]", &self.sub_x)
            .field("sub_y[16, 17]", &self.sub_y)
        .finish()
    }
}

pub struct PacketZcItemFallEntry {
    pub packet_id: u16,
    pub itaid: u32,
    pub itid: u16,
    pub is_identified: bool,
    pub x_pos: u16,
    pub y_pos: u16,
    pub sub_x: char,
    pub sub_y: char,
    pub count: u16,
}

impl PacketZcItemFallEntry {
    pub fn from(buffer: &[u8]) -> PacketZcItemFallEntry {
        PacketZcItemFallEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itaid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            x_pos: u16::from_le_bytes([buffer[9], buffer[10]]),
            y_pos: u16::from_le_bytes([buffer[11], buffer[12]]),
            sub_x: buffer[13] as char,
            sub_y: buffer[14] as char,
            count: u16::from_le_bytes([buffer[15], buffer[16]]),
        }
    }
}

impl Packet for PacketZcItemFallEntry {
    fn id(&self) -> &str {
       "0x9e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemFallEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemFallEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itaid[2, 6]", &self.itaid)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("x_pos[9, 11]", &self.x_pos)
            .field("y_pos[11, 13]", &self.y_pos)
            .field("sub_x[13, 14]", &self.sub_x)
            .field("sub_y[14, 15]", &self.sub_y)
            .field("count[15, 17]", &self.count)
        .finish()
    }
}

pub struct PacketCzItemPickup {
    pub packet_id: u16,
    pub itaid: u32,
}

impl PacketCzItemPickup {
    pub fn from(buffer: &[u8]) -> PacketCzItemPickup {
        PacketCzItemPickup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itaid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzItemPickup {
    fn id(&self) -> &str {
       "0x9f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzItemPickup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemPickup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itaid[2, 6]", &self.itaid)
        .finish()
    }
}

pub struct PacketZcItemPickupAck {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub location: u16,
    pub type_: char,
    pub result: char,
}

impl PacketZcItemPickupAck {
    pub fn from(buffer: &[u8]) -> PacketZcItemPickupAck {
        PacketZcItemPickupAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            is_damaged: buffer[9] == 1,
            refining_level: buffer[10] as char,
            slot: EQUIPSLOTINFO::from(&buffer[11..19]),
            location: u16::from_le_bytes([buffer[19], buffer[20]]),
            type_: buffer[21] as char,
            result: buffer[22] as char,
        }
    }
}

impl Packet for PacketZcItemPickupAck {
    fn id(&self) -> &str {
       "0xa000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemPickupAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("is_damaged[9, 10]", &self.is_damaged)
            .field("refining_level[10, 11]", &self.refining_level)
            .field("slot[11, 19]", &self.slot)
            .field("location[19, 21]", &self.location)
            .field("type_[21, 22]", &self.type_)
            .field("result[22, 23]", &self.result)
        .finish()
    }
}

pub struct PacketZcItemDisappear {
    pub packet_id: u16,
    pub itaid: u32,
}

impl PacketZcItemDisappear {
    pub fn from(buffer: &[u8]) -> PacketZcItemDisappear {
        PacketZcItemDisappear {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itaid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcItemDisappear {
    fn id(&self) -> &str {
       "0xa100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemDisappear {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemDisappear")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itaid[2, 6]", &self.itaid)
        .finish()
    }
}

pub struct PacketCzItemThrow {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
}

impl PacketCzItemThrow {
    pub fn from(buffer: &[u8]) -> PacketCzItemThrow {
        PacketCzItemThrow {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzItemThrow {
    fn id(&self) -> &str {
       "0xa200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzItemThrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemThrow")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct PacketZcNormalItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo>,
}

impl PacketZcNormalItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcNormalItemlist {
        let iter_count = &buffer.len() / 10;
        let mut vec_field: Vec<NormalitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 14 * i;
            vec_field.push(NormalitemExtrainfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcNormalItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcNormalItemlist {
    fn id(&self) -> &str {
       "0xa300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNormalItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 14]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcEquipmentItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo>,
}

impl PacketZcEquipmentItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcEquipmentItemlist {
        let iter_count = &buffer.len() / 20;
        let mut vec_field: Vec<EquipmentitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 24 * i;
            vec_field.push(EquipmentitemExtrainfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcEquipmentItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcEquipmentItemlist {
    fn id(&self) -> &str {
       "0xa400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipmentItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 24]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcStoreNormalItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo>,
}

impl PacketZcStoreNormalItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcStoreNormalItemlist {
        let iter_count = &buffer.len() / 10;
        let mut vec_field: Vec<NormalitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 14 * i;
            vec_field.push(NormalitemExtrainfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcStoreNormalItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcStoreNormalItemlist {
    fn id(&self) -> &str {
       "0xa500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreNormalItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 14]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcStoreEquipmentItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo>,
}

impl PacketZcStoreEquipmentItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcStoreEquipmentItemlist {
        let iter_count = &buffer.len() / 20;
        let mut vec_field: Vec<EquipmentitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 24 * i;
            vec_field.push(EquipmentitemExtrainfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcStoreEquipmentItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcStoreEquipmentItemlist {
    fn id(&self) -> &str {
       "0xa600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEquipmentItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 24]", &self.item_info)
        .finish()
    }
}

pub struct PacketCzUseItem {
    pub packet_id: u16,
    pub index: u16,
    pub aid: u32,
}

impl PacketCzUseItem {
    pub fn from(buffer: &[u8]) -> PacketCzUseItem {
        PacketCzUseItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzUseItem {
    fn id(&self) -> &str {
       "0xa700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("aid[4, 8]", &self.aid)
        .finish()
    }
}

pub struct PacketZcUseItemAck {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
    pub result: bool,
}

impl PacketZcUseItemAck {
    pub fn from(buffer: &[u8]) -> PacketZcUseItemAck {
        PacketZcUseItemAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            result: buffer[6] == 1,
        }
    }
}

impl Packet for PacketZcUseItemAck {
    fn id(&self) -> &str {
       "0xa800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUseItemAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseItemAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
            .field("result[6, 7]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqWearEquip {
    pub packet_id: u16,
    pub index: u16,
    pub wear_location: u16,
}

impl PacketCzReqWearEquip {
    pub fn from(buffer: &[u8]) -> PacketCzReqWearEquip {
        PacketCzReqWearEquip {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            wear_location: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqWearEquip {
    fn id(&self) -> &str {
       "0xa900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqWearEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqWearEquip")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("wear_location[4, 6]", &self.wear_location)
        .finish()
    }
}

pub struct PacketZcReqWearEquipAck {
    pub packet_id: u16,
    pub index: u16,
    pub wear_location: u16,
    pub result: char,
}

impl PacketZcReqWearEquipAck {
    pub fn from(buffer: &[u8]) -> PacketZcReqWearEquipAck {
        PacketZcReqWearEquipAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            wear_location: u16::from_le_bytes([buffer[4], buffer[5]]),
            result: buffer[6] as char,
        }
    }
}

impl Packet for PacketZcReqWearEquipAck {
    fn id(&self) -> &str {
       "0xaa00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqWearEquipAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqWearEquipAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("wear_location[4, 6]", &self.wear_location)
            .field("result[6, 7]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqTakeoffEquip {
    pub packet_id: u16,
    pub index: u16,
}

impl PacketCzReqTakeoffEquip {
    pub fn from(buffer: &[u8]) -> PacketCzReqTakeoffEquip {
        PacketCzReqTakeoffEquip {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReqTakeoffEquip {
    fn id(&self) -> &str {
       "0xab00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqTakeoffEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqTakeoffEquip")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PacketZcReqTakeoffEquipAck {
    pub packet_id: u16,
    pub index: u16,
    pub wear_location: u16,
    pub result: bool,
}

impl PacketZcReqTakeoffEquipAck {
    pub fn from(buffer: &[u8]) -> PacketZcReqTakeoffEquipAck {
        PacketZcReqTakeoffEquipAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            wear_location: u16::from_le_bytes([buffer[4], buffer[5]]),
            result: buffer[6] == 1,
        }
    }
}

impl Packet for PacketZcReqTakeoffEquipAck {
    fn id(&self) -> &str {
       "0xac00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqTakeoffEquipAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqTakeoffEquipAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("wear_location[4, 6]", &self.wear_location)
            .field("result[6, 7]", &self.result)
        .finish()
    }
}

pub struct PacketZcItemThrowAck {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
}

impl PacketZcItemThrowAck {
    pub fn from(buffer: &[u8]) -> PacketZcItemThrowAck {
        PacketZcItemThrowAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcItemThrowAck {
    fn id(&self) -> &str {
       "0xaf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemThrowAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemThrowAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct PacketZcParChange {
    pub packet_id: u16,
    pub var_id: u16,
    pub count: u32,
}

impl PacketZcParChange {
    pub fn from(buffer: &[u8]) -> PacketZcParChange {
        PacketZcParChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            var_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcParChange {
    fn id(&self) -> &str {
       "0xb000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcParChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("var_id[2, 4]", &self.var_id)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketZcLongparChange {
    pub packet_id: u16,
    pub var_id: u16,
    pub amount: u32,
}

impl PacketZcLongparChange {
    pub fn from(buffer: &[u8]) -> PacketZcLongparChange {
        PacketZcLongparChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            var_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            amount: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcLongparChange {
    fn id(&self) -> &str {
       "0xb100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcLongparChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcLongparChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("var_id[2, 4]", &self.var_id)
            .field("amount[4, 8]", &self.amount)
        .finish()
    }
}

pub struct PacketCzRestart {
    pub packet_id: u16,
    pub type_: char,
}

impl PacketCzRestart {
    pub fn from(buffer: &[u8]) -> PacketCzRestart {
        PacketCzRestart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzRestart {
    fn id(&self) -> &str {
       "0xb200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRestart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRestart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
        .finish()
    }
}

pub struct PacketZcRestartAck {
    pub packet_id: u16,
    pub type_: char,
}

impl PacketZcRestartAck {
    pub fn from(buffer: &[u8]) -> PacketZcRestartAck {
        PacketZcRestartAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcRestartAck {
    fn id(&self) -> &str {
       "0xb300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRestartAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRestartAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
        .finish()
    }
}

pub struct PacketZcSayDialog {
    pub packet_id: u16,
    pub packet_length: u16,
    pub naid: u32,
    pub msg: String,
}

impl PacketZcSayDialog {
    pub fn from(buffer: &[u8]) -> PacketZcSayDialog {
        PacketZcSayDialog {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            naid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            msg: String::from_utf8_lossy(&buffer[8..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcSayDialog {
    fn id(&self) -> &str {
       "0xb400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSayDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSayDialog")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("naid[4, 8]", &self.naid)
            .field("msg[8, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcWaitDialog {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketZcWaitDialog {
    pub fn from(buffer: &[u8]) -> PacketZcWaitDialog {
        PacketZcWaitDialog {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcWaitDialog {
    fn id(&self) -> &str {
       "0xb500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcWaitDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWaitDialog")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketZcCloseDialog {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketZcCloseDialog {
    pub fn from(buffer: &[u8]) -> PacketZcCloseDialog {
        PacketZcCloseDialog {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcCloseDialog {
    fn id(&self) -> &str {
       "0xb600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCloseDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCloseDialog")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketZcMenuList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub naid: u32,
    pub msg: String,
}

impl PacketZcMenuList {
    pub fn from(buffer: &[u8]) -> PacketZcMenuList {
        PacketZcMenuList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            naid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            msg: String::from_utf8_lossy(&buffer[8..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcMenuList {
    fn id(&self) -> &str {
       "0xb700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMenuList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMenuList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("naid[4, 8]", &self.naid)
            .field("msg[8, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketCzChooseMenu {
    pub packet_id: u16,
    pub naid: u32,
    pub num: char,
}

impl PacketCzChooseMenu {
    pub fn from(buffer: &[u8]) -> PacketCzChooseMenu {
        PacketCzChooseMenu {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            num: buffer[6] as char,
        }
    }
}

impl Packet for PacketCzChooseMenu {
    fn id(&self) -> &str {
       "0xb800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChooseMenu {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChooseMenu")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
            .field("num[6, 7]", &self.num)
        .finish()
    }
}

pub struct PacketCzReqNextScript {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketCzReqNextScript {
    pub fn from(buffer: &[u8]) -> PacketCzReqNextScript {
        PacketCzReqNextScript {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqNextScript {
    fn id(&self) -> &str {
       "0xb900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqNextScript {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqNextScript")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketCzReqStatus {
    pub packet_id: u16,
}

impl PacketCzReqStatus {
    pub fn from(buffer: &[u8]) -> PacketCzReqStatus {
        PacketCzReqStatus {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqStatus {
    fn id(&self) -> &str {
       "0xba00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqStatus")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzStatusChange {
    pub packet_id: u16,
    pub status_id: u16,
    pub change_amount: char,
}

impl PacketCzStatusChange {
    pub fn from(buffer: &[u8]) -> PacketCzStatusChange {
        PacketCzStatusChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            status_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            change_amount: buffer[4] as char,
        }
    }
}

impl Packet for PacketCzStatusChange {
    fn id(&self) -> &str {
       "0xbb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzStatusChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzStatusChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("status_id[2, 4]", &self.status_id)
            .field("change_amount[4, 5]", &self.change_amount)
        .finish()
    }
}

pub struct PacketZcStatusChangeAck {
    pub packet_id: u16,
    pub status_id: u16,
    pub result: bool,
    pub value: char,
}

impl PacketZcStatusChangeAck {
    pub fn from(buffer: &[u8]) -> PacketZcStatusChangeAck {
        PacketZcStatusChangeAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            status_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] == 1,
            value: buffer[5] as char,
        }
    }
}

impl Packet for PacketZcStatusChangeAck {
    fn id(&self) -> &str {
       "0xbc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStatusChangeAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatusChangeAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("status_id[2, 4]", &self.status_id)
            .field("result[4, 5]", &self.result)
            .field("value[5, 6]", &self.value)
        .finish()
    }
}

pub struct PacketZcStatus {
    pub packet_id: u16,
    pub point: u16,
    pub str: char,
    pub standard_str: char,
    pub agi: char,
    pub standard_agi: char,
    pub vit: char,
    pub standard_vit: char,
    pub int: char,
    pub standard_int: char,
    pub dex: char,
    pub standard_dex: char,
    pub luk: char,
    pub standard_luk: char,
    pub att_power: u16,
    pub refining_power: u16,
    pub max_matt_power: u16,
    pub min_matt_power: u16,
    pub itemdef_power: u16,
    pub plusdef_power: u16,
    pub mdef_power: u16,
    pub plusmdef_power: u16,
    pub hit_success_value: u16,
    pub avoid_success_value: u16,
    pub plus_avoid_success_value: u16,
    pub critical_success_value: u16,
    pub aspd: u16,
    pub plus_aspd: u16,
}

impl PacketZcStatus {
    pub fn from(buffer: &[u8]) -> PacketZcStatus {
        PacketZcStatus {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            point: u16::from_le_bytes([buffer[2], buffer[3]]),
            str: buffer[4] as char,
            standard_str: buffer[5] as char,
            agi: buffer[6] as char,
            standard_agi: buffer[7] as char,
            vit: buffer[8] as char,
            standard_vit: buffer[9] as char,
            int: buffer[10] as char,
            standard_int: buffer[11] as char,
            dex: buffer[12] as char,
            standard_dex: buffer[13] as char,
            luk: buffer[14] as char,
            standard_luk: buffer[15] as char,
            att_power: u16::from_le_bytes([buffer[16], buffer[17]]),
            refining_power: u16::from_le_bytes([buffer[18], buffer[19]]),
            max_matt_power: u16::from_le_bytes([buffer[20], buffer[21]]),
            min_matt_power: u16::from_le_bytes([buffer[22], buffer[23]]),
            itemdef_power: u16::from_le_bytes([buffer[24], buffer[25]]),
            plusdef_power: u16::from_le_bytes([buffer[26], buffer[27]]),
            mdef_power: u16::from_le_bytes([buffer[28], buffer[29]]),
            plusmdef_power: u16::from_le_bytes([buffer[30], buffer[31]]),
            hit_success_value: u16::from_le_bytes([buffer[32], buffer[33]]),
            avoid_success_value: u16::from_le_bytes([buffer[34], buffer[35]]),
            plus_avoid_success_value: u16::from_le_bytes([buffer[36], buffer[37]]),
            critical_success_value: u16::from_le_bytes([buffer[38], buffer[39]]),
            aspd: u16::from_le_bytes([buffer[40], buffer[41]]),
            plus_aspd: u16::from_le_bytes([buffer[42], buffer[43]]),
        }
    }
}

impl Packet for PacketZcStatus {
    fn id(&self) -> &str {
       "0xbd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatus")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("point[2, 4]", &self.point)
            .field("str[4, 5]", &self.str)
            .field("standard_str[5, 6]", &self.standard_str)
            .field("agi[6, 7]", &self.agi)
            .field("standard_agi[7, 8]", &self.standard_agi)
            .field("vit[8, 9]", &self.vit)
            .field("standard_vit[9, 10]", &self.standard_vit)
            .field("int[10, 11]", &self.int)
            .field("standard_int[11, 12]", &self.standard_int)
            .field("dex[12, 13]", &self.dex)
            .field("standard_dex[13, 14]", &self.standard_dex)
            .field("luk[14, 15]", &self.luk)
            .field("standard_luk[15, 16]", &self.standard_luk)
            .field("att_power[16, 18]", &self.att_power)
            .field("refining_power[18, 20]", &self.refining_power)
            .field("max_matt_power[20, 22]", &self.max_matt_power)
            .field("min_matt_power[22, 24]", &self.min_matt_power)
            .field("itemdef_power[24, 26]", &self.itemdef_power)
            .field("plusdef_power[26, 28]", &self.plusdef_power)
            .field("mdef_power[28, 30]", &self.mdef_power)
            .field("plusmdef_power[30, 32]", &self.plusmdef_power)
            .field("hit_success_value[32, 34]", &self.hit_success_value)
            .field("avoid_success_value[34, 36]", &self.avoid_success_value)
            .field("plus_avoid_success_value[36, 38]", &self.plus_avoid_success_value)
            .field("critical_success_value[38, 40]", &self.critical_success_value)
            .field("aspd[40, 42]", &self.aspd)
            .field("plus_aspd[42, 44]", &self.plus_aspd)
        .finish()
    }
}

pub struct PacketZcStatusChange {
    pub packet_id: u16,
    pub status_id: u16,
    pub value: char,
}

impl PacketZcStatusChange {
    pub fn from(buffer: &[u8]) -> PacketZcStatusChange {
        PacketZcStatusChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            status_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            value: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcStatusChange {
    fn id(&self) -> &str {
       "0xbe00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStatusChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStatusChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("status_id[2, 4]", &self.status_id)
            .field("value[4, 5]", &self.value)
        .finish()
    }
}

pub struct PacketCzReqEmotion {
    pub packet_id: u16,
    pub type_: char,
}

impl PacketCzReqEmotion {
    pub fn from(buffer: &[u8]) -> PacketCzReqEmotion {
        PacketCzReqEmotion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzReqEmotion {
    fn id(&self) -> &str {
       "0xbf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqEmotion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqEmotion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
        .finish()
    }
}

pub struct PacketZcEmotion {
    pub packet_id: u16,
    pub gid: u32,
    pub type_: char,
}

impl PacketZcEmotion {
    pub fn from(buffer: &[u8]) -> PacketZcEmotion {
        PacketZcEmotion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
        }
    }
}

impl Packet for PacketZcEmotion {
    fn id(&self) -> &str {
       "0xc000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEmotion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEmotion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("type_[6, 7]", &self.type_)
        .finish()
    }
}

pub struct PacketCzReqUserCount {
    pub packet_id: u16,
}

impl PacketCzReqUserCount {
    pub fn from(buffer: &[u8]) -> PacketCzReqUserCount {
        PacketCzReqUserCount {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqUserCount {
    fn id(&self) -> &str {
       "0xc100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqUserCount {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqUserCount")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcUserCount {
    pub packet_id: u16,
    pub count: u32,
}

impl PacketZcUserCount {
    pub fn from(buffer: &[u8]) -> PacketZcUserCount {
        PacketZcUserCount {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            count: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcUserCount {
    fn id(&self) -> &str {
       "0xc200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUserCount {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUserCount")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("count[2, 6]", &self.count)
        .finish()
    }
}

pub struct PacketZcSpriteChange {
    pub packet_id: u16,
    pub gid: u32,
    pub type_: char,
    pub value: char,
}

impl PacketZcSpriteChange {
    pub fn from(buffer: &[u8]) -> PacketZcSpriteChange {
        PacketZcSpriteChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            value: buffer[7] as char,
        }
    }
}

impl Packet for PacketZcSpriteChange {
    fn id(&self) -> &str {
       "0xc300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSpriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpriteChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("type_[6, 7]", &self.type_)
            .field("value[7, 8]", &self.value)
        .finish()
    }
}

pub struct PacketZcSelectDealtype {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketZcSelectDealtype {
    pub fn from(buffer: &[u8]) -> PacketZcSelectDealtype {
        PacketZcSelectDealtype {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcSelectDealtype {
    fn id(&self) -> &str {
       "0xc400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSelectDealtype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSelectDealtype")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketCzAckSelectDealtype {
    pub packet_id: u16,
    pub naid: u32,
    pub type_: char,
}

impl PacketCzAckSelectDealtype {
    pub fn from(buffer: &[u8]) -> PacketCzAckSelectDealtype {
        PacketCzAckSelectDealtype {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
        }
    }
}

impl Packet for PacketCzAckSelectDealtype {
    fn id(&self) -> &str {
       "0xc500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAckSelectDealtype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckSelectDealtype")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
            .field("type_[6, 7]", &self.type_)
        .finish()
    }
}

pub struct PacketZcPcPurchaseItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_list: Vec<PurchaseItem>,
}

impl PacketZcPcPurchaseItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcPcPurchaseItemlist {
        let iter_count = &buffer.len() / 11;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 15 * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPcPurchaseItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcPcPurchaseItemlist {
    fn id(&self) -> &str {
       "0xc600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcPurchaseItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_list[4, 15]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcPcSellItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_list: Vec<SellItem>,
}

impl PacketZcPcSellItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcPcSellItemlist {
        let iter_count = &buffer.len() / 10;
        let mut vec_field: Vec<SellItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 14 * i;
            vec_field.push(SellItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPcSellItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcPcSellItemlist {
    fn id(&self) -> &str {
       "0xc700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcSellItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcSellItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_list[4, 14]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzPcPurchaseItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_list: Vec<CzPurchaseItem>,
}

impl PacketCzPcPurchaseItemlist {
    pub fn from(buffer: &[u8]) -> PacketCzPcPurchaseItemlist {
        let iter_count = &buffer.len() / 4;
        let mut vec_field: Vec<CzPurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 8 * i;
            vec_field.push(CzPurchaseItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzPcPurchaseItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketCzPcPurchaseItemlist {
    fn id(&self) -> &str {
       "0xc800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPcPurchaseItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcPurchaseItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_list[4, 8]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzPcSellItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_list: Vec<CzSellItem>,
}

impl PacketCzPcSellItemlist {
    pub fn from(buffer: &[u8]) -> PacketCzPcSellItemlist {
        let iter_count = &buffer.len() / 4;
        let mut vec_field: Vec<CzSellItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 8 * i;
            vec_field.push(CzSellItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzPcSellItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketCzPcSellItemlist {
    fn id(&self) -> &str {
       "0xc900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPcSellItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcSellItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_list[4, 8]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcPcPurchaseResult {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcPcPurchaseResult {
    pub fn from(buffer: &[u8]) -> PacketZcPcPurchaseResult {
        PacketZcPcPurchaseResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcPcPurchaseResult {
    fn id(&self) -> &str {
       "0xca00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcPurchaseResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcPcSellResult {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcPcSellResult {
    pub fn from(buffer: &[u8]) -> PacketZcPcSellResult {
        PacketZcPcSellResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcPcSellResult {
    fn id(&self) -> &str {
       "0xcb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcSellResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcSellResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzDisconnectCharacter {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzDisconnectCharacter {
    pub fn from(buffer: &[u8]) -> PacketCzDisconnectCharacter {
        PacketCzDisconnectCharacter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzDisconnectCharacter {
    fn id(&self) -> &str {
       "0xcc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzDisconnectCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDisconnectCharacter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckDisconnectCharacter {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckDisconnectCharacter {
    pub fn from(buffer: &[u8]) -> PacketZcAckDisconnectCharacter {
        PacketZcAckDisconnectCharacter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckDisconnectCharacter {
    fn id(&self) -> &str {
       "0xcd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckDisconnectCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckDisconnectCharacter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzDisconnectAllCharacter {
    pub packet_id: u16,
}

impl PacketCzDisconnectAllCharacter {
    pub fn from(buffer: &[u8]) -> PacketCzDisconnectAllCharacter {
        PacketCzDisconnectAllCharacter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzDisconnectAllCharacter {
    fn id(&self) -> &str {
       "0xce00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzDisconnectAllCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDisconnectAllCharacter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzSettingWhisperPc {
    pub packet_id: u16,
    pub name: String,
    pub type_: char,
}

impl PacketCzSettingWhisperPc {
    pub fn from(buffer: &[u8]) -> PacketCzSettingWhisperPc {
        PacketCzSettingWhisperPc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            type_: buffer[26] as char,
        }
    }
}

impl Packet for PacketCzSettingWhisperPc {
    fn id(&self) -> &str {
       "0xcf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSettingWhisperPc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSettingWhisperPc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
            .field("type_[26, 27]", &self.type_)
        .finish()
    }
}

pub struct PacketCzSettingWhisperState {
    pub packet_id: u16,
    pub type_: char,
}

impl PacketCzSettingWhisperState {
    pub fn from(buffer: &[u8]) -> PacketCzSettingWhisperState {
        PacketCzSettingWhisperState {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzSettingWhisperState {
    fn id(&self) -> &str {
       "0xd000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSettingWhisperState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSettingWhisperState")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
        .finish()
    }
}

pub struct PacketZcSettingWhisperPc {
    pub packet_id: u16,
    pub type_: char,
    pub result: char,
}

impl PacketZcSettingWhisperPc {
    pub fn from(buffer: &[u8]) -> PacketZcSettingWhisperPc {
        PacketZcSettingWhisperPc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
            result: buffer[3] as char,
        }
    }
}

impl Packet for PacketZcSettingWhisperPc {
    fn id(&self) -> &str {
       "0xd100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSettingWhisperPc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSettingWhisperPc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
            .field("result[3, 4]", &self.result)
        .finish()
    }
}

pub struct PacketZcSettingWhisperState {
    pub packet_id: u16,
    pub type_: char,
    pub result: char,
}

impl PacketZcSettingWhisperState {
    pub fn from(buffer: &[u8]) -> PacketZcSettingWhisperState {
        PacketZcSettingWhisperState {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
            result: buffer[3] as char,
        }
    }
}

impl Packet for PacketZcSettingWhisperState {
    fn id(&self) -> &str {
       "0xd200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSettingWhisperState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSettingWhisperState")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
            .field("result[3, 4]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqWhisperList {
    pub packet_id: u16,
}

impl PacketCzReqWhisperList {
    pub fn from(buffer: &[u8]) -> PacketCzReqWhisperList {
        PacketCzReqWhisperList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqWhisperList {
    fn id(&self) -> &str {
       "0xd300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqWhisperList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqWhisperList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcWhisperList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub wisper_list: Vec<WhisperItem>,
}

impl PacketZcWhisperList {
    pub fn from(buffer: &[u8]) -> PacketZcWhisperList {
        let iter_count = &buffer.len() / 24;
        let mut vec_field: Vec<WhisperItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 28 * i;
            vec_field.push(WhisperItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcWhisperList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            wisper_list: vec_field,
        }
    }
}

impl Packet for PacketZcWhisperList {
    fn id(&self) -> &str {
       "0xd400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcWhisperList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWhisperList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("wisper_list[4, 28]", &self.wisper_list)
        .finish()
    }
}

pub struct PacketCzCreateChatroom {
    pub packet_id: u16,
    pub packet_length: u16,
    pub size: u16,
    pub type_: char,
    pub passwd: String,
    pub title: String,
}

impl PacketCzCreateChatroom {
    pub fn from(buffer: &[u8]) -> PacketCzCreateChatroom {
        PacketCzCreateChatroom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            size: u16::from_le_bytes([buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            passwd: String::from_utf8_lossy(&buffer[7..15]).to_string(),
            title: String::from_utf8_lossy(&buffer[15..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzCreateChatroom {
    fn id(&self) -> &str {
       "0xd500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCreateChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCreateChatroom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("size[4, 6]", &self.size)
            .field("type_[6, 7]", &self.type_)
            .field("passwd[7, 15]", &self.passwd)
            .field("title[15, ?]", &self.title)
        .finish()
    }
}

pub struct PacketZcAckCreateChatroom {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckCreateChatroom {
    pub fn from(buffer: &[u8]) -> PacketZcAckCreateChatroom {
        PacketZcAckCreateChatroom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckCreateChatroom {
    fn id(&self) -> &str {
       "0xd600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckCreateChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckCreateChatroom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcRoomNewentry {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub room_id: u32,
    pub maxcount: u16,
    pub curcount: u16,
    pub type_: char,
    pub title: String,
}

impl PacketZcRoomNewentry {
    pub fn from(buffer: &[u8]) -> PacketZcRoomNewentry {
        PacketZcRoomNewentry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            room_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            maxcount: u16::from_le_bytes([buffer[12], buffer[13]]),
            curcount: u16::from_le_bytes([buffer[14], buffer[15]]),
            type_: buffer[16] as char,
            title: String::from_utf8_lossy(&buffer[17..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcRoomNewentry {
    fn id(&self) -> &str {
       "0xd700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRoomNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRoomNewentry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("room_id[8, 12]", &self.room_id)
            .field("maxcount[12, 14]", &self.maxcount)
            .field("curcount[14, 16]", &self.curcount)
            .field("type_[16, 17]", &self.type_)
            .field("title[17, ?]", &self.title)
        .finish()
    }
}

pub struct PacketZcDestroyRoom {
    pub packet_id: u16,
    pub room_id: u32,
}

impl PacketZcDestroyRoom {
    pub fn from(buffer: &[u8]) -> PacketZcDestroyRoom {
        PacketZcDestroyRoom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            room_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDestroyRoom {
    fn id(&self) -> &str {
       "0xd800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDestroyRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDestroyRoom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("room_id[2, 6]", &self.room_id)
        .finish()
    }
}

pub struct PacketCzReqEnterRoom {
    pub packet_id: u16,
    pub room_id: u32,
    pub passwd: String,
}

impl PacketCzReqEnterRoom {
    pub fn from(buffer: &[u8]) -> PacketCzReqEnterRoom {
        PacketCzReqEnterRoom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            room_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            passwd: String::from_utf8_lossy(&buffer[6..14]).to_string(),
        }
    }
}

impl Packet for PacketCzReqEnterRoom {
    fn id(&self) -> &str {
       "0xd900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqEnterRoom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("room_id[2, 6]", &self.room_id)
            .field("passwd[6, 14]", &self.passwd)
        .finish()
    }
}

pub struct PacketZcRefuseEnterRoom {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcRefuseEnterRoom {
    pub fn from(buffer: &[u8]) -> PacketZcRefuseEnterRoom {
        PacketZcRefuseEnterRoom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcRefuseEnterRoom {
    fn id(&self) -> &str {
       "0xda00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRefuseEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRefuseEnterRoom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcEnterRoom {
    pub packet_id: u16,
    pub packet_length: u16,
    pub room_id: u32,
    pub member_list: Vec<RoomMember>,
}

impl PacketZcEnterRoom {
    pub fn from(buffer: &[u8]) -> PacketZcEnterRoom {
        let iter_count = &buffer.len() / 28;
        let mut vec_field: Vec<RoomMember> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 36 * i;
            vec_field.push(RoomMember::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcEnterRoom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            room_id: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            member_list: vec_field,
        }
    }
}

impl Packet for PacketZcEnterRoom {
    fn id(&self) -> &str {
       "0xdb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEnterRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEnterRoom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("room_id[4, 8]", &self.room_id)
            .field("member_list[8, 36]", &self.member_list)
        .finish()
    }
}

pub struct PacketZcMemberNewentry {
    pub packet_id: u16,
    pub curcount: u16,
    pub name: String,
}

impl PacketZcMemberNewentry {
    pub fn from(buffer: &[u8]) -> PacketZcMemberNewentry {
        PacketZcMemberNewentry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            curcount: u16::from_le_bytes([buffer[2], buffer[3]]),
            name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
        }
    }
}

impl Packet for PacketZcMemberNewentry {
    fn id(&self) -> &str {
       "0xdc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemberNewentry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemberNewentry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("curcount[2, 4]", &self.curcount)
            .field("name[4, 28]", &self.name)
        .finish()
    }
}

pub struct PacketZcMemberExit {
    pub packet_id: u16,
    pub curcount: u16,
    pub name: String,
    pub type_: char,
}

impl PacketZcMemberExit {
    pub fn from(buffer: &[u8]) -> PacketZcMemberExit {
        PacketZcMemberExit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            curcount: u16::from_le_bytes([buffer[2], buffer[3]]),
            name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            type_: buffer[28] as char,
        }
    }
}

impl Packet for PacketZcMemberExit {
    fn id(&self) -> &str {
       "0xdd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemberExit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemberExit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("curcount[2, 4]", &self.curcount)
            .field("name[4, 28]", &self.name)
            .field("type_[28, 29]", &self.type_)
        .finish()
    }
}

pub struct PacketCzChangeChatroom {
    pub packet_id: u16,
    pub packet_length: u16,
    pub size: u16,
    pub type_: char,
    pub passwd: String,
    pub title: String,
}

impl PacketCzChangeChatroom {
    pub fn from(buffer: &[u8]) -> PacketCzChangeChatroom {
        PacketCzChangeChatroom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            size: u16::from_le_bytes([buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            passwd: String::from_utf8_lossy(&buffer[7..15]).to_string(),
            title: String::from_utf8_lossy(&buffer[15..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzChangeChatroom {
    fn id(&self) -> &str {
       "0xde00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChangeChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeChatroom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("size[4, 6]", &self.size)
            .field("type_[6, 7]", &self.type_)
            .field("passwd[7, 15]", &self.passwd)
            .field("title[15, ?]", &self.title)
        .finish()
    }
}

pub struct PacketZcChangeChatroom {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub room_id: u32,
    pub maxcount: u16,
    pub curcount: u16,
    pub type_: char,
    pub title: String,
}

impl PacketZcChangeChatroom {
    pub fn from(buffer: &[u8]) -> PacketZcChangeChatroom {
        PacketZcChangeChatroom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            room_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            maxcount: u16::from_le_bytes([buffer[12], buffer[13]]),
            curcount: u16::from_le_bytes([buffer[14], buffer[15]]),
            type_: buffer[16] as char,
            title: String::from_utf8_lossy(&buffer[17..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcChangeChatroom {
    fn id(&self) -> &str {
       "0xdf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcChangeChatroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeChatroom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("room_id[8, 12]", &self.room_id)
            .field("maxcount[12, 14]", &self.maxcount)
            .field("curcount[14, 16]", &self.curcount)
            .field("type_[16, 17]", &self.type_)
            .field("title[17, ?]", &self.title)
        .finish()
    }
}

pub struct PacketCzReqRoleChange {
    pub packet_id: u16,
    pub role: u32,
    pub name: String,
}

impl PacketCzReqRoleChange {
    pub fn from(buffer: &[u8]) -> PacketCzReqRoleChange {
        PacketCzReqRoleChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            role: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketCzReqRoleChange {
    fn id(&self) -> &str {
       "0xe000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqRoleChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqRoleChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("role[2, 6]", &self.role)
            .field("name[6, 30]", &self.name)
        .finish()
    }
}

pub struct PacketZcRoleChange {
    pub packet_id: u16,
    pub role: u32,
    pub name: String,
}

impl PacketZcRoleChange {
    pub fn from(buffer: &[u8]) -> PacketZcRoleChange {
        PacketZcRoleChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            role: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcRoleChange {
    fn id(&self) -> &str {
       "0xe100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRoleChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRoleChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("role[2, 6]", &self.role)
            .field("name[6, 30]", &self.name)
        .finish()
    }
}

pub struct PacketCzReqExpelMember {
    pub packet_id: u16,
    pub name: String,
}

impl PacketCzReqExpelMember {
    pub fn from(buffer: &[u8]) -> PacketCzReqExpelMember {
        PacketCzReqExpelMember {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzReqExpelMember {
    fn id(&self) -> &str {
       "0xe200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqExpelMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqExpelMember")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
        .finish()
    }
}

pub struct PacketCzExitRoom {
    pub packet_id: u16,
}

impl PacketCzExitRoom {
    pub fn from(buffer: &[u8]) -> PacketCzExitRoom {
        PacketCzExitRoom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzExitRoom {
    fn id(&self) -> &str {
       "0xe300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzExitRoom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzExitRoom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzReqExchangeItem {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketCzReqExchangeItem {
        PacketCzReqExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqExchangeItem {
    fn id(&self) -> &str {
       "0xe400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcReqExchangeItem {
    pub packet_id: u16,
    pub name: String,
}

impl PacketZcReqExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcReqExchangeItem {
        PacketZcReqExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketZcReqExchangeItem {
    fn id(&self) -> &str {
       "0xe500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
        .finish()
    }
}

pub struct PacketCzAckExchangeItem {
    pub packet_id: u16,
    pub result: char,
}

impl PacketCzAckExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketCzAckExchangeItem {
        PacketCzAckExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzAckExchangeItem {
    fn id(&self) -> &str {
       "0xe600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAckExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcAckExchangeItem {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcAckExchangeItem {
        PacketZcAckExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckExchangeItem {
    fn id(&self) -> &str {
       "0xe700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzAddExchangeItem {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzAddExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketCzAddExchangeItem {
        PacketCzAddExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzAddExchangeItem {
    fn id(&self) -> &str {
       "0xe800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAddExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketZcAddExchangeItem {
    pub packet_id: u16,
    pub count: u32,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PacketZcAddExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcAddExchangeItem {
        PacketZcAddExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            count: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            is_damaged: buffer[9] == 1,
            refining_level: buffer[10] as char,
            slot: EQUIPSLOTINFO::from(&buffer[11..19]),
        }
    }
}

impl Packet for PacketZcAddExchangeItem {
    fn id(&self) -> &str {
       "0xe900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("count[2, 6]", &self.count)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("is_damaged[9, 10]", &self.is_damaged)
            .field("refining_level[10, 11]", &self.refining_level)
            .field("slot[11, 19]", &self.slot)
        .finish()
    }
}

pub struct PacketZcAckAddExchangeItem {
    pub packet_id: u16,
    pub index: u16,
    pub result: char,
}

impl PacketZcAckAddExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcAckAddExchangeItem {
        PacketZcAckAddExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcAckAddExchangeItem {
    fn id(&self) -> &str {
       "0xea00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckAddExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAddExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("result[4, 5]", &self.result)
        .finish()
    }
}

pub struct PacketCzConcludeExchangeItem {
    pub packet_id: u16,
}

impl PacketCzConcludeExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketCzConcludeExchangeItem {
        PacketCzConcludeExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzConcludeExchangeItem {
    fn id(&self) -> &str {
       "0xeb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzConcludeExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzConcludeExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcConcludeExchangeItem {
    pub packet_id: u16,
    pub who: char,
}

impl PacketZcConcludeExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcConcludeExchangeItem {
        PacketZcConcludeExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            who: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcConcludeExchangeItem {
    fn id(&self) -> &str {
       "0xec00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcConcludeExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcConcludeExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("who[2, 3]", &self.who)
        .finish()
    }
}

pub struct PacketCzCancelExchangeItem {
    pub packet_id: u16,
}

impl PacketCzCancelExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketCzCancelExchangeItem {
        PacketCzCancelExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzCancelExchangeItem {
    fn id(&self) -> &str {
       "0xed00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCancelExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCancelExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcCancelExchangeItem {
    pub packet_id: u16,
}

impl PacketZcCancelExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcCancelExchangeItem {
        PacketZcCancelExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcCancelExchangeItem {
    fn id(&self) -> &str {
       "0xee00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCancelExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCancelExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzExecExchangeItem {
    pub packet_id: u16,
}

impl PacketCzExecExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketCzExecExchangeItem {
        PacketCzExecExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzExecExchangeItem {
    fn id(&self) -> &str {
       "0xef00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzExecExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzExecExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcExecExchangeItem {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcExecExchangeItem {
    pub fn from(buffer: &[u8]) -> PacketZcExecExchangeItem {
        PacketZcExecExchangeItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcExecExchangeItem {
    fn id(&self) -> &str {
       "0xf000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcExecExchangeItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcExecExchangeItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcExchangeitemUndo {
    pub packet_id: u16,
}

impl PacketZcExchangeitemUndo {
    pub fn from(buffer: &[u8]) -> PacketZcExchangeitemUndo {
        PacketZcExchangeitemUndo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcExchangeitemUndo {
    fn id(&self) -> &str {
       "0xf100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcExchangeitemUndo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcExchangeitemUndo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcNotifyStoreitemCountinfo {
    pub packet_id: u16,
    pub cur_count: u16,
    pub max_count: u16,
}

impl PacketZcNotifyStoreitemCountinfo {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStoreitemCountinfo {
        PacketZcNotifyStoreitemCountinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            cur_count: u16::from_le_bytes([buffer[2], buffer[3]]),
            max_count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcNotifyStoreitemCountinfo {
    fn id(&self) -> &str {
       "0xf200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStoreitemCountinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStoreitemCountinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("cur_count[2, 4]", &self.cur_count)
            .field("max_count[4, 6]", &self.max_count)
        .finish()
    }
}

pub struct PacketCzMoveItemFromBodyToStore {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMoveItemFromBodyToStore {
    pub fn from(buffer: &[u8]) -> PacketCzMoveItemFromBodyToStore {
        PacketCzMoveItemFromBodyToStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMoveItemFromBodyToStore {
    fn id(&self) -> &str {
       "0xf300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMoveItemFromBodyToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromBodyToStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketZcAddItemToStore {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PacketZcAddItemToStore {
    pub fn from(buffer: &[u8]) -> PacketZcAddItemToStore {
        PacketZcAddItemToStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            itid: u16::from_le_bytes([buffer[8], buffer[9]]),
            is_identified: buffer[10] == 1,
            is_damaged: buffer[11] == 1,
            refining_level: buffer[12] as char,
            slot: EQUIPSLOTINFO::from(&buffer[13..21]),
        }
    }
}

impl Packet for PacketZcAddItemToStore {
    fn id(&self) -> &str {
       "0xf400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddItemToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
            .field("itid[8, 10]", &self.itid)
            .field("is_identified[10, 11]", &self.is_identified)
            .field("is_damaged[11, 12]", &self.is_damaged)
            .field("refining_level[12, 13]", &self.refining_level)
            .field("slot[13, 21]", &self.slot)
        .finish()
    }
}

pub struct PacketCzMoveItemFromStoreToBody {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMoveItemFromStoreToBody {
    pub fn from(buffer: &[u8]) -> PacketCzMoveItemFromStoreToBody {
        PacketCzMoveItemFromStoreToBody {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMoveItemFromStoreToBody {
    fn id(&self) -> &str {
       "0xf500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMoveItemFromStoreToBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromStoreToBody")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketZcDeleteItemFromStore {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketZcDeleteItemFromStore {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteItemFromStore {
        PacketZcDeleteItemFromStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcDeleteItemFromStore {
    fn id(&self) -> &str {
       "0xf600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteItemFromStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteItemFromStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzCloseStore {
    pub packet_id: u16,
}

impl PacketCzCloseStore {
    pub fn from(buffer: &[u8]) -> PacketCzCloseStore {
        PacketCzCloseStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzCloseStore {
    fn id(&self) -> &str {
       "0xf700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCloseStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcCloseStore {
    pub packet_id: u16,
}

impl PacketZcCloseStore {
    pub fn from(buffer: &[u8]) -> PacketZcCloseStore {
        PacketZcCloseStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcCloseStore {
    fn id(&self) -> &str {
       "0xf800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCloseStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCloseStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzMakeGroup {
    pub packet_id: u16,
    pub group_name: String,
}

impl PacketCzMakeGroup {
    pub fn from(buffer: &[u8]) -> PacketCzMakeGroup {
        PacketCzMakeGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            group_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzMakeGroup {
    fn id(&self) -> &str {
       "0xf900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMakeGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMakeGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("group_name[2, 26]", &self.group_name)
        .finish()
    }
}

pub struct PacketZcAckMakeGroup {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckMakeGroup {
    pub fn from(buffer: &[u8]) -> PacketZcAckMakeGroup {
        PacketZcAckMakeGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckMakeGroup {
    fn id(&self) -> &str {
       "0xfa00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckMakeGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMakeGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcGroupList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub group_name: String,
    pub group_info: Vec<GroupmemberInfo>,
}

impl PacketZcGroupList {
    pub fn from(buffer: &[u8]) -> PacketZcGroupList {
        let iter_count = &buffer.len() / 46;
        let mut vec_field: Vec<GroupmemberInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 28 * i;
            let end_pos = 74 * i;
            vec_field.push(GroupmemberInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcGroupList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            group_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            group_info: vec_field,
        }
    }
}

impl Packet for PacketZcGroupList {
    fn id(&self) -> &str {
       "0xfb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGroupList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGroupList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("group_name[4, 28]", &self.group_name)
            .field("group_info[28, 74]", &self.group_info)
        .finish()
    }
}

pub struct PacketCzReqJoinGroup {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqJoinGroup {
    pub fn from(buffer: &[u8]) -> PacketCzReqJoinGroup {
        PacketCzReqJoinGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqJoinGroup {
    fn id(&self) -> &str {
       "0xfc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckReqJoinGroup {
    pub packet_id: u16,
    pub character_name: String,
    pub answer: char,
}

impl PacketZcAckReqJoinGroup {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqJoinGroup {
        PacketZcAckReqJoinGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            character_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            answer: buffer[26] as char,
        }
    }
}

impl Packet for PacketZcAckReqJoinGroup {
    fn id(&self) -> &str {
       "0xfd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqJoinGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("character_name[2, 26]", &self.character_name)
            .field("answer[26, 27]", &self.answer)
        .finish()
    }
}

pub struct PacketZcReqJoinGroup {
    pub packet_id: u16,
    pub grid: u32,
    pub group_name: String,
}

impl PacketZcReqJoinGroup {
    pub fn from(buffer: &[u8]) -> PacketZcReqJoinGroup {
        PacketZcReqJoinGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            grid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            group_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcReqJoinGroup {
    fn id(&self) -> &str {
       "0xfe00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqJoinGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("grid[2, 6]", &self.grid)
            .field("group_name[6, 30]", &self.group_name)
        .finish()
    }
}

pub struct PacketCzJoinGroup {
    pub packet_id: u16,
    pub grid: u32,
    pub answer: u32,
}

impl PacketCzJoinGroup {
    pub fn from(buffer: &[u8]) -> PacketCzJoinGroup {
        PacketCzJoinGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            grid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            answer: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzJoinGroup {
    fn id(&self) -> &str {
       "0xff00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzJoinGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("grid[2, 6]", &self.grid)
            .field("answer[6, 10]", &self.answer)
        .finish()
    }
}

pub struct PacketCzReqLeaveGroup {
    pub packet_id: u16,
}

impl PacketCzReqLeaveGroup {
    pub fn from(buffer: &[u8]) -> PacketCzReqLeaveGroup {
        PacketCzReqLeaveGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqLeaveGroup {
    fn id(&self) -> &str {
       "0x0100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqLeaveGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqLeaveGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcGroupinfoChange {
    pub packet_id: u16,
    pub exp_option: u32,
}

impl PacketZcGroupinfoChange {
    pub fn from(buffer: &[u8]) -> PacketZcGroupinfoChange {
        PacketZcGroupinfoChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            exp_option: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcGroupinfoChange {
    fn id(&self) -> &str {
       "0x0101"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGroupinfoChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGroupinfoChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("exp_option[2, 6]", &self.exp_option)
        .finish()
    }
}

pub struct PacketCzChangeGroupexpoption {
    pub packet_id: u16,
    pub exp_option: u32,
}

impl PacketCzChangeGroupexpoption {
    pub fn from(buffer: &[u8]) -> PacketCzChangeGroupexpoption {
        PacketCzChangeGroupexpoption {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            exp_option: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzChangeGroupexpoption {
    fn id(&self) -> &str {
       "0x0102"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChangeGroupexpoption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeGroupexpoption")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("exp_option[2, 6]", &self.exp_option)
        .finish()
    }
}

pub struct PacketCzReqExpelGroupMember {
    pub packet_id: u16,
    pub aid: u32,
    pub character_name: String,
}

impl PacketCzReqExpelGroupMember {
    pub fn from(buffer: &[u8]) -> PacketCzReqExpelGroupMember {
        PacketCzReqExpelGroupMember {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            character_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketCzReqExpelGroupMember {
    fn id(&self) -> &str {
       "0x0103"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqExpelGroupMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqExpelGroupMember")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("character_name[6, 30]", &self.character_name)
        .finish()
    }
}

pub struct PacketZcAddMemberToGroup {
    pub packet_id: u16,
    pub aid: u32,
    pub role: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub state: char,
    pub group_name: String,
    pub character_name: String,
    pub map_name: String,
}

impl PacketZcAddMemberToGroup {
    pub fn from(buffer: &[u8]) -> PacketZcAddMemberToGroup {
        PacketZcAddMemberToGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            role: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            state: buffer[14] as char,
            group_name: String::from_utf8_lossy(&buffer[15..39]).to_string(),
            character_name: String::from_utf8_lossy(&buffer[39..63]).to_string(),
            map_name: String::from_utf8_lossy(&buffer[63..79]).to_string(),
        }
    }
}

impl Packet for PacketZcAddMemberToGroup {
    fn id(&self) -> &str {
       "0x0104"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddMemberToGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddMemberToGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("role[6, 10]", &self.role)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("state[14, 15]", &self.state)
            .field("group_name[15, 39]", &self.group_name)
            .field("character_name[39, 63]", &self.character_name)
            .field("map_name[63, 79]", &self.map_name)
        .finish()
    }
}

pub struct PacketZcDeleteMemberFromGroup {
    pub packet_id: u16,
    pub aid: u32,
    pub character_name: String,
    pub result: char,
}

impl PacketZcDeleteMemberFromGroup {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteMemberFromGroup {
        PacketZcDeleteMemberFromGroup {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            character_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            result: buffer[30] as char,
        }
    }
}

impl Packet for PacketZcDeleteMemberFromGroup {
    fn id(&self) -> &str {
       "0x0105"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteMemberFromGroup {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteMemberFromGroup")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("character_name[6, 30]", &self.character_name)
            .field("result[30, 31]", &self.result)
        .finish()
    }
}

pub struct PacketZcNotifyHpToGroupm {
    pub packet_id: u16,
    pub aid: u32,
    pub hp: u16,
    pub maxhp: u16,
}

impl PacketZcNotifyHpToGroupm {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyHpToGroupm {
        PacketZcNotifyHpToGroupm {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            hp: u16::from_le_bytes([buffer[6], buffer[7]]),
            maxhp: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcNotifyHpToGroupm {
    fn id(&self) -> &str {
       "0x0106"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyHpToGroupm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyHpToGroupm")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("hp[6, 8]", &self.hp)
            .field("maxhp[8, 10]", &self.maxhp)
        .finish()
    }
}

pub struct PacketZcNotifyPositionToGroupm {
    pub packet_id: u16,
    pub aid: u32,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketZcNotifyPositionToGroupm {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPositionToGroupm {
        PacketZcNotifyPositionToGroupm {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcNotifyPositionToGroupm {
    fn id(&self) -> &str {
       "0x0107"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPositionToGroupm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPositionToGroupm")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
        .finish()
    }
}

pub struct PacketCzRequestChatParty {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketCzRequestChatParty {
    pub fn from(buffer: &[u8]) -> PacketCzRequestChatParty {
        PacketCzRequestChatParty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzRequestChatParty {
    fn id(&self) -> &str {
       "0x0108"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestChatParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestChatParty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcNotifyChatParty {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub msg: String,
}

impl PacketZcNotifyChatParty {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyChatParty {
        PacketZcNotifyChatParty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            msg: String::from_utf8_lossy(&buffer[8..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyChatParty {
    fn id(&self) -> &str {
       "0x0109"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyChatParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyChatParty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("msg[8, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcMvpGettingItem {
    pub packet_id: u16,
    pub itid: u16,
}

impl PacketZcMvpGettingItem {
    pub fn from(buffer: &[u8]) -> PacketZcMvpGettingItem {
        PacketZcMvpGettingItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcMvpGettingItem {
    fn id(&self) -> &str {
       "0x010a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMvpGettingItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMvpGettingItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itid[2, 4]", &self.itid)
        .finish()
    }
}

pub struct PacketZcMvpGettingSpecialExp {
    pub packet_id: u16,
    pub exp: u32,
}

impl PacketZcMvpGettingSpecialExp {
    pub fn from(buffer: &[u8]) -> PacketZcMvpGettingSpecialExp {
        PacketZcMvpGettingSpecialExp {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            exp: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcMvpGettingSpecialExp {
    fn id(&self) -> &str {
       "0x010b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMvpGettingSpecialExp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMvpGettingSpecialExp")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("exp[2, 6]", &self.exp)
        .finish()
    }
}

pub struct PacketZcMvp {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketZcMvp {
    pub fn from(buffer: &[u8]) -> PacketZcMvp {
        PacketZcMvp {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcMvp {
    fn id(&self) -> &str {
       "0x010c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMvp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMvp")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcThrowMvpitem {
    pub packet_id: u16,
}

impl PacketZcThrowMvpitem {
    pub fn from(buffer: &[u8]) -> PacketZcThrowMvpitem {
        PacketZcThrowMvpitem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcThrowMvpitem {
    fn id(&self) -> &str {
       "0x010d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcThrowMvpitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcThrowMvpitem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcSkillinfoUpdate {
    pub packet_id: u16,
    pub skid: u16,
    pub level: u16,
    pub spcost: u16,
    pub attack_range: u16,
    pub upgradable: bool,
}

impl PacketZcSkillinfoUpdate {
    pub fn from(buffer: &[u8]) -> PacketZcSkillinfoUpdate {
        PacketZcSkillinfoUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            level: u16::from_le_bytes([buffer[4], buffer[5]]),
            spcost: u16::from_le_bytes([buffer[6], buffer[7]]),
            attack_range: u16::from_le_bytes([buffer[8], buffer[9]]),
            upgradable: buffer[10] == 1,
        }
    }
}

impl Packet for PacketZcSkillinfoUpdate {
    fn id(&self) -> &str {
       "0x010e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillinfoUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("level[4, 6]", &self.level)
            .field("spcost[6, 8]", &self.spcost)
            .field("attack_range[8, 10]", &self.attack_range)
            .field("upgradable[10, 11]", &self.upgradable)
        .finish()
    }
}

pub struct PacketZcSkillinfoList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub skill_list: Vec<SKILLINFO>,
}

impl PacketZcSkillinfoList {
    pub fn from(buffer: &[u8]) -> PacketZcSkillinfoList {
        let iter_count = &buffer.len() / 37;
        let mut vec_field: Vec<SKILLINFO> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 41 * i;
            vec_field.push(SKILLINFO::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcSkillinfoList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            skill_list: vec_field,
        }
    }
}

impl Packet for PacketZcSkillinfoList {
    fn id(&self) -> &str {
       "0x010f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillinfoList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("skill_list[4, 41]", &self.skill_list)
        .finish()
    }
}

pub struct PacketZcAckTouseskill {
    pub packet_id: u16,
    pub skid: u16,
    pub num: u32,
    pub result: bool,
    pub cause: char,
}

impl PacketZcAckTouseskill {
    pub fn from(buffer: &[u8]) -> PacketZcAckTouseskill {
        PacketZcAckTouseskill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            num: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            result: buffer[8] == 1,
            cause: buffer[9] as char,
        }
    }
}

impl Packet for PacketZcAckTouseskill {
    fn id(&self) -> &str {
       "0x0110"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckTouseskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckTouseskill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("num[4, 8]", &self.num)
            .field("result[8, 9]", &self.result)
            .field("cause[9, 10]", &self.cause)
        .finish()
    }
}

pub struct PacketZcAddSkill {
    pub packet_id: u16,
    pub data: SKILLINFO,
}

impl PacketZcAddSkill {
    pub fn from(buffer: &[u8]) -> PacketZcAddSkill {
        PacketZcAddSkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            data: SKILLINFO::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcAddSkill {
    fn id(&self) -> &str {
       "0x0111"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddSkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("data[2, ?]", &self.data)
        .finish()
    }
}

pub struct PacketCzUpgradeSkilllevel {
    pub packet_id: u16,
    pub skid: u16,
}

impl PacketCzUpgradeSkilllevel {
    pub fn from(buffer: &[u8]) -> PacketCzUpgradeSkilllevel {
        PacketCzUpgradeSkilllevel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzUpgradeSkilllevel {
    fn id(&self) -> &str {
       "0x0112"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUpgradeSkilllevel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUpgradeSkilllevel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
        .finish()
    }
}

pub struct PacketCzUseSkill {
    pub packet_id: u16,
    pub selected_level: u16,
    pub skid: u16,
    pub target_id: u32,
}

impl PacketCzUseSkill {
    pub fn from(buffer: &[u8]) -> PacketCzUseSkill {
        PacketCzUseSkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            selected_level: u16::from_le_bytes([buffer[2], buffer[3]]),
            skid: u16::from_le_bytes([buffer[4], buffer[5]]),
            target_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzUseSkill {
    fn id(&self) -> &str {
       "0x0113"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("selected_level[2, 4]", &self.selected_level)
            .field("skid[4, 6]", &self.skid)
            .field("target_id[6, 10]", &self.target_id)
        .finish()
    }
}

pub struct PacketZcNotifySkill {
    pub packet_id: u16,
    pub skid: u16,
    pub aid: u32,
    pub target_id: u32,
    pub start_time: u32,
    pub attack_mt: u32,
    pub attacked_mt: u32,
    pub damage: u16,
    pub level: u16,
    pub count: u16,
    pub action: char,
}

impl PacketZcNotifySkill {
    pub fn from(buffer: &[u8]) -> PacketZcNotifySkill {
        PacketZcNotifySkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            target_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            start_time: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            attack_mt: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            attacked_mt: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            damage: u16::from_le_bytes([buffer[24], buffer[25]]),
            level: u16::from_le_bytes([buffer[26], buffer[27]]),
            count: u16::from_le_bytes([buffer[28], buffer[29]]),
            action: buffer[30] as char,
        }
    }
}

impl Packet for PacketZcNotifySkill {
    fn id(&self) -> &str {
       "0x0114"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifySkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifySkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("aid[4, 8]", &self.aid)
            .field("target_id[8, 12]", &self.target_id)
            .field("start_time[12, 16]", &self.start_time)
            .field("attack_mt[16, 20]", &self.attack_mt)
            .field("attacked_mt[20, 24]", &self.attacked_mt)
            .field("damage[24, 26]", &self.damage)
            .field("level[26, 28]", &self.level)
            .field("count[28, 30]", &self.count)
            .field("action[30, 31]", &self.action)
        .finish()
    }
}

pub struct PacketZcNotifySkillPosition {
    pub packet_id: u16,
    pub skid: u16,
    pub aid: u32,
    pub target_id: u32,
    pub start_time: u32,
    pub attack_mt: u32,
    pub attacked_mt: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub damage: u16,
    pub level: u16,
    pub count: u16,
    pub action: char,
}

impl PacketZcNotifySkillPosition {
    pub fn from(buffer: &[u8]) -> PacketZcNotifySkillPosition {
        PacketZcNotifySkillPosition {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            target_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            start_time: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            attack_mt: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            attacked_mt: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            x_pos: u16::from_le_bytes([buffer[24], buffer[25]]),
            y_pos: u16::from_le_bytes([buffer[26], buffer[27]]),
            damage: u16::from_le_bytes([buffer[28], buffer[29]]),
            level: u16::from_le_bytes([buffer[30], buffer[31]]),
            count: u16::from_le_bytes([buffer[32], buffer[33]]),
            action: buffer[34] as char,
        }
    }
}

impl Packet for PacketZcNotifySkillPosition {
    fn id(&self) -> &str {
       "0x0115"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifySkillPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifySkillPosition")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("aid[4, 8]", &self.aid)
            .field("target_id[8, 12]", &self.target_id)
            .field("start_time[12, 16]", &self.start_time)
            .field("attack_mt[16, 20]", &self.attack_mt)
            .field("attacked_mt[20, 24]", &self.attacked_mt)
            .field("x_pos[24, 26]", &self.x_pos)
            .field("y_pos[26, 28]", &self.y_pos)
            .field("damage[28, 30]", &self.damage)
            .field("level[30, 32]", &self.level)
            .field("count[32, 34]", &self.count)
            .field("action[34, 35]", &self.action)
        .finish()
    }
}

pub struct PacketCzUseSkillToground {
    pub packet_id: u16,
    pub selected_level: u16,
    pub skid: u16,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketCzUseSkillToground {
    pub fn from(buffer: &[u8]) -> PacketCzUseSkillToground {
        PacketCzUseSkillToground {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            selected_level: u16::from_le_bytes([buffer[2], buffer[3]]),
            skid: u16::from_le_bytes([buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzUseSkillToground {
    fn id(&self) -> &str {
       "0x0116"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUseSkillToground {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkillToground")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("selected_level[2, 4]", &self.selected_level)
            .field("skid[4, 6]", &self.skid)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
        .finish()
    }
}

pub struct PacketZcNotifyGroundskill {
    pub packet_id: u16,
    pub skid: u16,
    pub aid: u32,
    pub level: u16,
    pub x_pos: u16,
    pub y_pos: u16,
    pub start_time: u32,
}

impl PacketZcNotifyGroundskill {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyGroundskill {
        PacketZcNotifyGroundskill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            level: u16::from_le_bytes([buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            start_time: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
        }
    }
}

impl Packet for PacketZcNotifyGroundskill {
    fn id(&self) -> &str {
       "0x0117"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyGroundskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyGroundskill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("aid[4, 8]", &self.aid)
            .field("level[8, 10]", &self.level)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("start_time[14, 18]", &self.start_time)
        .finish()
    }
}

pub struct PacketCzCancelLockon {
    pub packet_id: u16,
}

impl PacketCzCancelLockon {
    pub fn from(buffer: &[u8]) -> PacketCzCancelLockon {
        PacketCzCancelLockon {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzCancelLockon {
    fn id(&self) -> &str {
       "0x0118"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCancelLockon {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCancelLockon")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcStateChange {
    pub packet_id: u16,
    pub aid: u32,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub is_pkmode_on: bool,
}

impl PacketZcStateChange {
    pub fn from(buffer: &[u8]) -> PacketZcStateChange {
        PacketZcStateChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            body_state: u16::from_le_bytes([buffer[6], buffer[7]]),
            health_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            effect_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            is_pkmode_on: buffer[12] == 1,
        }
    }
}

impl Packet for PacketZcStateChange {
    fn id(&self) -> &str {
       "0x0119"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStateChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStateChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("body_state[6, 8]", &self.body_state)
            .field("health_state[8, 10]", &self.health_state)
            .field("effect_state[10, 12]", &self.effect_state)
            .field("is_pkmode_on[12, 13]", &self.is_pkmode_on)
        .finish()
    }
}

pub struct PacketZcUseSkill {
    pub packet_id: u16,
    pub skid: u16,
    pub level: u16,
    pub target_aid: u32,
    pub src_aid: u32,
    pub result: bool,
}

impl PacketZcUseSkill {
    pub fn from(buffer: &[u8]) -> PacketZcUseSkill {
        PacketZcUseSkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            level: u16::from_le_bytes([buffer[4], buffer[5]]),
            target_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            src_aid: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            result: buffer[14] == 1,
        }
    }
}

impl Packet for PacketZcUseSkill {
    fn id(&self) -> &str {
       "0x011a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseSkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("level[4, 6]", &self.level)
            .field("target_aid[6, 10]", &self.target_aid)
            .field("src_aid[10, 14]", &self.src_aid)
            .field("result[14, 15]", &self.result)
        .finish()
    }
}

pub struct PacketCzSelectWarppoint {
    pub packet_id: u16,
    pub skid: u16,
    pub map_name: String,
}

impl PacketCzSelectWarppoint {
    pub fn from(buffer: &[u8]) -> PacketCzSelectWarppoint {
        PacketCzSelectWarppoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            map_name: String::from_utf8_lossy(&buffer[4..20]).to_string(),
        }
    }
}

impl Packet for PacketCzSelectWarppoint {
    fn id(&self) -> &str {
       "0x011b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSelectWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSelectWarppoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("map_name[4, 20]", &self.map_name)
        .finish()
    }
}

pub struct PacketZcWarplist {
    pub packet_id: u16,
    pub skid: u16,
    pub map_name: String,
}

impl PacketZcWarplist {
    pub fn from(buffer: &[u8]) -> PacketZcWarplist {
        PacketZcWarplist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            map_name: String::from_utf8_lossy(&buffer[4..8]).to_string(),
        }
    }
}

impl Packet for PacketZcWarplist {
    fn id(&self) -> &str {
       "0x011c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcWarplist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcWarplist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("map_name[4, 8]", &self.map_name)
        .finish()
    }
}

pub struct PacketCzRememberWarppoint {
    pub packet_id: u16,
}

impl PacketCzRememberWarppoint {
    pub fn from(buffer: &[u8]) -> PacketCzRememberWarppoint {
        PacketCzRememberWarppoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzRememberWarppoint {
    fn id(&self) -> &str {
       "0x011d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRememberWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRememberWarppoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcAckRememberWarppoint {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketZcAckRememberWarppoint {
    pub fn from(buffer: &[u8]) -> PacketZcAckRememberWarppoint {
        PacketZcAckRememberWarppoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckRememberWarppoint {
    fn id(&self) -> &str {
       "0x011e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckRememberWarppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckRememberWarppoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketZcSkillEntry {
    pub packet_id: u16,
    pub aid: u32,
    pub creator_aid: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub job: char,
    pub is_visible: bool,
}

impl PacketZcSkillEntry {
    pub fn from(buffer: &[u8]) -> PacketZcSkillEntry {
        PacketZcSkillEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            creator_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: buffer[14] as char,
            is_visible: buffer[15] == 1,
        }
    }
}

impl Packet for PacketZcSkillEntry {
    fn id(&self) -> &str {
       "0x011f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("creator_aid[6, 10]", &self.creator_aid)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("job[14, 15]", &self.job)
            .field("is_visible[15, 16]", &self.is_visible)
        .finish()
    }
}

pub struct PacketZcSkillDisappear {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketZcSkillDisappear {
    pub fn from(buffer: &[u8]) -> PacketZcSkillDisappear {
        PacketZcSkillDisappear {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcSkillDisappear {
    fn id(&self) -> &str {
       "0x0120"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillDisappear {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillDisappear")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcNotifyCartitemCountinfo {
    pub packet_id: u16,
    pub cur_count: u16,
    pub max_count: u16,
    pub cur_weight: u32,
    pub max_weight: u32,
}

impl PacketZcNotifyCartitemCountinfo {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyCartitemCountinfo {
        PacketZcNotifyCartitemCountinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            cur_count: u16::from_le_bytes([buffer[2], buffer[3]]),
            max_count: u16::from_le_bytes([buffer[4], buffer[5]]),
            cur_weight: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            max_weight: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcNotifyCartitemCountinfo {
    fn id(&self) -> &str {
       "0x0121"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyCartitemCountinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyCartitemCountinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("cur_count[2, 4]", &self.cur_count)
            .field("max_count[4, 6]", &self.max_count)
            .field("cur_weight[6, 10]", &self.cur_weight)
            .field("max_weight[10, 14]", &self.max_weight)
        .finish()
    }
}

pub struct PacketZcCartEquipmentItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo>,
}

impl PacketZcCartEquipmentItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcCartEquipmentItemlist {
        let iter_count = &buffer.len() / 20;
        let mut vec_field: Vec<EquipmentitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 24 * i;
            vec_field.push(EquipmentitemExtrainfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcCartEquipmentItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcCartEquipmentItemlist {
    fn id(&self) -> &str {
       "0x0122"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartEquipmentItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartEquipmentItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 24]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcCartNormalItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo>,
}

impl PacketZcCartNormalItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcCartNormalItemlist {
        let iter_count = &buffer.len() / 10;
        let mut vec_field: Vec<NormalitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 14 * i;
            vec_field.push(NormalitemExtrainfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcCartNormalItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcCartNormalItemlist {
    fn id(&self) -> &str {
       "0x0123"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartNormalItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartNormalItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 14]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcAddItemToCart {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PacketZcAddItemToCart {
    pub fn from(buffer: &[u8]) -> PacketZcAddItemToCart {
        PacketZcAddItemToCart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            itid: u16::from_le_bytes([buffer[8], buffer[9]]),
            is_identified: buffer[10] == 1,
            is_damaged: buffer[11] == 1,
            refining_level: buffer[12] as char,
            slot: EQUIPSLOTINFO::from(&buffer[13..21]),
        }
    }
}

impl Packet for PacketZcAddItemToCart {
    fn id(&self) -> &str {
       "0x0124"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddItemToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToCart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
            .field("itid[8, 10]", &self.itid)
            .field("is_identified[10, 11]", &self.is_identified)
            .field("is_damaged[11, 12]", &self.is_damaged)
            .field("refining_level[12, 13]", &self.refining_level)
            .field("slot[13, 21]", &self.slot)
        .finish()
    }
}

pub struct PacketZcDeleteItemFromCart {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketZcDeleteItemFromCart {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteItemFromCart {
        PacketZcDeleteItemFromCart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcDeleteItemFromCart {
    fn id(&self) -> &str {
       "0x0125"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteItemFromCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteItemFromCart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzMoveItemFromBodyToCart {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMoveItemFromBodyToCart {
    pub fn from(buffer: &[u8]) -> PacketCzMoveItemFromBodyToCart {
        PacketCzMoveItemFromBodyToCart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMoveItemFromBodyToCart {
    fn id(&self) -> &str {
       "0x0126"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMoveItemFromBodyToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromBodyToCart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzMoveItemFromCartToBody {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMoveItemFromCartToBody {
    pub fn from(buffer: &[u8]) -> PacketCzMoveItemFromCartToBody {
        PacketCzMoveItemFromCartToBody {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMoveItemFromCartToBody {
    fn id(&self) -> &str {
       "0x0127"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMoveItemFromCartToBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromCartToBody")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzMoveItemFromStoreToCart {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMoveItemFromStoreToCart {
    pub fn from(buffer: &[u8]) -> PacketCzMoveItemFromStoreToCart {
        PacketCzMoveItemFromStoreToCart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMoveItemFromStoreToCart {
    fn id(&self) -> &str {
       "0x0128"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMoveItemFromStoreToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromStoreToCart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzMoveItemFromCartToStore {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMoveItemFromCartToStore {
    pub fn from(buffer: &[u8]) -> PacketCzMoveItemFromCartToStore {
        PacketCzMoveItemFromCartToStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMoveItemFromCartToStore {
    fn id(&self) -> &str {
       "0x0129"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMoveItemFromCartToStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMoveItemFromCartToStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzReqCartoff {
    pub packet_id: u16,
}

impl PacketCzReqCartoff {
    pub fn from(buffer: &[u8]) -> PacketCzReqCartoff {
        PacketCzReqCartoff {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqCartoff {
    fn id(&self) -> &str {
       "0x012a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqCartoff {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqCartoff")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcCartoff {
    pub packet_id: u16,
}

impl PacketZcCartoff {
    pub fn from(buffer: &[u8]) -> PacketZcCartoff {
        PacketZcCartoff {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcCartoff {
    fn id(&self) -> &str {
       "0x012b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartoff {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartoff")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcAckAdditemToCart {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckAdditemToCart {
    pub fn from(buffer: &[u8]) -> PacketZcAckAdditemToCart {
        PacketZcAckAdditemToCart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckAdditemToCart {
    fn id(&self) -> &str {
       "0x012c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckAdditemToCart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAdditemToCart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcOpenstore {
    pub packet_id: u16,
    pub itemcount: u16,
}

impl PacketZcOpenstore {
    pub fn from(buffer: &[u8]) -> PacketZcOpenstore {
        PacketZcOpenstore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itemcount: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcOpenstore {
    fn id(&self) -> &str {
       "0x012d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcOpenstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenstore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itemcount[2, 4]", &self.itemcount)
        .finish()
    }
}

pub struct PacketCzReqClosestore {
    pub packet_id: u16,
}

impl PacketCzReqClosestore {
    pub fn from(buffer: &[u8]) -> PacketCzReqClosestore {
        PacketCzReqClosestore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqClosestore {
    fn id(&self) -> &str {
       "0x012e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqClosestore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqClosestore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzReqOpenstore {
    pub packet_id: u16,
    pub packet_length: u16,
    pub store_name: String,
    pub store_list: Vec<StoreItem>,
}

impl PacketCzReqOpenstore {
    pub fn from(buffer: &[u8]) -> PacketCzReqOpenstore {
        let iter_count = &buffer.len() / 8;
        let mut vec_field: Vec<StoreItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 84 * i;
            let end_pos = 92 * i;
            vec_field.push(StoreItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzReqOpenstore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            store_name: String::from_utf8_lossy(&buffer[4..84]).to_string(),
            store_list: vec_field,
        }
    }
}

impl Packet for PacketCzReqOpenstore {
    fn id(&self) -> &str {
       "0x012f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqOpenstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenstore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("store_name[4, 84]", &self.store_name)
            .field("store_list[84, 92]", &self.store_list)
        .finish()
    }
}

pub struct PacketCzReqBuyFrommc {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqBuyFrommc {
    pub fn from(buffer: &[u8]) -> PacketCzReqBuyFrommc {
        PacketCzReqBuyFrommc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqBuyFrommc {
    fn id(&self) -> &str {
       "0x0130"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqBuyFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqBuyFrommc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcStoreEntry {
    pub packet_id: u16,
    pub maker_aid: u32,
    pub store_name: String,
}

impl PacketZcStoreEntry {
    pub fn from(buffer: &[u8]) -> PacketZcStoreEntry {
        PacketZcStoreEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            maker_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            store_name: String::from_utf8_lossy(&buffer[6..86]).to_string(),
        }
    }
}

impl Packet for PacketZcStoreEntry {
    fn id(&self) -> &str {
       "0x0131"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("maker_aid[2, 6]", &self.maker_aid)
            .field("store_name[6, 86]", &self.store_name)
        .finish()
    }
}

pub struct PacketZcDisappearEntry {
    pub packet_id: u16,
    pub maker_aid: u32,
}

impl PacketZcDisappearEntry {
    pub fn from(buffer: &[u8]) -> PacketZcDisappearEntry {
        PacketZcDisappearEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            maker_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDisappearEntry {
    fn id(&self) -> &str {
       "0x0132"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDisappearEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDisappearEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("maker_aid[2, 6]", &self.maker_aid)
        .finish()
    }
}

pub struct PacketZcPcPurchaseItemlistFrommc {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub item_list: Vec<PurchaseItemFrommc>,
}

impl PacketZcPcPurchaseItemlistFrommc {
    pub fn from(buffer: &[u8]) -> PacketZcPcPurchaseItemlistFrommc {
        let iter_count = &buffer.len() / 22;
        let mut vec_field: Vec<PurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 30 * i;
            vec_field.push(PurchaseItemFrommc::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPcPurchaseItemlistFrommc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcPcPurchaseItemlistFrommc {
    fn id(&self) -> &str {
       "0x0133"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcPurchaseItemlistFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseItemlistFrommc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("item_list[8, 30]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzPcPurchaseItemlistFrommc {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub item_list: Vec<CzPurchaseItemFrommc>,
}

impl PacketCzPcPurchaseItemlistFrommc {
    pub fn from(buffer: &[u8]) -> PacketCzPcPurchaseItemlistFrommc {
        let iter_count = &buffer.len() / 4;
        let mut vec_field: Vec<CzPurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 12 * i;
            vec_field.push(CzPurchaseItemFrommc::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzPcPurchaseItemlistFrommc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketCzPcPurchaseItemlistFrommc {
    fn id(&self) -> &str {
       "0x0134"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPcPurchaseItemlistFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcPurchaseItemlistFrommc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("item_list[8, 12]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcPcPurchaseResultFrommc {
    pub packet_id: u16,
    pub index: u16,
    pub curcount: u16,
    pub result: char,
}

impl PacketZcPcPurchaseResultFrommc {
    pub fn from(buffer: &[u8]) -> PacketZcPcPurchaseResultFrommc {
        PacketZcPcPurchaseResultFrommc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            curcount: u16::from_le_bytes([buffer[4], buffer[5]]),
            result: buffer[6] as char,
        }
    }
}

impl Packet for PacketZcPcPurchaseResultFrommc {
    fn id(&self) -> &str {
       "0x0135"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcPurchaseResultFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseResultFrommc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("curcount[4, 6]", &self.curcount)
            .field("result[6, 7]", &self.result)
        .finish()
    }
}

pub struct PacketZcPcPurchaseMyitemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub item_list: Vec<PurchaseMyitem>,
}

impl PacketZcPcPurchaseMyitemlist {
    pub fn from(buffer: &[u8]) -> PacketZcPcPurchaseMyitemlist {
        let iter_count = &buffer.len() / 22;
        let mut vec_field: Vec<PurchaseMyitem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 30 * i;
            vec_field.push(PurchaseMyitem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPcPurchaseMyitemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcPcPurchaseMyitemlist {
    fn id(&self) -> &str {
       "0x0136"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcPurchaseMyitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseMyitemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("item_list[8, 30]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcDeleteitemFromMcstore {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
}

impl PacketZcDeleteitemFromMcstore {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteitemFromMcstore {
        PacketZcDeleteitemFromMcstore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDeleteitemFromMcstore {
    fn id(&self) -> &str {
       "0x0137"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteitemFromMcstore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteitemFromMcstore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct PacketCzPkmodeChange {
    pub packet_id: u16,
    pub is_turn_on: bool,
}

impl PacketCzPkmodeChange {
    pub fn from(buffer: &[u8]) -> PacketCzPkmodeChange {
        PacketCzPkmodeChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            is_turn_on: buffer[2] == 1,
        }
    }
}

impl Packet for PacketCzPkmodeChange {
    fn id(&self) -> &str {
       "0x0138"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPkmodeChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPkmodeChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("is_turn_on[2, 3]", &self.is_turn_on)
        .finish()
    }
}

pub struct PacketZcAttackFailureForDistance {
    pub packet_id: u16,
    pub target_aid: u32,
    pub target_xpos: u16,
    pub target_ypos: u16,
    pub x_pos: u16,
    pub y_pos: u16,
    pub current_att_range: u16,
}

impl PacketZcAttackFailureForDistance {
    pub fn from(buffer: &[u8]) -> PacketZcAttackFailureForDistance {
        PacketZcAttackFailureForDistance {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            target_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_xpos: u16::from_le_bytes([buffer[6], buffer[7]]),
            target_ypos: u16::from_le_bytes([buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            current_att_range: u16::from_le_bytes([buffer[14], buffer[15]]),
        }
    }
}

impl Packet for PacketZcAttackFailureForDistance {
    fn id(&self) -> &str {
       "0x0139"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAttackFailureForDistance {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAttackFailureForDistance")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("target_aid[2, 6]", &self.target_aid)
            .field("target_xpos[6, 8]", &self.target_xpos)
            .field("target_ypos[8, 10]", &self.target_ypos)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("current_att_range[14, 16]", &self.current_att_range)
        .finish()
    }
}

pub struct PacketZcAttackRange {
    pub packet_id: u16,
    pub current_att_range: u16,
}

impl PacketZcAttackRange {
    pub fn from(buffer: &[u8]) -> PacketZcAttackRange {
        PacketZcAttackRange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            current_att_range: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcAttackRange {
    fn id(&self) -> &str {
       "0x013a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAttackRange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAttackRange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("current_att_range[2, 4]", &self.current_att_range)
        .finish()
    }
}

pub struct PacketZcActionFailure {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketZcActionFailure {
    pub fn from(buffer: &[u8]) -> PacketZcActionFailure {
        PacketZcActionFailure {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcActionFailure {
    fn id(&self) -> &str {
       "0x013b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcActionFailure {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcActionFailure")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketZcEquipArrow {
    pub packet_id: u16,
    pub index: u16,
}

impl PacketZcEquipArrow {
    pub fn from(buffer: &[u8]) -> PacketZcEquipArrow {
        PacketZcEquipArrow {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcEquipArrow {
    fn id(&self) -> &str {
       "0x013c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEquipArrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipArrow")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PacketZcRecovery {
    pub packet_id: u16,
    pub var_id: u16,
    pub amount: u16,
}

impl PacketZcRecovery {
    pub fn from(buffer: &[u8]) -> PacketZcRecovery {
        PacketZcRecovery {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            var_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            amount: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcRecovery {
    fn id(&self) -> &str {
       "0x013d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRecovery {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRecovery")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("var_id[2, 4]", &self.var_id)
            .field("amount[4, 6]", &self.amount)
        .finish()
    }
}

pub struct PacketZcUseskillAck {
    pub packet_id: u16,
    pub aid: u32,
    pub target_id: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub skid: u16,
    pub property: u32,
    pub delay_time: u32,
}

impl PacketZcUseskillAck {
    pub fn from(buffer: &[u8]) -> PacketZcUseskillAck {
        PacketZcUseskillAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            skid: u16::from_le_bytes([buffer[14], buffer[15]]),
            property: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            delay_time: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
        }
    }
}

impl Packet for PacketZcUseskillAck {
    fn id(&self) -> &str {
       "0x013e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUseskillAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseskillAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("target_id[6, 10]", &self.target_id)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("skid[14, 16]", &self.skid)
            .field("property[16, 20]", &self.property)
            .field("delay_time[20, 24]", &self.delay_time)
        .finish()
    }
}

pub struct PacketCzItemCreate {
    pub packet_id: u16,
    pub item_name: String,
}

impl PacketCzItemCreate {
    pub fn from(buffer: &[u8]) -> PacketCzItemCreate {
        PacketCzItemCreate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            item_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzItemCreate {
    fn id(&self) -> &str {
       "0x013f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzItemCreate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemCreate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("item_name[2, 26]", &self.item_name)
        .finish()
    }
}

pub struct PacketCzMovetoMap {
    pub packet_id: u16,
    pub map_name: String,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketCzMovetoMap {
    pub fn from(buffer: &[u8]) -> PacketCzMovetoMap {
        PacketCzMovetoMap {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            map_name: String::from_utf8_lossy(&buffer[2..18]).to_string(),
            x_pos: u16::from_le_bytes([buffer[18], buffer[19]]),
            y_pos: u16::from_le_bytes([buffer[20], buffer[21]]),
        }
    }
}

impl Packet for PacketCzMovetoMap {
    fn id(&self) -> &str {
       "0x0140"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMovetoMap {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMovetoMap")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("map_name[2, 18]", &self.map_name)
            .field("x_pos[18, 20]", &self.x_pos)
            .field("y_pos[20, 22]", &self.y_pos)
        .finish()
    }
}

pub struct PacketZcCouplestatus {
    pub packet_id: u16,
    pub status_type: u32,
    pub default_status: u32,
    pub plus_status: u32,
}

impl PacketZcCouplestatus {
    pub fn from(buffer: &[u8]) -> PacketZcCouplestatus {
        PacketZcCouplestatus {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            status_type: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            default_status: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            plus_status: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcCouplestatus {
    fn id(&self) -> &str {
       "0x0141"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCouplestatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCouplestatus")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("status_type[2, 6]", &self.status_type)
            .field("default_status[6, 10]", &self.default_status)
            .field("plus_status[10, 14]", &self.plus_status)
        .finish()
    }
}

pub struct PacketZcOpenEditdlg {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketZcOpenEditdlg {
    pub fn from(buffer: &[u8]) -> PacketZcOpenEditdlg {
        PacketZcOpenEditdlg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcOpenEditdlg {
    fn id(&self) -> &str {
       "0x0142"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcOpenEditdlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenEditdlg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketCzInputEditdlg {
    pub packet_id: u16,
    pub naid: u32,
    pub value: u32,
}

impl PacketCzInputEditdlg {
    pub fn from(buffer: &[u8]) -> PacketCzInputEditdlg {
        PacketCzInputEditdlg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            value: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzInputEditdlg {
    fn id(&self) -> &str {
       "0x0143"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzInputEditdlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzInputEditdlg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
            .field("value[6, 10]", &self.value)
        .finish()
    }
}

pub struct PacketZcCompass {
    pub packet_id: u16,
    pub naid: u32,
    pub type_: u32,
    pub x_pos: u32,
    pub y_pos: u32,
    pub id: char,
    pub color: u32,
}

impl PacketZcCompass {
    pub fn from(buffer: &[u8]) -> PacketZcCompass {
        PacketZcCompass {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            y_pos: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            id: buffer[18] as char,
            color: u32::from_le_bytes([buffer[19], buffer[20], buffer[21], buffer[22]]),
        }
    }
}

impl Packet for PacketZcCompass {
    fn id(&self) -> &str {
       "0x0144"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCompass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCompass")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
            .field("type_[6, 10]", &self.type_)
            .field("x_pos[10, 14]", &self.x_pos)
            .field("y_pos[14, 18]", &self.y_pos)
            .field("id[18, 19]", &self.id)
            .field("color[19, 23]", &self.color)
        .finish()
    }
}

pub struct PacketZcShowImage {
    pub packet_id: u16,
    pub image_name: String,
    pub type_: char,
}

impl PacketZcShowImage {
    pub fn from(buffer: &[u8]) -> PacketZcShowImage {
        PacketZcShowImage {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            image_name: String::from_utf8_lossy(&buffer[2..18]).to_string(),
            type_: buffer[18] as char,
        }
    }
}

impl Packet for PacketZcShowImage {
    fn id(&self) -> &str {
       "0x0145"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcShowImage {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShowImage")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("image_name[2, 18]", &self.image_name)
            .field("type_[18, 19]", &self.type_)
        .finish()
    }
}

pub struct PacketCzCloseDialog {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketCzCloseDialog {
    pub fn from(buffer: &[u8]) -> PacketCzCloseDialog {
        PacketCzCloseDialog {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzCloseDialog {
    fn id(&self) -> &str {
       "0x0146"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCloseDialog {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseDialog")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketZcAutorunSkill {
    pub packet_id: u16,
    pub data: SKILLINFO,
}

impl PacketZcAutorunSkill {
    pub fn from(buffer: &[u8]) -> PacketZcAutorunSkill {
        PacketZcAutorunSkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            data: SKILLINFO::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcAutorunSkill {
    fn id(&self) -> &str {
       "0x0147"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAutorunSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAutorunSkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("data[2, ?]", &self.data)
        .finish()
    }
}

pub struct PacketZcResurrection {
    pub packet_id: u16,
    pub aid: u32,
    pub type_: u16,
}

impl PacketZcResurrection {
    pub fn from(buffer: &[u8]) -> PacketZcResurrection {
        PacketZcResurrection {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcResurrection {
    fn id(&self) -> &str {
       "0x0148"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcResurrection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResurrection")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("type_[6, 8]", &self.type_)
        .finish()
    }
}

pub struct PacketCzReqGiveMannerPoint {
    pub packet_id: u16,
    pub other_aid: u32,
    pub type_: char,
    pub point: u16,
}

impl PacketCzReqGiveMannerPoint {
    pub fn from(buffer: &[u8]) -> PacketCzReqGiveMannerPoint {
        PacketCzReqGiveMannerPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            other_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            point: u16::from_le_bytes([buffer[7], buffer[8]]),
        }
    }
}

impl Packet for PacketCzReqGiveMannerPoint {
    fn id(&self) -> &str {
       "0x0149"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqGiveMannerPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGiveMannerPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("other_aid[2, 6]", &self.other_aid)
            .field("type_[6, 7]", &self.type_)
            .field("point[7, 9]", &self.point)
        .finish()
    }
}

pub struct PacketZcAckGiveMannerPoint {
    pub packet_id: u16,
    pub result: u32,
}

impl PacketZcAckGiveMannerPoint {
    pub fn from(buffer: &[u8]) -> PacketZcAckGiveMannerPoint {
        PacketZcAckGiveMannerPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAckGiveMannerPoint {
    fn id(&self) -> &str {
       "0x014a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckGiveMannerPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckGiveMannerPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 6]", &self.result)
        .finish()
    }
}

pub struct PacketZcNotifyMannerPointGiven {
    pub packet_id: u16,
    pub type_: char,
    pub other_char_name: String,
}

impl PacketZcNotifyMannerPointGiven {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMannerPointGiven {
        PacketZcNotifyMannerPointGiven {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
            other_char_name: String::from_utf8_lossy(&buffer[3..27]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyMannerPointGiven {
    fn id(&self) -> &str {
       "0x014b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMannerPointGiven {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMannerPointGiven")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
            .field("other_char_name[3, 27]", &self.other_char_name)
        .finish()
    }
}

pub struct PacketZcMyguildBasicInfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub related_guild_list: Vec<RelatedGuild>,
}

impl PacketZcMyguildBasicInfo {
    pub fn from(buffer: &[u8]) -> PacketZcMyguildBasicInfo {
        let iter_count = &buffer.len() / 32;
        let mut vec_field: Vec<RelatedGuild> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 36 * i;
            vec_field.push(RelatedGuild::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcMyguildBasicInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            related_guild_list: vec_field,
        }
    }
}

impl Packet for PacketZcMyguildBasicInfo {
    fn id(&self) -> &str {
       "0x014c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMyguildBasicInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMyguildBasicInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("related_guild_list[4, 36]", &self.related_guild_list)
        .finish()
    }
}

pub struct PacketCzReqGuildMenuinterface {
    pub packet_id: u16,
}

impl PacketCzReqGuildMenuinterface {
    pub fn from(buffer: &[u8]) -> PacketCzReqGuildMenuinterface {
        PacketCzReqGuildMenuinterface {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqGuildMenuinterface {
    fn id(&self) -> &str {
       "0x014d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqGuildMenuinterface {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildMenuinterface")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcAckGuildMenuinterface {
    pub packet_id: u16,
    pub guild_memu_flag: u32,
}

impl PacketZcAckGuildMenuinterface {
    pub fn from(buffer: &[u8]) -> PacketZcAckGuildMenuinterface {
        PacketZcAckGuildMenuinterface {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            guild_memu_flag: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAckGuildMenuinterface {
    fn id(&self) -> &str {
       "0x014e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckGuildMenuinterface {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckGuildMenuinterface")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("guild_memu_flag[2, 6]", &self.guild_memu_flag)
        .finish()
    }
}

pub struct PacketCzReqGuildMenu {
    pub packet_id: u16,
    pub type_: u32,
}

impl PacketCzReqGuildMenu {
    pub fn from(buffer: &[u8]) -> PacketCzReqGuildMenu {
        PacketCzReqGuildMenu {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqGuildMenu {
    fn id(&self) -> &str {
       "0x014f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqGuildMenu {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildMenu")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 6]", &self.type_)
        .finish()
    }
}

pub struct PacketZcGuildInfo {
    pub packet_id: u16,
    pub gdid: u32,
    pub level: u32,
    pub user_num: u32,
    pub max_user_num: u32,
    pub user_average_level: u32,
    pub exp: u32,
    pub max_exp: u32,
    pub point: u32,
    pub honor: u32,
    pub virtue: u32,
    pub emblem_version: u32,
    pub guildname: String,
    pub master_name: String,
    pub manage_land: String,
}

impl PacketZcGuildInfo {
    pub fn from(buffer: &[u8]) -> PacketZcGuildInfo {
        PacketZcGuildInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            level: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            user_num: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            max_user_num: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            user_average_level: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            exp: u32::from_le_bytes([buffer[22], buffer[23], buffer[24], buffer[25]]),
            max_exp: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            point: u32::from_le_bytes([buffer[30], buffer[31], buffer[32], buffer[33]]),
            honor: u32::from_le_bytes([buffer[34], buffer[35], buffer[36], buffer[37]]),
            virtue: u32::from_le_bytes([buffer[38], buffer[39], buffer[40], buffer[41]]),
            emblem_version: u32::from_le_bytes([buffer[42], buffer[43], buffer[44], buffer[45]]),
            guildname: String::from_utf8_lossy(&buffer[46..70]).to_string(),
            master_name: String::from_utf8_lossy(&buffer[70..94]).to_string(),
            manage_land: String::from_utf8_lossy(&buffer[94..110]).to_string(),
        }
    }
}

impl Packet for PacketZcGuildInfo {
    fn id(&self) -> &str {
       "0x0150"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("level[6, 10]", &self.level)
            .field("user_num[10, 14]", &self.user_num)
            .field("max_user_num[14, 18]", &self.max_user_num)
            .field("user_average_level[18, 22]", &self.user_average_level)
            .field("exp[22, 26]", &self.exp)
            .field("max_exp[26, 30]", &self.max_exp)
            .field("point[30, 34]", &self.point)
            .field("honor[34, 38]", &self.honor)
            .field("virtue[38, 42]", &self.virtue)
            .field("emblem_version[42, 46]", &self.emblem_version)
            .field("guildname[46, 70]", &self.guildname)
            .field("master_name[70, 94]", &self.master_name)
            .field("manage_land[94, 110]", &self.manage_land)
        .finish()
    }
}

pub struct PacketCzReqGuildEmblemImg {
    pub packet_id: u16,
    pub gdid: u32,
}

impl PacketCzReqGuildEmblemImg {
    pub fn from(buffer: &[u8]) -> PacketCzReqGuildEmblemImg {
        PacketCzReqGuildEmblemImg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqGuildEmblemImg {
    fn id(&self) -> &str {
       "0x0151"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildEmblemImg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
        .finish()
    }
}

pub struct PacketZcGuildEmblemImg {
    pub packet_id: u16,
    pub packet_length: u16,
    pub gdid: u32,
    pub emblem_version: u32,
    pub img: String,
}

impl PacketZcGuildEmblemImg {
    pub fn from(buffer: &[u8]) -> PacketZcGuildEmblemImg {
        PacketZcGuildEmblemImg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            gdid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            emblem_version: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            img: String::from_utf8_lossy(&buffer[12..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcGuildEmblemImg {
    fn id(&self) -> &str {
       "0x0152"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildEmblemImg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("gdid[4, 8]", &self.gdid)
            .field("emblem_version[8, 12]", &self.emblem_version)
            .field("img[12, ?]", &self.img)
        .finish()
    }
}

pub struct PacketCzRegisterGuildEmblemImg {
    pub packet_id: u16,
    pub packet_length: u16,
    pub img: String,
}

impl PacketCzRegisterGuildEmblemImg {
    pub fn from(buffer: &[u8]) -> PacketCzRegisterGuildEmblemImg {
        PacketCzRegisterGuildEmblemImg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            img: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzRegisterGuildEmblemImg {
    fn id(&self) -> &str {
       "0x0153"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRegisterGuildEmblemImg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRegisterGuildEmblemImg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("img[4, ?]", &self.img)
        .finish()
    }
}

pub struct PacketZcMembermgrInfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_info: Vec<GuildMembermgrInfo>,
}

impl PacketZcMembermgrInfo {
    pub fn from(buffer: &[u8]) -> PacketZcMembermgrInfo {
        let iter_count = &buffer.len() / 104;
        let mut vec_field: Vec<GuildMembermgrInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 108 * i;
            vec_field.push(GuildMembermgrInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcMembermgrInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_info: vec_field,
        }
    }
}

impl Packet for PacketZcMembermgrInfo {
    fn id(&self) -> &str {
       "0x0154"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMembermgrInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMembermgrInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_info[4, 108]", &self.member_info)
        .finish()
    }
}

pub struct PacketCzReqChangeMemberpos {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_info: Vec<MemberPositionInfo>,
}

impl PacketCzReqChangeMemberpos {
    pub fn from(buffer: &[u8]) -> PacketCzReqChangeMemberpos {
        let iter_count = &buffer.len() / 12;
        let mut vec_field: Vec<MemberPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 16 * i;
            vec_field.push(MemberPositionInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzReqChangeMemberpos {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_info: vec_field,
        }
    }
}

impl Packet for PacketCzReqChangeMemberpos {
    fn id(&self) -> &str {
       "0x0155"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqChangeMemberpos {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqChangeMemberpos")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_info[4, 16]", &self.member_info)
        .finish()
    }
}

pub struct PacketZcAckReqChangeMembers {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_info: Vec<MemberPositionInfo>,
}

impl PacketZcAckReqChangeMembers {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqChangeMembers {
        let iter_count = &buffer.len() / 12;
        let mut vec_field: Vec<MemberPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 16 * i;
            vec_field.push(MemberPositionInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAckReqChangeMembers {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_info: vec_field,
        }
    }
}

impl Packet for PacketZcAckReqChangeMembers {
    fn id(&self) -> &str {
       "0x0156"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqChangeMembers {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqChangeMembers")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_info[4, 16]", &self.member_info)
        .finish()
    }
}

pub struct PacketCzReqOpenMemberInfo {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqOpenMemberInfo {
    pub fn from(buffer: &[u8]) -> PacketCzReqOpenMemberInfo {
        PacketCzReqOpenMemberInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqOpenMemberInfo {
    fn id(&self) -> &str {
       "0x0157"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqOpenMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenMemberInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckOpenMemberInfo {
    pub packet_id: u16,
}

impl PacketZcAckOpenMemberInfo {
    pub fn from(buffer: &[u8]) -> PacketZcAckOpenMemberInfo {
        PacketZcAckOpenMemberInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcAckOpenMemberInfo {
    fn id(&self) -> &str {
       "0x0158"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckOpenMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckOpenMemberInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzReqLeaveGuild {
    pub packet_id: u16,
    pub gdid: u32,
    pub aid: u32,
    pub gid: u32,
    pub reason_desc: String,
}

impl PacketCzReqLeaveGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqLeaveGuild {
        PacketCzReqLeaveGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            gid: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            reason_desc: String::from_utf8_lossy(&buffer[14..54]).to_string(),
        }
    }
}

impl Packet for PacketCzReqLeaveGuild {
    fn id(&self) -> &str {
       "0x0159"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqLeaveGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqLeaveGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("aid[6, 10]", &self.aid)
            .field("gid[10, 14]", &self.gid)
            .field("reason_desc[14, 54]", &self.reason_desc)
        .finish()
    }
}

pub struct PacketZcAckLeaveGuild {
    pub packet_id: u16,
    pub char_name: String,
    pub reason_desc: String,
}

impl PacketZcAckLeaveGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAckLeaveGuild {
        PacketZcAckLeaveGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            reason_desc: String::from_utf8_lossy(&buffer[26..66]).to_string(),
        }
    }
}

impl Packet for PacketZcAckLeaveGuild {
    fn id(&self) -> &str {
       "0x015a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckLeaveGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckLeaveGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_name[2, 26]", &self.char_name)
            .field("reason_desc[26, 66]", &self.reason_desc)
        .finish()
    }
}

pub struct PacketCzReqBanGuild {
    pub packet_id: u16,
    pub gdid: u32,
    pub aid: u32,
    pub gid: u32,
    pub reason_desc: String,
}

impl PacketCzReqBanGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqBanGuild {
        PacketCzReqBanGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            gid: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            reason_desc: String::from_utf8_lossy(&buffer[14..54]).to_string(),
        }
    }
}

impl Packet for PacketCzReqBanGuild {
    fn id(&self) -> &str {
       "0x015b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqBanGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqBanGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("aid[6, 10]", &self.aid)
            .field("gid[10, 14]", &self.gid)
            .field("reason_desc[14, 54]", &self.reason_desc)
        .finish()
    }
}

pub struct PacketZcAckBanGuild {
    pub packet_id: u16,
    pub char_name: String,
    pub reason_desc: String,
    pub account: String,
}

impl PacketZcAckBanGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAckBanGuild {
        PacketZcAckBanGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            reason_desc: String::from_utf8_lossy(&buffer[26..66]).to_string(),
            account: String::from_utf8_lossy(&buffer[66..90]).to_string(),
        }
    }
}

impl Packet for PacketZcAckBanGuild {
    fn id(&self) -> &str {
       "0x015c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckBanGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckBanGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_name[2, 26]", &self.char_name)
            .field("reason_desc[26, 66]", &self.reason_desc)
            .field("account[66, 90]", &self.account)
        .finish()
    }
}

pub struct PacketCzReqDisorganizeGuild {
    pub packet_id: u16,
    pub key: String,
}

impl PacketCzReqDisorganizeGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqDisorganizeGuild {
        PacketCzReqDisorganizeGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            key: String::from_utf8_lossy(&buffer[2..42]).to_string(),
        }
    }
}

impl Packet for PacketCzReqDisorganizeGuild {
    fn id(&self) -> &str {
       "0x015d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqDisorganizeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDisorganizeGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("key[2, 42]", &self.key)
        .finish()
    }
}

pub struct PacketZcAckDisorganizeGuildResult {
    pub packet_id: u16,
    pub reason: u32,
}

impl PacketZcAckDisorganizeGuildResult {
    pub fn from(buffer: &[u8]) -> PacketZcAckDisorganizeGuildResult {
        PacketZcAckDisorganizeGuildResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            reason: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAckDisorganizeGuildResult {
    fn id(&self) -> &str {
       "0x015e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckDisorganizeGuildResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckDisorganizeGuildResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("reason[2, 6]", &self.reason)
        .finish()
    }
}

pub struct PacketZcAckDisorganizeGuild {
    pub packet_id: u16,
    pub reason_desc: String,
}

impl PacketZcAckDisorganizeGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAckDisorganizeGuild {
        PacketZcAckDisorganizeGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            reason_desc: String::from_utf8_lossy(&buffer[2..42]).to_string(),
        }
    }
}

impl Packet for PacketZcAckDisorganizeGuild {
    fn id(&self) -> &str {
       "0x015f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckDisorganizeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckDisorganizeGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("reason_desc[2, 42]", &self.reason_desc)
        .finish()
    }
}

pub struct PacketZcPositionInfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_info: Vec<GuildMemberPositionInfo>,
}

impl PacketZcPositionInfo {
    pub fn from(buffer: &[u8]) -> PacketZcPositionInfo {
        let iter_count = &buffer.len() / 16;
        let mut vec_field: Vec<GuildMemberPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 20 * i;
            vec_field.push(GuildMemberPositionInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPositionInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_info: vec_field,
        }
    }
}

impl Packet for PacketZcPositionInfo {
    fn id(&self) -> &str {
       "0x0160"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPositionInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_info[4, 20]", &self.member_info)
        .finish()
    }
}

pub struct PacketCzRegChangeGuildPositioninfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_list: Vec<GuildRegPositionInfo>,
}

impl PacketCzRegChangeGuildPositioninfo {
    pub fn from(buffer: &[u8]) -> PacketCzRegChangeGuildPositioninfo {
        let iter_count = &buffer.len() / 40;
        let mut vec_field: Vec<GuildRegPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 44 * i;
            vec_field.push(GuildRegPositionInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzRegChangeGuildPositioninfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_list: vec_field,
        }
    }
}

impl Packet for PacketCzRegChangeGuildPositioninfo {
    fn id(&self) -> &str {
       "0x0161"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRegChangeGuildPositioninfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRegChangeGuildPositioninfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_list[4, 44]", &self.member_list)
        .finish()
    }
}

pub struct PacketZcGuildSkillinfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub skill_point: u16,
    pub skill_list: Vec<SKILLINFO>,
}

impl PacketZcGuildSkillinfo {
    pub fn from(buffer: &[u8]) -> PacketZcGuildSkillinfo {
        let iter_count = &buffer.len() / 37;
        let mut vec_field: Vec<SKILLINFO> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 6 * i;
            let end_pos = 43 * i;
            vec_field.push(SKILLINFO::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcGuildSkillinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            skill_point: u16::from_le_bytes([buffer[4], buffer[5]]),
            skill_list: vec_field,
        }
    }
}

impl Packet for PacketZcGuildSkillinfo {
    fn id(&self) -> &str {
       "0x0162"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildSkillinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildSkillinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("skill_point[4, 6]", &self.skill_point)
            .field("skill_list[6, 43]", &self.skill_list)
        .finish()
    }
}

pub struct PacketZcBanList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub ban_list: Vec<GuildBanInfo>,
}

impl PacketZcBanList {
    pub fn from(buffer: &[u8]) -> PacketZcBanList {
        let iter_count = &buffer.len() / 88;
        let mut vec_field: Vec<GuildBanInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 92 * i;
            vec_field.push(GuildBanInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcBanList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            ban_list: vec_field,
        }
    }
}

impl Packet for PacketZcBanList {
    fn id(&self) -> &str {
       "0x0163"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBanList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBanList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("ban_list[4, 92]", &self.ban_list)
        .finish()
    }
}

pub struct PacketZcOtherGuildList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub guild_list: Vec<OtherGuildInfo>,
}

impl PacketZcOtherGuildList {
    pub fn from(buffer: &[u8]) -> PacketZcOtherGuildList {
        let iter_count = &buffer.len() / 36;
        let mut vec_field: Vec<OtherGuildInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 40 * i;
            vec_field.push(OtherGuildInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcOtherGuildList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            guild_list: vec_field,
        }
    }
}

impl Packet for PacketZcOtherGuildList {
    fn id(&self) -> &str {
       "0x0164"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcOtherGuildList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOtherGuildList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("guild_list[4, 40]", &self.guild_list)
        .finish()
    }
}

pub struct PacketCzReqMakeGuild {
    pub packet_id: u16,
    pub gid: u32,
    pub gname: String,
}

impl PacketCzReqMakeGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqMakeGuild {
        PacketCzReqMakeGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gname: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketCzReqMakeGuild {
    fn id(&self) -> &str {
       "0x0165"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqMakeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMakeGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("gname[6, 30]", &self.gname)
        .finish()
    }
}

pub struct PacketZcPositionIdNameInfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_list: Vec<MemberPositionIdNameInfo>,
}

impl PacketZcPositionIdNameInfo {
    pub fn from(buffer: &[u8]) -> PacketZcPositionIdNameInfo {
        let iter_count = &buffer.len() / 28;
        let mut vec_field: Vec<MemberPositionIdNameInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 32 * i;
            vec_field.push(MemberPositionIdNameInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPositionIdNameInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_list: vec_field,
        }
    }
}

impl Packet for PacketZcPositionIdNameInfo {
    fn id(&self) -> &str {
       "0x0166"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPositionIdNameInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPositionIdNameInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_list[4, 32]", &self.member_list)
        .finish()
    }
}

pub struct PacketZcResultMakeGuild {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcResultMakeGuild {
    pub fn from(buffer: &[u8]) -> PacketZcResultMakeGuild {
        PacketZcResultMakeGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcResultMakeGuild {
    fn id(&self) -> &str {
       "0x0167"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcResultMakeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResultMakeGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqJoinGuild {
    pub packet_id: u16,
    pub aid: u32,
    pub my_aid: u32,
    pub my_gid: u32,
}

impl PacketCzReqJoinGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqJoinGuild {
        PacketCzReqJoinGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            my_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            my_gid: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzReqJoinGuild {
    fn id(&self) -> &str {
       "0x0168"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("my_aid[6, 10]", &self.my_aid)
            .field("my_gid[10, 14]", &self.my_gid)
        .finish()
    }
}

pub struct PacketZcAckReqJoinGuild {
    pub packet_id: u16,
    pub answer: char,
}

impl PacketZcAckReqJoinGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqJoinGuild {
        PacketZcAckReqJoinGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            answer: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckReqJoinGuild {
    fn id(&self) -> &str {
       "0x0169"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqJoinGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("answer[2, 3]", &self.answer)
        .finish()
    }
}

pub struct PacketZcReqJoinGuild {
    pub packet_id: u16,
    pub gdid: u32,
    pub guild_name: String,
}

impl PacketZcReqJoinGuild {
    pub fn from(buffer: &[u8]) -> PacketZcReqJoinGuild {
        PacketZcReqJoinGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            guild_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcReqJoinGuild {
    fn id(&self) -> &str {
       "0x016a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqJoinGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("guild_name[6, 30]", &self.guild_name)
        .finish()
    }
}

pub struct PacketCzJoinGuild {
    pub packet_id: u16,
    pub gdid: u32,
    pub answer: u32,
}

impl PacketCzJoinGuild {
    pub fn from(buffer: &[u8]) -> PacketCzJoinGuild {
        PacketCzJoinGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            answer: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzJoinGuild {
    fn id(&self) -> &str {
       "0x016b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzJoinGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("answer[6, 10]", &self.answer)
        .finish()
    }
}

pub struct PacketZcUpdateGdid {
    pub packet_id: u16,
    pub gdid: u32,
    pub emblem_version: u32,
    pub right: u32,
    pub is_master: bool,
    pub inter_sid: u32,
    pub gname: String,
}

impl PacketZcUpdateGdid {
    pub fn from(buffer: &[u8]) -> PacketZcUpdateGdid {
        PacketZcUpdateGdid {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            emblem_version: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            right: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            is_master: buffer[14] == 1,
            inter_sid: u32::from_le_bytes([buffer[15], buffer[16], buffer[17], buffer[18]]),
            gname: String::from_utf8_lossy(&buffer[19..43]).to_string(),
        }
    }
}

impl Packet for PacketZcUpdateGdid {
    fn id(&self) -> &str {
       "0x016c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUpdateGdid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateGdid")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("emblem_version[6, 10]", &self.emblem_version)
            .field("right[10, 14]", &self.right)
            .field("is_master[14, 15]", &self.is_master)
            .field("inter_sid[15, 19]", &self.inter_sid)
            .field("gname[19, 43]", &self.gname)
        .finish()
    }
}

pub struct PacketZcUpdateCharstat {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub status: u32,
}

impl PacketZcUpdateCharstat {
    pub fn from(buffer: &[u8]) -> PacketZcUpdateCharstat {
        PacketZcUpdateCharstat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            status: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcUpdateCharstat {
    fn id(&self) -> &str {
       "0x016d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUpdateCharstat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateCharstat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("status[10, 14]", &self.status)
        .finish()
    }
}

pub struct PacketCzGuildNotice {
    pub packet_id: u16,
    pub gdid: u32,
    pub subject: String,
    pub notice: String,
}

impl PacketCzGuildNotice {
    pub fn from(buffer: &[u8]) -> PacketCzGuildNotice {
        PacketCzGuildNotice {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            subject: String::from_utf8_lossy(&buffer[6..66]).to_string(),
            notice: String::from_utf8_lossy(&buffer[66..186]).to_string(),
        }
    }
}

impl Packet for PacketCzGuildNotice {
    fn id(&self) -> &str {
       "0x016e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzGuildNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGuildNotice")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("subject[6, 66]", &self.subject)
            .field("notice[66, 186]", &self.notice)
        .finish()
    }
}

pub struct PacketZcGuildNotice {
    pub packet_id: u16,
    pub subject: String,
    pub notice: String,
}

impl PacketZcGuildNotice {
    pub fn from(buffer: &[u8]) -> PacketZcGuildNotice {
        PacketZcGuildNotice {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            subject: String::from_utf8_lossy(&buffer[2..62]).to_string(),
            notice: String::from_utf8_lossy(&buffer[62..182]).to_string(),
        }
    }
}

impl Packet for PacketZcGuildNotice {
    fn id(&self) -> &str {
       "0x016f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildNotice")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("subject[2, 62]", &self.subject)
            .field("notice[62, 182]", &self.notice)
        .finish()
    }
}

pub struct PacketCzReqAllyGuild {
    pub packet_id: u16,
    pub aid: u32,
    pub my_aid: u32,
    pub my_gid: u32,
}

impl PacketCzReqAllyGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqAllyGuild {
        PacketCzReqAllyGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            my_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            my_gid: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzReqAllyGuild {
    fn id(&self) -> &str {
       "0x0170"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqAllyGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("my_aid[6, 10]", &self.my_aid)
            .field("my_gid[10, 14]", &self.my_gid)
        .finish()
    }
}

pub struct PacketZcReqAllyGuild {
    pub packet_id: u16,
    pub other_aid: u32,
    pub guild_name: String,
}

impl PacketZcReqAllyGuild {
    pub fn from(buffer: &[u8]) -> PacketZcReqAllyGuild {
        PacketZcReqAllyGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            other_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            guild_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcReqAllyGuild {
    fn id(&self) -> &str {
       "0x0171"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqAllyGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("other_aid[2, 6]", &self.other_aid)
            .field("guild_name[6, 30]", &self.guild_name)
        .finish()
    }
}

pub struct PacketCzAllyGuild {
    pub packet_id: u16,
    pub other_aid: u32,
    pub answer: u32,
}

impl PacketCzAllyGuild {
    pub fn from(buffer: &[u8]) -> PacketCzAllyGuild {
        PacketCzAllyGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            other_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            answer: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzAllyGuild {
    fn id(&self) -> &str {
       "0x0172"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAllyGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("other_aid[2, 6]", &self.other_aid)
            .field("answer[6, 10]", &self.answer)
        .finish()
    }
}

pub struct PacketZcAckReqAllyGuild {
    pub packet_id: u16,
    pub answer: char,
}

impl PacketZcAckReqAllyGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqAllyGuild {
        PacketZcAckReqAllyGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            answer: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckReqAllyGuild {
    fn id(&self) -> &str {
       "0x0173"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqAllyGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqAllyGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("answer[2, 3]", &self.answer)
        .finish()
    }
}

pub struct PacketZcAckChangeGuildPositioninfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub member_list: Vec<GuildRegPositionInfo>,
}

impl PacketZcAckChangeGuildPositioninfo {
    pub fn from(buffer: &[u8]) -> PacketZcAckChangeGuildPositioninfo {
        let iter_count = &buffer.len() / 30;
        let mut vec_field: Vec<GuildRegPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 34 * i;
            vec_field.push(GuildRegPositionInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAckChangeGuildPositioninfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            member_list: vec_field,
        }
    }
}

impl Packet for PacketZcAckChangeGuildPositioninfo {
    fn id(&self) -> &str {
       "0x0174"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckChangeGuildPositioninfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckChangeGuildPositioninfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("member_list[4, 34]", &self.member_list)
        .finish()
    }
}

pub struct PacketCzReqGuildMemberInfo {
    pub packet_id: u16,
    pub gid: u32,
}

impl PacketCzReqGuildMemberInfo {
    pub fn from(buffer: &[u8]) -> PacketCzReqGuildMemberInfo {
        PacketCzReqGuildMemberInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqGuildMemberInfo {
    fn id(&self) -> &str {
       "0x0175"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqGuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGuildMemberInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
        .finish()
    }
}

pub struct PacketZcAckGuildMemberInfo {
    pub packet_id: u16,
    pub info: GuildMemberInfo,
}

impl PacketZcAckGuildMemberInfo {
    pub fn from(buffer: &[u8]) -> PacketZcAckGuildMemberInfo {
        PacketZcAckGuildMemberInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: GuildMemberInfo::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcAckGuildMemberInfo {
    fn id(&self) -> &str {
       "0x0176"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckGuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckGuildMemberInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, ?]", &self.info)
        .finish()
    }
}

pub struct PacketZcItemidentifyList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub itidlist: u16,
}

impl PacketZcItemidentifyList {
    pub fn from(buffer: &[u8]) -> PacketZcItemidentifyList {
        PacketZcItemidentifyList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            itidlist: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcItemidentifyList {
    fn id(&self) -> &str {
       "0x0177"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemidentifyList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemidentifyList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("itidlist[4, 6]", &self.itidlist)
        .finish()
    }
}

pub struct PacketCzReqItemidentify {
    pub packet_id: u16,
    pub index: u16,
}

impl PacketCzReqItemidentify {
    pub fn from(buffer: &[u8]) -> PacketCzReqItemidentify {
        PacketCzReqItemidentify {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReqItemidentify {
    fn id(&self) -> &str {
       "0x0178"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqItemidentify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemidentify")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PacketZcAckItemidentify {
    pub packet_id: u16,
    pub index: u16,
    pub result: char,
}

impl PacketZcAckItemidentify {
    pub fn from(buffer: &[u8]) -> PacketZcAckItemidentify {
        PacketZcAckItemidentify {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcAckItemidentify {
    fn id(&self) -> &str {
       "0x0179"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckItemidentify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemidentify")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("result[4, 5]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqItemcompositionList {
    pub packet_id: u16,
    pub card_index: u16,
}

impl PacketCzReqItemcompositionList {
    pub fn from(buffer: &[u8]) -> PacketCzReqItemcompositionList {
        PacketCzReqItemcompositionList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            card_index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReqItemcompositionList {
    fn id(&self) -> &str {
       "0x017a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqItemcompositionList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemcompositionList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("card_index[2, 4]", &self.card_index)
        .finish()
    }
}

pub struct PacketZcItemcompositionList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub itidlist: u16,
}

impl PacketZcItemcompositionList {
    pub fn from(buffer: &[u8]) -> PacketZcItemcompositionList {
        PacketZcItemcompositionList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            itidlist: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcItemcompositionList {
    fn id(&self) -> &str {
       "0x017b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemcompositionList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemcompositionList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("itidlist[4, 6]", &self.itidlist)
        .finish()
    }
}

pub struct PacketCzReqItemcomposition {
    pub packet_id: u16,
    pub card_index: u16,
    pub equip_index: u16,
}

impl PacketCzReqItemcomposition {
    pub fn from(buffer: &[u8]) -> PacketCzReqItemcomposition {
        PacketCzReqItemcomposition {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            card_index: u16::from_le_bytes([buffer[2], buffer[3]]),
            equip_index: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqItemcomposition {
    fn id(&self) -> &str {
       "0x017c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqItemcomposition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemcomposition")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("card_index[2, 4]", &self.card_index)
            .field("equip_index[4, 6]", &self.equip_index)
        .finish()
    }
}

pub struct PacketZcAckItemcomposition {
    pub packet_id: u16,
    pub equip_index: u16,
    pub card_index: u16,
    pub result: char,
}

impl PacketZcAckItemcomposition {
    pub fn from(buffer: &[u8]) -> PacketZcAckItemcomposition {
        PacketZcAckItemcomposition {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            equip_index: u16::from_le_bytes([buffer[2], buffer[3]]),
            card_index: u16::from_le_bytes([buffer[4], buffer[5]]),
            result: buffer[6] as char,
        }
    }
}

impl Packet for PacketZcAckItemcomposition {
    fn id(&self) -> &str {
       "0x017d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckItemcomposition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemcomposition")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("equip_index[2, 4]", &self.equip_index)
            .field("card_index[4, 6]", &self.card_index)
            .field("result[6, 7]", &self.result)
        .finish()
    }
}

pub struct PacketCzGuildChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketCzGuildChat {
    pub fn from(buffer: &[u8]) -> PacketCzGuildChat {
        PacketCzGuildChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzGuildChat {
    fn id(&self) -> &str {
       "0x017e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzGuildChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGuildChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcGuildChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketZcGuildChat {
    pub fn from(buffer: &[u8]) -> PacketZcGuildChat {
        PacketZcGuildChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcGuildChat {
    fn id(&self) -> &str {
       "0x017f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketCzReqHostileGuild {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqHostileGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqHostileGuild {
        PacketCzReqHostileGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqHostileGuild {
    fn id(&self) -> &str {
       "0x0180"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqHostileGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqHostileGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckReqHostileGuild {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAckReqHostileGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqHostileGuild {
        PacketZcAckReqHostileGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAckReqHostileGuild {
    fn id(&self) -> &str {
       "0x0181"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqHostileGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqHostileGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcMemberAdd {
    pub packet_id: u16,
    pub info: GuildMemberInfo,
}

impl PacketZcMemberAdd {
    pub fn from(buffer: &[u8]) -> PacketZcMemberAdd {
        PacketZcMemberAdd {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: GuildMemberInfo::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcMemberAdd {
    fn id(&self) -> &str {
       "0x0182"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemberAdd {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemberAdd")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, ?]", &self.info)
        .finish()
    }
}

pub struct PacketCzReqDeleteRelatedGuild {
    pub packet_id: u16,
    pub opponent_gdid: u32,
    pub relation: u32,
}

impl PacketCzReqDeleteRelatedGuild {
    pub fn from(buffer: &[u8]) -> PacketCzReqDeleteRelatedGuild {
        PacketCzReqDeleteRelatedGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            opponent_gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            relation: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzReqDeleteRelatedGuild {
    fn id(&self) -> &str {
       "0x0183"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqDeleteRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDeleteRelatedGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("opponent_gdid[2, 6]", &self.opponent_gdid)
            .field("relation[6, 10]", &self.relation)
        .finish()
    }
}

pub struct PacketZcDeleteRelatedGuild {
    pub packet_id: u16,
    pub opponent_gdid: u32,
    pub relation: u32,
}

impl PacketZcDeleteRelatedGuild {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteRelatedGuild {
        PacketZcDeleteRelatedGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            opponent_gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            relation: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcDeleteRelatedGuild {
    fn id(&self) -> &str {
       "0x0184"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteRelatedGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("opponent_gdid[2, 6]", &self.opponent_gdid)
            .field("relation[6, 10]", &self.relation)
        .finish()
    }
}

pub struct PacketZcAddRelatedGuild {
    pub packet_id: u16,
    pub info: RelatedGuildInfo,
}

impl PacketZcAddRelatedGuild {
    pub fn from(buffer: &[u8]) -> PacketZcAddRelatedGuild {
        PacketZcAddRelatedGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: RelatedGuildInfo::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcAddRelatedGuild {
    fn id(&self) -> &str {
       "0x0185"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddRelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddRelatedGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, ?]", &self.info)
        .finish()
    }
}

pub struct PacketCollectordead {
    pub packet_id: u16,
    pub server_id: u32,
}

impl PacketCollectordead {
    pub fn from(buffer: &[u8]) -> PacketCollectordead {
        PacketCollectordead {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            server_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCollectordead {
    fn id(&self) -> &str {
       "0x0186"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCollectordead {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCollectordead")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("server_id[2, 6]", &self.server_id)
        .finish()
    }
}

pub struct PacketPing {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketPing {
    pub fn from(buffer: &[u8]) -> PacketPing {
        PacketPing {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketPing {
    fn id(&self) -> &str {
       "0x0187"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketPing {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketPing")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckItemrefining {
    pub packet_id: u16,
    pub result: u16,
    pub item_index: u16,
    pub refining_level: u16,
}

impl PacketZcAckItemrefining {
    pub fn from(buffer: &[u8]) -> PacketZcAckItemrefining {
        PacketZcAckItemrefining {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_index: u16::from_le_bytes([buffer[4], buffer[5]]),
            refining_level: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcAckItemrefining {
    fn id(&self) -> &str {
       "0x0188"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckItemrefining {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemrefining")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("item_index[4, 6]", &self.item_index)
            .field("refining_level[6, 8]", &self.refining_level)
        .finish()
    }
}

pub struct PacketZcNotifyMapinfo {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketZcNotifyMapinfo {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMapinfo {
        PacketZcNotifyMapinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcNotifyMapinfo {
    fn id(&self) -> &str {
       "0x0189"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMapinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMapinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketCzReqDisconnect {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketCzReqDisconnect {
    pub fn from(buffer: &[u8]) -> PacketCzReqDisconnect {
        PacketCzReqDisconnect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReqDisconnect {
    fn id(&self) -> &str {
       "0x018a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqDisconnect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketZcAckReqDisconnect {
    pub packet_id: u16,
    pub result: u16,
}

impl PacketZcAckReqDisconnect {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqDisconnect {
        PacketZcAckReqDisconnect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcAckReqDisconnect {
    fn id(&self) -> &str {
       "0x018b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqDisconnect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
        .finish()
    }
}

pub struct PacketZcMonsterInfo {
    pub packet_id: u16,
    pub job: u16,
    pub level: u16,
    pub size: u16,
    pub hp: u32,
    pub def: u16,
    pub race_type: u16,
    pub mdef_power: u16,
    pub property: u16,
    pub property_table: MonsterInfoElement,
}

impl PacketZcMonsterInfo {
    pub fn from(buffer: &[u8]) -> PacketZcMonsterInfo {
        PacketZcMonsterInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            job: u16::from_le_bytes([buffer[2], buffer[3]]),
            level: u16::from_le_bytes([buffer[4], buffer[5]]),
            size: u16::from_le_bytes([buffer[6], buffer[7]]),
            hp: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            def: u16::from_le_bytes([buffer[12], buffer[13]]),
            race_type: u16::from_le_bytes([buffer[14], buffer[15]]),
            mdef_power: u16::from_le_bytes([buffer[16], buffer[17]]),
            property: u16::from_le_bytes([buffer[18], buffer[19]]),
            property_table: MonsterInfoElement::from(&buffer[20..buffer.len()]),
        }
    }
}

impl Packet for PacketZcMonsterInfo {
    fn id(&self) -> &str {
       "0x018c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMonsterInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMonsterInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("job[2, 4]", &self.job)
            .field("level[4, 6]", &self.level)
            .field("size[6, 8]", &self.size)
            .field("hp[8, 12]", &self.hp)
            .field("def[12, 14]", &self.def)
            .field("race_type[14, 16]", &self.race_type)
            .field("mdef_power[16, 18]", &self.mdef_power)
            .field("property[18, 20]", &self.property)
            .field("property_table[20, ?]", &self.property_table)
        .finish()
    }
}

pub struct PacketZcMakableitemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub info: MakableitemInfo,
}

impl PacketZcMakableitemlist {
    pub fn from(buffer: &[u8]) -> PacketZcMakableitemlist {
        PacketZcMakableitemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            info: MakableitemInfo::from(&buffer[4..buffer.len()]),
        }
    }
}

impl Packet for PacketZcMakableitemlist {
    fn id(&self) -> &str {
       "0x018d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMakableitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMakableitemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("info[4, ?]", &self.info)
        .finish()
    }
}

pub struct PacketCzReqmakingitem {
    pub packet_id: u16,
    pub info: MakableitemInfo,
}

impl PacketCzReqmakingitem {
    pub fn from(buffer: &[u8]) -> PacketCzReqmakingitem {
        PacketCzReqmakingitem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: MakableitemInfo::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketCzReqmakingitem {
    fn id(&self) -> &str {
       "0x018e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqmakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqmakingitem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, ?]", &self.info)
        .finish()
    }
}

pub struct PacketZcAckReqmakingitem {
    pub packet_id: u16,
    pub result: u16,
    pub itid: u16,
}

impl PacketZcAckReqmakingitem {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqmakingitem {
        PacketZcAckReqmakingitem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            itid: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAckReqmakingitem {
    fn id(&self) -> &str {
       "0x018f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqmakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqmakingitem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("itid[4, 6]", &self.itid)
        .finish()
    }
}

pub struct PacketCzUseSkillTogroundWithtalkbox {
    pub packet_id: u16,
    pub selected_level: u16,
    pub skid: u16,
    pub x_pos: u16,
    pub y_pos: u16,
    pub contents: String,
}

impl PacketCzUseSkillTogroundWithtalkbox {
    pub fn from(buffer: &[u8]) -> PacketCzUseSkillTogroundWithtalkbox {
        PacketCzUseSkillTogroundWithtalkbox {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            selected_level: u16::from_le_bytes([buffer[2], buffer[3]]),
            skid: u16::from_le_bytes([buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
            contents: String::from_utf8_lossy(&buffer[10..90]).to_string(),
        }
    }
}

impl Packet for PacketCzUseSkillTogroundWithtalkbox {
    fn id(&self) -> &str {
       "0x0190"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUseSkillTogroundWithtalkbox {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkillTogroundWithtalkbox")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("selected_level[2, 4]", &self.selected_level)
            .field("skid[4, 6]", &self.skid)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
            .field("contents[10, 90]", &self.contents)
        .finish()
    }
}

pub struct PacketZcTalkboxChatcontents {
    pub packet_id: u16,
    pub aid: u32,
    pub contents: String,
}

impl PacketZcTalkboxChatcontents {
    pub fn from(buffer: &[u8]) -> PacketZcTalkboxChatcontents {
        PacketZcTalkboxChatcontents {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            contents: String::from_utf8_lossy(&buffer[6..86]).to_string(),
        }
    }
}

impl Packet for PacketZcTalkboxChatcontents {
    fn id(&self) -> &str {
       "0x0191"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcTalkboxChatcontents {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTalkboxChatcontents")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("contents[6, 86]", &self.contents)
        .finish()
    }
}

pub struct PacketZcUpdateMapinfo {
    pub packet_id: u16,
    pub x_pos: u16,
    pub y_pos: u16,
    pub type_: u16,
    pub map_name: String,
}

impl PacketZcUpdateMapinfo {
    pub fn from(buffer: &[u8]) -> PacketZcUpdateMapinfo {
        PacketZcUpdateMapinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            x_pos: u16::from_le_bytes([buffer[2], buffer[3]]),
            y_pos: u16::from_le_bytes([buffer[4], buffer[5]]),
            type_: u16::from_le_bytes([buffer[6], buffer[7]]),
            map_name: String::from_utf8_lossy(&buffer[8..24]).to_string(),
        }
    }
}

impl Packet for PacketZcUpdateMapinfo {
    fn id(&self) -> &str {
       "0x0192"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUpdateMapinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateMapinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("x_pos[2, 4]", &self.x_pos)
            .field("y_pos[4, 6]", &self.y_pos)
            .field("type_[6, 8]", &self.type_)
            .field("map_name[8, 24]", &self.map_name)
        .finish()
    }
}

pub struct PacketCzReqnameBygid {
    pub packet_id: u16,
    pub gid: u32,
}

impl PacketCzReqnameBygid {
    pub fn from(buffer: &[u8]) -> PacketCzReqnameBygid {
        PacketCzReqnameBygid {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqnameBygid {
    fn id(&self) -> &str {
       "0x0193"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqnameBygid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqnameBygid")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
        .finish()
    }
}

pub struct PacketZcAckReqnameBygid {
    pub packet_id: u16,
    pub gid: u32,
    pub cname: String,
}

impl PacketZcAckReqnameBygid {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqnameBygid {
        PacketZcAckReqnameBygid {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            cname: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcAckReqnameBygid {
    fn id(&self) -> &str {
       "0x0194"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqnameBygid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqnameBygid")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("cname[6, 30]", &self.cname)
        .finish()
    }
}

pub struct PacketZcAckReqnameall {
    pub packet_id: u16,
    pub aid: u32,
    pub cname: String,
    pub pname: String,
    pub gname: String,
    pub rname: String,
}

impl PacketZcAckReqnameall {
    pub fn from(buffer: &[u8]) -> PacketZcAckReqnameall {
        PacketZcAckReqnameall {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            cname: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            pname: String::from_utf8_lossy(&buffer[30..54]).to_string(),
            gname: String::from_utf8_lossy(&buffer[54..78]).to_string(),
            rname: String::from_utf8_lossy(&buffer[78..102]).to_string(),
        }
    }
}

impl Packet for PacketZcAckReqnameall {
    fn id(&self) -> &str {
       "0x0195"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckReqnameall {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckReqnameall")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("cname[6, 30]", &self.cname)
            .field("pname[30, 54]", &self.pname)
            .field("gname[54, 78]", &self.gname)
            .field("rname[78, 102]", &self.rname)
        .finish()
    }
}

pub struct PacketZcMsgStateChange {
    pub packet_id: u16,
    pub index: u16,
    pub aid: u32,
    pub state: bool,
}

impl PacketZcMsgStateChange {
    pub fn from(buffer: &[u8]) -> PacketZcMsgStateChange {
        PacketZcMsgStateChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            state: buffer[8] == 1,
        }
    }
}

impl Packet for PacketZcMsgStateChange {
    fn id(&self) -> &str {
       "0x0196"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMsgStateChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgStateChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("aid[4, 8]", &self.aid)
            .field("state[8, 9]", &self.state)
        .finish()
    }
}

pub struct PacketCzReset {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketCzReset {
    pub fn from(buffer: &[u8]) -> PacketCzReset {
        PacketCzReset {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReset {
    fn id(&self) -> &str {
       "0x0197"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReset {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReset")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketCzChangeMaptype {
    pub packet_id: u16,
    pub x_pos: u16,
    pub y_pos: u16,
    pub type_: u16,
}

impl PacketCzChangeMaptype {
    pub fn from(buffer: &[u8]) -> PacketCzChangeMaptype {
        PacketCzChangeMaptype {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            x_pos: u16::from_le_bytes([buffer[2], buffer[3]]),
            y_pos: u16::from_le_bytes([buffer[4], buffer[5]]),
            type_: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzChangeMaptype {
    fn id(&self) -> &str {
       "0x0198"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChangeMaptype {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeMaptype")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("x_pos[2, 4]", &self.x_pos)
            .field("y_pos[4, 6]", &self.y_pos)
            .field("type_[6, 8]", &self.type_)
        .finish()
    }
}

pub struct PacketZcNotifyMapproperty {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketZcNotifyMapproperty {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMapproperty {
        PacketZcNotifyMapproperty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcNotifyMapproperty {
    fn id(&self) -> &str {
       "0x0199"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMapproperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMapproperty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketZcNotifyRanking {
    pub packet_id: u16,
    pub aid: u32,
    pub ranking: u32,
    pub total: u32,
}

impl PacketZcNotifyRanking {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyRanking {
        PacketZcNotifyRanking {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            ranking: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            total: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcNotifyRanking {
    fn id(&self) -> &str {
       "0x019a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyRanking {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyRanking")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("ranking[6, 10]", &self.ranking)
            .field("total[10, 14]", &self.total)
        .finish()
    }
}

pub struct PacketZcNotifyEffect {
    pub packet_id: u16,
    pub aid: u32,
    pub effect_id: u32,
}

impl PacketZcNotifyEffect {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyEffect {
        PacketZcNotifyEffect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            effect_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcNotifyEffect {
    fn id(&self) -> &str {
       "0x019b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyEffect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("effect_id[6, 10]", &self.effect_id)
        .finish()
    }
}

pub struct PacketCzChangeEffectstate {
    pub packet_id: u16,
    pub effect_state: u32,
}

impl PacketCzChangeEffectstate {
    pub fn from(buffer: &[u8]) -> PacketCzChangeEffectstate {
        PacketCzChangeEffectstate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            effect_state: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzChangeEffectstate {
    fn id(&self) -> &str {
       "0x019d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChangeEffectstate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeEffectstate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("effect_state[2, 6]", &self.effect_state)
        .finish()
    }
}

pub struct PacketZcStartCapture {
    pub packet_id: u16,
}

impl PacketZcStartCapture {
    pub fn from(buffer: &[u8]) -> PacketZcStartCapture {
        PacketZcStartCapture {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcStartCapture {
    fn id(&self) -> &str {
       "0x019e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStartCapture {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStartCapture")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzTrycaptureMonster {
    pub packet_id: u16,
    pub target_aid: u32,
}

impl PacketCzTrycaptureMonster {
    pub fn from(buffer: &[u8]) -> PacketCzTrycaptureMonster {
        PacketCzTrycaptureMonster {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            target_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzTrycaptureMonster {
    fn id(&self) -> &str {
       "0x019f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzTrycaptureMonster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzTrycaptureMonster")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("target_aid[2, 6]", &self.target_aid)
        .finish()
    }
}

pub struct PacketZcTrycaptureMonster {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcTrycaptureMonster {
    pub fn from(buffer: &[u8]) -> PacketZcTrycaptureMonster {
        PacketZcTrycaptureMonster {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcTrycaptureMonster {
    fn id(&self) -> &str {
       "0x01a0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcTrycaptureMonster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTrycaptureMonster")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzCommandPet {
    pub packet_id: u16,
    pub c_sub: char,
}

impl PacketCzCommandPet {
    pub fn from(buffer: &[u8]) -> PacketCzCommandPet {
        PacketCzCommandPet {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            c_sub: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzCommandPet {
    fn id(&self) -> &str {
       "0x01a1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCommandPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCommandPet")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("c_sub[2, 3]", &self.c_sub)
        .finish()
    }
}

pub struct PacketZcPropertyPet {
    pub packet_id: u16,
    pub sz_name: String,
    pub b_modified: char,
    pub n_level: u16,
    pub n_fullness: u16,
    pub n_relationship: u16,
    pub itid: u16,
    pub job: u16,
}

impl PacketZcPropertyPet {
    pub fn from(buffer: &[u8]) -> PacketZcPropertyPet {
        PacketZcPropertyPet {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            sz_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            b_modified: buffer[26] as char,
            n_level: u16::from_le_bytes([buffer[27], buffer[28]]),
            n_fullness: u16::from_le_bytes([buffer[29], buffer[30]]),
            n_relationship: u16::from_le_bytes([buffer[31], buffer[32]]),
            itid: u16::from_le_bytes([buffer[33], buffer[34]]),
            job: u16::from_le_bytes([buffer[35], buffer[36]]),
        }
    }
}

impl Packet for PacketZcPropertyPet {
    fn id(&self) -> &str {
       "0x01a2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPropertyPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPropertyPet")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("sz_name[2, 26]", &self.sz_name)
            .field("b_modified[26, 27]", &self.b_modified)
            .field("n_level[27, 29]", &self.n_level)
            .field("n_fullness[29, 31]", &self.n_fullness)
            .field("n_relationship[31, 33]", &self.n_relationship)
            .field("itid[33, 35]", &self.itid)
            .field("job[35, 37]", &self.job)
        .finish()
    }
}

pub struct PacketZcFeedPet {
    pub packet_id: u16,
    pub c_ret: char,
    pub itid: u16,
}

impl PacketZcFeedPet {
    pub fn from(buffer: &[u8]) -> PacketZcFeedPet {
        PacketZcFeedPet {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            c_ret: buffer[2] as char,
            itid: u16::from_le_bytes([buffer[3], buffer[4]]),
        }
    }
}

impl Packet for PacketZcFeedPet {
    fn id(&self) -> &str {
       "0x01a3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFeedPet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFeedPet")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("c_ret[2, 3]", &self.c_ret)
            .field("itid[3, 5]", &self.itid)
        .finish()
    }
}

pub struct PacketZcChangestatePet {
    pub packet_id: u16,
    pub type_: char,
    pub gid: u32,
    pub data: u32,
}

impl PacketZcChangestatePet {
    pub fn from(buffer: &[u8]) -> PacketZcChangestatePet {
        PacketZcChangestatePet {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
            gid: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            data: u32::from_le_bytes([buffer[7], buffer[8], buffer[9], buffer[10]]),
        }
    }
}

impl Packet for PacketZcChangestatePet {
    fn id(&self) -> &str {
       "0x01a4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcChangestatePet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangestatePet")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
            .field("gid[3, 7]", &self.gid)
            .field("data[7, 11]", &self.data)
        .finish()
    }
}

pub struct PacketCzRenamePet {
    pub packet_id: u16,
    pub sz_name: String,
}

impl PacketCzRenamePet {
    pub fn from(buffer: &[u8]) -> PacketCzRenamePet {
        PacketCzRenamePet {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            sz_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzRenamePet {
    fn id(&self) -> &str {
       "0x01a5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRenamePet {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRenamePet")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("sz_name[2, 26]", &self.sz_name)
        .finish()
    }
}

pub struct PacketZcPeteggList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub egg_list: Vec<PeteggitemInfo>,
}

impl PacketZcPeteggList {
    pub fn from(buffer: &[u8]) -> PacketZcPeteggList {
        let iter_count = &buffer.len() / 2;
        let mut vec_field: Vec<PeteggitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 6 * i;
            vec_field.push(PeteggitemInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPeteggList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            egg_list: vec_field,
        }
    }
}

impl Packet for PacketZcPeteggList {
    fn id(&self) -> &str {
       "0x01a6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPeteggList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPeteggList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("egg_list[4, 6]", &self.egg_list)
        .finish()
    }
}

pub struct PacketCzSelectPetegg {
    pub packet_id: u16,
    pub index: u16,
}

impl PacketCzSelectPetegg {
    pub fn from(buffer: &[u8]) -> PacketCzSelectPetegg {
        PacketCzSelectPetegg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzSelectPetegg {
    fn id(&self) -> &str {
       "0x01a7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSelectPetegg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSelectPetegg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PacketCzPeteggInfo {
    pub packet_id: u16,
    pub index: u16,
}

impl PacketCzPeteggInfo {
    pub fn from(buffer: &[u8]) -> PacketCzPeteggInfo {
        PacketCzPeteggInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzPeteggInfo {
    fn id(&self) -> &str {
       "0x01a8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPeteggInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPeteggInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PacketCzPetAct {
    pub packet_id: u16,
    pub data: u32,
}

impl PacketCzPetAct {
    pub fn from(buffer: &[u8]) -> PacketCzPetAct {
        PacketCzPetAct {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            data: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzPetAct {
    fn id(&self) -> &str {
       "0x01a9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPetAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPetAct")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("data[2, 6]", &self.data)
        .finish()
    }
}

pub struct PacketZcPetAct {
    pub packet_id: u16,
    pub gid: u32,
    pub data: u32,
}

impl PacketZcPetAct {
    pub fn from(buffer: &[u8]) -> PacketZcPetAct {
        PacketZcPetAct {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            data: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcPetAct {
    fn id(&self) -> &str {
       "0x01aa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPetAct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPetAct")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("data[6, 10]", &self.data)
        .finish()
    }
}

pub struct PacketZcParChangeUser {
    pub packet_id: u16,
    pub aid: u32,
    pub var_id: u16,
    pub count: u32,
}

impl PacketZcParChangeUser {
    pub fn from(buffer: &[u8]) -> PacketZcParChangeUser {
        PacketZcParChangeUser {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            var_id: u16::from_le_bytes([buffer[6], buffer[7]]),
            count: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketZcParChangeUser {
    fn id(&self) -> &str {
       "0x01ab"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcParChangeUser {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcParChangeUser")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("var_id[6, 8]", &self.var_id)
            .field("count[8, 12]", &self.count)
        .finish()
    }
}

pub struct PacketZcSkillUpdate {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketZcSkillUpdate {
    pub fn from(buffer: &[u8]) -> PacketZcSkillUpdate {
        PacketZcSkillUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcSkillUpdate {
    fn id(&self) -> &str {
       "0x01ac"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcMakingarrowList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub arrow_list: Vec<ArrowitemInfo>,
}

impl PacketZcMakingarrowList {
    pub fn from(buffer: &[u8]) -> PacketZcMakingarrowList {
        let iter_count = &buffer.len() / 2;
        let mut vec_field: Vec<ArrowitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 6 * i;
            vec_field.push(ArrowitemInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcMakingarrowList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            arrow_list: vec_field,
        }
    }
}

impl Packet for PacketZcMakingarrowList {
    fn id(&self) -> &str {
       "0x01ad"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMakingarrowList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMakingarrowList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("arrow_list[4, 6]", &self.arrow_list)
        .finish()
    }
}

pub struct PacketCzReqMakingarrow {
    pub packet_id: u16,
    pub id: u16,
}

impl PacketCzReqMakingarrow {
    pub fn from(buffer: &[u8]) -> PacketCzReqMakingarrow {
        PacketCzReqMakingarrow {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            id: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReqMakingarrow {
    fn id(&self) -> &str {
       "0x01ae"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqMakingarrow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMakingarrow")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("id[2, 4]", &self.id)
        .finish()
    }
}

pub struct PacketCzReqChangecart {
    pub packet_id: u16,
    pub num: u16,
}

impl PacketCzReqChangecart {
    pub fn from(buffer: &[u8]) -> PacketCzReqChangecart {
        PacketCzReqChangecart {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            num: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzReqChangecart {
    fn id(&self) -> &str {
       "0x01af"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqChangecart {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqChangecart")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("num[2, 4]", &self.num)
        .finish()
    }
}

pub struct PacketZcNpcspriteChange {
    pub packet_id: u16,
    pub gid: u32,
    pub type_: char,
    pub value: u32,
}

impl PacketZcNpcspriteChange {
    pub fn from(buffer: &[u8]) -> PacketZcNpcspriteChange {
        PacketZcNpcspriteChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            value: u32::from_le_bytes([buffer[7], buffer[8], buffer[9], buffer[10]]),
        }
    }
}

impl Packet for PacketZcNpcspriteChange {
    fn id(&self) -> &str {
       "0x01b0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNpcspriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcspriteChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("type_[6, 7]", &self.type_)
            .field("value[7, 11]", &self.value)
        .finish()
    }
}

pub struct PacketZcShowdigit {
    pub packet_id: u16,
    pub type_: char,
    pub value: u32,
}

impl PacketZcShowdigit {
    pub fn from(buffer: &[u8]) -> PacketZcShowdigit {
        PacketZcShowdigit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
            value: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
        }
    }
}

impl Packet for PacketZcShowdigit {
    fn id(&self) -> &str {
       "0x01b1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcShowdigit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShowdigit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
            .field("value[3, 7]", &self.value)
        .finish()
    }
}

pub struct PacketCzReqOpenstore2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub store_name: String,
    pub result: bool,
    pub store_list: Vec<StoreItem>,
}

impl PacketCzReqOpenstore2 {
    pub fn from(buffer: &[u8]) -> PacketCzReqOpenstore2 {
        let iter_count = &buffer.len() / 8;
        let mut vec_field: Vec<StoreItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 85 * i;
            let end_pos = 93 * i;
            vec_field.push(StoreItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzReqOpenstore2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            store_name: String::from_utf8_lossy(&buffer[4..84]).to_string(),
            result: buffer[84] == 1,
            store_list: vec_field,
        }
    }
}

impl Packet for PacketCzReqOpenstore2 {
    fn id(&self) -> &str {
       "0x01b2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqOpenstore2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenstore2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("store_name[4, 84]", &self.store_name)
            .field("result[84, 85]", &self.result)
            .field("store_list[85, 93]", &self.store_list)
        .finish()
    }
}

pub struct PacketZcShowImage2 {
    pub packet_id: u16,
    pub image_name: String,
    pub type_: char,
}

impl PacketZcShowImage2 {
    pub fn from(buffer: &[u8]) -> PacketZcShowImage2 {
        PacketZcShowImage2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            image_name: String::from_utf8_lossy(&buffer[2..66]).to_string(),
            type_: buffer[66] as char,
        }
    }
}

impl Packet for PacketZcShowImage2 {
    fn id(&self) -> &str {
       "0x01b3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcShowImage2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShowImage2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("image_name[2, 66]", &self.image_name)
            .field("type_[66, 67]", &self.type_)
        .finish()
    }
}

pub struct PacketZcChangeGuild {
    pub packet_id: u16,
    pub aid: u32,
    pub gdid: u32,
    pub emblem_version: u16,
}

impl PacketZcChangeGuild {
    pub fn from(buffer: &[u8]) -> PacketZcChangeGuild {
        PacketZcChangeGuild {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gdid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            emblem_version: u16::from_le_bytes([buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketZcChangeGuild {
    fn id(&self) -> &str {
       "0x01b4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcChangeGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeGuild")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gdid[6, 10]", &self.gdid)
            .field("emblem_version[10, 12]", &self.emblem_version)
        .finish()
    }
}

pub struct PacketScBillingInfo {
    pub packet_id: u16,
    pub dw_amount_remain: u32,
    pub dw_quantity_remain: u32,
    pub dw_reserved1: u32,
    pub dw_reserved2: u32,
}

impl PacketScBillingInfo {
    pub fn from(buffer: &[u8]) -> PacketScBillingInfo {
        PacketScBillingInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            dw_amount_remain: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            dw_quantity_remain: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            dw_reserved1: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            dw_reserved2: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
        }
    }
}

impl Packet for PacketScBillingInfo {
    fn id(&self) -> &str {
       "0x01b5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketScBillingInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketScBillingInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("dw_amount_remain[2, 6]", &self.dw_amount_remain)
            .field("dw_quantity_remain[6, 10]", &self.dw_quantity_remain)
            .field("dw_reserved1[10, 14]", &self.dw_reserved1)
            .field("dw_reserved2[14, 18]", &self.dw_reserved2)
        .finish()
    }
}

pub struct PacketZcGuildInfo2 {
    pub packet_id: u16,
    pub gdid: u32,
    pub level: u32,
    pub user_num: u32,
    pub max_user_num: u32,
    pub user_average_level: u32,
    pub exp: u32,
    pub max_exp: u32,
    pub point: u32,
    pub honor: u32,
    pub virtue: u32,
    pub emblem_version: u32,
    pub guildname: String,
    pub master_name: String,
    pub manage_land: String,
    pub zeny: u32,
}

impl PacketZcGuildInfo2 {
    pub fn from(buffer: &[u8]) -> PacketZcGuildInfo2 {
        PacketZcGuildInfo2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            level: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            user_num: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            max_user_num: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            user_average_level: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            exp: u32::from_le_bytes([buffer[22], buffer[23], buffer[24], buffer[25]]),
            max_exp: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            point: u32::from_le_bytes([buffer[30], buffer[31], buffer[32], buffer[33]]),
            honor: u32::from_le_bytes([buffer[34], buffer[35], buffer[36], buffer[37]]),
            virtue: u32::from_le_bytes([buffer[38], buffer[39], buffer[40], buffer[41]]),
            emblem_version: u32::from_le_bytes([buffer[42], buffer[43], buffer[44], buffer[45]]),
            guildname: String::from_utf8_lossy(&buffer[46..70]).to_string(),
            master_name: String::from_utf8_lossy(&buffer[70..94]).to_string(),
            manage_land: String::from_utf8_lossy(&buffer[94..110]).to_string(),
            zeny: u32::from_le_bytes([buffer[110], buffer[111], buffer[112], buffer[113]]),
        }
    }
}

impl Packet for PacketZcGuildInfo2 {
    fn id(&self) -> &str {
       "0x01b6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildInfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildInfo2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("level[6, 10]", &self.level)
            .field("user_num[10, 14]", &self.user_num)
            .field("max_user_num[14, 18]", &self.max_user_num)
            .field("user_average_level[18, 22]", &self.user_average_level)
            .field("exp[22, 26]", &self.exp)
            .field("max_exp[26, 30]", &self.max_exp)
            .field("point[30, 34]", &self.point)
            .field("honor[34, 38]", &self.honor)
            .field("virtue[38, 42]", &self.virtue)
            .field("emblem_version[42, 46]", &self.emblem_version)
            .field("guildname[46, 70]", &self.guildname)
            .field("master_name[70, 94]", &self.master_name)
            .field("manage_land[94, 110]", &self.manage_land)
            .field("zeny[110, 114]", &self.zeny)
        .finish()
    }
}

pub struct PacketCzGuildZeny {
    pub packet_id: u16,
    pub zeny: u32,
}

impl PacketCzGuildZeny {
    pub fn from(buffer: &[u8]) -> PacketCzGuildZeny {
        PacketCzGuildZeny {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            zeny: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzGuildZeny {
    fn id(&self) -> &str {
       "0x01b7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzGuildZeny {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGuildZeny")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("zeny[2, 6]", &self.zeny)
        .finish()
    }
}

pub struct PacketZcGuildZenyAck {
    pub packet_id: u16,
    pub ret: char,
}

impl PacketZcGuildZenyAck {
    pub fn from(buffer: &[u8]) -> PacketZcGuildZenyAck {
        PacketZcGuildZenyAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            ret: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcGuildZenyAck {
    fn id(&self) -> &str {
       "0x01b8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildZenyAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildZenyAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("ret[2, 3]", &self.ret)
        .finish()
    }
}

pub struct PacketZcDispel {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketZcDispel {
    pub fn from(buffer: &[u8]) -> PacketZcDispel {
        PacketZcDispel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDispel {
    fn id(&self) -> &str {
       "0x01b9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDispel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDispel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketCzRemoveAid {
    pub packet_id: u16,
    pub account_name: String,
}

impl PacketCzRemoveAid {
    pub fn from(buffer: &[u8]) -> PacketCzRemoveAid {
        PacketCzRemoveAid {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            account_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzRemoveAid {
    fn id(&self) -> &str {
       "0x01ba"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRemoveAid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRemoveAid")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("account_name[2, 26]", &self.account_name)
        .finish()
    }
}

pub struct PacketCzShift {
    pub packet_id: u16,
    pub character_name: String,
}

impl PacketCzShift {
    pub fn from(buffer: &[u8]) -> PacketCzShift {
        PacketCzShift {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            character_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzShift {
    fn id(&self) -> &str {
       "0x01bb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzShift {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzShift")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("character_name[2, 26]", &self.character_name)
        .finish()
    }
}

pub struct PacketCzRecall {
    pub packet_id: u16,
    pub account_name: String,
}

impl PacketCzRecall {
    pub fn from(buffer: &[u8]) -> PacketCzRecall {
        PacketCzRecall {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            account_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzRecall {
    fn id(&self) -> &str {
       "0x01bc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRecall {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRecall")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("account_name[2, 26]", &self.account_name)
        .finish()
    }
}

pub struct PacketCzRecallGid {
    pub packet_id: u16,
    pub character_name: String,
}

impl PacketCzRecallGid {
    pub fn from(buffer: &[u8]) -> PacketCzRecallGid {
        PacketCzRecallGid {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            character_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzRecallGid {
    fn id(&self) -> &str {
       "0x01bd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRecallGid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRecallGid")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("character_name[2, 26]", &self.character_name)
        .finish()
    }
}

pub struct PacketAcAskPngameroom {
    pub packet_id: u16,
}

impl PacketAcAskPngameroom {
    pub fn from(buffer: &[u8]) -> PacketAcAskPngameroom {
        PacketAcAskPngameroom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketAcAskPngameroom {
    fn id(&self) -> &str {
       "0x01be"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAskPngameroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAskPngameroom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCaReplyPngameroom {
    pub packet_id: u16,
    pub permission: char,
}

impl PacketCaReplyPngameroom {
    pub fn from(buffer: &[u8]) -> PacketCaReplyPngameroom {
        PacketCaReplyPngameroom {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            permission: buffer[2] as char,
        }
    }
}

impl Packet for PacketCaReplyPngameroom {
    fn id(&self) -> &str {
       "0x01bf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaReplyPngameroom {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaReplyPngameroom")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("permission[2, 3]", &self.permission)
        .finish()
    }
}

pub struct PacketCzReqRemaintime {
    pub packet_id: u16,
}

impl PacketCzReqRemaintime {
    pub fn from(buffer: &[u8]) -> PacketCzReqRemaintime {
        PacketCzReqRemaintime {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqRemaintime {
    fn id(&self) -> &str {
       "0x01c0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqRemaintime")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcReplyRemaintime {
    pub packet_id: u16,
    pub result: u32,
    pub expiration_date: u32,
    pub remain_time: u32,
}

impl PacketZcReplyRemaintime {
    pub fn from(buffer: &[u8]) -> PacketZcReplyRemaintime {
        PacketZcReplyRemaintime {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            expiration_date: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            remain_time: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcReplyRemaintime {
    fn id(&self) -> &str {
       "0x01c1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReplyRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReplyRemaintime")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 6]", &self.result)
            .field("expiration_date[6, 10]", &self.expiration_date)
            .field("remain_time[10, 14]", &self.remain_time)
        .finish()
    }
}

pub struct PacketZcInfoRemaintime {
    pub packet_id: u16,
    pub type_: u32,
    pub remain_time: u32,
}

impl PacketZcInfoRemaintime {
    pub fn from(buffer: &[u8]) -> PacketZcInfoRemaintime {
        PacketZcInfoRemaintime {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            remain_time: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcInfoRemaintime {
    fn id(&self) -> &str {
       "0x01c2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcInfoRemaintime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcInfoRemaintime")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 6]", &self.type_)
            .field("remain_time[6, 10]", &self.remain_time)
        .finish()
    }
}

pub struct PacketZcBroadcast2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub font_color: u32,
    pub font_type: u16,
    pub font_size: u16,
    pub font_align: u16,
    pub font_y: u16,
    pub msg: String,
}

impl PacketZcBroadcast2 {
    pub fn from(buffer: &[u8]) -> PacketZcBroadcast2 {
        PacketZcBroadcast2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            font_color: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            font_type: u16::from_le_bytes([buffer[8], buffer[9]]),
            font_size: u16::from_le_bytes([buffer[10], buffer[11]]),
            font_align: u16::from_le_bytes([buffer[12], buffer[13]]),
            font_y: u16::from_le_bytes([buffer[14], buffer[15]]),
            msg: String::from_utf8_lossy(&buffer[16..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcBroadcast2 {
    fn id(&self) -> &str {
       "0x01c3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBroadcast2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBroadcast2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("font_color[4, 8]", &self.font_color)
            .field("font_type[8, 10]", &self.font_type)
            .field("font_size[10, 12]", &self.font_size)
            .field("font_align[12, 14]", &self.font_align)
            .field("font_y[14, 16]", &self.font_y)
            .field("msg[16, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcAddItemToStore2 {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PacketZcAddItemToStore2 {
    pub fn from(buffer: &[u8]) -> PacketZcAddItemToStore2 {
        PacketZcAddItemToStore2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            itid: u16::from_le_bytes([buffer[8], buffer[9]]),
            type_: buffer[10] as char,
            is_identified: buffer[11] == 1,
            is_damaged: buffer[12] == 1,
            refining_level: buffer[13] as char,
            slot: EQUIPSLOTINFO::from(&buffer[14..22]),
        }
    }
}

impl Packet for PacketZcAddItemToStore2 {
    fn id(&self) -> &str {
       "0x01c4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddItemToStore2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToStore2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
            .field("itid[8, 10]", &self.itid)
            .field("type_[10, 11]", &self.type_)
            .field("is_identified[11, 12]", &self.is_identified)
            .field("is_damaged[12, 13]", &self.is_damaged)
            .field("refining_level[13, 14]", &self.refining_level)
            .field("slot[14, 22]", &self.slot)
        .finish()
    }
}

pub struct PacketZcAddItemToCart2 {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PacketZcAddItemToCart2 {
    pub fn from(buffer: &[u8]) -> PacketZcAddItemToCart2 {
        PacketZcAddItemToCart2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            itid: u16::from_le_bytes([buffer[8], buffer[9]]),
            type_: buffer[10] as char,
            is_identified: buffer[11] == 1,
            is_damaged: buffer[12] == 1,
            refining_level: buffer[13] as char,
            slot: EQUIPSLOTINFO::from(&buffer[14..22]),
        }
    }
}

impl Packet for PacketZcAddItemToCart2 {
    fn id(&self) -> &str {
       "0x01c5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddItemToCart2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddItemToCart2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
            .field("itid[8, 10]", &self.itid)
            .field("type_[10, 11]", &self.type_)
            .field("is_identified[11, 12]", &self.is_identified)
            .field("is_damaged[12, 13]", &self.is_damaged)
            .field("refining_level[13, 14]", &self.refining_level)
            .field("slot[14, 22]", &self.slot)
        .finish()
    }
}

pub struct PacketCsReqEncryption {
    pub packet_id: u16,
    pub enc_count: char,
    pub dec_count: char,
}

impl PacketCsReqEncryption {
    pub fn from(buffer: &[u8]) -> PacketCsReqEncryption {
        PacketCsReqEncryption {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            enc_count: buffer[2] as char,
            dec_count: buffer[3] as char,
        }
    }
}

impl Packet for PacketCsReqEncryption {
    fn id(&self) -> &str {
       "0x01c6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCsReqEncryption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCsReqEncryption")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("enc_count[2, 3]", &self.enc_count)
            .field("dec_count[3, 4]", &self.dec_count)
        .finish()
    }
}

pub struct PacketScAckEncryption {
    pub packet_id: u16,
}

impl PacketScAckEncryption {
    pub fn from(buffer: &[u8]) -> PacketScAckEncryption {
        PacketScAckEncryption {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketScAckEncryption {
    fn id(&self) -> &str {
       "0x01c7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketScAckEncryption {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketScAckEncryption")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcUseItemAck2 {
    pub packet_id: u16,
    pub index: u16,
    pub id: u16,
    pub aid: u32,
    pub count: u16,
    pub result: bool,
}

impl PacketZcUseItemAck2 {
    pub fn from(buffer: &[u8]) -> PacketZcUseItemAck2 {
        PacketZcUseItemAck2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            id: u16::from_le_bytes([buffer[4], buffer[5]]),
            aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            count: u16::from_le_bytes([buffer[10], buffer[11]]),
            result: buffer[12] == 1,
        }
    }
}

impl Packet for PacketZcUseItemAck2 {
    fn id(&self) -> &str {
       "0x01c8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUseItemAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseItemAck2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("id[4, 6]", &self.id)
            .field("aid[6, 10]", &self.aid)
            .field("count[10, 12]", &self.count)
            .field("result[12, 13]", &self.result)
        .finish()
    }
}

pub struct PacketZcSkillEntry2 {
    pub packet_id: u16,
    pub aid: u32,
    pub creator_aid: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub job: char,
    pub is_visible: bool,
    pub is_contens: bool,
    pub msg: String,
}

impl PacketZcSkillEntry2 {
    pub fn from(buffer: &[u8]) -> PacketZcSkillEntry2 {
        PacketZcSkillEntry2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            creator_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: buffer[14] as char,
            is_visible: buffer[15] == 1,
            is_contens: buffer[16] == 1,
            msg: String::from_utf8_lossy(&buffer[17..97]).to_string(),
        }
    }
}

impl Packet for PacketZcSkillEntry2 {
    fn id(&self) -> &str {
       "0x01c9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillEntry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillEntry2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("creator_aid[6, 10]", &self.creator_aid)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("job[14, 15]", &self.job)
            .field("is_visible[15, 16]", &self.is_visible)
            .field("is_contens[16, 17]", &self.is_contens)
            .field("msg[17, 97]", &self.msg)
        .finish()
    }
}

pub struct PacketCzReqmakinghomun {
    pub packet_id: u16,
    pub result: bool,
}

impl PacketCzReqmakinghomun {
    pub fn from(buffer: &[u8]) -> PacketCzReqmakinghomun {
        PacketCzReqmakinghomun {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] == 1,
        }
    }
}

impl Packet for PacketCzReqmakinghomun {
    fn id(&self) -> &str {
       "0x01ca"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqmakinghomun {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqmakinghomun")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzMonsterTalk {
    pub packet_id: u16,
    pub gid: u32,
    pub state_id: char,
    pub skill_id: char,
    pub arg1: char,
}

impl PacketCzMonsterTalk {
    pub fn from(buffer: &[u8]) -> PacketCzMonsterTalk {
        PacketCzMonsterTalk {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            state_id: buffer[6] as char,
            skill_id: buffer[7] as char,
            arg1: buffer[8] as char,
        }
    }
}

impl Packet for PacketCzMonsterTalk {
    fn id(&self) -> &str {
       "0x01cb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMonsterTalk {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMonsterTalk")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("state_id[6, 7]", &self.state_id)
            .field("skill_id[7, 8]", &self.skill_id)
            .field("arg1[8, 9]", &self.arg1)
        .finish()
    }
}

pub struct PacketZcMonsterTalk {
    pub packet_id: u16,
    pub gid: u32,
    pub state_id: char,
    pub skill_id: char,
    pub arg1: char,
}

impl PacketZcMonsterTalk {
    pub fn from(buffer: &[u8]) -> PacketZcMonsterTalk {
        PacketZcMonsterTalk {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            state_id: buffer[6] as char,
            skill_id: buffer[7] as char,
            arg1: buffer[8] as char,
        }
    }
}

impl Packet for PacketZcMonsterTalk {
    fn id(&self) -> &str {
       "0x01cc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMonsterTalk {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMonsterTalk")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("state_id[6, 7]", &self.state_id)
            .field("skill_id[7, 8]", &self.skill_id)
            .field("arg1[8, 9]", &self.arg1)
        .finish()
    }
}

pub struct PacketZcAutospelllist {
    pub packet_id: u16,
    pub skid: u32,
}

impl PacketZcAutospelllist {
    pub fn from(buffer: &[u8]) -> PacketZcAutospelllist {
        PacketZcAutospelllist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAutospelllist {
    fn id(&self) -> &str {
       "0x01cd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAutospelllist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAutospelllist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 6]", &self.skid)
        .finish()
    }
}

pub struct PacketCzSelectautospell {
    pub packet_id: u16,
    pub skid: u32,
}

impl PacketCzSelectautospell {
    pub fn from(buffer: &[u8]) -> PacketCzSelectautospell {
        PacketCzSelectautospell {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzSelectautospell {
    fn id(&self) -> &str {
       "0x01ce"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSelectautospell {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSelectautospell")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 6]", &self.skid)
        .finish()
    }
}

pub struct PacketZcDevotionlist {
    pub packet_id: u16,
    pub my_aid: u32,
    pub aid: u32,
    pub range: u16,
}

impl PacketZcDevotionlist {
    pub fn from(buffer: &[u8]) -> PacketZcDevotionlist {
        PacketZcDevotionlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            my_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            range: u16::from_le_bytes([buffer[26], buffer[27]]),
        }
    }
}

impl Packet for PacketZcDevotionlist {
    fn id(&self) -> &str {
       "0x01cf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDevotionlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDevotionlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("my_aid[2, 6]", &self.my_aid)
            .field("aid[6, 10]", &self.aid)
            .field("range[26, 28]", &self.range)
        .finish()
    }
}

pub struct PacketZcSpirits {
    pub packet_id: u16,
    pub aid: u32,
    pub num: u16,
}

impl PacketZcSpirits {
    pub fn from(buffer: &[u8]) -> PacketZcSpirits {
        PacketZcSpirits {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            num: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcSpirits {
    fn id(&self) -> &str {
       "0x01d0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSpirits {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpirits")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("num[6, 8]", &self.num)
        .finish()
    }
}

pub struct PacketZcBladestop {
    pub packet_id: u16,
    pub src_aid: u32,
    pub dest_aid: u32,
    pub flag: u32,
}

impl PacketZcBladestop {
    pub fn from(buffer: &[u8]) -> PacketZcBladestop {
        PacketZcBladestop {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            src_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            dest_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            flag: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcBladestop {
    fn id(&self) -> &str {
       "0x01d1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBladestop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBladestop")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("src_aid[2, 6]", &self.src_aid)
            .field("dest_aid[6, 10]", &self.dest_aid)
            .field("flag[10, 14]", &self.flag)
        .finish()
    }
}

pub struct PacketZcCombodelay {
    pub packet_id: u16,
    pub aid: u32,
    pub delay_time: u32,
}

impl PacketZcCombodelay {
    pub fn from(buffer: &[u8]) -> PacketZcCombodelay {
        PacketZcCombodelay {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            delay_time: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcCombodelay {
    fn id(&self) -> &str {
       "0x01d2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCombodelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCombodelay")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("delay_time[6, 10]", &self.delay_time)
        .finish()
    }
}

pub struct PacketZcSound {
    pub packet_id: u16,
    pub file_name: String,
    pub act: char,
    pub term: u32,
    pub naid: u32,
}

impl PacketZcSound {
    pub fn from(buffer: &[u8]) -> PacketZcSound {
        PacketZcSound {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            file_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            act: buffer[26] as char,
            term: u32::from_le_bytes([buffer[27], buffer[28], buffer[29], buffer[30]]),
            naid: u32::from_le_bytes([buffer[31], buffer[32], buffer[33], buffer[34]]),
        }
    }
}

impl Packet for PacketZcSound {
    fn id(&self) -> &str {
       "0x01d3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSound {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSound")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("file_name[2, 26]", &self.file_name)
            .field("act[26, 27]", &self.act)
            .field("term[27, 31]", &self.term)
            .field("naid[31, 35]", &self.naid)
        .finish()
    }
}

pub struct PacketZcOpenEditdlgstr {
    pub packet_id: u16,
    pub naid: u32,
}

impl PacketZcOpenEditdlgstr {
    pub fn from(buffer: &[u8]) -> PacketZcOpenEditdlgstr {
        PacketZcOpenEditdlgstr {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            naid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcOpenEditdlgstr {
    fn id(&self) -> &str {
       "0x01d4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcOpenEditdlgstr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenEditdlgstr")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("naid[2, 6]", &self.naid)
        .finish()
    }
}

pub struct PacketCzInputEditdlgstr {
    pub packet_id: u16,
    pub packet_length: u16,
    pub naid: u32,
    pub msg: String,
}

impl PacketCzInputEditdlgstr {
    pub fn from(buffer: &[u8]) -> PacketCzInputEditdlgstr {
        PacketCzInputEditdlgstr {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            naid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            msg: String::from_utf8_lossy(&buffer[8..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzInputEditdlgstr {
    fn id(&self) -> &str {
       "0x01d5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzInputEditdlgstr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzInputEditdlgstr")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("naid[4, 8]", &self.naid)
            .field("msg[8, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcNotifyMapproperty2 {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketZcNotifyMapproperty2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMapproperty2 {
        PacketZcNotifyMapproperty2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcNotifyMapproperty2 {
    fn id(&self) -> &str {
       "0x01d6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMapproperty2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMapproperty2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketZcSpriteChange2 {
    pub packet_id: u16,
    pub gid: u32,
    pub type_: char,
    pub value: u32,
}

impl PacketZcSpriteChange2 {
    pub fn from(buffer: &[u8]) -> PacketZcSpriteChange2 {
        PacketZcSpriteChange2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            value: u32::from_le_bytes([buffer[7], buffer[8], buffer[9], buffer[10]]),
        }
    }
}

impl Packet for PacketZcSpriteChange2 {
    fn id(&self) -> &str {
       "0x01d7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSpriteChange2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpriteChange2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("type_[6, 7]", &self.type_)
            .field("value[7, 11]", &self.value)
        .finish()
    }
}

pub struct PacketZcNotifyStandentry2 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub state: char,
    pub clevel: u16,
}

impl PacketZcNotifyStandentry2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStandentry2 {
        PacketZcNotifyStandentry2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            weapon: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            accessory: u16::from_le_bytes([buffer[22], buffer[23]]),
            accessory2: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory3: u16::from_le_bytes([buffer[26], buffer[27]]),
            headpalette: u16::from_le_bytes([buffer[28], buffer[29]]),
            bodypalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            head_dir: u16::from_le_bytes([buffer[32], buffer[33]]),
            guid: u32::from_le_bytes([buffer[34], buffer[35], buffer[36], buffer[37]]),
            gemblem_ver: u16::from_le_bytes([buffer[38], buffer[39]]),
            honor: u16::from_le_bytes([buffer[40], buffer[41]]),
            virtue: u16::from_le_bytes([buffer[42], buffer[43]]),
            is_pkmode_on: buffer[44] == 1,
            sex: buffer[45] as char,
            pos_dir: String::from_utf8_lossy(&buffer[46..49]).to_string(),
            x_size: buffer[49] as char,
            y_size: buffer[50] as char,
            state: buffer[51] as char,
            clevel: u16::from_le_bytes([buffer[52], buffer[53]]),
        }
    }
}

impl Packet for PacketZcNotifyStandentry2 {
    fn id(&self) -> &str {
       "0x01d8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStandentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 14]", &self.effect_state)
            .field("job[14, 16]", &self.job)
            .field("head[16, 18]", &self.head)
            .field("weapon[18, 22]", &self.weapon)
            .field("accessory[22, 24]", &self.accessory)
            .field("accessory2[24, 26]", &self.accessory2)
            .field("accessory3[26, 28]", &self.accessory3)
            .field("headpalette[28, 30]", &self.headpalette)
            .field("bodypalette[30, 32]", &self.bodypalette)
            .field("head_dir[32, 34]", &self.head_dir)
            .field("guid[34, 38]", &self.guid)
            .field("gemblem_ver[38, 40]", &self.gemblem_ver)
            .field("honor[40, 42]", &self.honor)
            .field("virtue[42, 44]", &self.virtue)
            .field("is_pkmode_on[44, 45]", &self.is_pkmode_on)
            .field("sex[45, 46]", &self.sex)
            .field("pos_dir[46, 49]", &self.pos_dir)
            .field("x_size[49, 50]", &self.x_size)
            .field("y_size[50, 51]", &self.y_size)
            .field("state[51, 52]", &self.state)
            .field("clevel[52, 54]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyNewentry2 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
}

impl PacketZcNotifyNewentry2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyNewentry2 {
        PacketZcNotifyNewentry2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            weapon: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            accessory: u16::from_le_bytes([buffer[22], buffer[23]]),
            accessory2: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory3: u16::from_le_bytes([buffer[26], buffer[27]]),
            headpalette: u16::from_le_bytes([buffer[28], buffer[29]]),
            bodypalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            head_dir: u16::from_le_bytes([buffer[32], buffer[33]]),
            guid: u32::from_le_bytes([buffer[34], buffer[35], buffer[36], buffer[37]]),
            gemblem_ver: u16::from_le_bytes([buffer[38], buffer[39]]),
            honor: u16::from_le_bytes([buffer[40], buffer[41]]),
            virtue: u16::from_le_bytes([buffer[42], buffer[43]]),
            is_pkmode_on: buffer[44] == 1,
            sex: buffer[45] as char,
            pos_dir: String::from_utf8_lossy(&buffer[46..49]).to_string(),
            x_size: buffer[49] as char,
            y_size: buffer[50] as char,
            clevel: u16::from_le_bytes([buffer[51], buffer[52]]),
        }
    }
}

impl Packet for PacketZcNotifyNewentry2 {
    fn id(&self) -> &str {
       "0x01d9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyNewentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 14]", &self.effect_state)
            .field("job[14, 16]", &self.job)
            .field("head[16, 18]", &self.head)
            .field("weapon[18, 22]", &self.weapon)
            .field("accessory[22, 24]", &self.accessory)
            .field("accessory2[24, 26]", &self.accessory2)
            .field("accessory3[26, 28]", &self.accessory3)
            .field("headpalette[28, 30]", &self.headpalette)
            .field("bodypalette[30, 32]", &self.bodypalette)
            .field("head_dir[32, 34]", &self.head_dir)
            .field("guid[34, 38]", &self.guid)
            .field("gemblem_ver[38, 40]", &self.gemblem_ver)
            .field("honor[40, 42]", &self.honor)
            .field("virtue[42, 44]", &self.virtue)
            .field("is_pkmode_on[44, 45]", &self.is_pkmode_on)
            .field("sex[45, 46]", &self.sex)
            .field("pos_dir[46, 49]", &self.pos_dir)
            .field("x_size[49, 50]", &self.x_size)
            .field("y_size[50, 51]", &self.y_size)
            .field("clevel[51, 53]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyMoveentry2 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub move_start_time: u32,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u16,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub move_data: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
}

impl PacketZcNotifyMoveentry2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMoveentry2 {
        PacketZcNotifyMoveentry2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            weapon: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            accessory: u16::from_le_bytes([buffer[22], buffer[23]]),
            move_start_time: u32::from_le_bytes([buffer[24], buffer[25], buffer[26], buffer[27]]),
            accessory2: u16::from_le_bytes([buffer[28], buffer[29]]),
            accessory3: u16::from_le_bytes([buffer[30], buffer[31]]),
            headpalette: u16::from_le_bytes([buffer[32], buffer[33]]),
            bodypalette: u16::from_le_bytes([buffer[34], buffer[35]]),
            head_dir: u16::from_le_bytes([buffer[36], buffer[37]]),
            guid: u32::from_le_bytes([buffer[38], buffer[39], buffer[40], buffer[41]]),
            gemblem_ver: u16::from_le_bytes([buffer[42], buffer[43]]),
            honor: u16::from_le_bytes([buffer[44], buffer[45]]),
            virtue: u16::from_le_bytes([buffer[46], buffer[47]]),
            is_pkmode_on: buffer[48] == 1,
            sex: buffer[49] as char,
            move_data: String::from_utf8_lossy(&buffer[50..56]).to_string(),
            x_size: buffer[56] as char,
            y_size: buffer[57] as char,
            clevel: u16::from_le_bytes([buffer[58], buffer[59]]),
        }
    }
}

impl Packet for PacketZcNotifyMoveentry2 {
    fn id(&self) -> &str {
       "0x01da"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMoveentry2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 14]", &self.effect_state)
            .field("job[14, 16]", &self.job)
            .field("head[16, 18]", &self.head)
            .field("weapon[18, 22]", &self.weapon)
            .field("accessory[22, 24]", &self.accessory)
            .field("move_start_time[24, 28]", &self.move_start_time)
            .field("accessory2[28, 30]", &self.accessory2)
            .field("accessory3[30, 32]", &self.accessory3)
            .field("headpalette[32, 34]", &self.headpalette)
            .field("bodypalette[34, 36]", &self.bodypalette)
            .field("head_dir[36, 38]", &self.head_dir)
            .field("guid[38, 42]", &self.guid)
            .field("gemblem_ver[42, 44]", &self.gemblem_ver)
            .field("honor[44, 46]", &self.honor)
            .field("virtue[46, 48]", &self.virtue)
            .field("is_pkmode_on[48, 49]", &self.is_pkmode_on)
            .field("sex[49, 50]", &self.sex)
            .field("move_data[50, 56]", &self.move_data)
            .field("x_size[56, 57]", &self.x_size)
            .field("y_size[57, 58]", &self.y_size)
            .field("clevel[58, 60]", &self.clevel)
        .finish()
    }
}

pub struct PacketCaReqHash {
    pub packet_id: u16,
}

impl PacketCaReqHash {
    pub fn from(buffer: &[u8]) -> PacketCaReqHash {
        PacketCaReqHash {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCaReqHash {
    fn id(&self) -> &str {
       "0x01db"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaReqHash {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaReqHash")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketAcAckHash {
    pub packet_id: u16,
    pub packet_length: u16,
    pub secret: String,
}

impl PacketAcAckHash {
    pub fn from(buffer: &[u8]) -> PacketAcAckHash {
        PacketAcAckHash {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            secret: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketAcAckHash {
    fn id(&self) -> &str {
       "0x01dc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckHash {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckHash")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("secret[4, ?]", &self.secret)
        .finish()
    }
}

pub struct PacketCaLogin2 {
    pub packet_id: u16,
    pub version: u32,
    pub id: String,
    pub passwd_md5: String,
    pub clienttype: char,
}

impl PacketCaLogin2 {
    pub fn from(buffer: &[u8]) -> PacketCaLogin2 {
        PacketCaLogin2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            version: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            id: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            passwd_md5: String::from_utf8_lossy(&buffer[30..46]).to_string(),
            clienttype: buffer[46] as char,
        }
    }
}

impl Packet for PacketCaLogin2 {
    fn id(&self) -> &str {
       "0x01dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("version[2, 6]", &self.version)
            .field("id[6, 30]", &self.id)
            .field("passwd_md5[30, 46]", &self.passwd_md5)
            .field("clienttype[46, 47]", &self.clienttype)
        .finish()
    }
}

pub struct PacketZcNotifySkill2 {
    pub packet_id: u16,
    pub skid: u16,
    pub aid: u32,
    pub target_id: u32,
    pub start_time: u32,
    pub attack_mt: u32,
    pub attacked_mt: u32,
    pub damage: u32,
    pub level: u16,
    pub count: u16,
    pub action: char,
}

impl PacketZcNotifySkill2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifySkill2 {
        PacketZcNotifySkill2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            target_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            start_time: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            attack_mt: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            attacked_mt: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            damage: u32::from_le_bytes([buffer[24], buffer[25], buffer[26], buffer[27]]),
            level: u16::from_le_bytes([buffer[28], buffer[29]]),
            count: u16::from_le_bytes([buffer[30], buffer[31]]),
            action: buffer[32] as char,
        }
    }
}

impl Packet for PacketZcNotifySkill2 {
    fn id(&self) -> &str {
       "0x01de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifySkill2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifySkill2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("aid[4, 8]", &self.aid)
            .field("target_id[8, 12]", &self.target_id)
            .field("start_time[12, 16]", &self.start_time)
            .field("attack_mt[16, 20]", &self.attack_mt)
            .field("attacked_mt[20, 24]", &self.attacked_mt)
            .field("damage[24, 28]", &self.damage)
            .field("level[28, 30]", &self.level)
            .field("count[30, 32]", &self.count)
            .field("action[32, 33]", &self.action)
        .finish()
    }
}

pub struct PacketCzReqAccountname {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqAccountname {
    pub fn from(buffer: &[u8]) -> PacketCzReqAccountname {
        PacketCzReqAccountname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqAccountname {
    fn id(&self) -> &str {
       "0x01df"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqAccountname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqAccountname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcAckAccountname {
    pub packet_id: u16,
    pub aid: u32,
    pub name: String,
}

impl PacketZcAckAccountname {
    pub fn from(buffer: &[u8]) -> PacketZcAckAccountname {
        PacketZcAckAccountname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcAckAccountname {
    fn id(&self) -> &str {
       "0x01e0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckAccountname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAccountname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("name[6, 30]", &self.name)
        .finish()
    }
}

pub struct PacketZcSpirits2 {
    pub packet_id: u16,
    pub aid: u32,
    pub num: u16,
}

impl PacketZcSpirits2 {
    pub fn from(buffer: &[u8]) -> PacketZcSpirits2 {
        PacketZcSpirits2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            num: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcSpirits2 {
    fn id(&self) -> &str {
       "0x01e1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSpirits2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSpirits2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("num[6, 8]", &self.num)
        .finish()
    }
}

pub struct PacketZcReqCouple {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub name: String,
}

impl PacketZcReqCouple {
    pub fn from(buffer: &[u8]) -> PacketZcReqCouple {
        PacketZcReqCouple {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            name: String::from_utf8_lossy(&buffer[10..34]).to_string(),
        }
    }
}

impl Packet for PacketZcReqCouple {
    fn id(&self) -> &str {
       "0x01e2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqCouple")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("name[10, 34]", &self.name)
        .finish()
    }
}

pub struct PacketCzJoinCouple {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub answer: u32,
}

impl PacketCzJoinCouple {
    pub fn from(buffer: &[u8]) -> PacketCzJoinCouple {
        PacketCzJoinCouple {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            answer: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzJoinCouple {
    fn id(&self) -> &str {
       "0x01e3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzJoinCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinCouple")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("answer[10, 14]", &self.answer)
        .finish()
    }
}

pub struct PacketZcStartCouple {
    pub packet_id: u16,
}

impl PacketZcStartCouple {
    pub fn from(buffer: &[u8]) -> PacketZcStartCouple {
        PacketZcStartCouple {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcStartCouple {
    fn id(&self) -> &str {
       "0x01e4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStartCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStartCouple")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzReqJoinCouple {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqJoinCouple {
    pub fn from(buffer: &[u8]) -> PacketCzReqJoinCouple {
        PacketCzReqJoinCouple {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqJoinCouple {
    fn id(&self) -> &str {
       "0x01e5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqJoinCouple {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinCouple")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcCouplename {
    pub packet_id: u16,
    pub couple_name: String,
}

impl PacketZcCouplename {
    pub fn from(buffer: &[u8]) -> PacketZcCouplename {
        PacketZcCouplename {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            couple_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketZcCouplename {
    fn id(&self) -> &str {
       "0x01e6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCouplename {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCouplename")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("couple_name[2, 26]", &self.couple_name)
        .finish()
    }
}

pub struct PacketCzDoridori {
    pub packet_id: u16,
}

impl PacketCzDoridori {
    pub fn from(buffer: &[u8]) -> PacketCzDoridori {
        PacketCzDoridori {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzDoridori {
    fn id(&self) -> &str {
       "0x01e7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzDoridori {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDoridori")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzMakeGroup2 {
    pub packet_id: u16,
    pub group_name: String,
    pub item_pickup_rule: char,
    pub item_division_rule: char,
}

impl PacketCzMakeGroup2 {
    pub fn from(buffer: &[u8]) -> PacketCzMakeGroup2 {
        PacketCzMakeGroup2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            group_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            item_pickup_rule: buffer[26] as char,
            item_division_rule: buffer[27] as char,
        }
    }
}

impl Packet for PacketCzMakeGroup2 {
    fn id(&self) -> &str {
       "0x01e8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMakeGroup2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMakeGroup2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("group_name[2, 26]", &self.group_name)
            .field("item_pickup_rule[26, 27]", &self.item_pickup_rule)
            .field("item_division_rule[27, 28]", &self.item_division_rule)
        .finish()
    }
}

pub struct PacketZcAddMemberToGroup2 {
    pub packet_id: u16,
    pub aid: u32,
    pub role: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub state: char,
    pub group_name: String,
    pub character_name: String,
    pub map_name: String,
    pub item_pickup_rule: char,
    pub item_division_rule: char,
}

impl PacketZcAddMemberToGroup2 {
    pub fn from(buffer: &[u8]) -> PacketZcAddMemberToGroup2 {
        PacketZcAddMemberToGroup2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            role: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            state: buffer[14] as char,
            group_name: String::from_utf8_lossy(&buffer[15..39]).to_string(),
            character_name: String::from_utf8_lossy(&buffer[39..63]).to_string(),
            map_name: String::from_utf8_lossy(&buffer[63..79]).to_string(),
            item_pickup_rule: buffer[79] as char,
            item_division_rule: buffer[80] as char,
        }
    }
}

impl Packet for PacketZcAddMemberToGroup2 {
    fn id(&self) -> &str {
       "0x01e9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddMemberToGroup2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddMemberToGroup2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("role[6, 10]", &self.role)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("state[14, 15]", &self.state)
            .field("group_name[15, 39]", &self.group_name)
            .field("character_name[39, 63]", &self.character_name)
            .field("map_name[63, 79]", &self.map_name)
            .field("item_pickup_rule[79, 80]", &self.item_pickup_rule)
            .field("item_division_rule[80, 81]", &self.item_division_rule)
        .finish()
    }
}

pub struct PacketZcCongratulation {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketZcCongratulation {
    pub fn from(buffer: &[u8]) -> PacketZcCongratulation {
        PacketZcCongratulation {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcCongratulation {
    fn id(&self) -> &str {
       "0x01ea"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCongratulation {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCongratulation")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcNotifyPositionToGuildm {
    pub packet_id: u16,
    pub aid: u32,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketZcNotifyPositionToGuildm {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPositionToGuildm {
        PacketZcNotifyPositionToGuildm {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcNotifyPositionToGuildm {
    fn id(&self) -> &str {
       "0x01eb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPositionToGuildm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPositionToGuildm")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
        .finish()
    }
}

pub struct PacketZcGuildMemberMapChange {
    pub packet_id: u16,
    pub gdid: u32,
    pub aid: u32,
    pub map_name: String,
}

impl PacketZcGuildMemberMapChange {
    pub fn from(buffer: &[u8]) -> PacketZcGuildMemberMapChange {
        PacketZcGuildMemberMapChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gdid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            map_name: String::from_utf8_lossy(&buffer[10..26]).to_string(),
        }
    }
}

impl Packet for PacketZcGuildMemberMapChange {
    fn id(&self) -> &str {
       "0x01ec"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGuildMemberMapChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGuildMemberMapChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gdid[2, 6]", &self.gdid)
            .field("aid[6, 10]", &self.aid)
            .field("map_name[10, 26]", &self.map_name)
        .finish()
    }
}

pub struct PacketCzChopokgi {
    pub packet_id: u16,
}

impl PacketCzChopokgi {
    pub fn from(buffer: &[u8]) -> PacketCzChopokgi {
        PacketCzChopokgi {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzChopokgi {
    fn id(&self) -> &str {
       "0x01ed"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChopokgi {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChopokgi")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcNormalItemlist2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo2>,
}

impl PacketZcNormalItemlist2 {
    pub fn from(buffer: &[u8]) -> PacketZcNormalItemlist2 {
        let iter_count = &buffer.len() / 18;
        let mut vec_field: Vec<NormalitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 22 * i;
            vec_field.push(NormalitemExtrainfo2::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcNormalItemlist2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcNormalItemlist2 {
    fn id(&self) -> &str {
       "0x01ee"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNormalItemlist2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 22]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcCartNormalItemlist2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo2>,
}

impl PacketZcCartNormalItemlist2 {
    pub fn from(buffer: &[u8]) -> PacketZcCartNormalItemlist2 {
        let iter_count = &buffer.len() / 18;
        let mut vec_field: Vec<NormalitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 22 * i;
            vec_field.push(NormalitemExtrainfo2::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcCartNormalItemlist2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcCartNormalItemlist2 {
    fn id(&self) -> &str {
       "0x01ef"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartNormalItemlist2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 22]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcStoreNormalItemlist2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo2>,
}

impl PacketZcStoreNormalItemlist2 {
    pub fn from(buffer: &[u8]) -> PacketZcStoreNormalItemlist2 {
        let iter_count = &buffer.len() / 18;
        let mut vec_field: Vec<NormalitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 22 * i;
            vec_field.push(NormalitemExtrainfo2::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcStoreNormalItemlist2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcStoreNormalItemlist2 {
    fn id(&self) -> &str {
       "0x01f0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreNormalItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreNormalItemlist2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 22]", &self.item_info)
        .finish()
    }
}

pub struct PacketAcNotifyError {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketAcNotifyError {
    pub fn from(buffer: &[u8]) -> PacketAcNotifyError {
        PacketAcNotifyError {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketAcNotifyError {
    fn id(&self) -> &str {
       "0x01f1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcNotifyError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcNotifyError")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcUpdateCharstat2 {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub status: u32,
    pub sex: u16,
    pub head: u16,
    pub head_palette: u16,
}

impl PacketZcUpdateCharstat2 {
    pub fn from(buffer: &[u8]) -> PacketZcUpdateCharstat2 {
        PacketZcUpdateCharstat2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            status: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            sex: u16::from_le_bytes([buffer[14], buffer[15]]),
            head: u16::from_le_bytes([buffer[16], buffer[17]]),
            head_palette: u16::from_le_bytes([buffer[18], buffer[19]]),
        }
    }
}

impl Packet for PacketZcUpdateCharstat2 {
    fn id(&self) -> &str {
       "0x01f2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUpdateCharstat2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateCharstat2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("status[10, 14]", &self.status)
            .field("sex[14, 16]", &self.sex)
            .field("head[16, 18]", &self.head)
            .field("head_palette[18, 20]", &self.head_palette)
        .finish()
    }
}

pub struct PacketZcNotifyEffect2 {
    pub packet_id: u16,
    pub aid: u32,
    pub effect_id: u32,
}

impl PacketZcNotifyEffect2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyEffect2 {
        PacketZcNotifyEffect2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            effect_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcNotifyEffect2 {
    fn id(&self) -> &str {
       "0x01f3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyEffect2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyEffect2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("effect_id[6, 10]", &self.effect_id)
        .finish()
    }
}

pub struct PacketZcReqExchangeItem2 {
    pub packet_id: u16,
    pub name: String,
    pub gid: u32,
    pub level: u16,
}

impl PacketZcReqExchangeItem2 {
    pub fn from(buffer: &[u8]) -> PacketZcReqExchangeItem2 {
        PacketZcReqExchangeItem2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            gid: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            level: u16::from_le_bytes([buffer[30], buffer[31]]),
        }
    }
}

impl Packet for PacketZcReqExchangeItem2 {
    fn id(&self) -> &str {
       "0x01f4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqExchangeItem2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
            .field("gid[26, 30]", &self.gid)
            .field("level[30, 32]", &self.level)
        .finish()
    }
}

pub struct PacketZcAckExchangeItem2 {
    pub packet_id: u16,
    pub result: char,
    pub gid: u32,
    pub level: u16,
}

impl PacketZcAckExchangeItem2 {
    pub fn from(buffer: &[u8]) -> PacketZcAckExchangeItem2 {
        PacketZcAckExchangeItem2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
            gid: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            level: u16::from_le_bytes([buffer[7], buffer[8]]),
        }
    }
}

impl Packet for PacketZcAckExchangeItem2 {
    fn id(&self) -> &str {
       "0x01f5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckExchangeItem2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
            .field("gid[3, 7]", &self.gid)
            .field("level[7, 9]", &self.level)
        .finish()
    }
}

pub struct PacketZcReqBaby {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub name: String,
}

impl PacketZcReqBaby {
    pub fn from(buffer: &[u8]) -> PacketZcReqBaby {
        PacketZcReqBaby {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            name: String::from_utf8_lossy(&buffer[10..34]).to_string(),
        }
    }
}

impl Packet for PacketZcReqBaby {
    fn id(&self) -> &str {
       "0x01f6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqBaby")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("name[10, 34]", &self.name)
        .finish()
    }
}

pub struct PacketCzJoinBaby {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub answer: u32,
}

impl PacketCzJoinBaby {
    pub fn from(buffer: &[u8]) -> PacketCzJoinBaby {
        PacketCzJoinBaby {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            answer: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzJoinBaby {
    fn id(&self) -> &str {
       "0x01f7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzJoinBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinBaby")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("answer[10, 14]", &self.answer)
        .finish()
    }
}

pub struct PacketZcStartBaby {
    pub packet_id: u16,
}

impl PacketZcStartBaby {
    pub fn from(buffer: &[u8]) -> PacketZcStartBaby {
        PacketZcStartBaby {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcStartBaby {
    fn id(&self) -> &str {
       "0x01f8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStartBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStartBaby")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzReqJoinBaby {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzReqJoinBaby {
    pub fn from(buffer: &[u8]) -> PacketCzReqJoinBaby {
        PacketCzReqJoinBaby {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqJoinBaby {
    fn id(&self) -> &str {
       "0x01f9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqJoinBaby {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqJoinBaby")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketCaLogin3 {
    pub packet_id: u16,
    pub version: u32,
    pub id: String,
    pub passwd_md5: String,
    pub clienttype: char,
    pub client_info: char,
}

impl PacketCaLogin3 {
    pub fn from(buffer: &[u8]) -> PacketCaLogin3 {
        PacketCaLogin3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            version: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            id: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            passwd_md5: String::from_utf8_lossy(&buffer[30..46]).to_string(),
            clienttype: buffer[46] as char,
            client_info: buffer[47] as char,
        }
    }
}

impl Packet for PacketCaLogin3 {
    fn id(&self) -> &str {
       "0x01fa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaLogin3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("version[2, 6]", &self.version)
            .field("id[6, 30]", &self.id)
            .field("passwd_md5[30, 46]", &self.passwd_md5)
            .field("clienttype[46, 47]", &self.clienttype)
            .field("client_info[47, 48]", &self.client_info)
        .finish()
    }
}

pub struct PacketChDeleteChar2 {
    pub packet_id: u16,
    pub gid: u32,
    pub key: String,
}

impl PacketChDeleteChar2 {
    pub fn from(buffer: &[u8]) -> PacketChDeleteChar2 {
        PacketChDeleteChar2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            key: String::from_utf8_lossy(&buffer[6..56]).to_string(),
        }
    }
}

impl Packet for PacketChDeleteChar2 {
    fn id(&self) -> &str {
       "0x01fb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChDeleteChar2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("key[6, 56]", &self.key)
        .finish()
    }
}

pub struct PacketZcRepairitemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_list: Vec<RepairitemInfo>,
}

impl PacketZcRepairitemlist {
    pub fn from(buffer: &[u8]) -> PacketZcRepairitemlist {
        let iter_count = &buffer.len() / 13;
        let mut vec_field: Vec<RepairitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 17 * i;
            vec_field.push(RepairitemInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcRepairitemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcRepairitemlist {
    fn id(&self) -> &str {
       "0x01fc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcRepairitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcRepairitemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_list[4, 17]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzReqItemrepair {
    pub packet_id: u16,
    pub target_item_info: RepairitemInfo,
}

impl PacketCzReqItemrepair {
    pub fn from(buffer: &[u8]) -> PacketCzReqItemrepair {
        PacketCzReqItemrepair {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            target_item_info: RepairitemInfo::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketCzReqItemrepair {
    fn id(&self) -> &str {
       "0x01fd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqItemrepair {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqItemrepair")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("target_item_info[2, ?]", &self.target_item_info)
        .finish()
    }
}

pub struct PacketZcAckItemrepair {
    pub packet_id: u16,
    pub index: u16,
    pub result: char,
}

impl PacketZcAckItemrepair {
    pub fn from(buffer: &[u8]) -> PacketZcAckItemrepair {
        PacketZcAckItemrepair {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcAckItemrepair {
    fn id(&self) -> &str {
       "0x01fe"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckItemrepair {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemrepair")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("result[4, 5]", &self.result)
        .finish()
    }
}

pub struct PacketZcHighjump {
    pub packet_id: u16,
    pub aid: u32,
    pub x_pos: u16,
    pub y_pos: u16,
}

impl PacketZcHighjump {
    pub fn from(buffer: &[u8]) -> PacketZcHighjump {
        PacketZcHighjump {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcHighjump {
    fn id(&self) -> &str {
       "0x01ff"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcHighjump {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHighjump")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
        .finish()
    }
}

pub struct PacketCaConnectInfoChanged {
    pub packet_id: u16,
    pub id: String,
}

impl PacketCaConnectInfoChanged {
    pub fn from(buffer: &[u8]) -> PacketCaConnectInfoChanged {
        PacketCaConnectInfoChanged {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            id: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCaConnectInfoChanged {
    fn id(&self) -> &str {
       "0x0200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaConnectInfoChanged {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaConnectInfoChanged")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("id[2, 26]", &self.id)
        .finish()
    }
}

pub struct PacketZcFriendsList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub friend_list: Vec<StructFriend>,
}

impl PacketZcFriendsList {
    pub fn from(buffer: &[u8]) -> PacketZcFriendsList {
        let iter_count = &buffer.len() / 32;
        let mut vec_field: Vec<StructFriend> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 36 * i;
            vec_field.push(StructFriend::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcFriendsList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            friend_list: vec_field,
        }
    }
}

impl Packet for PacketZcFriendsList {
    fn id(&self) -> &str {
       "0x0201"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFriendsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFriendsList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("friend_list[4, 36]", &self.friend_list)
        .finish()
    }
}

pub struct PacketCzAddFriends {
    pub packet_id: u16,
    pub name: String,
}

impl PacketCzAddFriends {
    pub fn from(buffer: &[u8]) -> PacketCzAddFriends {
        PacketCzAddFriends {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzAddFriends {
    fn id(&self) -> &str {
       "0x0202"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAddFriends")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
        .finish()
    }
}

pub struct PacketCzDeleteFriends {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
}

impl PacketCzDeleteFriends {
    pub fn from(buffer: &[u8]) -> PacketCzDeleteFriends {
        PacketCzDeleteFriends {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzDeleteFriends {
    fn id(&self) -> &str {
       "0x0203"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzDeleteFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDeleteFriends")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
        .finish()
    }
}

pub struct PacketCaExeHashcheck {
    pub packet_id: u16,
    pub hash_value: String,
}

impl PacketCaExeHashcheck {
    pub fn from(buffer: &[u8]) -> PacketCaExeHashcheck {
        PacketCaExeHashcheck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            hash_value: String::from_utf8_lossy(&buffer[2..18]).to_string(),
        }
    }
}

impl Packet for PacketCaExeHashcheck {
    fn id(&self) -> &str {
       "0x0204"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaExeHashcheck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("hash_value[2, 18]", &self.hash_value)
        .finish()
    }
}

pub struct PacketZcDivorce {
    pub packet_id: u16,
    pub name: String,
}

impl PacketZcDivorce {
    pub fn from(buffer: &[u8]) -> PacketZcDivorce {
        PacketZcDivorce {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketZcDivorce {
    fn id(&self) -> &str {
       "0x0205"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDivorce {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDivorce")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
        .finish()
    }
}

pub struct PacketZcFriendsState {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub state: bool,
}

impl PacketZcFriendsState {
    pub fn from(buffer: &[u8]) -> PacketZcFriendsState {
        PacketZcFriendsState {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            state: buffer[10] == 1,
        }
    }
}

impl Packet for PacketZcFriendsState {
    fn id(&self) -> &str {
       "0x0206"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFriendsState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFriendsState")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("state[10, 11]", &self.state)
        .finish()
    }
}

pub struct PacketZcReqAddFriends {
    pub packet_id: u16,
    pub req_aid: u32,
    pub req_gid: u32,
    pub name: String,
}

impl PacketZcReqAddFriends {
    pub fn from(buffer: &[u8]) -> PacketZcReqAddFriends {
        PacketZcReqAddFriends {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            req_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            req_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            name: String::from_utf8_lossy(&buffer[10..34]).to_string(),
        }
    }
}

impl Packet for PacketZcReqAddFriends {
    fn id(&self) -> &str {
       "0x0207"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqAddFriends")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("req_aid[2, 6]", &self.req_aid)
            .field("req_gid[6, 10]", &self.req_gid)
            .field("name[10, 34]", &self.name)
        .finish()
    }
}

pub struct PacketCzAckReqAddFriends {
    pub packet_id: u16,
    pub req_aid: u32,
    pub req_gid: u32,
    pub result: u32,
}

impl PacketCzAckReqAddFriends {
    pub fn from(buffer: &[u8]) -> PacketCzAckReqAddFriends {
        PacketCzAckReqAddFriends {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            req_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            req_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            result: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzAckReqAddFriends {
    fn id(&self) -> &str {
       "0x0208"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAckReqAddFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckReqAddFriends")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("req_aid[2, 6]", &self.req_aid)
            .field("req_gid[6, 10]", &self.req_gid)
            .field("result[10, 14]", &self.result)
        .finish()
    }
}

pub struct PacketZcAddFriendsList {
    pub packet_id: u16,
    pub result: u16,
    pub aid: u32,
    pub gid: u32,
    pub name: String,
}

impl PacketZcAddFriendsList {
    pub fn from(buffer: &[u8]) -> PacketZcAddFriendsList {
        PacketZcAddFriendsList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            gid: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            name: String::from_utf8_lossy(&buffer[12..36]).to_string(),
        }
    }
}

impl Packet for PacketZcAddFriendsList {
    fn id(&self) -> &str {
       "0x0209"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddFriendsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddFriendsList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("aid[4, 8]", &self.aid)
            .field("gid[8, 12]", &self.gid)
            .field("name[12, 36]", &self.name)
        .finish()
    }
}

pub struct PacketZcDeleteFriends {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
}

impl PacketZcDeleteFriends {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteFriends {
        PacketZcDeleteFriends {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcDeleteFriends {
    fn id(&self) -> &str {
       "0x020a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteFriends {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteFriends")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
        .finish()
    }
}

pub struct PacketChExeHashcheck {
    pub packet_id: u16,
    pub client_type: char,
    pub hash_value: String,
}

impl PacketChExeHashcheck {
    pub fn from(buffer: &[u8]) -> PacketChExeHashcheck {
        PacketChExeHashcheck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            client_type: buffer[2] as char,
            hash_value: String::from_utf8_lossy(&buffer[3..19]).to_string(),
        }
    }
}

impl Packet for PacketChExeHashcheck {
    fn id(&self) -> &str {
       "0x020b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChExeHashcheck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("client_type[2, 3]", &self.client_type)
            .field("hash_value[3, 19]", &self.hash_value)
        .finish()
    }
}

pub struct PacketCzExeHashcheck {
    pub packet_id: u16,
    pub client_type: char,
    pub hash_value: String,
}

impl PacketCzExeHashcheck {
    pub fn from(buffer: &[u8]) -> PacketCzExeHashcheck {
        PacketCzExeHashcheck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            client_type: buffer[2] as char,
            hash_value: String::from_utf8_lossy(&buffer[3..19]).to_string(),
        }
    }
}

impl Packet for PacketCzExeHashcheck {
    fn id(&self) -> &str {
       "0x020c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzExeHashcheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzExeHashcheck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("client_type[2, 3]", &self.client_type)
            .field("hash_value[3, 19]", &self.hash_value)
        .finish()
    }
}

pub struct PacketHcBlockCharacter {
    pub packet_id: u16,
    pub packet_length: u16,
    pub character_list: Vec<TagCharacterBlockInfo>,
}

impl PacketHcBlockCharacter {
    pub fn from(buffer: &[u8]) -> PacketHcBlockCharacter {
        let iter_count = &buffer.len() / 24;
        let mut vec_field: Vec<TagCharacterBlockInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 28 * i;
            vec_field.push(TagCharacterBlockInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketHcBlockCharacter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            character_list: vec_field,
        }
    }
}

impl Packet for PacketHcBlockCharacter {
    fn id(&self) -> &str {
       "0x020d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcBlockCharacter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcBlockCharacter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("character_list[4, 28]", &self.character_list)
        .finish()
    }
}

pub struct PacketZcStarskill {
    pub packet_id: u16,
    pub map_name: String,
    pub monster_id: u32,
    pub star: char,
    pub result: char,
}

impl PacketZcStarskill {
    pub fn from(buffer: &[u8]) -> PacketZcStarskill {
        PacketZcStarskill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            map_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            monster_id: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            star: buffer[30] as char,
            result: buffer[31] as char,
        }
    }
}

impl Packet for PacketZcStarskill {
    fn id(&self) -> &str {
       "0x020e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStarskill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStarskill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("map_name[2, 26]", &self.map_name)
            .field("monster_id[26, 30]", &self.monster_id)
            .field("star[30, 31]", &self.star)
            .field("result[31, 32]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqPvppoint {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
}

impl PacketCzReqPvppoint {
    pub fn from(buffer: &[u8]) -> PacketCzReqPvppoint {
        PacketCzReqPvppoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzReqPvppoint {
    fn id(&self) -> &str {
       "0x020f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqPvppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqPvppoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
        .finish()
    }
}

pub struct PacketZcAckPvppoint {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub pvp: PVPINFO,
}

impl PacketZcAckPvppoint {
    pub fn from(buffer: &[u8]) -> PacketZcAckPvppoint {
        PacketZcAckPvppoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            pvp: PVPINFO::from(&buffer[10..buffer.len()]),
        }
    }
}

impl Packet for PacketZcAckPvppoint {
    fn id(&self) -> &str {
       "0x0210"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckPvppoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckPvppoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("pvp[10, ?]", &self.pvp)
        .finish()
    }
}

pub struct PacketZhMovePvpworld {
    pub packet_id: u16,
    pub gid: u32,
}

impl PacketZhMovePvpworld {
    pub fn from(buffer: &[u8]) -> PacketZhMovePvpworld {
        PacketZhMovePvpworld {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZhMovePvpworld {
    fn id(&self) -> &str {
       "0x0211"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZhMovePvpworld {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZhMovePvpworld")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
        .finish()
    }
}

pub struct PacketCzReqGiveMannerByname {
    pub packet_id: u16,
    pub char_name: String,
}

impl PacketCzReqGiveMannerByname {
    pub fn from(buffer: &[u8]) -> PacketCzReqGiveMannerByname {
        PacketCzReqGiveMannerByname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzReqGiveMannerByname {
    fn id(&self) -> &str {
       "0x0212"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqGiveMannerByname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqGiveMannerByname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_name[2, 26]", &self.char_name)
        .finish()
    }
}

pub struct PacketCzReqStatusGm {
    pub packet_id: u16,
    pub char_name: String,
}

impl PacketCzReqStatusGm {
    pub fn from(buffer: &[u8]) -> PacketCzReqStatusGm {
        PacketCzReqStatusGm {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzReqStatusGm {
    fn id(&self) -> &str {
       "0x0213"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqStatusGm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqStatusGm")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_name[2, 26]", &self.char_name)
        .finish()
    }
}

pub struct PacketZcAckStatusGm {
    pub packet_id: u16,
    pub str: char,
    pub standard_str: char,
    pub agi: char,
    pub standard_agi: char,
    pub vit: char,
    pub standard_vit: char,
    pub int: char,
    pub standard_int: char,
    pub dex: char,
    pub standard_dex: char,
    pub luk: char,
    pub standard_luk: char,
    pub att_power: u16,
    pub refining_power: u16,
    pub max_matt_power: u16,
    pub min_matt_power: u16,
    pub itemdef_power: u16,
    pub plusdef_power: u16,
    pub mdef_power: u16,
    pub plusmdef_power: u16,
    pub hit_success_value: u16,
    pub avoid_success_value: u16,
    pub plus_avoid_success_value: u16,
    pub critical_success_value: u16,
    pub aspd: u16,
    pub plus_aspd: u16,
}

impl PacketZcAckStatusGm {
    pub fn from(buffer: &[u8]) -> PacketZcAckStatusGm {
        PacketZcAckStatusGm {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            str: buffer[2] as char,
            standard_str: buffer[3] as char,
            agi: buffer[4] as char,
            standard_agi: buffer[5] as char,
            vit: buffer[6] as char,
            standard_vit: buffer[7] as char,
            int: buffer[8] as char,
            standard_int: buffer[9] as char,
            dex: buffer[10] as char,
            standard_dex: buffer[11] as char,
            luk: buffer[12] as char,
            standard_luk: buffer[13] as char,
            att_power: u16::from_le_bytes([buffer[14], buffer[15]]),
            refining_power: u16::from_le_bytes([buffer[16], buffer[17]]),
            max_matt_power: u16::from_le_bytes([buffer[18], buffer[19]]),
            min_matt_power: u16::from_le_bytes([buffer[20], buffer[21]]),
            itemdef_power: u16::from_le_bytes([buffer[22], buffer[23]]),
            plusdef_power: u16::from_le_bytes([buffer[24], buffer[25]]),
            mdef_power: u16::from_le_bytes([buffer[26], buffer[27]]),
            plusmdef_power: u16::from_le_bytes([buffer[28], buffer[29]]),
            hit_success_value: u16::from_le_bytes([buffer[30], buffer[31]]),
            avoid_success_value: u16::from_le_bytes([buffer[32], buffer[33]]),
            plus_avoid_success_value: u16::from_le_bytes([buffer[34], buffer[35]]),
            critical_success_value: u16::from_le_bytes([buffer[36], buffer[37]]),
            aspd: u16::from_le_bytes([buffer[38], buffer[39]]),
            plus_aspd: u16::from_le_bytes([buffer[40], buffer[41]]),
        }
    }
}

impl Packet for PacketZcAckStatusGm {
    fn id(&self) -> &str {
       "0x0214"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckStatusGm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckStatusGm")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("str[2, 3]", &self.str)
            .field("standard_str[3, 4]", &self.standard_str)
            .field("agi[4, 5]", &self.agi)
            .field("standard_agi[5, 6]", &self.standard_agi)
            .field("vit[6, 7]", &self.vit)
            .field("standard_vit[7, 8]", &self.standard_vit)
            .field("int[8, 9]", &self.int)
            .field("standard_int[9, 10]", &self.standard_int)
            .field("dex[10, 11]", &self.dex)
            .field("standard_dex[11, 12]", &self.standard_dex)
            .field("luk[12, 13]", &self.luk)
            .field("standard_luk[13, 14]", &self.standard_luk)
            .field("att_power[14, 16]", &self.att_power)
            .field("refining_power[16, 18]", &self.refining_power)
            .field("max_matt_power[18, 20]", &self.max_matt_power)
            .field("min_matt_power[20, 22]", &self.min_matt_power)
            .field("itemdef_power[22, 24]", &self.itemdef_power)
            .field("plusdef_power[24, 26]", &self.plusdef_power)
            .field("mdef_power[26, 28]", &self.mdef_power)
            .field("plusmdef_power[28, 30]", &self.plusmdef_power)
            .field("hit_success_value[30, 32]", &self.hit_success_value)
            .field("avoid_success_value[32, 34]", &self.avoid_success_value)
            .field("plus_avoid_success_value[34, 36]", &self.plus_avoid_success_value)
            .field("critical_success_value[36, 38]", &self.critical_success_value)
            .field("aspd[38, 40]", &self.aspd)
            .field("plus_aspd[40, 42]", &self.plus_aspd)
        .finish()
    }
}

pub struct PacketZcSkillmsg {
    pub packet_id: u16,
    pub msg_no: u32,
}

impl PacketZcSkillmsg {
    pub fn from(buffer: &[u8]) -> PacketZcSkillmsg {
        PacketZcSkillmsg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            msg_no: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcSkillmsg {
    fn id(&self) -> &str {
       "0x0215"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillmsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillmsg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("msg_no[2, 6]", &self.msg_no)
        .finish()
    }
}

pub struct PacketZcBabymsg {
    pub packet_id: u16,
    pub msg_no: u32,
}

impl PacketZcBabymsg {
    pub fn from(buffer: &[u8]) -> PacketZcBabymsg {
        PacketZcBabymsg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            msg_no: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcBabymsg {
    fn id(&self) -> &str {
       "0x0216"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBabymsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBabymsg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("msg_no[2, 6]", &self.msg_no)
        .finish()
    }
}

pub struct PacketCzBlacksmithRank {
    pub packet_id: u16,
}

impl PacketCzBlacksmithRank {
    pub fn from(buffer: &[u8]) -> PacketCzBlacksmithRank {
        PacketCzBlacksmithRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzBlacksmithRank {
    fn id(&self) -> &str {
       "0x0217"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzBlacksmithRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBlacksmithRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzAlchemistRank {
    pub packet_id: u16,
}

impl PacketCzAlchemistRank {
    pub fn from(buffer: &[u8]) -> PacketCzAlchemistRank {
        PacketCzAlchemistRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzAlchemistRank {
    fn id(&self) -> &str {
       "0x0218"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAlchemistRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAlchemistRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcBlacksmithRank {
    pub packet_id: u16,
    pub name: String,
    pub point: u32,
}

impl PacketZcBlacksmithRank {
    pub fn from(buffer: &[u8]) -> PacketZcBlacksmithRank {
        PacketZcBlacksmithRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..12]).to_string(),
            point: u32::from_le_bytes([buffer[242], buffer[243], buffer[244], buffer[245]]),
        }
    }
}

impl Packet for PacketZcBlacksmithRank {
    fn id(&self) -> &str {
       "0x0219"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBlacksmithRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBlacksmithRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 12]", &self.name)
            .field("point[242, 246]", &self.point)
        .finish()
    }
}

pub struct PacketZcAlchemistRank {
    pub packet_id: u16,
    pub name: String,
    pub point: u32,
}

impl PacketZcAlchemistRank {
    pub fn from(buffer: &[u8]) -> PacketZcAlchemistRank {
        PacketZcAlchemistRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..12]).to_string(),
            point: u32::from_le_bytes([buffer[242], buffer[243], buffer[244], buffer[245]]),
        }
    }
}

impl Packet for PacketZcAlchemistRank {
    fn id(&self) -> &str {
       "0x021a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAlchemistRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAlchemistRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 12]", &self.name)
            .field("point[242, 246]", &self.point)
        .finish()
    }
}

pub struct PacketZcBlacksmithPoint {
    pub packet_id: u16,
    pub point: u32,
    pub total_point: u32,
}

impl PacketZcBlacksmithPoint {
    pub fn from(buffer: &[u8]) -> PacketZcBlacksmithPoint {
        PacketZcBlacksmithPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            point: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            total_point: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcBlacksmithPoint {
    fn id(&self) -> &str {
       "0x021b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBlacksmithPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBlacksmithPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("point[2, 6]", &self.point)
            .field("total_point[6, 10]", &self.total_point)
        .finish()
    }
}

pub struct PacketZcAlchemistPoint {
    pub packet_id: u16,
    pub point: u32,
    pub total_point: u32,
}

impl PacketZcAlchemistPoint {
    pub fn from(buffer: &[u8]) -> PacketZcAlchemistPoint {
        PacketZcAlchemistPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            point: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            total_point: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcAlchemistPoint {
    fn id(&self) -> &str {
       "0x021c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAlchemistPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAlchemistPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("point[2, 6]", &self.point)
            .field("total_point[6, 10]", &self.total_point)
        .finish()
    }
}

pub struct PacketCzLesseffect {
    pub packet_id: u16,
    pub is_less: u32,
}

impl PacketCzLesseffect {
    pub fn from(buffer: &[u8]) -> PacketCzLesseffect {
        PacketCzLesseffect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            is_less: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzLesseffect {
    fn id(&self) -> &str {
       "0x021d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzLesseffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzLesseffect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("is_less[2, 6]", &self.is_less)
        .finish()
    }
}

pub struct PacketZcLesseffect {
    pub packet_id: u16,
    pub is_less: u32,
}

impl PacketZcLesseffect {
    pub fn from(buffer: &[u8]) -> PacketZcLesseffect {
        PacketZcLesseffect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            is_less: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcLesseffect {
    fn id(&self) -> &str {
       "0x021e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcLesseffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcLesseffect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("is_less[2, 6]", &self.is_less)
        .finish()
    }
}

pub struct PacketZcNotifyPkinfo {
    pub packet_id: u16,
    pub win_point: u32,
    pub lose_point: u32,
    pub kill_name: String,
    pub killed_name: String,
    pub expire_time: Filetime,
}

impl PacketZcNotifyPkinfo {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPkinfo {
        PacketZcNotifyPkinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            win_point: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            lose_point: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            kill_name: String::from_utf8_lossy(&buffer[10..34]).to_string(),
            killed_name: String::from_utf8_lossy(&buffer[34..58]).to_string(),
            expire_time: Filetime::from(&buffer[58..buffer.len()]),
        }
    }
}

impl Packet for PacketZcNotifyPkinfo {
    fn id(&self) -> &str {
       "0x021f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPkinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPkinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("win_point[2, 6]", &self.win_point)
            .field("lose_point[6, 10]", &self.lose_point)
            .field("kill_name[10, 34]", &self.kill_name)
            .field("killed_name[34, 58]", &self.killed_name)
            .field("expire_time[58, ?]", &self.expire_time)
        .finish()
    }
}

pub struct PacketZcNotifyCrazykiller {
    pub packet_id: u16,
    pub aid: u32,
    pub is_crazy_killer: u32,
}

impl PacketZcNotifyCrazykiller {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyCrazykiller {
        PacketZcNotifyCrazykiller {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            is_crazy_killer: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcNotifyCrazykiller {
    fn id(&self) -> &str {
       "0x0220"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyCrazykiller {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyCrazykiller")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("is_crazy_killer[6, 10]", &self.is_crazy_killer)
        .finish()
    }
}

pub struct PacketZcNotifyWeaponitemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_list: Vec<RepairitemInfo>,
}

impl PacketZcNotifyWeaponitemlist {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyWeaponitemlist {
        let iter_count = &buffer.len() / 13;
        let mut vec_field: Vec<RepairitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 17 * i;
            vec_field.push(RepairitemInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcNotifyWeaponitemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcNotifyWeaponitemlist {
    fn id(&self) -> &str {
       "0x0221"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyWeaponitemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyWeaponitemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_list[4, 17]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzReqWeaponrefine {
    pub packet_id: u16,
    pub index: u32,
}

impl PacketCzReqWeaponrefine {
    pub fn from(buffer: &[u8]) -> PacketCzReqWeaponrefine {
        PacketCzReqWeaponrefine {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqWeaponrefine {
    fn id(&self) -> &str {
       "0x0222"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqWeaponrefine {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqWeaponrefine")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 6]", &self.index)
        .finish()
    }
}

pub struct PacketZcAckWeaponrefine {
    pub packet_id: u16,
    pub msg: u32,
    pub itid: u16,
}

impl PacketZcAckWeaponrefine {
    pub fn from(buffer: &[u8]) -> PacketZcAckWeaponrefine {
        PacketZcAckWeaponrefine {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            msg: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcAckWeaponrefine {
    fn id(&self) -> &str {
       "0x0223"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckWeaponrefine {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckWeaponrefine")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("msg[2, 6]", &self.msg)
            .field("itid[6, 8]", &self.itid)
        .finish()
    }
}

pub struct PacketZcTaekwonPoint {
    pub packet_id: u16,
    pub point: u32,
    pub total_point: u32,
}

impl PacketZcTaekwonPoint {
    pub fn from(buffer: &[u8]) -> PacketZcTaekwonPoint {
        PacketZcTaekwonPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            point: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            total_point: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcTaekwonPoint {
    fn id(&self) -> &str {
       "0x0224"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcTaekwonPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTaekwonPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("point[2, 6]", &self.point)
            .field("total_point[6, 10]", &self.total_point)
        .finish()
    }
}

pub struct PacketCzTaekwonRank {
    pub packet_id: u16,
}

impl PacketCzTaekwonRank {
    pub fn from(buffer: &[u8]) -> PacketCzTaekwonRank {
        PacketCzTaekwonRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzTaekwonRank {
    fn id(&self) -> &str {
       "0x0225"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzTaekwonRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzTaekwonRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcTaekwonRank {
    pub packet_id: u16,
    pub name: String,
    pub point: u32,
}

impl PacketZcTaekwonRank {
    pub fn from(buffer: &[u8]) -> PacketZcTaekwonRank {
        PacketZcTaekwonRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..12]).to_string(),
            point: u32::from_le_bytes([buffer[242], buffer[243], buffer[244], buffer[245]]),
        }
    }
}

impl Packet for PacketZcTaekwonRank {
    fn id(&self) -> &str {
       "0x0226"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcTaekwonRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcTaekwonRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 12]", &self.name)
            .field("point[242, 246]", &self.point)
        .finish()
    }
}

pub struct PacketZcGameGuard {
    pub packet_id: u16,
    pub auth_data: u32,
}

impl PacketZcGameGuard {
    pub fn from(buffer: &[u8]) -> PacketZcGameGuard {
        PacketZcGameGuard {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auth_data: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcGameGuard {
    fn id(&self) -> &str {
       "0x0227"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGameGuard")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auth_data[2, 6]", &self.auth_data)
        .finish()
    }
}

pub struct PacketCzAckGameGuard {
    pub packet_id: u16,
    pub auth_data: u32,
}

impl PacketCzAckGameGuard {
    pub fn from(buffer: &[u8]) -> PacketCzAckGameGuard {
        PacketCzAckGameGuard {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auth_data: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzAckGameGuard {
    fn id(&self) -> &str {
       "0x0228"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckGameGuard")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auth_data[2, 6]", &self.auth_data)
        .finish()
    }
}

pub struct PacketZcStateChange3 {
    pub packet_id: u16,
    pub aid: u32,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub is_pkmode_on: bool,
}

impl PacketZcStateChange3 {
    pub fn from(buffer: &[u8]) -> PacketZcStateChange3 {
        PacketZcStateChange3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            body_state: u16::from_le_bytes([buffer[6], buffer[7]]),
            health_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            effect_state: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            is_pkmode_on: buffer[14] == 1,
        }
    }
}

impl Packet for PacketZcStateChange3 {
    fn id(&self) -> &str {
       "0x0229"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStateChange3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStateChange3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("body_state[6, 8]", &self.body_state)
            .field("health_state[8, 10]", &self.health_state)
            .field("effect_state[10, 14]", &self.effect_state)
            .field("is_pkmode_on[14, 15]", &self.is_pkmode_on)
        .finish()
    }
}

pub struct PacketZcNotifyStandentry3 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub state: char,
    pub clevel: u16,
}

impl PacketZcNotifyStandentry3 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStandentry3 {
        PacketZcNotifyStandentry3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            job: u16::from_le_bytes([buffer[16], buffer[17]]),
            head: u16::from_le_bytes([buffer[18], buffer[19]]),
            weapon: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            accessory: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory2: u16::from_le_bytes([buffer[26], buffer[27]]),
            accessory3: u16::from_le_bytes([buffer[28], buffer[29]]),
            headpalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            bodypalette: u16::from_le_bytes([buffer[32], buffer[33]]),
            head_dir: u16::from_le_bytes([buffer[34], buffer[35]]),
            guid: u32::from_le_bytes([buffer[36], buffer[37], buffer[38], buffer[39]]),
            gemblem_ver: u16::from_le_bytes([buffer[40], buffer[41]]),
            honor: u16::from_le_bytes([buffer[42], buffer[43]]),
            virtue: u32::from_le_bytes([buffer[44], buffer[45], buffer[46], buffer[47]]),
            is_pkmode_on: buffer[48] == 1,
            sex: buffer[49] as char,
            pos_dir: String::from_utf8_lossy(&buffer[50..53]).to_string(),
            x_size: buffer[53] as char,
            y_size: buffer[54] as char,
            state: buffer[55] as char,
            clevel: u16::from_le_bytes([buffer[56], buffer[57]]),
        }
    }
}

impl Packet for PacketZcNotifyStandentry3 {
    fn id(&self) -> &str {
       "0x022a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStandentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 16]", &self.effect_state)
            .field("job[16, 18]", &self.job)
            .field("head[18, 20]", &self.head)
            .field("weapon[20, 24]", &self.weapon)
            .field("accessory[24, 26]", &self.accessory)
            .field("accessory2[26, 28]", &self.accessory2)
            .field("accessory3[28, 30]", &self.accessory3)
            .field("headpalette[30, 32]", &self.headpalette)
            .field("bodypalette[32, 34]", &self.bodypalette)
            .field("head_dir[34, 36]", &self.head_dir)
            .field("guid[36, 40]", &self.guid)
            .field("gemblem_ver[40, 42]", &self.gemblem_ver)
            .field("honor[42, 44]", &self.honor)
            .field("virtue[44, 48]", &self.virtue)
            .field("is_pkmode_on[48, 49]", &self.is_pkmode_on)
            .field("sex[49, 50]", &self.sex)
            .field("pos_dir[50, 53]", &self.pos_dir)
            .field("x_size[53, 54]", &self.x_size)
            .field("y_size[54, 55]", &self.y_size)
            .field("state[55, 56]", &self.state)
            .field("clevel[56, 58]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyNewentry3 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
}

impl PacketZcNotifyNewentry3 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyNewentry3 {
        PacketZcNotifyNewentry3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            job: u16::from_le_bytes([buffer[16], buffer[17]]),
            head: u16::from_le_bytes([buffer[18], buffer[19]]),
            weapon: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            accessory: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory2: u16::from_le_bytes([buffer[26], buffer[27]]),
            accessory3: u16::from_le_bytes([buffer[28], buffer[29]]),
            headpalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            bodypalette: u16::from_le_bytes([buffer[32], buffer[33]]),
            head_dir: u16::from_le_bytes([buffer[34], buffer[35]]),
            guid: u32::from_le_bytes([buffer[36], buffer[37], buffer[38], buffer[39]]),
            gemblem_ver: u16::from_le_bytes([buffer[40], buffer[41]]),
            honor: u16::from_le_bytes([buffer[42], buffer[43]]),
            virtue: u32::from_le_bytes([buffer[44], buffer[45], buffer[46], buffer[47]]),
            is_pkmode_on: buffer[48] == 1,
            sex: buffer[49] as char,
            pos_dir: String::from_utf8_lossy(&buffer[50..53]).to_string(),
            x_size: buffer[53] as char,
            y_size: buffer[54] as char,
            clevel: u16::from_le_bytes([buffer[55], buffer[56]]),
        }
    }
}

impl Packet for PacketZcNotifyNewentry3 {
    fn id(&self) -> &str {
       "0x022b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyNewentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 16]", &self.effect_state)
            .field("job[16, 18]", &self.job)
            .field("head[18, 20]", &self.head)
            .field("weapon[20, 24]", &self.weapon)
            .field("accessory[24, 26]", &self.accessory)
            .field("accessory2[26, 28]", &self.accessory2)
            .field("accessory3[28, 30]", &self.accessory3)
            .field("headpalette[30, 32]", &self.headpalette)
            .field("bodypalette[32, 34]", &self.bodypalette)
            .field("head_dir[34, 36]", &self.head_dir)
            .field("guid[36, 40]", &self.guid)
            .field("gemblem_ver[40, 42]", &self.gemblem_ver)
            .field("honor[42, 44]", &self.honor)
            .field("virtue[44, 48]", &self.virtue)
            .field("is_pkmode_on[48, 49]", &self.is_pkmode_on)
            .field("sex[49, 50]", &self.sex)
            .field("pos_dir[50, 53]", &self.pos_dir)
            .field("x_size[53, 54]", &self.x_size)
            .field("y_size[54, 55]", &self.y_size)
            .field("clevel[55, 57]", &self.clevel)
        .finish()
    }
}

pub struct PacketZcNotifyMoveentry3 {
    pub packet_id: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub move_start_time: u32,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub move_data: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
}

impl PacketZcNotifyMoveentry3 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMoveentry3 {
        PacketZcNotifyMoveentry3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            objecttype: buffer[2] as char,
            gid: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            speed: u16::from_le_bytes([buffer[7], buffer[8]]),
            body_state: u16::from_le_bytes([buffer[9], buffer[10]]),
            health_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            effect_state: u32::from_le_bytes([buffer[13], buffer[14], buffer[15], buffer[16]]),
            job: u16::from_le_bytes([buffer[17], buffer[18]]),
            head: u16::from_le_bytes([buffer[19], buffer[20]]),
            weapon: u32::from_le_bytes([buffer[21], buffer[22], buffer[23], buffer[24]]),
            accessory: u16::from_le_bytes([buffer[25], buffer[26]]),
            move_start_time: u32::from_le_bytes([buffer[27], buffer[28], buffer[29], buffer[30]]),
            accessory2: u16::from_le_bytes([buffer[31], buffer[32]]),
            accessory3: u16::from_le_bytes([buffer[33], buffer[34]]),
            headpalette: u16::from_le_bytes([buffer[35], buffer[36]]),
            bodypalette: u16::from_le_bytes([buffer[37], buffer[38]]),
            head_dir: u16::from_le_bytes([buffer[39], buffer[40]]),
            guid: u32::from_le_bytes([buffer[41], buffer[42], buffer[43], buffer[44]]),
            gemblem_ver: u16::from_le_bytes([buffer[45], buffer[46]]),
            honor: u16::from_le_bytes([buffer[47], buffer[48]]),
            virtue: u32::from_le_bytes([buffer[49], buffer[50], buffer[51], buffer[52]]),
            is_pkmode_on: buffer[53] == 1,
            sex: buffer[54] as char,
            move_data: String::from_utf8_lossy(&buffer[55..61]).to_string(),
            x_size: buffer[61] as char,
            y_size: buffer[62] as char,
            clevel: u16::from_le_bytes([buffer[63], buffer[64]]),
        }
    }
}

impl Packet for PacketZcNotifyMoveentry3 {
    fn id(&self) -> &str {
       "0x022c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMoveentry3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("objecttype[2, 3]", &self.objecttype)
            .field("gid[3, 7]", &self.gid)
            .field("speed[7, 9]", &self.speed)
            .field("body_state[9, 11]", &self.body_state)
            .field("health_state[11, 13]", &self.health_state)
            .field("effect_state[13, 17]", &self.effect_state)
            .field("job[17, 19]", &self.job)
            .field("head[19, 21]", &self.head)
            .field("weapon[21, 25]", &self.weapon)
            .field("accessory[25, 27]", &self.accessory)
            .field("move_start_time[27, 31]", &self.move_start_time)
            .field("accessory2[31, 33]", &self.accessory2)
            .field("accessory3[33, 35]", &self.accessory3)
            .field("headpalette[35, 37]", &self.headpalette)
            .field("bodypalette[37, 39]", &self.bodypalette)
            .field("head_dir[39, 41]", &self.head_dir)
            .field("guid[41, 45]", &self.guid)
            .field("gemblem_ver[45, 47]", &self.gemblem_ver)
            .field("honor[47, 49]", &self.honor)
            .field("virtue[49, 53]", &self.virtue)
            .field("is_pkmode_on[53, 54]", &self.is_pkmode_on)
            .field("sex[54, 55]", &self.sex)
            .field("move_data[55, 61]", &self.move_data)
            .field("x_size[61, 62]", &self.x_size)
            .field("y_size[62, 63]", &self.y_size)
            .field("clevel[63, 65]", &self.clevel)
        .finish()
    }
}

pub struct PacketCzCommandMer {
    pub packet_id: u16,
    pub type_: u16,
    pub command: char,
}

impl PacketCzCommandMer {
    pub fn from(buffer: &[u8]) -> PacketCzCommandMer {
        PacketCzCommandMer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
            command: buffer[4] as char,
        }
    }
}

impl Packet for PacketCzCommandMer {
    fn id(&self) -> &str {
       "0x022d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCommandMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCommandMer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
            .field("command[4, 5]", &self.command)
        .finish()
    }
}

pub struct PacketZcPropertyHomun {
    pub packet_id: u16,
    pub sz_name: String,
    pub b_modified: char,
    pub n_level: u16,
    pub n_fullness: u16,
    pub n_relationship: u16,
    pub itid: u16,
    pub atk: u16,
    pub matk: u16,
    pub hit: u16,
    pub critical: u16,
    pub def: u16,
    pub mdef: u16,
    pub flee: u16,
    pub aspd: u16,
    pub hp: u16,
    pub max_hp: u16,
    pub sp: u16,
    pub max_sp: u16,
    pub exp: u32,
    pub max_exp: u32,
    pub skpoint: u16,
    pub atkrange: u16,
}

impl PacketZcPropertyHomun {
    pub fn from(buffer: &[u8]) -> PacketZcPropertyHomun {
        PacketZcPropertyHomun {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            sz_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            b_modified: buffer[26] as char,
            n_level: u16::from_le_bytes([buffer[27], buffer[28]]),
            n_fullness: u16::from_le_bytes([buffer[29], buffer[30]]),
            n_relationship: u16::from_le_bytes([buffer[31], buffer[32]]),
            itid: u16::from_le_bytes([buffer[33], buffer[34]]),
            atk: u16::from_le_bytes([buffer[35], buffer[36]]),
            matk: u16::from_le_bytes([buffer[37], buffer[38]]),
            hit: u16::from_le_bytes([buffer[39], buffer[40]]),
            critical: u16::from_le_bytes([buffer[41], buffer[42]]),
            def: u16::from_le_bytes([buffer[43], buffer[44]]),
            mdef: u16::from_le_bytes([buffer[45], buffer[46]]),
            flee: u16::from_le_bytes([buffer[47], buffer[48]]),
            aspd: u16::from_le_bytes([buffer[49], buffer[50]]),
            hp: u16::from_le_bytes([buffer[51], buffer[52]]),
            max_hp: u16::from_le_bytes([buffer[53], buffer[54]]),
            sp: u16::from_le_bytes([buffer[55], buffer[56]]),
            max_sp: u16::from_le_bytes([buffer[57], buffer[58]]),
            exp: u32::from_le_bytes([buffer[59], buffer[60], buffer[61], buffer[62]]),
            max_exp: u32::from_le_bytes([buffer[63], buffer[64], buffer[65], buffer[66]]),
            skpoint: u16::from_le_bytes([buffer[67], buffer[68]]),
            atkrange: u16::from_le_bytes([buffer[69], buffer[70]]),
        }
    }
}

impl Packet for PacketZcPropertyHomun {
    fn id(&self) -> &str {
       "0x022e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPropertyHomun {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPropertyHomun")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("sz_name[2, 26]", &self.sz_name)
            .field("b_modified[26, 27]", &self.b_modified)
            .field("n_level[27, 29]", &self.n_level)
            .field("n_fullness[29, 31]", &self.n_fullness)
            .field("n_relationship[31, 33]", &self.n_relationship)
            .field("itid[33, 35]", &self.itid)
            .field("atk[35, 37]", &self.atk)
            .field("matk[37, 39]", &self.matk)
            .field("hit[39, 41]", &self.hit)
            .field("critical[41, 43]", &self.critical)
            .field("def[43, 45]", &self.def)
            .field("mdef[45, 47]", &self.mdef)
            .field("flee[47, 49]", &self.flee)
            .field("aspd[49, 51]", &self.aspd)
            .field("hp[51, 53]", &self.hp)
            .field("max_hp[53, 55]", &self.max_hp)
            .field("sp[55, 57]", &self.sp)
            .field("max_sp[57, 59]", &self.max_sp)
            .field("exp[59, 63]", &self.exp)
            .field("max_exp[63, 67]", &self.max_exp)
            .field("skpoint[67, 69]", &self.skpoint)
            .field("atkrange[69, 71]", &self.atkrange)
        .finish()
    }
}

pub struct PacketZcChangestateMer {
    pub packet_id: u16,
    pub type_: char,
    pub state: char,
    pub gid: u32,
    pub data: u32,
}

impl PacketZcChangestateMer {
    pub fn from(buffer: &[u8]) -> PacketZcChangestateMer {
        PacketZcChangestateMer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: buffer[2] as char,
            state: buffer[3] as char,
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            data: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketZcChangestateMer {
    fn id(&self) -> &str {
       "0x0230"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcChangestateMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangestateMer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 3]", &self.type_)
            .field("state[3, 4]", &self.state)
            .field("gid[4, 8]", &self.gid)
            .field("data[8, 12]", &self.data)
        .finish()
    }
}

pub struct PacketCzRenameMer {
    pub packet_id: u16,
    pub name: String,
}

impl PacketCzRenameMer {
    pub fn from(buffer: &[u8]) -> PacketCzRenameMer {
        PacketCzRenameMer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzRenameMer {
    fn id(&self) -> &str {
       "0x0231"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRenameMer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRenameMer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
        .finish()
    }
}

pub struct PacketCzRequestMovenpc {
    pub packet_id: u16,
    pub gid: u32,
    pub dest: String,
}

impl PacketCzRequestMovenpc {
    pub fn from(buffer: &[u8]) -> PacketCzRequestMovenpc {
        PacketCzRequestMovenpc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            dest: String::from_utf8_lossy(&buffer[6..9]).to_string(),
        }
    }
}

impl Packet for PacketCzRequestMovenpc {
    fn id(&self) -> &str {
       "0x0232"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestMovenpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMovenpc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("dest[6, 9]", &self.dest)
        .finish()
    }
}

pub struct PacketCzRequestActnpc {
    pub packet_id: u16,
    pub gid: u32,
    pub target_gid: u32,
    pub action: char,
}

impl PacketCzRequestActnpc {
    pub fn from(buffer: &[u8]) -> PacketCzRequestActnpc {
        PacketCzRequestActnpc {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            action: buffer[10] as char,
        }
    }
}

impl Packet for PacketCzRequestActnpc {
    fn id(&self) -> &str {
       "0x0233"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestActnpc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestActnpc")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("target_gid[6, 10]", &self.target_gid)
            .field("action[10, 11]", &self.action)
        .finish()
    }
}

pub struct PacketCzRequestMovetoowner {
    pub packet_id: u16,
    pub gid: u32,
}

impl PacketCzRequestMovetoowner {
    pub fn from(buffer: &[u8]) -> PacketCzRequestMovetoowner {
        PacketCzRequestMovetoowner {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzRequestMovetoowner {
    fn id(&self) -> &str {
       "0x0234"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestMovetoowner {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestMovetoowner")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
        .finish()
    }
}

pub struct PacketZcReqStorePassword {
    pub packet_id: u16,
    pub info: u16,
}

impl PacketZcReqStorePassword {
    pub fn from(buffer: &[u8]) -> PacketZcReqStorePassword {
        PacketZcReqStorePassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcReqStorePassword {
    fn id(&self) -> &str {
       "0x023a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqStorePassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, 4]", &self.info)
        .finish()
    }
}

pub struct PacketCzAckStorePassword {
    pub packet_id: u16,
    pub type_: u16,
    pub password: String,
    pub new_password: String,
}

impl PacketCzAckStorePassword {
    pub fn from(buffer: &[u8]) -> PacketCzAckStorePassword {
        PacketCzAckStorePassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
            password: String::from_utf8_lossy(&buffer[4..20]).to_string(),
            new_password: String::from_utf8_lossy(&buffer[20..36]).to_string(),
        }
    }
}

impl Packet for PacketCzAckStorePassword {
    fn id(&self) -> &str {
       "0x023b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAckStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckStorePassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
            .field("password[4, 20]", &self.password)
            .field("new_password[20, 36]", &self.new_password)
        .finish()
    }
}

pub struct PacketZcResultStorePassword {
    pub packet_id: u16,
    pub result: u16,
    pub error_count: u16,
}

impl PacketZcResultStorePassword {
    pub fn from(buffer: &[u8]) -> PacketZcResultStorePassword {
        PacketZcResultStorePassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            error_count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcResultStorePassword {
    fn id(&self) -> &str {
       "0x023c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcResultStorePassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResultStorePassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("error_count[4, 6]", &self.error_count)
        .finish()
    }
}

pub struct PacketAcEventResult {
    pub packet_id: u16,
    pub event_item_count: u32,
}

impl PacketAcEventResult {
    pub fn from(buffer: &[u8]) -> PacketAcEventResult {
        PacketAcEventResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            event_item_count: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketAcEventResult {
    fn id(&self) -> &str {
       "0x023d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcEventResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcEventResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("event_item_count[2, 6]", &self.event_item_count)
        .finish()
    }
}

pub struct PacketHcRequestCharacterPassword {
    pub packet_id: u16,
    pub result: u16,
    pub dummy_value: u32,
}

impl PacketHcRequestCharacterPassword {
    pub fn from(buffer: &[u8]) -> PacketHcRequestCharacterPassword {
        PacketHcRequestCharacterPassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            dummy_value: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketHcRequestCharacterPassword {
    fn id(&self) -> &str {
       "0x023e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcRequestCharacterPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRequestCharacterPassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("dummy_value[4, 8]", &self.dummy_value)
        .finish()
    }
}

pub struct PacketCzMailGetList {
    pub packet_id: u16,
}

impl PacketCzMailGetList {
    pub fn from(buffer: &[u8]) -> PacketCzMailGetList {
        PacketCzMailGetList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzMailGetList {
    fn id(&self) -> &str {
       "0x023f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailGetList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcMailReqGetList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub mail_number: u32,
    pub mail_list: Vec<MailList>,
}

impl PacketZcMailReqGetList {
    pub fn from(buffer: &[u8]) -> PacketZcMailReqGetList {
        let iter_count = &buffer.len() / 73;
        let mut vec_field: Vec<MailList> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 81 * i;
            vec_field.push(MailList::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcMailReqGetList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            mail_number: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            mail_list: vec_field,
        }
    }
}

impl Packet for PacketZcMailReqGetList {
    fn id(&self) -> &str {
       "0x0240"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMailReqGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqGetList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("mail_number[4, 8]", &self.mail_number)
            .field("mail_list[8, 81]", &self.mail_list)
        .finish()
    }
}

pub struct PacketCzMailOpen {
    pub packet_id: u16,
    pub mail_id: u32,
}

impl PacketCzMailOpen {
    pub fn from(buffer: &[u8]) -> PacketCzMailOpen {
        PacketCzMailOpen {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzMailOpen {
    fn id(&self) -> &str {
       "0x0241"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailOpen")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
        .finish()
    }
}

pub struct PacketZcMailReqOpen {
    pub packet_id: u16,
    pub packet_length: u16,
    pub mail_id: u32,
    pub header: String,
    pub from_name: String,
    pub delete_time: u32,
    pub money: u32,
    pub count: u32,
    pub itid: u16,
    pub type_: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub msg_len: char,
    pub msg: String,
}

impl PacketZcMailReqOpen {
    pub fn from(buffer: &[u8]) -> PacketZcMailReqOpen {
        PacketZcMailReqOpen {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            mail_id: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            header: String::from_utf8_lossy(&buffer[8..48]).to_string(),
            from_name: String::from_utf8_lossy(&buffer[48..72]).to_string(),
            delete_time: u32::from_le_bytes([buffer[72], buffer[73], buffer[74], buffer[75]]),
            money: u32::from_le_bytes([buffer[76], buffer[77], buffer[78], buffer[79]]),
            count: u32::from_le_bytes([buffer[80], buffer[81], buffer[82], buffer[83]]),
            itid: u16::from_le_bytes([buffer[84], buffer[85]]),
            type_: u16::from_le_bytes([buffer[86], buffer[87]]),
            is_identified: buffer[88] == 1,
            is_damaged: buffer[89] == 1,
            refining_level: buffer[90] as char,
            slot: EQUIPSLOTINFO::from(&buffer[91..99]),
            msg_len: buffer[99] as char,
            msg: String::from_utf8_lossy(&buffer[100..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcMailReqOpen {
    fn id(&self) -> &str {
       "0x0242"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMailReqOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqOpen")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("mail_id[4, 8]", &self.mail_id)
            .field("header[8, 48]", &self.header)
            .field("from_name[48, 72]", &self.from_name)
            .field("delete_time[72, 76]", &self.delete_time)
            .field("money[76, 80]", &self.money)
            .field("count[80, 84]", &self.count)
            .field("itid[84, 86]", &self.itid)
            .field("type_[86, 88]", &self.type_)
            .field("is_identified[88, 89]", &self.is_identified)
            .field("is_damaged[89, 90]", &self.is_damaged)
            .field("refining_level[90, 91]", &self.refining_level)
            .field("slot[91, 99]", &self.slot)
            .field("msg_len[99, 100]", &self.msg_len)
            .field("msg[100, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketCzMailDelete {
    pub packet_id: u16,
    pub mail_id: u32,
}

impl PacketCzMailDelete {
    pub fn from(buffer: &[u8]) -> PacketCzMailDelete {
        PacketCzMailDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzMailDelete {
    fn id(&self) -> &str {
       "0x0243"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
        .finish()
    }
}

pub struct PacketCzMailGetItem {
    pub packet_id: u16,
    pub mail_id: u32,
}

impl PacketCzMailGetItem {
    pub fn from(buffer: &[u8]) -> PacketCzMailGetItem {
        PacketCzMailGetItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzMailGetItem {
    fn id(&self) -> &str {
       "0x0244"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailGetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailGetItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
        .finish()
    }
}

pub struct PacketZcMailReqGetItem {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcMailReqGetItem {
    pub fn from(buffer: &[u8]) -> PacketZcMailReqGetItem {
        PacketZcMailReqGetItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcMailReqGetItem {
    fn id(&self) -> &str {
       "0x0245"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMailReqGetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqGetItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzMailResetItem {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketCzMailResetItem {
    pub fn from(buffer: &[u8]) -> PacketCzMailResetItem {
        PacketCzMailResetItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzMailResetItem {
    fn id(&self) -> &str {
       "0x0246"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailResetItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailResetItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketCzMailAddItem {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzMailAddItem {
    pub fn from(buffer: &[u8]) -> PacketCzMailAddItem {
        PacketCzMailAddItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzMailAddItem {
    fn id(&self) -> &str {
       "0x0247"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailAddItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzMailSend {
    pub packet_id: u16,
    pub packet_length: u16,
    pub receive_name: String,
    pub header: String,
    pub msg_len: u32,
    pub msg: String,
}

impl PacketCzMailSend {
    pub fn from(buffer: &[u8]) -> PacketCzMailSend {
        PacketCzMailSend {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            receive_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            header: String::from_utf8_lossy(&buffer[28..68]).to_string(),
            msg_len: u32::from_le_bytes([buffer[68], buffer[69], buffer[70], buffer[71]]),
            msg: String::from_utf8_lossy(&buffer[72..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzMailSend {
    fn id(&self) -> &str {
       "0x0248"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMailSend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMailSend")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("receive_name[4, 28]", &self.receive_name)
            .field("header[28, 68]", &self.header)
            .field("msg_len[68, 72]", &self.msg_len)
            .field("msg[72, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcMailReqSend {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcMailReqSend {
    pub fn from(buffer: &[u8]) -> PacketZcMailReqSend {
        PacketZcMailReqSend {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcMailReqSend {
    fn id(&self) -> &str {
       "0x0249"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMailReqSend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReqSend")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketZcMailReceive {
    pub packet_id: u16,
    pub mail_id: u32,
    pub header: String,
    pub from_name: String,
}

impl PacketZcMailReceive {
    pub fn from(buffer: &[u8]) -> PacketZcMailReceive {
        PacketZcMailReceive {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            header: String::from_utf8_lossy(&buffer[6..46]).to_string(),
            from_name: String::from_utf8_lossy(&buffer[46..70]).to_string(),
        }
    }
}

impl Packet for PacketZcMailReceive {
    fn id(&self) -> &str {
       "0x024a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMailReceive {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailReceive")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
            .field("header[6, 46]", &self.header)
            .field("from_name[46, 70]", &self.from_name)
        .finish()
    }
}

pub struct PacketCzAuctionCreate {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketCzAuctionCreate {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionCreate {
        PacketCzAuctionCreate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzAuctionCreate {
    fn id(&self) -> &str {
       "0x024b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionCreate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionCreate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketCzAuctionAddItem {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzAuctionAddItem {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionAddItem {
        PacketCzAuctionAddItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzAuctionAddItem {
    fn id(&self) -> &str {
       "0x024c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionAddItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketCzAuctionAdd {
    pub packet_id: u16,
    pub now_money: u32,
    pub max_money: u32,
    pub delete_hour: u16,
}

impl PacketCzAuctionAdd {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionAdd {
        PacketCzAuctionAdd {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            now_money: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            max_money: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            delete_hour: u16::from_le_bytes([buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketCzAuctionAdd {
    fn id(&self) -> &str {
       "0x024d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionAdd {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionAdd")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("now_money[2, 6]", &self.now_money)
            .field("max_money[6, 10]", &self.max_money)
            .field("delete_hour[10, 12]", &self.delete_hour)
        .finish()
    }
}

pub struct PacketCzAuctionAddCancel {
    pub packet_id: u16,
    pub auction_id: u32,
}

impl PacketCzAuctionAddCancel {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionAddCancel {
        PacketCzAuctionAddCancel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auction_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzAuctionAddCancel {
    fn id(&self) -> &str {
       "0x024e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionAddCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionAddCancel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auction_id[2, 6]", &self.auction_id)
        .finish()
    }
}

pub struct PacketCzAuctionBuy {
    pub packet_id: u16,
    pub auction_id: u32,
    pub money: u32,
}

impl PacketCzAuctionBuy {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionBuy {
        PacketCzAuctionBuy {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auction_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            money: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzAuctionBuy {
    fn id(&self) -> &str {
       "0x024f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionBuy {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionBuy")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auction_id[2, 6]", &self.auction_id)
            .field("money[6, 10]", &self.money)
        .finish()
    }
}

pub struct PacketZcAuctionResult {
    pub packet_id: u16,
    pub result: char,
}

impl PacketZcAuctionResult {
    pub fn from(buffer: &[u8]) -> PacketZcAuctionResult {
        PacketZcAuctionResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcAuctionResult {
    fn id(&self) -> &str {
       "0x0250"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAuctionResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 3]", &self.result)
        .finish()
    }
}

pub struct PacketCzAuctionItemSearch {
    pub packet_id: u16,
    pub type_: u16,
    pub auction_id: u32,
    pub name: String,
    pub page: u16,
}

impl PacketCzAuctionItemSearch {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionItemSearch {
        PacketCzAuctionItemSearch {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
            auction_id: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            name: String::from_utf8_lossy(&buffer[8..32]).to_string(),
            page: u16::from_le_bytes([buffer[32], buffer[33]]),
        }
    }
}

impl Packet for PacketCzAuctionItemSearch {
    fn id(&self) -> &str {
       "0x0251"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionItemSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionItemSearch")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
            .field("auction_id[4, 8]", &self.auction_id)
            .field("name[8, 32]", &self.name)
            .field("page[32, 34]", &self.page)
        .finish()
    }
}

pub struct PacketZcAuctionItemReqSearch {
    pub packet_id: u16,
    pub packet_length: u16,
    pub max_page: u32,
    pub number: u32,
    pub auction_item_list: Vec<AuctionItemSearchInfo>,
}

impl PacketZcAuctionItemReqSearch {
    pub fn from(buffer: &[u8]) -> PacketZcAuctionItemReqSearch {
        let iter_count = &buffer.len() / 83;
        let mut vec_field: Vec<AuctionItemSearchInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 * i;
            let end_pos = 95 * i;
            vec_field.push(AuctionItemSearchInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAuctionItemReqSearch {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            max_page: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            number: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            auction_item_list: vec_field,
        }
    }
}

impl Packet for PacketZcAuctionItemReqSearch {
    fn id(&self) -> &str {
       "0x0252"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAuctionItemReqSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionItemReqSearch")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("max_page[4, 8]", &self.max_page)
            .field("number[8, 12]", &self.number)
            .field("auction_item_list[12, 95]", &self.auction_item_list)
        .finish()
    }
}

pub struct PacketZcStarplace {
    pub packet_id: u16,
    pub which: char,
}

impl PacketZcStarplace {
    pub fn from(buffer: &[u8]) -> PacketZcStarplace {
        PacketZcStarplace {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            which: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcStarplace {
    fn id(&self) -> &str {
       "0x0253"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStarplace {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStarplace")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("which[2, 3]", &self.which)
        .finish()
    }
}

pub struct PacketCzAgreeStarplace {
    pub packet_id: u16,
    pub which: char,
}

impl PacketCzAgreeStarplace {
    pub fn from(buffer: &[u8]) -> PacketCzAgreeStarplace {
        PacketCzAgreeStarplace {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            which: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzAgreeStarplace {
    fn id(&self) -> &str {
       "0x0254"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAgreeStarplace {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAgreeStarplace")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("which[2, 3]", &self.which)
        .finish()
    }
}

pub struct PacketZcAckMailAddItem {
    pub packet_id: u16,
    pub index: u16,
    pub result: char,
}

impl PacketZcAckMailAddItem {
    pub fn from(buffer: &[u8]) -> PacketZcAckMailAddItem {
        PacketZcAckMailAddItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcAckMailAddItem {
    fn id(&self) -> &str {
       "0x0255"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckMailAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMailAddItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("result[4, 5]", &self.result)
        .finish()
    }
}

pub struct PacketZcAckAuctionAddItem {
    pub packet_id: u16,
    pub index: u16,
    pub result: char,
}

impl PacketZcAckAuctionAddItem {
    pub fn from(buffer: &[u8]) -> PacketZcAckAuctionAddItem {
        PacketZcAckAuctionAddItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcAckAuctionAddItem {
    fn id(&self) -> &str {
       "0x0256"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckAuctionAddItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckAuctionAddItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("result[4, 5]", &self.result)
        .finish()
    }
}

pub struct PacketZcAckMailDelete {
    pub packet_id: u16,
    pub mail_id: u32,
    pub result: u16,
}

impl PacketZcAckMailDelete {
    pub fn from(buffer: &[u8]) -> PacketZcAckMailDelete {
        PacketZcAckMailDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcAckMailDelete {
    fn id(&self) -> &str {
       "0x0257"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckMailDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMailDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
            .field("result[6, 8]", &self.result)
        .finish()
    }
}

pub struct PacketCaReqGameGuardCheck {
    pub packet_id: u16,
}

impl PacketCaReqGameGuardCheck {
    pub fn from(buffer: &[u8]) -> PacketCaReqGameGuardCheck {
        PacketCaReqGameGuardCheck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCaReqGameGuardCheck {
    fn id(&self) -> &str {
       "0x0258"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaReqGameGuardCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaReqGameGuardCheck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketAcAckGameGuard {
    pub packet_id: u16,
    pub uc_answer: char,
}

impl PacketAcAckGameGuard {
    pub fn from(buffer: &[u8]) -> PacketAcAckGameGuard {
        PacketAcAckGameGuard {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            uc_answer: buffer[2] as char,
        }
    }
}

impl Packet for PacketAcAckGameGuard {
    fn id(&self) -> &str {
       "0x0259"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckGameGuard")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("uc_answer[2, 3]", &self.uc_answer)
        .finish()
    }
}

pub struct PacketZcMakingitemList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub id_list: u16,
}

impl PacketZcMakingitemList {
    pub fn from(buffer: &[u8]) -> PacketZcMakingitemList {
        PacketZcMakingitemList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            id_list: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcMakingitemList {
    fn id(&self) -> &str {
       "0x025a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMakingitemList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMakingitemList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("id_list[4, 6]", &self.id_list)
        .finish()
    }
}

pub struct PacketCzReqMakingitem {
    pub packet_id: u16,
    pub mk_type: u16,
    pub id: u16,
}

impl PacketCzReqMakingitem {
    pub fn from(buffer: &[u8]) -> PacketCzReqMakingitem {
        PacketCzReqMakingitem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mk_type: u16::from_le_bytes([buffer[2], buffer[3]]),
            id: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqMakingitem {
    fn id(&self) -> &str {
       "0x025b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqMakingitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMakingitem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mk_type[2, 4]", &self.mk_type)
            .field("id[4, 6]", &self.id)
        .finish()
    }
}

pub struct PacketCzAuctionReqMyInfo {
    pub packet_id: u16,
    pub type_: u16,
}

impl PacketCzAuctionReqMyInfo {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionReqMyInfo {
        PacketCzAuctionReqMyInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzAuctionReqMyInfo {
    fn id(&self) -> &str {
       "0x025c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionReqMyInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionReqMyInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
        .finish()
    }
}

pub struct PacketCzAuctionReqMySellStop {
    pub packet_id: u16,
    pub auction_id: u32,
}

impl PacketCzAuctionReqMySellStop {
    pub fn from(buffer: &[u8]) -> PacketCzAuctionReqMySellStop {
        PacketCzAuctionReqMySellStop {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auction_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzAuctionReqMySellStop {
    fn id(&self) -> &str {
       "0x025d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAuctionReqMySellStop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAuctionReqMySellStop")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auction_id[2, 6]", &self.auction_id)
        .finish()
    }
}

pub struct PacketZcAuctionAckMySellStop {
    pub packet_id: u16,
    pub result: u16,
}

impl PacketZcAuctionAckMySellStop {
    pub fn from(buffer: &[u8]) -> PacketZcAuctionAckMySellStop {
        PacketZcAuctionAckMySellStop {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcAuctionAckMySellStop {
    fn id(&self) -> &str {
       "0x025e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAuctionAckMySellStop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionAckMySellStop")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
        .finish()
    }
}

pub struct PacketZcAuctionWindows {
    pub packet_id: u16,
    pub type_: u32,
}

impl PacketZcAuctionWindows {
    pub fn from(buffer: &[u8]) -> PacketZcAuctionWindows {
        PacketZcAuctionWindows {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAuctionWindows {
    fn id(&self) -> &str {
       "0x025f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAuctionWindows {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAuctionWindows")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 6]", &self.type_)
        .finish()
    }
}

pub struct PacketZcMailWindows {
    pub packet_id: u16,
    pub type_: u32,
}

impl PacketZcMailWindows {
    pub fn from(buffer: &[u8]) -> PacketZcMailWindows {
        PacketZcMailWindows {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcMailWindows {
    fn id(&self) -> &str {
       "0x0260"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMailWindows {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMailWindows")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 6]", &self.type_)
        .finish()
    }
}

pub struct PacketAcReqLoginOldekey {
    pub packet_id: u16,
    pub m_seed_value: String,
}

impl PacketAcReqLoginOldekey {
    pub fn from(buffer: &[u8]) -> PacketAcReqLoginOldekey {
        PacketAcReqLoginOldekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            m_seed_value: String::from_utf8_lossy(&buffer[2..11]).to_string(),
        }
    }
}

impl Packet for PacketAcReqLoginOldekey {
    fn id(&self) -> &str {
       "0x0261"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcReqLoginOldekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginOldekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("m_seed_value[2, 11]", &self.m_seed_value)
        .finish()
    }
}

pub struct PacketAcReqLoginNewekey {
    pub packet_id: u16,
    pub m_seed_value: String,
}

impl PacketAcReqLoginNewekey {
    pub fn from(buffer: &[u8]) -> PacketAcReqLoginNewekey {
        PacketAcReqLoginNewekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            m_seed_value: String::from_utf8_lossy(&buffer[2..11]).to_string(),
        }
    }
}

impl Packet for PacketAcReqLoginNewekey {
    fn id(&self) -> &str {
       "0x0262"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcReqLoginNewekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginNewekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("m_seed_value[2, 11]", &self.m_seed_value)
        .finish()
    }
}

pub struct PacketAcReqLoginCardpass {
    pub packet_id: u16,
    pub m_seed_value: String,
}

impl PacketAcReqLoginCardpass {
    pub fn from(buffer: &[u8]) -> PacketAcReqLoginCardpass {
        PacketAcReqLoginCardpass {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            m_seed_value: String::from_utf8_lossy(&buffer[2..11]).to_string(),
        }
    }
}

impl Packet for PacketAcReqLoginCardpass {
    fn id(&self) -> &str {
       "0x0263"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcReqLoginCardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginCardpass")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("m_seed_value[2, 11]", &self.m_seed_value)
        .finish()
    }
}

pub struct PacketCaAckLoginOldekey {
    pub packet_id: u16,
    pub m_seed_value: String,
    pub m_ekey: String,
}

impl PacketCaAckLoginOldekey {
    pub fn from(buffer: &[u8]) -> PacketCaAckLoginOldekey {
        PacketCaAckLoginOldekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            m_seed_value: String::from_utf8_lossy(&buffer[2..11]).to_string(),
            m_ekey: String::from_utf8_lossy(&buffer[11..20]).to_string(),
        }
    }
}

impl Packet for PacketCaAckLoginOldekey {
    fn id(&self) -> &str {
       "0x0264"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaAckLoginOldekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginOldekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("m_seed_value[2, 11]", &self.m_seed_value)
            .field("m_ekey[11, 20]", &self.m_ekey)
        .finish()
    }
}

pub struct PacketCaAckLoginNewekey {
    pub packet_id: u16,
    pub m_seed_value: String,
    pub m_ekey: String,
}

impl PacketCaAckLoginNewekey {
    pub fn from(buffer: &[u8]) -> PacketCaAckLoginNewekey {
        PacketCaAckLoginNewekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            m_seed_value: String::from_utf8_lossy(&buffer[2..11]).to_string(),
            m_ekey: String::from_utf8_lossy(&buffer[11..20]).to_string(),
        }
    }
}

impl Packet for PacketCaAckLoginNewekey {
    fn id(&self) -> &str {
       "0x0265"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaAckLoginNewekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginNewekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("m_seed_value[2, 11]", &self.m_seed_value)
            .field("m_ekey[11, 20]", &self.m_ekey)
        .finish()
    }
}

pub struct PacketCaAckLoginCardpass {
    pub packet_id: u16,
    pub mcard_pass: String,
}

impl PacketCaAckLoginCardpass {
    pub fn from(buffer: &[u8]) -> PacketCaAckLoginCardpass {
        PacketCaAckLoginCardpass {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mcard_pass: String::from_utf8_lossy(&buffer[2..30]).to_string(),
        }
    }
}

impl Packet for PacketCaAckLoginCardpass {
    fn id(&self) -> &str {
       "0x0266"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaAckLoginCardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginCardpass")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mcard_pass[2, 30]", &self.mcard_pass)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailNotexist {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailNotexist {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailNotexist {
        PacketAcAckEkeyFailNotexist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotexist {
    fn id(&self) -> &str {
       "0x0267"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailNotexist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotexist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailNotusesekey {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailNotusesekey {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailNotusesekey {
        PacketAcAckEkeyFailNotusesekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotusesekey {
    fn id(&self) -> &str {
       "0x0268"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailNotusesekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotusesekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailNotusedekey {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailNotusedekey {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailNotusedekey {
        PacketAcAckEkeyFailNotusedekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotusedekey {
    fn id(&self) -> &str {
       "0x0269"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailNotusedekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotusedekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailAuthrefuse {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailAuthrefuse {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailAuthrefuse {
        PacketAcAckEkeyFailAuthrefuse {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailAuthrefuse {
    fn id(&self) -> &str {
       "0x026a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailAuthrefuse {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailAuthrefuse")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailInputekey {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailInputekey {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailInputekey {
        PacketAcAckEkeyFailInputekey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailInputekey {
    fn id(&self) -> &str {
       "0x026b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailInputekey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailInputekey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailNotice {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailNotice {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailNotice {
        PacketAcAckEkeyFailNotice {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotice {
    fn id(&self) -> &str {
       "0x026c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailNotice {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNotice")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckEkeyFailNeedcardpass {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckEkeyFailNeedcardpass {
    pub fn from(buffer: &[u8]) -> PacketAcAckEkeyFailNeedcardpass {
        PacketAcAckEkeyFailNeedcardpass {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckEkeyFailNeedcardpass {
    fn id(&self) -> &str {
       "0x026d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckEkeyFailNeedcardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckEkeyFailNeedcardpass")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckAuthekeyFailNotmatchcardpass {
    pub packet_id: u16,
    pub error_code: u16,
}

impl PacketAcAckAuthekeyFailNotmatchcardpass {
    pub fn from(buffer: &[u8]) -> PacketAcAckAuthekeyFailNotmatchcardpass {
        PacketAcAckAuthekeyFailNotmatchcardpass {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcAckAuthekeyFailNotmatchcardpass {
    fn id(&self) -> &str {
       "0x026e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckAuthekeyFailNotmatchcardpass {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckAuthekeyFailNotmatchcardpass")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 4]", &self.error_code)
        .finish()
    }
}

pub struct PacketAcAckFirstLogin {
    pub packet_id: u16,
}

impl PacketAcAckFirstLogin {
    pub fn from(buffer: &[u8]) -> PacketAcAckFirstLogin {
        PacketAcAckFirstLogin {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketAcAckFirstLogin {
    fn id(&self) -> &str {
       "0x026f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckFirstLogin {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckFirstLogin")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketAcReqLoginAccountInfo {
    pub packet_id: u16,
}

impl PacketAcReqLoginAccountInfo {
    pub fn from(buffer: &[u8]) -> PacketAcReqLoginAccountInfo {
        PacketAcReqLoginAccountInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketAcReqLoginAccountInfo {
    fn id(&self) -> &str {
       "0x0270"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcReqLoginAccountInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcReqLoginAccountInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCaAckLoginAccountInfo {
    pub packet_id: u16,
    pub sex: u16,
    pub b_point: u16,
    pub email: String,
}

impl PacketCaAckLoginAccountInfo {
    pub fn from(buffer: &[u8]) -> PacketCaAckLoginAccountInfo {
        PacketCaAckLoginAccountInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            sex: u16::from_le_bytes([buffer[2], buffer[3]]),
            b_point: u16::from_le_bytes([buffer[4], buffer[5]]),
            email: String::from_utf8_lossy(&buffer[6..40]).to_string(),
        }
    }
}

impl Packet for PacketCaAckLoginAccountInfo {
    fn id(&self) -> &str {
       "0x0271"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaAckLoginAccountInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaAckLoginAccountInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("sex[2, 4]", &self.sex)
            .field("b_point[4, 6]", &self.b_point)
            .field("email[6, 40]", &self.email)
        .finish()
    }
}

pub struct PacketAcAckPtIdInfo {
    pub packet_id: u16,
    pub sz_ptid: String,
    pub sz_ptnum_id: String,
}

impl PacketAcAckPtIdInfo {
    pub fn from(buffer: &[u8]) -> PacketAcAckPtIdInfo {
        PacketAcAckPtIdInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            sz_ptid: String::from_utf8_lossy(&buffer[2..23]).to_string(),
            sz_ptnum_id: String::from_utf8_lossy(&buffer[23..44]).to_string(),
        }
    }
}

impl Packet for PacketAcAckPtIdInfo {
    fn id(&self) -> &str {
       "0x0272"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAckPtIdInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAckPtIdInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("sz_ptid[2, 23]", &self.sz_ptid)
            .field("sz_ptnum_id[23, 44]", &self.sz_ptnum_id)
        .finish()
    }
}

pub struct PacketCzReqMailReturn {
    pub packet_id: u16,
    pub mail_id: u32,
    pub receive_name: String,
}

impl PacketCzReqMailReturn {
    pub fn from(buffer: &[u8]) -> PacketCzReqMailReturn {
        PacketCzReqMailReturn {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            receive_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketCzReqMailReturn {
    fn id(&self) -> &str {
       "0x0273"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqMailReturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqMailReturn")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
            .field("receive_name[6, 30]", &self.receive_name)
        .finish()
    }
}

pub struct PacketZcAckMailReturn {
    pub packet_id: u16,
    pub mail_id: u32,
    pub result: u16,
}

impl PacketZcAckMailReturn {
    pub fn from(buffer: &[u8]) -> PacketZcAckMailReturn {
        PacketZcAckMailReturn {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            mail_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcAckMailReturn {
    fn id(&self) -> &str {
       "0x0274"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckMailReturn {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckMailReturn")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("mail_id[2, 6]", &self.mail_id)
            .field("result[6, 8]", &self.result)
        .finish()
    }
}

pub struct PacketChEnter2 {
    pub packet_id: u16,
    pub aid: u32,
    pub auth_code: u32,
    pub user_level: u32,
    pub client_type: u16,
    pub sex: char,
    pub mac_data: String,
    pub i_account_sid: u32,
}

impl PacketChEnter2 {
    pub fn from(buffer: &[u8]) -> PacketChEnter2 {
        PacketChEnter2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            auth_code: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            user_level: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            client_type: u16::from_le_bytes([buffer[14], buffer[15]]),
            sex: buffer[16] as char,
            mac_data: String::from_utf8_lossy(&buffer[17..33]).to_string(),
            i_account_sid: u32::from_le_bytes([buffer[33], buffer[34], buffer[35], buffer[36]]),
        }
    }
}

impl Packet for PacketChEnter2 {
    fn id(&self) -> &str {
       "0x0275"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChEnter2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("auth_code[6, 10]", &self.auth_code)
            .field("user_level[10, 14]", &self.user_level)
            .field("client_type[14, 16]", &self.client_type)
            .field("sex[16, 17]", &self.sex)
            .field("mac_data[17, 33]", &self.mac_data)
            .field("i_account_sid[33, 37]", &self.i_account_sid)
        .finish()
    }
}

pub struct PacketAcAcceptLogin2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub auth_code: u32,
    pub aid: u32,
    pub user_level: u32,
    pub last_login_ip: u32,
    pub last_login_time: String,
    pub sex: char,
    pub i_account_sid: u32,
}

impl PacketAcAcceptLogin2 {
    pub fn from(buffer: &[u8]) -> PacketAcAcceptLogin2 {
        PacketAcAcceptLogin2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            auth_code: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            aid: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            user_level: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            last_login_ip: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            last_login_time: String::from_utf8_lossy(&buffer[20..46]).to_string(),
            sex: buffer[46] as char,
            i_account_sid: u32::from_le_bytes([buffer[47], buffer[48], buffer[49], buffer[50]]),
        }
    }
}

impl Packet for PacketAcAcceptLogin2 {
    fn id(&self) -> &str {
       "0x0276"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcAcceptLogin2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcAcceptLogin2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("auth_code[4, 8]", &self.auth_code)
            .field("aid[8, 12]", &self.aid)
            .field("user_level[12, 16]", &self.user_level)
            .field("last_login_ip[16, 20]", &self.last_login_ip)
            .field("last_login_time[20, 46]", &self.last_login_time)
            .field("sex[46, 47]", &self.sex)
            .field("i_account_sid[47, 51]", &self.i_account_sid)
        .finish()
    }
}

pub struct PacketCaLoginPcbang {
    pub packet_id: u16,
    pub version: u32,
    pub id: String,
    pub passwd: String,
    pub clienttype: char,
    pub ip: String,
    pub mac_adress: String,
}

impl PacketCaLoginPcbang {
    pub fn from(buffer: &[u8]) -> PacketCaLoginPcbang {
        PacketCaLoginPcbang {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            version: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            id: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            passwd: String::from_utf8_lossy(&buffer[30..54]).to_string(),
            clienttype: buffer[54] as char,
            ip: String::from_utf8_lossy(&buffer[55..71]).to_string(),
            mac_adress: String::from_utf8_lossy(&buffer[71..84]).to_string(),
        }
    }
}

impl Packet for PacketCaLoginPcbang {
    fn id(&self) -> &str {
       "0x0277"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaLoginPcbang {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLoginPcbang")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("version[2, 6]", &self.version)
            .field("id[6, 30]", &self.id)
            .field("passwd[30, 54]", &self.passwd)
            .field("clienttype[54, 55]", &self.clienttype)
            .field("ip[55, 71]", &self.ip)
            .field("mac_adress[71, 84]", &self.mac_adress)
        .finish()
    }
}

pub struct PacketZcNotifyPcbang {
    pub packet_id: u16,
}

impl PacketZcNotifyPcbang {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPcbang {
        PacketZcNotifyPcbang {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcNotifyPcbang {
    fn id(&self) -> &str {
       "0x0278"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPcbang {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPcbang")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzHuntinglist {
    pub packet_id: u16,
}

impl PacketCzHuntinglist {
    pub fn from(buffer: &[u8]) -> PacketCzHuntinglist {
        PacketCzHuntinglist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzHuntinglist {
    fn id(&self) -> &str {
       "0x0279"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzHuntinglist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzHuntinglist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcHuntinglist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub hunting_list: Vec<PacketMobHunting>,
}

impl PacketZcHuntinglist {
    pub fn from(buffer: &[u8]) -> PacketZcHuntinglist {
        let iter_count = &buffer.len() / 12;
        let mut vec_field: Vec<PacketMobHunting> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 16 * i;
            vec_field.push(PacketMobHunting::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcHuntinglist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            hunting_list: vec_field,
        }
    }
}

impl Packet for PacketZcHuntinglist {
    fn id(&self) -> &str {
       "0x027a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcHuntinglist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHuntinglist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("hunting_list[4, 16]", &self.hunting_list)
        .finish()
    }
}

pub struct PacketZcPcbangEffect {
    pub packet_id: u16,
    pub exp_factor: u32,
    pub exp_factor2: u32,
    pub drop_factor: u32,
}

impl PacketZcPcbangEffect {
    pub fn from(buffer: &[u8]) -> PacketZcPcbangEffect {
        PacketZcPcbangEffect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            exp_factor: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            exp_factor2: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            drop_factor: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcPcbangEffect {
    fn id(&self) -> &str {
       "0x027b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcbangEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcbangEffect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("exp_factor[2, 6]", &self.exp_factor)
            .field("exp_factor2[6, 10]", &self.exp_factor2)
            .field("drop_factor[10, 14]", &self.drop_factor)
        .finish()
    }
}

pub struct PacketCaLogin4 {
    pub packet_id: u16,
    pub version: u32,
    pub id: String,
    pub passwd_md5: String,
    pub clienttype: char,
    pub mac_data: String,
}

impl PacketCaLogin4 {
    pub fn from(buffer: &[u8]) -> PacketCaLogin4 {
        PacketCaLogin4 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            version: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            id: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            passwd_md5: String::from_utf8_lossy(&buffer[30..46]).to_string(),
            clienttype: buffer[46] as char,
            mac_data: String::from_utf8_lossy(&buffer[47..60]).to_string(),
        }
    }
}

impl Packet for PacketCaLogin4 {
    fn id(&self) -> &str {
       "0x027c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaLogin4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLogin4")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("version[2, 6]", &self.version)
            .field("id[6, 30]", &self.id)
            .field("passwd_md5[30, 46]", &self.passwd_md5)
            .field("clienttype[46, 47]", &self.clienttype)
            .field("mac_data[47, 60]", &self.mac_data)
        .finish()
    }
}

pub struct PacketZcPropertyMerce {
    pub packet_id: u16,
    pub name: String,
    pub level: u16,
    pub faith: u16,
    pub summon_count: u16,
    pub atk: u16,
    pub matk: u16,
    pub hit: u16,
    pub critical: u16,
    pub def: u16,
    pub mdef: u16,
    pub flee: u16,
    pub aspd: u16,
    pub hp: u16,
    pub max_hp: u16,
    pub sp: u16,
    pub max_sp: u16,
    pub atkrange: u16,
    pub exp: u32,
}

impl PacketZcPropertyMerce {
    pub fn from(buffer: &[u8]) -> PacketZcPropertyMerce {
        PacketZcPropertyMerce {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            level: u16::from_le_bytes([buffer[26], buffer[27]]),
            faith: u16::from_le_bytes([buffer[28], buffer[29]]),
            summon_count: u16::from_le_bytes([buffer[30], buffer[31]]),
            atk: u16::from_le_bytes([buffer[32], buffer[33]]),
            matk: u16::from_le_bytes([buffer[34], buffer[35]]),
            hit: u16::from_le_bytes([buffer[36], buffer[37]]),
            critical: u16::from_le_bytes([buffer[38], buffer[39]]),
            def: u16::from_le_bytes([buffer[40], buffer[41]]),
            mdef: u16::from_le_bytes([buffer[42], buffer[43]]),
            flee: u16::from_le_bytes([buffer[44], buffer[45]]),
            aspd: u16::from_le_bytes([buffer[46], buffer[47]]),
            hp: u16::from_le_bytes([buffer[48], buffer[49]]),
            max_hp: u16::from_le_bytes([buffer[50], buffer[51]]),
            sp: u16::from_le_bytes([buffer[52], buffer[53]]),
            max_sp: u16::from_le_bytes([buffer[54], buffer[55]]),
            atkrange: u16::from_le_bytes([buffer[56], buffer[57]]),
            exp: u32::from_le_bytes([buffer[58], buffer[59], buffer[60], buffer[61]]),
        }
    }
}

impl Packet for PacketZcPropertyMerce {
    fn id(&self) -> &str {
       "0x027d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPropertyMerce {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPropertyMerce")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
            .field("level[26, 28]", &self.level)
            .field("faith[28, 30]", &self.faith)
            .field("summon_count[30, 32]", &self.summon_count)
            .field("atk[32, 34]", &self.atk)
            .field("matk[34, 36]", &self.matk)
            .field("hit[36, 38]", &self.hit)
            .field("critical[38, 40]", &self.critical)
            .field("def[40, 42]", &self.def)
            .field("mdef[42, 44]", &self.mdef)
            .field("flee[44, 46]", &self.flee)
            .field("aspd[46, 48]", &self.aspd)
            .field("hp[48, 50]", &self.hp)
            .field("max_hp[50, 52]", &self.max_hp)
            .field("sp[52, 54]", &self.sp)
            .field("max_sp[54, 56]", &self.max_sp)
            .field("atkrange[56, 58]", &self.atkrange)
            .field("exp[58, 62]", &self.exp)
        .finish()
    }
}

pub struct PacketZcShandaProtect {
    pub packet_id: u16,
    pub packet_length: u16,
    pub code_len: u16,
    pub code: String,
}

impl PacketZcShandaProtect {
    pub fn from(buffer: &[u8]) -> PacketZcShandaProtect {
        PacketZcShandaProtect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            code_len: u16::from_le_bytes([buffer[4], buffer[5]]),
            code: String::from_utf8_lossy(&buffer[6..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcShandaProtect {
    fn id(&self) -> &str {
       "0x027e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcShandaProtect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShandaProtect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("code_len[4, 6]", &self.code_len)
            .field("code[6, ?]", &self.code)
        .finish()
    }
}

pub struct PacketCaClientType {
    pub packet_id: u16,
    pub client_type: u16,
    pub n_ver: u32,
}

impl PacketCaClientType {
    pub fn from(buffer: &[u8]) -> PacketCaClientType {
        PacketCaClientType {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            client_type: u16::from_le_bytes([buffer[2], buffer[3]]),
            n_ver: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCaClientType {
    fn id(&self) -> &str {
       "0x027f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaClientType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaClientType")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("client_type[2, 4]", &self.client_type)
            .field("n_ver[4, 8]", &self.n_ver)
        .finish()
    }
}

pub struct PacketZcGangsiPoint {
    pub packet_id: u16,
    pub point: u32,
    pub total_point: u32,
    pub packet_switch: u16,
}

impl PacketZcGangsiPoint {
    pub fn from(buffer: &[u8]) -> PacketZcGangsiPoint {
        PacketZcGangsiPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            point: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            total_point: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            packet_switch: u16::from_le_bytes([buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketZcGangsiPoint {
    fn id(&self) -> &str {
       "0x0280"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGangsiPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGangsiPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("point[2, 6]", &self.point)
            .field("total_point[6, 10]", &self.total_point)
            .field("packet_switch[10, 12]", &self.packet_switch)
        .finish()
    }
}

pub struct PacketCzGangsiRank {
    pub packet_id: u16,
    pub packet_switch: u16,
}

impl PacketCzGangsiRank {
    pub fn from(buffer: &[u8]) -> PacketCzGangsiRank {
        PacketCzGangsiRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_switch: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzGangsiRank {
    fn id(&self) -> &str {
       "0x0281"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzGangsiRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGangsiRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_switch[2, 4]", &self.packet_switch)
        .finish()
    }
}

pub struct PacketZcGangsiRank {
    pub packet_id: u16,
    pub name: String,
    pub point: u32,
    pub packet_switch: u16,
}

impl PacketZcGangsiRank {
    pub fn from(buffer: &[u8]) -> PacketZcGangsiRank {
        PacketZcGangsiRank {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..12]).to_string(),
            point: u32::from_le_bytes([buffer[242], buffer[243], buffer[244], buffer[245]]),
            packet_switch: u16::from_le_bytes([buffer[282], buffer[283]]),
        }
    }
}

impl Packet for PacketZcGangsiRank {
    fn id(&self) -> &str {
       "0x0282"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGangsiRank {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGangsiRank")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 12]", &self.name)
            .field("point[242, 246]", &self.point)
            .field("packet_switch[282, 284]", &self.packet_switch)
        .finish()
    }
}

pub struct PacketZcAid {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketZcAid {
    pub fn from(buffer: &[u8]) -> PacketZcAid {
        PacketZcAid {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcAid {
    fn id(&self) -> &str {
       "0x0283"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAid {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAid")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcNotifyEffect3 {
    pub packet_id: u16,
    pub aid: u32,
    pub effect_id: u32,
    pub numdata: u32,
}

impl PacketZcNotifyEffect3 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyEffect3 {
        PacketZcNotifyEffect3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            effect_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            numdata: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcNotifyEffect3 {
    fn id(&self) -> &str {
       "0x0284"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyEffect3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyEffect3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("effect_id[6, 10]", &self.effect_id)
            .field("numdata[10, 14]", &self.numdata)
        .finish()
    }
}

pub struct PacketZcDeathQuestion {
    pub packet_id: u16,
    pub qcategory: u16,
    pub qnum: u16,
}

impl PacketZcDeathQuestion {
    pub fn from(buffer: &[u8]) -> PacketZcDeathQuestion {
        PacketZcDeathQuestion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            qcategory: u16::from_le_bytes([buffer[2], buffer[3]]),
            qnum: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDeathQuestion {
    fn id(&self) -> &str {
       "0x0285"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeathQuestion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeathQuestion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("qcategory[2, 4]", &self.qcategory)
            .field("qnum[4, 6]", &self.qnum)
        .finish()
    }
}

pub struct PacketCzDeathQuestion {
    pub packet_id: u16,
    pub qanswer: u16,
}

impl PacketCzDeathQuestion {
    pub fn from(buffer: &[u8]) -> PacketCzDeathQuestion {
        PacketCzDeathQuestion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            qanswer: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzDeathQuestion {
    fn id(&self) -> &str {
       "0x0286"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzDeathQuestion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzDeathQuestion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("qanswer[2, 4]", &self.qanswer)
        .finish()
    }
}

pub struct PacketZcPcCashPointItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub cash_point: u32,
    pub item_list: Vec<PurchaseItem>,
}

impl PacketZcPcCashPointItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcPcCashPointItemlist {
        let iter_count = &buffer.len() / 11;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 19 * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPcCashPointItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            cash_point: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcPcCashPointItemlist {
    fn id(&self) -> &str {
       "0x0287"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcCashPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcCashPointItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("cash_point[4, 8]", &self.cash_point)
            .field("item_list[8, 19]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzPcBuyCashPointItem {
    pub packet_id: u16,
    pub itid: u16,
    pub count: u16,
}

impl PacketCzPcBuyCashPointItem {
    pub fn from(buffer: &[u8]) -> PacketCzPcBuyCashPointItem {
        PacketCzPcBuyCashPointItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzPcBuyCashPointItem {
    fn id(&self) -> &str {
       "0x0288"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPcBuyCashPointItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcBuyCashPointItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itid[2, 4]", &self.itid)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct PacketZcPcCashPointUpdate {
    pub packet_id: u16,
    pub cash_point: u32,
    pub error: u16,
}

impl PacketZcPcCashPointUpdate {
    pub fn from(buffer: &[u8]) -> PacketZcPcCashPointUpdate {
        PacketZcPcCashPointUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            cash_point: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            error: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcPcCashPointUpdate {
    fn id(&self) -> &str {
       "0x0289"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcCashPointUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcCashPointUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("cash_point[2, 6]", &self.cash_point)
            .field("error[6, 8]", &self.error)
        .finish()
    }
}

pub struct PacketZcNpcShowefstUpdate {
    pub packet_id: u16,
    pub aid: u32,
    pub effect_state: u32,
    pub clevel: u32,
    pub show_efst: u32,
}

impl PacketZcNpcShowefstUpdate {
    pub fn from(buffer: &[u8]) -> PacketZcNpcShowefstUpdate {
        PacketZcNpcShowefstUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            effect_state: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            clevel: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            show_efst: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
        }
    }
}

impl Packet for PacketZcNpcShowefstUpdate {
    fn id(&self) -> &str {
       "0x028a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNpcShowefstUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcShowefstUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("effect_state[6, 10]", &self.effect_state)
            .field("clevel[10, 14]", &self.clevel)
            .field("show_efst[14, 18]", &self.show_efst)
        .finish()
    }
}

pub struct PacketChSelectCharGoingtobeused {
    pub packet_id: u16,
    pub dw_aid: u32,
    pub n_count_selected_char: u32,
    pub ardw_selected_gid: u32,
}

impl PacketChSelectCharGoingtobeused {
    pub fn from(buffer: &[u8]) -> PacketChSelectCharGoingtobeused {
        PacketChSelectCharGoingtobeused {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            dw_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            n_count_selected_char: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            ardw_selected_gid: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketChSelectCharGoingtobeused {
    fn id(&self) -> &str {
       "0x028c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChSelectCharGoingtobeused {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSelectCharGoingtobeused")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("dw_aid[2, 6]", &self.dw_aid)
            .field("n_count_selected_char[6, 10]", &self.n_count_selected_char)
            .field("ardw_selected_gid[10, 14]", &self.ardw_selected_gid)
        .finish()
    }
}

pub struct PacketChReqIsValidCharname {
    pub packet_id: u16,
    pub dw_aid: u32,
    pub dw_gid: u32,
    pub sz_char_name: String,
}

impl PacketChReqIsValidCharname {
    pub fn from(buffer: &[u8]) -> PacketChReqIsValidCharname {
        PacketChReqIsValidCharname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            dw_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            dw_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            sz_char_name: String::from_utf8_lossy(&buffer[10..34]).to_string(),
        }
    }
}

impl Packet for PacketChReqIsValidCharname {
    fn id(&self) -> &str {
       "0x028d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChReqIsValidCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChReqIsValidCharname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("dw_aid[2, 6]", &self.dw_aid)
            .field("dw_gid[6, 10]", &self.dw_gid)
            .field("sz_char_name[10, 34]", &self.sz_char_name)
        .finish()
    }
}

pub struct PacketHcAckIsValidCharname {
    pub packet_id: u16,
    pub s_result: u16,
}

impl PacketHcAckIsValidCharname {
    pub fn from(buffer: &[u8]) -> PacketHcAckIsValidCharname {
        PacketHcAckIsValidCharname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            s_result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketHcAckIsValidCharname {
    fn id(&self) -> &str {
       "0x028e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcAckIsValidCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAckIsValidCharname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("s_result[2, 4]", &self.s_result)
        .finish()
    }
}

pub struct PacketChReqChangeCharname {
    pub packet_id: u16,
    pub dw_gid: u32,
}

impl PacketChReqChangeCharname {
    pub fn from(buffer: &[u8]) -> PacketChReqChangeCharname {
        PacketChReqChangeCharname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            dw_gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketChReqChangeCharname {
    fn id(&self) -> &str {
       "0x028f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChReqChangeCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChReqChangeCharname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("dw_gid[2, 6]", &self.dw_gid)
        .finish()
    }
}

pub struct PacketHcAckChangeCharname {
    pub packet_id: u16,
    pub s_result: u16,
}

impl PacketHcAckChangeCharname {
    pub fn from(buffer: &[u8]) -> PacketHcAckChangeCharname {
        PacketHcAckChangeCharname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            s_result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketHcAckChangeCharname {
    fn id(&self) -> &str {
       "0x0290"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcAckChangeCharname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcAckChangeCharname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("s_result[2, 4]", &self.s_result)
        .finish()
    }
}

pub struct PacketZcMsg {
    pub packet_id: u16,
    pub msg: u16,
}

impl PacketZcMsg {
    pub fn from(buffer: &[u8]) -> PacketZcMsg {
        PacketZcMsg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            msg: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcMsg {
    fn id(&self) -> &str {
       "0x0291"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("msg[2, 4]", &self.msg)
        .finish()
    }
}

pub struct PacketCzStandingResurrection {
    pub packet_id: u16,
}

impl PacketCzStandingResurrection {
    pub fn from(buffer: &[u8]) -> PacketCzStandingResurrection {
        PacketCzStandingResurrection {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzStandingResurrection {
    fn id(&self) -> &str {
       "0x0292"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzStandingResurrection {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzStandingResurrection")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcBossInfo {
    pub packet_id: u16,
    pub info_type: char,
    pub x_pos: u32,
    pub y_pos: u32,
    pub min_hour: u16,
    pub min_minute: u16,
    pub max_hour: u16,
    pub max_minute: u16,
    pub name: String,
}

impl PacketZcBossInfo {
    pub fn from(buffer: &[u8]) -> PacketZcBossInfo {
        PacketZcBossInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info_type: buffer[2] as char,
            x_pos: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            y_pos: u32::from_le_bytes([buffer[7], buffer[8], buffer[9], buffer[10]]),
            min_hour: u16::from_le_bytes([buffer[11], buffer[12]]),
            min_minute: u16::from_le_bytes([buffer[13], buffer[14]]),
            max_hour: u16::from_le_bytes([buffer[15], buffer[16]]),
            max_minute: u16::from_le_bytes([buffer[17], buffer[18]]),
            name: String::from_utf8_lossy(&buffer[19..70]).to_string(),
        }
    }
}

impl Packet for PacketZcBossInfo {
    fn id(&self) -> &str {
       "0x0293"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBossInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBossInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info_type[2, 3]", &self.info_type)
            .field("x_pos[3, 7]", &self.x_pos)
            .field("y_pos[7, 11]", &self.y_pos)
            .field("min_hour[11, 13]", &self.min_hour)
            .field("min_minute[13, 15]", &self.min_minute)
            .field("max_hour[15, 17]", &self.max_hour)
            .field("max_minute[17, 19]", &self.max_minute)
            .field("name[19, 70]", &self.name)
        .finish()
    }
}

pub struct PacketZcReadBook {
    pub packet_id: u16,
    pub book_id: u32,
    pub page: u32,
}

impl PacketZcReadBook {
    pub fn from(buffer: &[u8]) -> PacketZcReadBook {
        PacketZcReadBook {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            book_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            page: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcReadBook {
    fn id(&self) -> &str {
       "0x0294"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReadBook {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReadBook")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("book_id[2, 6]", &self.book_id)
            .field("page[6, 10]", &self.page)
        .finish()
    }
}

pub struct PacketZcEquipmentItemlist2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo2>,
}

impl PacketZcEquipmentItemlist2 {
    pub fn from(buffer: &[u8]) -> PacketZcEquipmentItemlist2 {
        let iter_count = &buffer.len() / 24;
        let mut vec_field: Vec<EquipmentitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 28 * i;
            vec_field.push(EquipmentitemExtrainfo2::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcEquipmentItemlist2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcEquipmentItemlist2 {
    fn id(&self) -> &str {
       "0x0295"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipmentItemlist2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 28]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcStoreEquipmentItemlist2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo2>,
}

impl PacketZcStoreEquipmentItemlist2 {
    pub fn from(buffer: &[u8]) -> PacketZcStoreEquipmentItemlist2 {
        let iter_count = &buffer.len() / 24;
        let mut vec_field: Vec<EquipmentitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 28 * i;
            vec_field.push(EquipmentitemExtrainfo2::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcStoreEquipmentItemlist2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcStoreEquipmentItemlist2 {
    fn id(&self) -> &str {
       "0x0296"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEquipmentItemlist2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 28]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcCartEquipmentItemlist2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo2>,
}

impl PacketZcCartEquipmentItemlist2 {
    pub fn from(buffer: &[u8]) -> PacketZcCartEquipmentItemlist2 {
        let iter_count = &buffer.len() / 24;
        let mut vec_field: Vec<EquipmentitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 28 * i;
            vec_field.push(EquipmentitemExtrainfo2::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcCartEquipmentItemlist2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcCartEquipmentItemlist2 {
    fn id(&self) -> &str {
       "0x0297"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartEquipmentItemlist2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartEquipmentItemlist2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 28]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcCashTimeCounter {
    pub packet_id: u16,
    pub itid: u16,
    pub remain_second: u32,
}

impl PacketZcCashTimeCounter {
    pub fn from(buffer: &[u8]) -> PacketZcCashTimeCounter {
        PacketZcCashTimeCounter {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            remain_second: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcCashTimeCounter {
    fn id(&self) -> &str {
       "0x0298"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCashTimeCounter {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCashTimeCounter")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itid[2, 4]", &self.itid)
            .field("remain_second[4, 8]", &self.remain_second)
        .finish()
    }
}

pub struct PacketZcCashItemDelete {
    pub packet_id: u16,
    pub index: u16,
    pub itid: u16,
}

impl PacketZcCashItemDelete {
    pub fn from(buffer: &[u8]) -> PacketZcCashItemDelete {
        PacketZcCashItemDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            itid: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcCashItemDelete {
    fn id(&self) -> &str {
       "0x0299"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCashItemDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCashItemDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("itid[4, 6]", &self.itid)
        .finish()
    }
}

pub struct PacketZcItemPickupAck2 {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub location: u16,
    pub type_: char,
    pub result: char,
    pub hire_expire_date: u32,
}

impl PacketZcItemPickupAck2 {
    pub fn from(buffer: &[u8]) -> PacketZcItemPickupAck2 {
        PacketZcItemPickupAck2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            is_damaged: buffer[9] == 1,
            refining_level: buffer[10] as char,
            slot: EQUIPSLOTINFO::from(&buffer[11..19]),
            location: u16::from_le_bytes([buffer[19], buffer[20]]),
            type_: buffer[21] as char,
            result: buffer[22] as char,
            hire_expire_date: u32::from_le_bytes([buffer[23], buffer[24], buffer[25], buffer[26]]),
        }
    }
}

impl Packet for PacketZcItemPickupAck2 {
    fn id(&self) -> &str {
       "0x029a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemPickupAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupAck2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("is_damaged[9, 10]", &self.is_damaged)
            .field("refining_level[10, 11]", &self.refining_level)
            .field("slot[11, 19]", &self.slot)
            .field("location[19, 21]", &self.location)
            .field("type_[21, 22]", &self.type_)
            .field("result[22, 23]", &self.result)
            .field("hire_expire_date[23, 27]", &self.hire_expire_date)
        .finish()
    }
}

pub struct PacketZcMerInit {
    pub packet_id: u16,
    pub aid: u32,
    pub atk: u16,
    pub matk: u16,
    pub hit: u16,
    pub critical: u16,
    pub def: u16,
    pub mdef: u16,
    pub flee: u16,
    pub aspd: u16,
    pub name: String,
    pub level: u16,
    pub hp: u32,
    pub max_hp: u32,
    pub sp: u32,
    pub max_sp: u32,
    pub expire_date: u32,
    pub faith: u16,
    pub toal_call_num: u32,
    pub approval_monster_kill_counter: u32,
    pub atkrange: u16,
}

impl PacketZcMerInit {
    pub fn from(buffer: &[u8]) -> PacketZcMerInit {
        PacketZcMerInit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            atk: u16::from_le_bytes([buffer[6], buffer[7]]),
            matk: u16::from_le_bytes([buffer[8], buffer[9]]),
            hit: u16::from_le_bytes([buffer[10], buffer[11]]),
            critical: u16::from_le_bytes([buffer[12], buffer[13]]),
            def: u16::from_le_bytes([buffer[14], buffer[15]]),
            mdef: u16::from_le_bytes([buffer[16], buffer[17]]),
            flee: u16::from_le_bytes([buffer[18], buffer[19]]),
            aspd: u16::from_le_bytes([buffer[20], buffer[21]]),
            name: String::from_utf8_lossy(&buffer[22..46]).to_string(),
            level: u16::from_le_bytes([buffer[46], buffer[47]]),
            hp: u32::from_le_bytes([buffer[48], buffer[49], buffer[50], buffer[51]]),
            max_hp: u32::from_le_bytes([buffer[52], buffer[53], buffer[54], buffer[55]]),
            sp: u32::from_le_bytes([buffer[56], buffer[57], buffer[58], buffer[59]]),
            max_sp: u32::from_le_bytes([buffer[60], buffer[61], buffer[62], buffer[63]]),
            expire_date: u32::from_le_bytes([buffer[64], buffer[65], buffer[66], buffer[67]]),
            faith: u16::from_le_bytes([buffer[68], buffer[69]]),
            toal_call_num: u32::from_le_bytes([buffer[70], buffer[71], buffer[72], buffer[73]]),
            approval_monster_kill_counter: u32::from_le_bytes([buffer[74], buffer[75], buffer[76], buffer[77]]),
            atkrange: u16::from_le_bytes([buffer[78], buffer[79]]),
        }
    }
}

impl Packet for PacketZcMerInit {
    fn id(&self) -> &str {
       "0x029b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMerInit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerInit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("atk[6, 8]", &self.atk)
            .field("matk[8, 10]", &self.matk)
            .field("hit[10, 12]", &self.hit)
            .field("critical[12, 14]", &self.critical)
            .field("def[14, 16]", &self.def)
            .field("mdef[16, 18]", &self.mdef)
            .field("flee[18, 20]", &self.flee)
            .field("aspd[20, 22]", &self.aspd)
            .field("name[22, 46]", &self.name)
            .field("level[46, 48]", &self.level)
            .field("hp[48, 52]", &self.hp)
            .field("max_hp[52, 56]", &self.max_hp)
            .field("sp[56, 60]", &self.sp)
            .field("max_sp[60, 64]", &self.max_sp)
            .field("expire_date[64, 68]", &self.expire_date)
            .field("faith[68, 70]", &self.faith)
            .field("toal_call_num[70, 74]", &self.toal_call_num)
            .field("approval_monster_kill_counter[74, 78]", &self.approval_monster_kill_counter)
            .field("atkrange[78, 80]", &self.atkrange)
        .finish()
    }
}

pub struct PacketZcMerProperty {
    pub packet_id: u16,
    pub atk: u16,
    pub matk: u16,
    pub hit: u16,
    pub critical: u16,
    pub def: u16,
    pub mdef: u16,
    pub flee: u16,
    pub aspd: u16,
    pub name: String,
    pub level: u16,
    pub hp: u16,
    pub max_hp: u16,
    pub sp: u16,
    pub max_sp: u16,
    pub expire_date: u32,
    pub faith: u16,
    pub toal_call_num: u32,
    pub approval_monster_kill_counter: u32,
}

impl PacketZcMerProperty {
    pub fn from(buffer: &[u8]) -> PacketZcMerProperty {
        PacketZcMerProperty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            atk: u16::from_le_bytes([buffer[2], buffer[3]]),
            matk: u16::from_le_bytes([buffer[4], buffer[5]]),
            hit: u16::from_le_bytes([buffer[6], buffer[7]]),
            critical: u16::from_le_bytes([buffer[8], buffer[9]]),
            def: u16::from_le_bytes([buffer[10], buffer[11]]),
            mdef: u16::from_le_bytes([buffer[12], buffer[13]]),
            flee: u16::from_le_bytes([buffer[14], buffer[15]]),
            aspd: u16::from_le_bytes([buffer[16], buffer[17]]),
            name: String::from_utf8_lossy(&buffer[18..42]).to_string(),
            level: u16::from_le_bytes([buffer[42], buffer[43]]),
            hp: u16::from_le_bytes([buffer[44], buffer[45]]),
            max_hp: u16::from_le_bytes([buffer[46], buffer[47]]),
            sp: u16::from_le_bytes([buffer[48], buffer[49]]),
            max_sp: u16::from_le_bytes([buffer[50], buffer[51]]),
            expire_date: u32::from_le_bytes([buffer[52], buffer[53], buffer[54], buffer[55]]),
            faith: u16::from_le_bytes([buffer[56], buffer[57]]),
            toal_call_num: u32::from_le_bytes([buffer[58], buffer[59], buffer[60], buffer[61]]),
            approval_monster_kill_counter: u32::from_le_bytes([buffer[62], buffer[63], buffer[64], buffer[65]]),
        }
    }
}

impl Packet for PacketZcMerProperty {
    fn id(&self) -> &str {
       "0x029c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMerProperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerProperty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("atk[2, 4]", &self.atk)
            .field("matk[4, 6]", &self.matk)
            .field("hit[6, 8]", &self.hit)
            .field("critical[8, 10]", &self.critical)
            .field("def[10, 12]", &self.def)
            .field("mdef[12, 14]", &self.mdef)
            .field("flee[14, 16]", &self.flee)
            .field("aspd[16, 18]", &self.aspd)
            .field("name[18, 42]", &self.name)
            .field("level[42, 44]", &self.level)
            .field("hp[44, 46]", &self.hp)
            .field("max_hp[46, 48]", &self.max_hp)
            .field("sp[48, 50]", &self.sp)
            .field("max_sp[50, 52]", &self.max_sp)
            .field("expire_date[52, 56]", &self.expire_date)
            .field("faith[56, 58]", &self.faith)
            .field("toal_call_num[58, 62]", &self.toal_call_num)
            .field("approval_monster_kill_counter[62, 66]", &self.approval_monster_kill_counter)
        .finish()
    }
}

pub struct PacketZcMerSkillinfoList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub skill_list: Vec<SKILLINFO>,
}

impl PacketZcMerSkillinfoList {
    pub fn from(buffer: &[u8]) -> PacketZcMerSkillinfoList {
        let iter_count = &buffer.len() / 37;
        let mut vec_field: Vec<SKILLINFO> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 41 * i;
            vec_field.push(SKILLINFO::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcMerSkillinfoList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            skill_list: vec_field,
        }
    }
}

impl Packet for PacketZcMerSkillinfoList {
    fn id(&self) -> &str {
       "0x029d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMerSkillinfoList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerSkillinfoList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("skill_list[4, 41]", &self.skill_list)
        .finish()
    }
}

pub struct PacketZcMerSkillinfoUpdate {
    pub packet_id: u16,
    pub skid: u16,
    pub level: u16,
    pub spcost: u16,
    pub attack_range: u16,
    pub upgradable: bool,
}

impl PacketZcMerSkillinfoUpdate {
    pub fn from(buffer: &[u8]) -> PacketZcMerSkillinfoUpdate {
        PacketZcMerSkillinfoUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            level: u16::from_le_bytes([buffer[4], buffer[5]]),
            spcost: u16::from_le_bytes([buffer[6], buffer[7]]),
            attack_range: u16::from_le_bytes([buffer[8], buffer[9]]),
            upgradable: buffer[10] == 1,
        }
    }
}

impl Packet for PacketZcMerSkillinfoUpdate {
    fn id(&self) -> &str {
       "0x029e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMerSkillinfoUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerSkillinfoUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("level[4, 6]", &self.level)
            .field("spcost[6, 8]", &self.spcost)
            .field("attack_range[8, 10]", &self.attack_range)
            .field("upgradable[10, 11]", &self.upgradable)
        .finish()
    }
}

pub struct PacketCzMerCommand {
    pub packet_id: u16,
    pub command: char,
}

impl PacketCzMerCommand {
    pub fn from(buffer: &[u8]) -> PacketCzMerCommand {
        PacketCzMerCommand {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            command: buffer[2] as char,
        }
    }
}

impl Packet for PacketCzMerCommand {
    fn id(&self) -> &str {
       "0x029f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMerCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMerCommand")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("command[2, 3]", &self.command)
        .finish()
    }
}

pub struct UnusedPacketCzMerUseSkill {
    pub packet_id: u16,
    pub selected_level: u16,
    pub skid: u16,
    pub target_id: u32,
}

impl UnusedPacketCzMerUseSkill {
    pub fn from(buffer: &[u8]) -> UnusedPacketCzMerUseSkill {
        UnusedPacketCzMerUseSkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            selected_level: u16::from_le_bytes([buffer[2], buffer[3]]),
            skid: u16::from_le_bytes([buffer[4], buffer[5]]),
            target_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for UnusedPacketCzMerUseSkill {
    fn id(&self) -> &str {
       "0x02a0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for UnusedPacketCzMerUseSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("UnusedPacketCzMerUseSkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("selected_level[2, 4]", &self.selected_level)
            .field("skid[4, 6]", &self.skid)
            .field("target_id[6, 10]", &self.target_id)
        .finish()
    }
}

pub struct UnusedPacketCzMerUpgradeSkilllevel {
    pub packet_id: u16,
    pub skid: u16,
}

impl UnusedPacketCzMerUpgradeSkilllevel {
    pub fn from(buffer: &[u8]) -> UnusedPacketCzMerUpgradeSkilllevel {
        UnusedPacketCzMerUpgradeSkilllevel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for UnusedPacketCzMerUpgradeSkilllevel {
    fn id(&self) -> &str {
       "0x02a1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for UnusedPacketCzMerUpgradeSkilllevel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("UnusedPacketCzMerUpgradeSkilllevel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
        .finish()
    }
}

pub struct PacketZcMerParChange {
    pub packet_id: u16,
    pub var: u16,
    pub value: u32,
}

impl PacketZcMerParChange {
    pub fn from(buffer: &[u8]) -> PacketZcMerParChange {
        PacketZcMerParChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            var: u16::from_le_bytes([buffer[2], buffer[3]]),
            value: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcMerParChange {
    fn id(&self) -> &str {
       "0x02a2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMerParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMerParChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("var[2, 4]", &self.var)
            .field("value[4, 8]", &self.value)
        .finish()
    }
}

pub struct PacketZcGameguardLingoKey {
    pub packet_id: u16,
    pub lingo_key: PggLingoKeyTemp,
}

impl PacketZcGameguardLingoKey {
    pub fn from(buffer: &[u8]) -> PacketZcGameguardLingoKey {
        PacketZcGameguardLingoKey {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            lingo_key: PggLingoKeyTemp::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcGameguardLingoKey {
    fn id(&self) -> &str {
       "0x02a3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcGameguardLingoKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcGameguardLingoKey")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("lingo_key[2, ?]", &self.lingo_key)
        .finish()
    }
}

pub struct PacketCzKsyEvent {
    pub packet_id: u16,
    pub index: u16,
    pub count: u32,
}

impl PacketCzKsyEvent {
    pub fn from(buffer: &[u8]) -> PacketCzKsyEvent {
        PacketCzKsyEvent {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzKsyEvent {
    fn id(&self) -> &str {
       "0x02a5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzKsyEvent {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzKsyEvent")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 8]", &self.count)
        .finish()
    }
}

pub struct PacketZcReqCashPassword {
    pub packet_id: u16,
    pub info: u16,
}

impl PacketZcReqCashPassword {
    pub fn from(buffer: &[u8]) -> PacketZcReqCashPassword {
        PacketZcReqCashPassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcReqCashPassword {
    fn id(&self) -> &str {
       "0x02aa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqCashPassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, 4]", &self.info)
        .finish()
    }
}

pub struct PacketCzAckCashPassword {
    pub packet_id: u16,
    pub type_: u16,
    pub password: String,
    pub new_password: String,
}

impl PacketCzAckCashPassword {
    pub fn from(buffer: &[u8]) -> PacketCzAckCashPassword {
        PacketCzAckCashPassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u16::from_le_bytes([buffer[2], buffer[3]]),
            password: String::from_utf8_lossy(&buffer[4..20]).to_string(),
            new_password: String::from_utf8_lossy(&buffer[20..36]).to_string(),
        }
    }
}

impl Packet for PacketCzAckCashPassword {
    fn id(&self) -> &str {
       "0x02ab"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzAckCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzAckCashPassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 4]", &self.type_)
            .field("password[4, 20]", &self.password)
            .field("new_password[20, 36]", &self.new_password)
        .finish()
    }
}

pub struct PacketZcResultCashPassword {
    pub packet_id: u16,
    pub result: u16,
    pub error_count: u16,
}

impl PacketZcResultCashPassword {
    pub fn from(buffer: &[u8]) -> PacketZcResultCashPassword {
        PacketZcResultCashPassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            error_count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcResultCashPassword {
    fn id(&self) -> &str {
       "0x02ac"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcResultCashPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcResultCashPassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("error_count[4, 6]", &self.error_count)
        .finish()
    }
}

pub struct PacketAcRequestSecondPassword {
    pub packet_id: u16,
    pub result: u16,
    pub dw_seed: u32,
}

impl PacketAcRequestSecondPassword {
    pub fn from(buffer: &[u8]) -> PacketAcRequestSecondPassword {
        PacketAcRequestSecondPassword {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            dw_seed: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketAcRequestSecondPassword {
    fn id(&self) -> &str {
       "0x02ad"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcRequestSecondPassword {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRequestSecondPassword")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("dw_seed[4, 8]", &self.dw_seed)
        .finish()
    }
}

pub struct PacketCaLoginHan {
    pub packet_id: u16,
    pub version: u32,
    pub id: String,
    pub passwd: String,
    pub clienttype: char,
    pub m_sz_ip: String,
    pub m_sz_mac_addr: String,
    pub is_han_game_user: char,
}

impl PacketCaLoginHan {
    pub fn from(buffer: &[u8]) -> PacketCaLoginHan {
        PacketCaLoginHan {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            version: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            id: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            passwd: String::from_utf8_lossy(&buffer[30..54]).to_string(),
            clienttype: buffer[54] as char,
            m_sz_ip: String::from_utf8_lossy(&buffer[55..71]).to_string(),
            m_sz_mac_addr: String::from_utf8_lossy(&buffer[71..84]).to_string(),
            is_han_game_user: buffer[84] as char,
        }
    }
}

impl Packet for PacketCaLoginHan {
    fn id(&self) -> &str {
       "0x02b0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaLoginHan {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaLoginHan")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("version[2, 6]", &self.version)
            .field("id[6, 30]", &self.id)
            .field("passwd[30, 54]", &self.passwd)
            .field("clienttype[54, 55]", &self.clienttype)
            .field("m_sz_ip[55, 71]", &self.m_sz_ip)
            .field("m_sz_mac_addr[71, 84]", &self.m_sz_mac_addr)
            .field("is_han_game_user[84, 85]", &self.is_han_game_user)
        .finish()
    }
}

pub struct PacketZcAllQuestList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub quest_count: u32,
    pub quest_list: Vec<PacketZcQuestInfo>,
}

impl PacketZcAllQuestList {
    pub fn from(buffer: &[u8]) -> PacketZcAllQuestList {
        let iter_count = &buffer.len() / 5;
        let mut vec_field: Vec<PacketZcQuestInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 13 * i;
            vec_field.push(PacketZcQuestInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAllQuestList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            quest_count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            quest_list: vec_field,
        }
    }
}

impl Packet for PacketZcAllQuestList {
    fn id(&self) -> &str {
       "0x02b1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAllQuestList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAllQuestList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("quest_count[4, 8]", &self.quest_count)
            .field("quest_list[8, 13]", &self.quest_list)
        .finish()
    }
}

pub struct PacketZcAllQuestMission {
    pub packet_id: u16,
    pub packet_length: u16,
    pub count: u32,
    pub quest_mission_list: Vec<PacketZcQuestMissionInfo>,
}

impl PacketZcAllQuestMission {
    pub fn from(buffer: &[u8]) -> PacketZcAllQuestMission {
        let iter_count = &buffer.len() / 104;
        let mut vec_field: Vec<PacketZcQuestMissionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 112 * i;
            vec_field.push(PacketZcQuestMissionInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAllQuestMission {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            quest_mission_list: vec_field,
        }
    }
}

impl Packet for PacketZcAllQuestMission {
    fn id(&self) -> &str {
       "0x02b2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAllQuestMission {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAllQuestMission")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("count[4, 8]", &self.count)
            .field("quest_mission_list[8, 112]", &self.quest_mission_list)
        .finish()
    }
}

pub struct PacketZcAddQuest {
    pub packet_id: u16,
    pub quest_id: u32,
    pub active: bool,
    pub quest_svr_time: u32,
    pub quest_end_time: u32,
    pub count: u16,
    pub hunt: Vec<PacketZcMissionHunt>,
}

impl PacketZcAddQuest {
    pub fn from(buffer: &[u8]) -> PacketZcAddQuest {
        let iter_count = &buffer.len() / 30;
        let mut vec_field: Vec<PacketZcMissionHunt> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 17 * i;
            let end_pos = 47 * i;
            vec_field.push(PacketZcMissionHunt::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAddQuest {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            quest_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            active: buffer[6] == 1,
            quest_svr_time: u32::from_le_bytes([buffer[7], buffer[8], buffer[9], buffer[10]]),
            quest_end_time: u32::from_le_bytes([buffer[11], buffer[12], buffer[13], buffer[14]]),
            count: u16::from_le_bytes([buffer[15], buffer[16]]),
            hunt: vec_field,
        }
    }
}

impl Packet for PacketZcAddQuest {
    fn id(&self) -> &str {
       "0x02b3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddQuest")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("quest_id[2, 6]", &self.quest_id)
            .field("active[6, 7]", &self.active)
            .field("quest_svr_time[7, 11]", &self.quest_svr_time)
            .field("quest_end_time[11, 15]", &self.quest_end_time)
            .field("count[15, 17]", &self.count)
            .field("hunt[17, 47]", &self.hunt)
        .finish()
    }
}

pub struct PacketZcDelQuest {
    pub packet_id: u16,
    pub quest_id: u32,
}

impl PacketZcDelQuest {
    pub fn from(buffer: &[u8]) -> PacketZcDelQuest {
        PacketZcDelQuest {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            quest_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDelQuest {
    fn id(&self) -> &str {
       "0x02b4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDelQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDelQuest")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("quest_id[2, 6]", &self.quest_id)
        .finish()
    }
}

pub struct PacketZcUpdateMissionHunt {
    pub packet_id: u16,
    pub packet_length: u16,
    pub count: u16,
    pub mob_hunt_list: Vec<PacketMobHunting>,
}

impl PacketZcUpdateMissionHunt {
    pub fn from(buffer: &[u8]) -> PacketZcUpdateMissionHunt {
        let iter_count = &buffer.len() / 12;
        let mut vec_field: Vec<PacketMobHunting> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 6 * i;
            let end_pos = 18 * i;
            vec_field.push(PacketMobHunting::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcUpdateMissionHunt {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            mob_hunt_list: vec_field,
        }
    }
}

impl Packet for PacketZcUpdateMissionHunt {
    fn id(&self) -> &str {
       "0x02b5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUpdateMissionHunt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateMissionHunt")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("count[4, 6]", &self.count)
            .field("mob_hunt_list[6, 18]", &self.mob_hunt_list)
        .finish()
    }
}

pub struct PacketCzActiveQuest {
    pub packet_id: u16,
    pub quest_id: u32,
    pub active: bool,
}

impl PacketCzActiveQuest {
    pub fn from(buffer: &[u8]) -> PacketCzActiveQuest {
        PacketCzActiveQuest {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            quest_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            active: buffer[6] == 1,
        }
    }
}

impl Packet for PacketCzActiveQuest {
    fn id(&self) -> &str {
       "0x02b6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzActiveQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzActiveQuest")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("quest_id[2, 6]", &self.quest_id)
            .field("active[6, 7]", &self.active)
        .finish()
    }
}

pub struct PacketZcActiveQuest {
    pub packet_id: u16,
    pub quest_id: u32,
    pub active: bool,
}

impl PacketZcActiveQuest {
    pub fn from(buffer: &[u8]) -> PacketZcActiveQuest {
        PacketZcActiveQuest {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            quest_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            active: buffer[6] == 1,
        }
    }
}

impl Packet for PacketZcActiveQuest {
    fn id(&self) -> &str {
       "0x02b7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcActiveQuest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcActiveQuest")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("quest_id[2, 6]", &self.quest_id)
            .field("active[6, 7]", &self.active)
        .finish()
    }
}

pub struct PacketZcItemPickupParty {
    pub packet_id: u16,
    pub account_id: u32,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub location: u16,
    pub type_: char,
}

impl PacketZcItemPickupParty {
    pub fn from(buffer: &[u8]) -> PacketZcItemPickupParty {
        PacketZcItemPickupParty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            account_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            is_damaged: buffer[9] == 1,
            refining_level: buffer[10] as char,
            slot: EQUIPSLOTINFO::from(&buffer[11..19]),
            location: u16::from_le_bytes([buffer[19], buffer[20]]),
            type_: buffer[21] as char,
        }
    }
}

impl Packet for PacketZcItemPickupParty {
    fn id(&self) -> &str {
       "0x02b8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemPickupParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupParty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("account_id[2, 6]", &self.account_id)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("is_damaged[9, 10]", &self.is_damaged)
            .field("refining_level[10, 11]", &self.refining_level)
            .field("slot[11, 19]", &self.slot)
            .field("location[19, 21]", &self.location)
            .field("type_[21, 22]", &self.type_)
        .finish()
    }
}

pub struct PacketZcShortcutKeyList {
    pub packet_id: u16,
    pub short_cut_key: Vec<ShortCutKey>,
}

impl PacketZcShortcutKeyList {
    pub fn from(buffer: &[u8]) -> PacketZcShortcutKeyList {
        let iter_count = &buffer.len() / 7;
        let mut vec_field: Vec<ShortCutKey> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 2 * i;
            let end_pos = 9 * i;
            vec_field.push(ShortCutKey::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcShortcutKeyList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            short_cut_key: vec_field,
        }
    }
}

impl Packet for PacketZcShortcutKeyList {
    fn id(&self) -> &str {
       "0x02b9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcShortcutKeyList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShortcutKeyList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("short_cut_key[2, 9]", &self.short_cut_key)
        .finish()
    }
}

pub struct PacketCzShortcutKeyChange {
    pub packet_id: u16,
    pub index: u16,
    pub short_cut_key: ShortCutKey,
}

impl PacketCzShortcutKeyChange {
    pub fn from(buffer: &[u8]) -> PacketCzShortcutKeyChange {
        PacketCzShortcutKeyChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            short_cut_key: ShortCutKey::from(&buffer[4..buffer.len()]),
        }
    }
}

impl Packet for PacketCzShortcutKeyChange {
    fn id(&self) -> &str {
       "0x02ba"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzShortcutKeyChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzShortcutKeyChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("short_cut_key[4, ?]", &self.short_cut_key)
        .finish()
    }
}

pub struct PacketZcEquipitemDamaged {
    pub packet_id: u16,
    pub wear_location: u16,
    pub account_id: u32,
}

impl PacketZcEquipitemDamaged {
    pub fn from(buffer: &[u8]) -> PacketZcEquipitemDamaged {
        PacketZcEquipitemDamaged {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            wear_location: u16::from_le_bytes([buffer[2], buffer[3]]),
            account_id: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcEquipitemDamaged {
    fn id(&self) -> &str {
       "0x02bb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEquipitemDamaged {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipitemDamaged")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("wear_location[2, 4]", &self.wear_location)
            .field("account_id[4, 8]", &self.account_id)
        .finish()
    }
}

pub struct PacketZcNotifyPcbangPlayingTime {
    pub packet_id: u16,
    pub time_minute: u32,
}

impl PacketZcNotifyPcbangPlayingTime {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyPcbangPlayingTime {
        PacketZcNotifyPcbangPlayingTime {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            time_minute: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcNotifyPcbangPlayingTime {
    fn id(&self) -> &str {
       "0x02bc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyPcbangPlayingTime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyPcbangPlayingTime")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("time_minute[2, 6]", &self.time_minute)
        .finish()
    }
}

pub struct PacketZcSrpacketr2Init {
    pub packet_id: u16,
    pub protect_factor: u16,
    pub deform_seed_factor: u32,
    pub deform_add_factor: u32,
}

impl PacketZcSrpacketr2Init {
    pub fn from(buffer: &[u8]) -> PacketZcSrpacketr2Init {
        PacketZcSrpacketr2Init {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            protect_factor: u16::from_le_bytes([buffer[2], buffer[3]]),
            deform_seed_factor: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            deform_add_factor: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketZcSrpacketr2Init {
    fn id(&self) -> &str {
       "0x02bf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSrpacketr2Init {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSrpacketr2Init")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("protect_factor[2, 4]", &self.protect_factor)
            .field("deform_seed_factor[4, 8]", &self.deform_seed_factor)
            .field("deform_add_factor[8, 12]", &self.deform_add_factor)
        .finish()
    }
}

pub struct PacketCzSrpacketr2Start {
    pub packet_id: u16,
    pub protect_factor: u16,
}

impl PacketCzSrpacketr2Start {
    pub fn from(buffer: &[u8]) -> PacketCzSrpacketr2Start {
        PacketCzSrpacketr2Start {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            protect_factor: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzSrpacketr2Start {
    fn id(&self) -> &str {
       "0x02c0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSrpacketr2Start {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSrpacketr2Start")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("protect_factor[2, 4]", &self.protect_factor)
        .finish()
    }
}

pub struct PacketZcNpcChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub account_id: u32,
    pub color: u32,
    pub msg: String,
}

impl PacketZcNpcChat {
    pub fn from(buffer: &[u8]) -> PacketZcNpcChat {
        PacketZcNpcChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            account_id: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            color: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            msg: String::from_utf8_lossy(&buffer[12..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcNpcChat {
    fn id(&self) -> &str {
       "0x02c1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNpcChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNpcChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("account_id[4, 8]", &self.account_id)
            .field("color[8, 12]", &self.color)
            .field("msg[12, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcFormatstringMsg {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: u16,
    pub value: String,
}

impl PacketZcFormatstringMsg {
    pub fn from(buffer: &[u8]) -> PacketZcFormatstringMsg {
        PacketZcFormatstringMsg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: u16::from_le_bytes([buffer[4], buffer[5]]),
            value: String::from_utf8_lossy(&buffer[6..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcFormatstringMsg {
    fn id(&self) -> &str {
       "0x02c2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFormatstringMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFormatstringMsg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, 6]", &self.msg)
            .field("value[6, ?]", &self.value)
        .finish()
    }
}

pub struct PacketCzPartyJoinReq {
    pub packet_id: u16,
    pub character_name: String,
}

impl PacketCzPartyJoinReq {
    pub fn from(buffer: &[u8]) -> PacketCzPartyJoinReq {
        PacketCzPartyJoinReq {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            character_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketCzPartyJoinReq {
    fn id(&self) -> &str {
       "0x02c4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyJoinReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyJoinReq")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("character_name[2, 26]", &self.character_name)
        .finish()
    }
}

pub struct PacketZcPartyJoinReqAck {
    pub packet_id: u16,
    pub character_name: String,
    pub answer: u32,
}

impl PacketZcPartyJoinReqAck {
    pub fn from(buffer: &[u8]) -> PacketZcPartyJoinReqAck {
        PacketZcPartyJoinReqAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            character_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            answer: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
        }
    }
}

impl Packet for PacketZcPartyJoinReqAck {
    fn id(&self) -> &str {
       "0x02c5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyJoinReqAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyJoinReqAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("character_name[2, 26]", &self.character_name)
            .field("answer[26, 30]", &self.answer)
        .finish()
    }
}

pub struct PacketZcPartyJoinReq {
    pub packet_id: u16,
    pub grid: u32,
    pub group_name: String,
}

impl PacketZcPartyJoinReq {
    pub fn from(buffer: &[u8]) -> PacketZcPartyJoinReq {
        PacketZcPartyJoinReq {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            grid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            group_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Packet for PacketZcPartyJoinReq {
    fn id(&self) -> &str {
       "0x02c6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyJoinReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyJoinReq")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("grid[2, 6]", &self.grid)
            .field("group_name[6, 30]", &self.group_name)
        .finish()
    }
}

pub struct PacketCzPartyJoinReqAck {
    pub packet_id: u16,
    pub grid: u32,
    pub b_accept: bool,
}

impl PacketCzPartyJoinReqAck {
    pub fn from(buffer: &[u8]) -> PacketCzPartyJoinReqAck {
        PacketCzPartyJoinReqAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            grid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            b_accept: buffer[6] == 1,
        }
    }
}

impl Packet for PacketCzPartyJoinReqAck {
    fn id(&self) -> &str {
       "0x02c7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyJoinReqAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyJoinReqAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("grid[2, 6]", &self.grid)
            .field("b_accept[6, 7]", &self.b_accept)
        .finish()
    }
}

pub struct PacketCzPartyConfig {
    pub packet_id: u16,
    pub b_refuse_join_msg: bool,
}

impl PacketCzPartyConfig {
    pub fn from(buffer: &[u8]) -> PacketCzPartyConfig {
        PacketCzPartyConfig {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            b_refuse_join_msg: buffer[2] == 1,
        }
    }
}

impl Packet for PacketCzPartyConfig {
    fn id(&self) -> &str {
       "0x02c8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyConfig")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("b_refuse_join_msg[2, 3]", &self.b_refuse_join_msg)
        .finish()
    }
}

pub struct PacketZcPartyConfig {
    pub packet_id: u16,
    pub b_refuse_join_msg: bool,
}

impl PacketZcPartyConfig {
    pub fn from(buffer: &[u8]) -> PacketZcPartyConfig {
        PacketZcPartyConfig {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            b_refuse_join_msg: buffer[2] == 1,
        }
    }
}

impl Packet for PacketZcPartyConfig {
    fn id(&self) -> &str {
       "0x02c9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyConfig")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("b_refuse_join_msg[2, 3]", &self.b_refuse_join_msg)
        .finish()
    }
}

pub struct PacketHcRefuseSelectchar {
    pub packet_id: u16,
    pub error_code: char,
}

impl PacketHcRefuseSelectchar {
    pub fn from(buffer: &[u8]) -> PacketHcRefuseSelectchar {
        PacketHcRefuseSelectchar {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: buffer[2] as char,
        }
    }
}

impl Packet for PacketHcRefuseSelectchar {
    fn id(&self) -> &str {
       "0x02ca"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcRefuseSelectchar {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcRefuseSelectchar")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 3]", &self.error_code)
        .finish()
    }
}

pub struct PacketZcMemorialdungeonSubscriptionInfo {
    pub packet_id: u16,
    pub memorial_dungeon_name: String,
    pub priority_order_num: u16,
}

impl PacketZcMemorialdungeonSubscriptionInfo {
    pub fn from(buffer: &[u8]) -> PacketZcMemorialdungeonSubscriptionInfo {
        PacketZcMemorialdungeonSubscriptionInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            memorial_dungeon_name: String::from_utf8_lossy(&buffer[2..63]).to_string(),
            priority_order_num: u16::from_le_bytes([buffer[63], buffer[64]]),
        }
    }
}

impl Packet for PacketZcMemorialdungeonSubscriptionInfo {
    fn id(&self) -> &str {
       "0x02cb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemorialdungeonSubscriptionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonSubscriptionInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("memorial_dungeon_name[2, 63]", &self.memorial_dungeon_name)
            .field("priority_order_num[63, 65]", &self.priority_order_num)
        .finish()
    }
}

pub struct PacketZcMemorialdungeonSubscriptionNotify {
    pub packet_id: u16,
    pub priority_order_num: u16,
}

impl PacketZcMemorialdungeonSubscriptionNotify {
    pub fn from(buffer: &[u8]) -> PacketZcMemorialdungeonSubscriptionNotify {
        PacketZcMemorialdungeonSubscriptionNotify {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            priority_order_num: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcMemorialdungeonSubscriptionNotify {
    fn id(&self) -> &str {
       "0x02cc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemorialdungeonSubscriptionNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonSubscriptionNotify")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("priority_order_num[2, 4]", &self.priority_order_num)
        .finish()
    }
}

pub struct PacketZcMemorialdungeonInfo {
    pub packet_id: u16,
    pub memorial_dungeon_name: String,
    pub destroy_date: u32,
    pub enter_time_out_date: u32,
}

impl PacketZcMemorialdungeonInfo {
    pub fn from(buffer: &[u8]) -> PacketZcMemorialdungeonInfo {
        PacketZcMemorialdungeonInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            memorial_dungeon_name: String::from_utf8_lossy(&buffer[2..63]).to_string(),
            destroy_date: u32::from_le_bytes([buffer[63], buffer[64], buffer[65], buffer[66]]),
            enter_time_out_date: u32::from_le_bytes([buffer[67], buffer[68], buffer[69], buffer[70]]),
        }
    }
}

impl Packet for PacketZcMemorialdungeonInfo {
    fn id(&self) -> &str {
       "0x02cd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemorialdungeonInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("memorial_dungeon_name[2, 63]", &self.memorial_dungeon_name)
            .field("destroy_date[63, 67]", &self.destroy_date)
            .field("enter_time_out_date[67, 71]", &self.enter_time_out_date)
        .finish()
    }
}

pub struct PacketZcMemorialdungeonNotify {
    pub packet_id: u16,
    pub type_: u32,
    pub enter_limit_date: u32,
}

impl PacketZcMemorialdungeonNotify {
    pub fn from(buffer: &[u8]) -> PacketZcMemorialdungeonNotify {
        PacketZcMemorialdungeonNotify {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            enter_limit_date: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcMemorialdungeonNotify {
    fn id(&self) -> &str {
       "0x02ce"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMemorialdungeonNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMemorialdungeonNotify")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 6]", &self.type_)
            .field("enter_limit_date[6, 10]", &self.enter_limit_date)
        .finish()
    }
}

pub struct PacketCzMemorialdungeonCommand {
    pub packet_id: u16,
    pub command: u32,
}

impl PacketCzMemorialdungeonCommand {
    pub fn from(buffer: &[u8]) -> PacketCzMemorialdungeonCommand {
        PacketCzMemorialdungeonCommand {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            command: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzMemorialdungeonCommand {
    fn id(&self) -> &str {
       "0x02cf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzMemorialdungeonCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzMemorialdungeonCommand")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("command[2, 6]", &self.command)
        .finish()
    }
}

pub struct PacketZcEquipmentItemlist3 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo301>,
}

impl PacketZcEquipmentItemlist3 {
    pub fn from(buffer: &[u8]) -> PacketZcEquipmentItemlist3 {
        let iter_count = &buffer.len() / 28;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 32 * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcEquipmentItemlist3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcEquipmentItemlist3 {
    fn id(&self) -> &str {
       "0x02d0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipmentItemlist3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 32]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcStoreEquipmentItemlist3 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo301>,
}

impl PacketZcStoreEquipmentItemlist3 {
    pub fn from(buffer: &[u8]) -> PacketZcStoreEquipmentItemlist3 {
        let iter_count = &buffer.len() / 28;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 32 * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcStoreEquipmentItemlist3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcStoreEquipmentItemlist3 {
    fn id(&self) -> &str {
       "0x02d1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreEquipmentItemlist3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 32]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcCartEquipmentItemlist3 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<EquipmentitemExtrainfo301>,
}

impl PacketZcCartEquipmentItemlist3 {
    pub fn from(buffer: &[u8]) -> PacketZcCartEquipmentItemlist3 {
        let iter_count = &buffer.len() / 28;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 32 * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcCartEquipmentItemlist3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcCartEquipmentItemlist3 {
    fn id(&self) -> &str {
       "0x02d2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartEquipmentItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartEquipmentItemlist3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 32]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcNotifyBindOnEquip {
    pub packet_id: u16,
    pub index: u16,
}

impl PacketZcNotifyBindOnEquip {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyBindOnEquip {
        PacketZcNotifyBindOnEquip {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcNotifyBindOnEquip {
    fn id(&self) -> &str {
       "0x02d3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyBindOnEquip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyBindOnEquip")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PacketZcItemPickupAck3 {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
    pub itid: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub location: u16,
    pub type_: char,
    pub result: char,
    pub hire_expire_date: u32,
    pub bind_on_equip_type: u16,
}

impl PacketZcItemPickupAck3 {
    pub fn from(buffer: &[u8]) -> PacketZcItemPickupAck3 {
        PacketZcItemPickupAck3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            itid: u16::from_le_bytes([buffer[6], buffer[7]]),
            is_identified: buffer[8] == 1,
            is_damaged: buffer[9] == 1,
            refining_level: buffer[10] as char,
            slot: EQUIPSLOTINFO::from(&buffer[11..19]),
            location: u16::from_le_bytes([buffer[19], buffer[20]]),
            type_: buffer[21] as char,
            result: buffer[22] as char,
            hire_expire_date: u32::from_le_bytes([buffer[23], buffer[24], buffer[25], buffer[26]]),
            bind_on_equip_type: u16::from_le_bytes([buffer[27], buffer[28]]),
        }
    }
}

impl Packet for PacketZcItemPickupAck3 {
    fn id(&self) -> &str {
       "0x02d4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemPickupAck3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemPickupAck3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
            .field("itid[6, 8]", &self.itid)
            .field("is_identified[8, 9]", &self.is_identified)
            .field("is_damaged[9, 10]", &self.is_damaged)
            .field("refining_level[10, 11]", &self.refining_level)
            .field("slot[11, 19]", &self.slot)
            .field("location[19, 21]", &self.location)
            .field("type_[21, 22]", &self.type_)
            .field("result[22, 23]", &self.result)
            .field("hire_expire_date[23, 27]", &self.hire_expire_date)
            .field("bind_on_equip_type[27, 29]", &self.bind_on_equip_type)
        .finish()
    }
}

pub struct PacketZcIsvrDisconnect {
    pub packet_id: u16,
}

impl PacketZcIsvrDisconnect {
    pub fn from(buffer: &[u8]) -> PacketZcIsvrDisconnect {
        PacketZcIsvrDisconnect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcIsvrDisconnect {
    fn id(&self) -> &str {
       "0x02d5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcIsvrDisconnect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcIsvrDisconnect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzEquipwinMicroscope {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzEquipwinMicroscope {
    pub fn from(buffer: &[u8]) -> PacketCzEquipwinMicroscope {
        PacketCzEquipwinMicroscope {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzEquipwinMicroscope {
    fn id(&self) -> &str {
       "0x02d6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzEquipwinMicroscope {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEquipwinMicroscope")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcEquipwinMicroscope {
    pub packet_id: u16,
    pub packet_length: u16,
    pub character_name: String,
    pub job: u16,
    pub head: u16,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub sex: char,
    pub item_info: Vec<EquipmentitemExtrainfo301>,
}

impl PacketZcEquipwinMicroscope {
    pub fn from(buffer: &[u8]) -> PacketZcEquipwinMicroscope {
        let iter_count = &buffer.len() / 28;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 43 * i;
            let end_pos = 71 * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcEquipwinMicroscope {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            character_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            job: u16::from_le_bytes([buffer[28], buffer[29]]),
            head: u16::from_le_bytes([buffer[30], buffer[31]]),
            accessory: u16::from_le_bytes([buffer[32], buffer[33]]),
            accessory2: u16::from_le_bytes([buffer[34], buffer[35]]),
            accessory3: u16::from_le_bytes([buffer[36], buffer[37]]),
            headpalette: u16::from_le_bytes([buffer[38], buffer[39]]),
            bodypalette: u16::from_le_bytes([buffer[40], buffer[41]]),
            sex: buffer[42] as char,
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcEquipwinMicroscope {
    fn id(&self) -> &str {
       "0x02d7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEquipwinMicroscope {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEquipwinMicroscope")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("character_name[4, 28]", &self.character_name)
            .field("job[28, 30]", &self.job)
            .field("head[30, 32]", &self.head)
            .field("accessory[32, 34]", &self.accessory)
            .field("accessory2[34, 36]", &self.accessory2)
            .field("accessory3[36, 38]", &self.accessory3)
            .field("headpalette[38, 40]", &self.headpalette)
            .field("bodypalette[40, 42]", &self.bodypalette)
            .field("sex[42, 43]", &self.sex)
            .field("item_info[43, 71]", &self.item_info)
        .finish()
    }
}

pub struct PacketCzConfig {
    pub packet_id: u16,
    pub config: u32,
    pub value: u32,
}

impl PacketCzConfig {
    pub fn from(buffer: &[u8]) -> PacketCzConfig {
        PacketCzConfig {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            config: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            value: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzConfig {
    fn id(&self) -> &str {
       "0x02d8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzConfig")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("config[2, 6]", &self.config)
            .field("value[6, 10]", &self.value)
        .finish()
    }
}

pub struct PacketZcConfig {
    pub packet_id: u16,
    pub config: u32,
    pub value: u32,
}

impl PacketZcConfig {
    pub fn from(buffer: &[u8]) -> PacketZcConfig {
        PacketZcConfig {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            config: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            value: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcConfig {
    fn id(&self) -> &str {
       "0x02d9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcConfig {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcConfig")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("config[2, 6]", &self.config)
            .field("value[6, 10]", &self.value)
        .finish()
    }
}

pub struct PacketZcConfigNotify {
    pub packet_id: u16,
    pub b_open_equipment_win: bool,
}

impl PacketZcConfigNotify {
    pub fn from(buffer: &[u8]) -> PacketZcConfigNotify {
        PacketZcConfigNotify {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            b_open_equipment_win: buffer[2] == 1,
        }
    }
}

impl Packet for PacketZcConfigNotify {
    fn id(&self) -> &str {
       "0x02da"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcConfigNotify {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcConfigNotify")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("b_open_equipment_win[2, 3]", &self.b_open_equipment_win)
        .finish()
    }
}

pub struct PacketCzBattlefieldChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub msg: String,
}

impl PacketCzBattlefieldChat {
    pub fn from(buffer: &[u8]) -> PacketCzBattlefieldChat {
        PacketCzBattlefieldChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msg: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCzBattlefieldChat {
    fn id(&self) -> &str {
       "0x02db"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzBattlefieldChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBattlefieldChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msg[4, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcBattlefieldChat {
    pub packet_id: u16,
    pub packet_length: u16,
    pub account_id: u32,
    pub name: String,
    pub msg: String,
}

impl PacketZcBattlefieldChat {
    pub fn from(buffer: &[u8]) -> PacketZcBattlefieldChat {
        PacketZcBattlefieldChat {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            account_id: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            name: String::from_utf8_lossy(&buffer[8..32]).to_string(),
            msg: String::from_utf8_lossy(&buffer[32..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcBattlefieldChat {
    fn id(&self) -> &str {
       "0x02dc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattlefieldChat {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldChat")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("account_id[4, 8]", &self.account_id)
            .field("name[8, 32]", &self.name)
            .field("msg[32, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcBattlefieldNotifyCampinfo {
    pub packet_id: u16,
    pub account_id: u32,
    pub name: String,
    pub camp: u16,
}

impl PacketZcBattlefieldNotifyCampinfo {
    pub fn from(buffer: &[u8]) -> PacketZcBattlefieldNotifyCampinfo {
        PacketZcBattlefieldNotifyCampinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            account_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            camp: u16::from_le_bytes([buffer[30], buffer[31]]),
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyCampinfo {
    fn id(&self) -> &str {
       "0x02dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattlefieldNotifyCampinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyCampinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("account_id[2, 6]", &self.account_id)
            .field("name[6, 30]", &self.name)
            .field("camp[30, 32]", &self.camp)
        .finish()
    }
}

pub struct PacketZcBattlefieldNotifyPoint {
    pub packet_id: u16,
    pub point_camp_a: u16,
    pub point_camp_b: u16,
}

impl PacketZcBattlefieldNotifyPoint {
    pub fn from(buffer: &[u8]) -> PacketZcBattlefieldNotifyPoint {
        PacketZcBattlefieldNotifyPoint {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            point_camp_a: u16::from_le_bytes([buffer[2], buffer[3]]),
            point_camp_b: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyPoint {
    fn id(&self) -> &str {
       "0x02de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattlefieldNotifyPoint {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyPoint")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("point_camp_a[2, 4]", &self.point_camp_a)
            .field("point_camp_b[4, 6]", &self.point_camp_b)
        .finish()
    }
}

pub struct PacketZcBattlefieldNotifyPosition {
    pub packet_id: u16,
    pub account_id: u32,
    pub name: String,
    pub job: u16,
    pub x: u16,
    pub y: u16,
}

impl PacketZcBattlefieldNotifyPosition {
    pub fn from(buffer: &[u8]) -> PacketZcBattlefieldNotifyPosition {
        PacketZcBattlefieldNotifyPosition {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            account_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            job: u16::from_le_bytes([buffer[30], buffer[31]]),
            x: u16::from_le_bytes([buffer[32], buffer[33]]),
            y: u16::from_le_bytes([buffer[34], buffer[35]]),
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyPosition {
    fn id(&self) -> &str {
       "0x02df"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattlefieldNotifyPosition {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyPosition")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("account_id[2, 6]", &self.account_id)
            .field("name[6, 30]", &self.name)
            .field("job[30, 32]", &self.job)
            .field("x[32, 34]", &self.x)
            .field("y[34, 36]", &self.y)
        .finish()
    }
}

pub struct PacketZcBattlefieldNotifyHp {
    pub packet_id: u16,
    pub account_id: u32,
    pub name: String,
    pub hp: u16,
    pub max_hp: u16,
}

impl PacketZcBattlefieldNotifyHp {
    pub fn from(buffer: &[u8]) -> PacketZcBattlefieldNotifyHp {
        PacketZcBattlefieldNotifyHp {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            account_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
            hp: u16::from_le_bytes([buffer[30], buffer[31]]),
            max_hp: u16::from_le_bytes([buffer[32], buffer[33]]),
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyHp {
    fn id(&self) -> &str {
       "0x02e0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattlefieldNotifyHp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattlefieldNotifyHp")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("account_id[2, 6]", &self.account_id)
            .field("name[6, 30]", &self.name)
            .field("hp[30, 32]", &self.hp)
            .field("max_hp[32, 34]", &self.max_hp)
        .finish()
    }
}

pub struct PacketZcNotifyAct2 {
    pub packet_id: u16,
    pub gid: u32,
    pub target_gid: u32,
    pub start_time: u32,
    pub attack_mt: u32,
    pub attacked_mt: u32,
    pub damage: u32,
    pub count: u16,
    pub action: char,
    pub left_damage: u32,
}

impl PacketZcNotifyAct2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyAct2 {
        PacketZcNotifyAct2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            start_time: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            attack_mt: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            attacked_mt: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            damage: u32::from_le_bytes([buffer[22], buffer[23], buffer[24], buffer[25]]),
            count: u16::from_le_bytes([buffer[26], buffer[27]]),
            action: buffer[28] as char,
            left_damage: u32::from_le_bytes([buffer[29], buffer[30], buffer[31], buffer[32]]),
        }
    }
}

impl Packet for PacketZcNotifyAct2 {
    fn id(&self) -> &str {
       "0x02e1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyAct2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyAct2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("target_gid[6, 10]", &self.target_gid)
            .field("start_time[10, 14]", &self.start_time)
            .field("attack_mt[14, 18]", &self.attack_mt)
            .field("attacked_mt[18, 22]", &self.attacked_mt)
            .field("damage[22, 26]", &self.damage)
            .field("count[26, 28]", &self.count)
            .field("action[28, 29]", &self.action)
            .field("left_damage[29, 33]", &self.left_damage)
        .finish()
    }
}

pub struct PacketCzBotCheck {
    pub packet_id: u16,
    pub is_bot: u32,
}

impl PacketCzBotCheck {
    pub fn from(buffer: &[u8]) -> PacketCzBotCheck {
        PacketCzBotCheck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            is_bot: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzBotCheck {
    fn id(&self) -> &str {
       "0x02e6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzBotCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBotCheck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("is_bot[2, 6]", &self.is_bot)
        .finish()
    }
}

pub struct PacketZcMapproperty {
    pub packet_id: u16,
    pub packet_length: u16,
    pub type_: u16,
    pub map_info_table: u32,
}

impl PacketZcMapproperty {
    pub fn from(buffer: &[u8]) -> PacketZcMapproperty {
        PacketZcMapproperty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: u16::from_le_bytes([buffer[4], buffer[5]]),
            map_info_table: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcMapproperty {
    fn id(&self) -> &str {
       "0x02e7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMapproperty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMapproperty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("type_[4, 6]", &self.type_)
            .field("map_info_table[6, 10]", &self.map_info_table)
        .finish()
    }
}

pub struct PacketZcNormalItemlist3 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo3>,
}

impl PacketZcNormalItemlist3 {
    pub fn from(buffer: &[u8]) -> PacketZcNormalItemlist3 {
        let iter_count = &buffer.len() / 22;
        let mut vec_field: Vec<NormalitemExtrainfo3> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 26 * i;
            vec_field.push(NormalitemExtrainfo3::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcNormalItemlist3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcNormalItemlist3 {
    fn id(&self) -> &str {
       "0x02e8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNormalItemlist3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 26]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcCartNormalItemlist3 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo3>,
}

impl PacketZcCartNormalItemlist3 {
    pub fn from(buffer: &[u8]) -> PacketZcCartNormalItemlist3 {
        let iter_count = &buffer.len() / 22;
        let mut vec_field: Vec<NormalitemExtrainfo3> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 26 * i;
            vec_field.push(NormalitemExtrainfo3::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcCartNormalItemlist3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcCartNormalItemlist3 {
    fn id(&self) -> &str {
       "0x02e9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCartNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCartNormalItemlist3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 26]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcStoreNormalItemlist3 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub item_info: Vec<NormalitemExtrainfo3>,
}

impl PacketZcStoreNormalItemlist3 {
    pub fn from(buffer: &[u8]) -> PacketZcStoreNormalItemlist3 {
        let iter_count = &buffer.len() / 22;
        let mut vec_field: Vec<NormalitemExtrainfo3> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 26 * i;
            vec_field.push(NormalitemExtrainfo3::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcStoreNormalItemlist3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            item_info: vec_field,
        }
    }
}

impl Packet for PacketZcStoreNormalItemlist3 {
    fn id(&self) -> &str {
       "0x02ea"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcStoreNormalItemlist3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcStoreNormalItemlist3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("item_info[4, 26]", &self.item_info)
        .finish()
    }
}

pub struct PacketZcAcceptEnter2 {
    pub packet_id: u16,
    pub start_time: u32,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub font: u16,
}

impl PacketZcAcceptEnter2 {
    pub fn from(buffer: &[u8]) -> PacketZcAcceptEnter2 {
        PacketZcAcceptEnter2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            start_time: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            pos_dir: String::from_utf8_lossy(&buffer[6..9]).to_string(),
            x_size: buffer[9] as char,
            y_size: buffer[10] as char,
            font: u16::from_le_bytes([buffer[11], buffer[12]]),
        }
    }
}

impl Packet for PacketZcAcceptEnter2 {
    fn id(&self) -> &str {
       "0x02eb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAcceptEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAcceptEnter2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("start_time[2, 6]", &self.start_time)
            .field("pos_dir[6, 9]", &self.pos_dir)
            .field("x_size[9, 10]", &self.x_size)
            .field("y_size[10, 11]", &self.y_size)
            .field("font[11, 13]", &self.font)
        .finish()
    }
}

pub struct PacketZcNotifyMoveentry4 {
    pub packet_id: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub move_start_time: u32,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub move_data: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
    pub font: u16,
}

impl PacketZcNotifyMoveentry4 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMoveentry4 {
        PacketZcNotifyMoveentry4 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            objecttype: buffer[2] as char,
            gid: u32::from_le_bytes([buffer[3], buffer[4], buffer[5], buffer[6]]),
            speed: u16::from_le_bytes([buffer[7], buffer[8]]),
            body_state: u16::from_le_bytes([buffer[9], buffer[10]]),
            health_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            effect_state: u32::from_le_bytes([buffer[13], buffer[14], buffer[15], buffer[16]]),
            job: u16::from_le_bytes([buffer[17], buffer[18]]),
            head: u16::from_le_bytes([buffer[19], buffer[20]]),
            weapon: u32::from_le_bytes([buffer[21], buffer[22], buffer[23], buffer[24]]),
            accessory: u16::from_le_bytes([buffer[25], buffer[26]]),
            move_start_time: u32::from_le_bytes([buffer[27], buffer[28], buffer[29], buffer[30]]),
            accessory2: u16::from_le_bytes([buffer[31], buffer[32]]),
            accessory3: u16::from_le_bytes([buffer[33], buffer[34]]),
            headpalette: u16::from_le_bytes([buffer[35], buffer[36]]),
            bodypalette: u16::from_le_bytes([buffer[37], buffer[38]]),
            head_dir: u16::from_le_bytes([buffer[39], buffer[40]]),
            guid: u32::from_le_bytes([buffer[41], buffer[42], buffer[43], buffer[44]]),
            gemblem_ver: u16::from_le_bytes([buffer[45], buffer[46]]),
            honor: u16::from_le_bytes([buffer[47], buffer[48]]),
            virtue: u32::from_le_bytes([buffer[49], buffer[50], buffer[51], buffer[52]]),
            is_pkmode_on: buffer[53] == 1,
            sex: buffer[54] as char,
            move_data: String::from_utf8_lossy(&buffer[55..61]).to_string(),
            x_size: buffer[61] as char,
            y_size: buffer[62] as char,
            clevel: u16::from_le_bytes([buffer[63], buffer[64]]),
            font: u16::from_le_bytes([buffer[65], buffer[66]]),
        }
    }
}

impl Packet for PacketZcNotifyMoveentry4 {
    fn id(&self) -> &str {
       "0x02ec"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMoveentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry4")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("objecttype[2, 3]", &self.objecttype)
            .field("gid[3, 7]", &self.gid)
            .field("speed[7, 9]", &self.speed)
            .field("body_state[9, 11]", &self.body_state)
            .field("health_state[11, 13]", &self.health_state)
            .field("effect_state[13, 17]", &self.effect_state)
            .field("job[17, 19]", &self.job)
            .field("head[19, 21]", &self.head)
            .field("weapon[21, 25]", &self.weapon)
            .field("accessory[25, 27]", &self.accessory)
            .field("move_start_time[27, 31]", &self.move_start_time)
            .field("accessory2[31, 33]", &self.accessory2)
            .field("accessory3[33, 35]", &self.accessory3)
            .field("headpalette[35, 37]", &self.headpalette)
            .field("bodypalette[37, 39]", &self.bodypalette)
            .field("head_dir[39, 41]", &self.head_dir)
            .field("guid[41, 45]", &self.guid)
            .field("gemblem_ver[45, 47]", &self.gemblem_ver)
            .field("honor[47, 49]", &self.honor)
            .field("virtue[49, 53]", &self.virtue)
            .field("is_pkmode_on[53, 54]", &self.is_pkmode_on)
            .field("sex[54, 55]", &self.sex)
            .field("move_data[55, 61]", &self.move_data)
            .field("x_size[61, 62]", &self.x_size)
            .field("y_size[62, 63]", &self.y_size)
            .field("clevel[63, 65]", &self.clevel)
            .field("font[65, 67]", &self.font)
        .finish()
    }
}

pub struct PacketZcNotifyNewentry4 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
    pub font: u16,
}

impl PacketZcNotifyNewentry4 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyNewentry4 {
        PacketZcNotifyNewentry4 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            job: u16::from_le_bytes([buffer[16], buffer[17]]),
            head: u16::from_le_bytes([buffer[18], buffer[19]]),
            weapon: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            accessory: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory2: u16::from_le_bytes([buffer[26], buffer[27]]),
            accessory3: u16::from_le_bytes([buffer[28], buffer[29]]),
            headpalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            bodypalette: u16::from_le_bytes([buffer[32], buffer[33]]),
            head_dir: u16::from_le_bytes([buffer[34], buffer[35]]),
            guid: u32::from_le_bytes([buffer[36], buffer[37], buffer[38], buffer[39]]),
            gemblem_ver: u16::from_le_bytes([buffer[40], buffer[41]]),
            honor: u16::from_le_bytes([buffer[42], buffer[43]]),
            virtue: u32::from_le_bytes([buffer[44], buffer[45], buffer[46], buffer[47]]),
            is_pkmode_on: buffer[48] == 1,
            sex: buffer[49] as char,
            pos_dir: String::from_utf8_lossy(&buffer[50..53]).to_string(),
            x_size: buffer[53] as char,
            y_size: buffer[54] as char,
            clevel: u16::from_le_bytes([buffer[55], buffer[56]]),
            font: u16::from_le_bytes([buffer[57], buffer[58]]),
        }
    }
}

impl Packet for PacketZcNotifyNewentry4 {
    fn id(&self) -> &str {
       "0x02ed"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyNewentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry4")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 16]", &self.effect_state)
            .field("job[16, 18]", &self.job)
            .field("head[18, 20]", &self.head)
            .field("weapon[20, 24]", &self.weapon)
            .field("accessory[24, 26]", &self.accessory)
            .field("accessory2[26, 28]", &self.accessory2)
            .field("accessory3[28, 30]", &self.accessory3)
            .field("headpalette[30, 32]", &self.headpalette)
            .field("bodypalette[32, 34]", &self.bodypalette)
            .field("head_dir[34, 36]", &self.head_dir)
            .field("guid[36, 40]", &self.guid)
            .field("gemblem_ver[40, 42]", &self.gemblem_ver)
            .field("honor[42, 44]", &self.honor)
            .field("virtue[44, 48]", &self.virtue)
            .field("is_pkmode_on[48, 49]", &self.is_pkmode_on)
            .field("sex[49, 50]", &self.sex)
            .field("pos_dir[50, 53]", &self.pos_dir)
            .field("x_size[53, 54]", &self.x_size)
            .field("y_size[54, 55]", &self.y_size)
            .field("clevel[55, 57]", &self.clevel)
            .field("font[57, 59]", &self.font)
        .finish()
    }
}

pub struct PacketZcNotifyStandentry4 {
    pub packet_id: u16,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub state: char,
    pub clevel: u16,
    pub font: u16,
}

impl PacketZcNotifyStandentry4 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStandentry4 {
        PacketZcNotifyStandentry4 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            speed: u16::from_le_bytes([buffer[6], buffer[7]]),
            body_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            health_state: u16::from_le_bytes([buffer[10], buffer[11]]),
            effect_state: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            job: u16::from_le_bytes([buffer[16], buffer[17]]),
            head: u16::from_le_bytes([buffer[18], buffer[19]]),
            weapon: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            accessory: u16::from_le_bytes([buffer[24], buffer[25]]),
            accessory2: u16::from_le_bytes([buffer[26], buffer[27]]),
            accessory3: u16::from_le_bytes([buffer[28], buffer[29]]),
            headpalette: u16::from_le_bytes([buffer[30], buffer[31]]),
            bodypalette: u16::from_le_bytes([buffer[32], buffer[33]]),
            head_dir: u16::from_le_bytes([buffer[34], buffer[35]]),
            guid: u32::from_le_bytes([buffer[36], buffer[37], buffer[38], buffer[39]]),
            gemblem_ver: u16::from_le_bytes([buffer[40], buffer[41]]),
            honor: u16::from_le_bytes([buffer[42], buffer[43]]),
            virtue: u32::from_le_bytes([buffer[44], buffer[45], buffer[46], buffer[47]]),
            is_pkmode_on: buffer[48] == 1,
            sex: buffer[49] as char,
            pos_dir: String::from_utf8_lossy(&buffer[50..53]).to_string(),
            x_size: buffer[53] as char,
            y_size: buffer[54] as char,
            state: buffer[55] as char,
            clevel: u16::from_le_bytes([buffer[56], buffer[57]]),
            font: u16::from_le_bytes([buffer[58], buffer[59]]),
        }
    }
}

impl Packet for PacketZcNotifyStandentry4 {
    fn id(&self) -> &str {
       "0x02ee"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStandentry4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry4")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("speed[6, 8]", &self.speed)
            .field("body_state[8, 10]", &self.body_state)
            .field("health_state[10, 12]", &self.health_state)
            .field("effect_state[12, 16]", &self.effect_state)
            .field("job[16, 18]", &self.job)
            .field("head[18, 20]", &self.head)
            .field("weapon[20, 24]", &self.weapon)
            .field("accessory[24, 26]", &self.accessory)
            .field("accessory2[26, 28]", &self.accessory2)
            .field("accessory3[28, 30]", &self.accessory3)
            .field("headpalette[30, 32]", &self.headpalette)
            .field("bodypalette[32, 34]", &self.bodypalette)
            .field("head_dir[34, 36]", &self.head_dir)
            .field("guid[36, 40]", &self.guid)
            .field("gemblem_ver[40, 42]", &self.gemblem_ver)
            .field("honor[42, 44]", &self.honor)
            .field("virtue[44, 48]", &self.virtue)
            .field("is_pkmode_on[48, 49]", &self.is_pkmode_on)
            .field("sex[49, 50]", &self.sex)
            .field("pos_dir[50, 53]", &self.pos_dir)
            .field("x_size[53, 54]", &self.x_size)
            .field("y_size[54, 55]", &self.y_size)
            .field("state[55, 56]", &self.state)
            .field("clevel[56, 58]", &self.clevel)
            .field("font[58, 60]", &self.font)
        .finish()
    }
}

pub struct PacketZcNotifyFont {
    pub packet_id: u16,
    pub aid: u32,
    pub font: u16,
}

impl PacketZcNotifyFont {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyFont {
        PacketZcNotifyFont {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            font: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcNotifyFont {
    fn id(&self) -> &str {
       "0x02ef"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyFont {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyFont")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("font[6, 8]", &self.font)
        .finish()
    }
}

pub struct PacketZcProgress {
    pub packet_id: u16,
    pub color: u32,
    pub time: u32,
}

impl PacketZcProgress {
    pub fn from(buffer: &[u8]) -> PacketZcProgress {
        PacketZcProgress {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            color: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            time: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcProgress {
    fn id(&self) -> &str {
       "0x02f0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcProgress {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcProgress")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("color[2, 6]", &self.color)
            .field("time[6, 10]", &self.time)
        .finish()
    }
}

pub struct PacketCzProgress {
    pub packet_id: u16,
}

impl PacketCzProgress {
    pub fn from(buffer: &[u8]) -> PacketCzProgress {
        PacketCzProgress {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzProgress {
    fn id(&self) -> &str {
       "0x02f1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzProgress {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzProgress")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcProgressCancel {
    pub packet_id: u16,
}

impl PacketZcProgressCancel {
    pub fn from(buffer: &[u8]) -> PacketZcProgressCancel {
        PacketZcProgressCancel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketZcProgressCancel {
    fn id(&self) -> &str {
       "0x02f2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcProgressCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcProgressCancel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzOpenSimpleCashshopItemlist {
    pub packet_id: u16,
}

impl PacketCzOpenSimpleCashshopItemlist {
    pub fn from(buffer: &[u8]) -> PacketCzOpenSimpleCashshopItemlist {
        PacketCzOpenSimpleCashshopItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzOpenSimpleCashshopItemlist {
    fn id(&self) -> &str {
       "0x035c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzOpenSimpleCashshopItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzOpenSimpleCashshopItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcSimpleCashshopPointItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub cash_point: u32,
    pub md_itemcount: u16,
    pub md_item_size: u16,
    pub best_itemcount: u16,
    pub best_itemsize: u16,
    pub item_list: Vec<PurchaseItem>,
}

impl PacketZcSimpleCashshopPointItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcSimpleCashshopPointItemlist {
        let iter_count = &buffer.len() / 11;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 16 * i;
            let end_pos = 27 * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcSimpleCashshopPointItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            cash_point: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            md_itemcount: u16::from_le_bytes([buffer[8], buffer[9]]),
            md_item_size: u16::from_le_bytes([buffer[10], buffer[11]]),
            best_itemcount: u16::from_le_bytes([buffer[12], buffer[13]]),
            best_itemsize: u16::from_le_bytes([buffer[14], buffer[15]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcSimpleCashshopPointItemlist {
    fn id(&self) -> &str {
       "0x035d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSimpleCashshopPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSimpleCashshopPointItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("cash_point[4, 8]", &self.cash_point)
            .field("md_itemcount[8, 10]", &self.md_itemcount)
            .field("md_item_size[10, 12]", &self.md_item_size)
            .field("best_itemcount[12, 14]", &self.best_itemcount)
            .field("best_itemsize[14, 16]", &self.best_itemsize)
            .field("item_list[16, 27]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzCloseWindow {
    pub packet_id: u16,
}

impl PacketCzCloseWindow {
    pub fn from(buffer: &[u8]) -> PacketCzCloseWindow {
        PacketCzCloseWindow {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzCloseWindow {
    fn id(&self) -> &str {
       "0x035e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCloseWindow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseWindow")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketAhcGameGuard {
    pub packet_id: u16,
    pub auth_data: u32,
}

impl PacketAhcGameGuard {
    pub fn from(buffer: &[u8]) -> PacketAhcGameGuard {
        PacketAhcGameGuard {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auth_data: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketAhcGameGuard {
    fn id(&self) -> &str {
       "0x03dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAhcGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAhcGameGuard")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auth_data[2, 6]", &self.auth_data)
        .finish()
    }
}

pub struct PacketCahAckGameGuard {
    pub packet_id: u16,
    pub auth_data: u32,
}

impl PacketCahAckGameGuard {
    pub fn from(buffer: &[u8]) -> PacketCahAckGameGuard {
        PacketCahAckGameGuard {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            auth_data: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCahAckGameGuard {
    fn id(&self) -> &str {
       "0x03de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCahAckGameGuard {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCahAckGameGuard")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("auth_data[2, 6]", &self.auth_data)
        .finish()
    }
}

pub struct PacketCzEnter2 {
    pub packet_id: u16,
    pub aid: u32,
    pub gid: u32,
    pub auth_code: u32,
    pub client_time: u32,
    pub sex: char,
}

impl PacketCzEnter2 {
    pub fn from(buffer: &[u8]) -> PacketCzEnter2 {
        PacketCzEnter2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            gid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            auth_code: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            client_time: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            sex: buffer[18] as char,
        }
    }
}

impl Packet for PacketCzEnter2 {
    fn id(&self) -> &str {
       "0x0436"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzEnter2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEnter2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("gid[6, 10]", &self.gid)
            .field("auth_code[10, 14]", &self.auth_code)
            .field("client_time[14, 18]", &self.client_time)
            .field("sex[18, 19]", &self.sex)
        .finish()
    }
}

pub struct PacketCzRequestAct2 {
    pub packet_id: u16,
    pub target_gid: u32,
    pub action: char,
}

impl PacketCzRequestAct2 {
    pub fn from(buffer: &[u8]) -> PacketCzRequestAct2 {
        PacketCzRequestAct2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            target_gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            action: buffer[6] as char,
        }
    }
}

impl Packet for PacketCzRequestAct2 {
    fn id(&self) -> &str {
       "0x0437"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzRequestAct2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzRequestAct2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("target_gid[2, 6]", &self.target_gid)
            .field("action[6, 7]", &self.action)
        .finish()
    }
}

pub struct PacketCzUseSkill2 {
    pub packet_id: u16,
    pub selected_level: u16,
    pub skid: u16,
    pub target_id: u32,
}

impl PacketCzUseSkill2 {
    pub fn from(buffer: &[u8]) -> PacketCzUseSkill2 {
        PacketCzUseSkill2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            selected_level: u16::from_le_bytes([buffer[2], buffer[3]]),
            skid: u16::from_le_bytes([buffer[4], buffer[5]]),
            target_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketCzUseSkill2 {
    fn id(&self) -> &str {
       "0x0438"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUseSkill2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseSkill2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("selected_level[2, 4]", &self.selected_level)
            .field("skid[4, 6]", &self.skid)
            .field("target_id[6, 10]", &self.target_id)
        .finish()
    }
}

pub struct PacketCzUseItem2 {
    pub packet_id: u16,
    pub index: u16,
    pub aid: u32,
}

impl PacketCzUseItem2 {
    pub fn from(buffer: &[u8]) -> PacketCzUseItem2 {
        PacketCzUseItem2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzUseItem2 {
    fn id(&self) -> &str {
       "0x0439"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzUseItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzUseItem2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("aid[4, 8]", &self.aid)
        .finish()
    }
}

pub struct PacketZcSkillPostdelay {
    pub packet_id: u16,
    pub skid: u16,
    pub delay_tm: u32,
}

impl PacketZcSkillPostdelay {
    pub fn from(buffer: &[u8]) -> PacketZcSkillPostdelay {
        PacketZcSkillPostdelay {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            delay_tm: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcSkillPostdelay {
    fn id(&self) -> &str {
       "0x043d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillPostdelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillPostdelay")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("delay_tm[4, 8]", &self.delay_tm)
        .finish()
    }
}

pub struct PacketZcSkillPostdelayList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub delay_list: Vec<SkillPostdelay>,
}

impl PacketZcSkillPostdelayList {
    pub fn from(buffer: &[u8]) -> PacketZcSkillPostdelayList {
        let iter_count = &buffer.len() / 6;
        let mut vec_field: Vec<SkillPostdelay> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 10 * i;
            vec_field.push(SkillPostdelay::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcSkillPostdelayList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            delay_list: vec_field,
        }
    }
}

impl Packet for PacketZcSkillPostdelayList {
    fn id(&self) -> &str {
       "0x043e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillPostdelayList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillPostdelayList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("delay_list[4, 10]", &self.delay_list)
        .finish()
    }
}

pub struct PacketZcMsgStateChange2 {
    pub packet_id: u16,
    pub index: u16,
    pub aid: u32,
    pub state: bool,
    pub remain_ms: u32,
    pub val: u32,
}

impl PacketZcMsgStateChange2 {
    pub fn from(buffer: &[u8]) -> PacketZcMsgStateChange2 {
        PacketZcMsgStateChange2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            state: buffer[8] == 1,
            remain_ms: u32::from_le_bytes([buffer[9], buffer[10], buffer[11], buffer[12]]),
            val: u32::from_le_bytes([buffer[13], buffer[14], buffer[15], buffer[16]]),
        }
    }
}

impl Packet for PacketZcMsgStateChange2 {
    fn id(&self) -> &str {
       "0x043f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMsgStateChange2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgStateChange2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("aid[4, 8]", &self.aid)
            .field("state[8, 9]", &self.state)
            .field("remain_ms[9, 13]", &self.remain_ms)
            .field("val[13, 17]", &self.val)
        .finish()
    }
}

pub struct PacketZcMillenniumshield {
    pub packet_id: u16,
    pub aid: u32,
    pub num: u16,
    pub state: u16,
}

impl PacketZcMillenniumshield {
    pub fn from(buffer: &[u8]) -> PacketZcMillenniumshield {
        PacketZcMillenniumshield {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            num: u16::from_le_bytes([buffer[6], buffer[7]]),
            state: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcMillenniumshield {
    fn id(&self) -> &str {
       "0x0440"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMillenniumshield {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMillenniumshield")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("num[6, 8]", &self.num)
            .field("state[8, 10]", &self.state)
        .finish()
    }
}

pub struct PacketZcSkillinfoDelete {
    pub packet_id: u16,
    pub skid: u16,
}

impl PacketZcSkillinfoDelete {
    pub fn from(buffer: &[u8]) -> PacketZcSkillinfoDelete {
        PacketZcSkillinfoDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcSkillinfoDelete {
    fn id(&self) -> &str {
       "0x0441"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillinfoDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
        .finish()
    }
}

pub struct PacketZcSkillSelectRequest {
    pub packet_id: u16,
    pub packet_length: u16,
    pub why: u32,
    pub skidlist: u16,
}

impl PacketZcSkillSelectRequest {
    pub fn from(buffer: &[u8]) -> PacketZcSkillSelectRequest {
        PacketZcSkillSelectRequest {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            why: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            skidlist: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcSkillSelectRequest {
    fn id(&self) -> &str {
       "0x0442"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillSelectRequest {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillSelectRequest")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("why[4, 8]", &self.why)
            .field("skidlist[8, 10]", &self.skidlist)
        .finish()
    }
}

pub struct PacketCzSkillSelectResponse {
    pub packet_id: u16,
    pub why: u32,
    pub skid: u16,
}

impl PacketCzSkillSelectResponse {
    pub fn from(buffer: &[u8]) -> PacketCzSkillSelectResponse {
        PacketCzSkillSelectResponse {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            why: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            skid: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzSkillSelectResponse {
    fn id(&self) -> &str {
       "0x0443"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSkillSelectResponse {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSkillSelectResponse")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("why[2, 6]", &self.why)
            .field("skid[6, 8]", &self.skid)
        .finish()
    }
}

pub struct PacketZcSimpleCashPointItemlist {
    pub packet_id: u16,
    pub packet_length: u16,
    pub cash_point: u32,
    pub item_list: Vec<PurchaseItem>,
}

impl PacketZcSimpleCashPointItemlist {
    pub fn from(buffer: &[u8]) -> PacketZcSimpleCashPointItemlist {
        let iter_count = &buffer.len() / 11;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 19 * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcSimpleCashPointItemlist {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            cash_point: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcSimpleCashPointItemlist {
    fn id(&self) -> &str {
       "0x0444"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSimpleCashPointItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSimpleCashPointItemlist")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("cash_point[4, 8]", &self.cash_point)
            .field("item_list[8, 19]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzSimpleBuyCashPointItem {
    pub packet_id: u16,
    pub itid: u16,
    pub count: u16,
}

impl PacketCzSimpleBuyCashPointItem {
    pub fn from(buffer: &[u8]) -> PacketCzSimpleBuyCashPointItem {
        PacketCzSimpleBuyCashPointItem {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzSimpleBuyCashPointItem {
    fn id(&self) -> &str {
       "0x0445"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSimpleBuyCashPointItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSimpleBuyCashPointItem")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itid[2, 4]", &self.itid)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct PacketZcQuestNotifyEffect {
    pub packet_id: u16,
    pub npc_id: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub effect: u16,
    pub type_: u16,
}

impl PacketZcQuestNotifyEffect {
    pub fn from(buffer: &[u8]) -> PacketZcQuestNotifyEffect {
        PacketZcQuestNotifyEffect {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            npc_id: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            x_pos: u16::from_le_bytes([buffer[6], buffer[7]]),
            y_pos: u16::from_le_bytes([buffer[8], buffer[9]]),
            effect: u16::from_le_bytes([buffer[10], buffer[11]]),
            type_: u16::from_le_bytes([buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcQuestNotifyEffect {
    fn id(&self) -> &str {
       "0x0446"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcQuestNotifyEffect {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcQuestNotifyEffect")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("npc_id[2, 6]", &self.npc_id)
            .field("x_pos[6, 8]", &self.x_pos)
            .field("y_pos[8, 10]", &self.y_pos)
            .field("effect[10, 12]", &self.effect)
            .field("type_[12, 14]", &self.type_)
        .finish()
    }
}

pub struct PacketCzBlockingPlayCancel {
    pub packet_id: u16,
}

impl PacketCzBlockingPlayCancel {
    pub fn from(buffer: &[u8]) -> PacketCzBlockingPlayCancel {
        PacketCzBlockingPlayCancel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzBlockingPlayCancel {
    fn id(&self) -> &str {
       "0x0447"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzBlockingPlayCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBlockingPlayCancel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketHcCharacterList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub character_list: Vec<CharacterList>,
}

impl PacketHcCharacterList {
    pub fn from(buffer: &[u8]) -> PacketHcCharacterList {
        let iter_count = &buffer.len() / 5;
        let mut vec_field: Vec<CharacterList> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 * i;
            let end_pos = 9 * i;
            vec_field.push(CharacterList::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketHcCharacterList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            character_list: vec_field,
        }
    }
}

impl Packet for PacketHcCharacterList {
    fn id(&self) -> &str {
       "0x0448"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcCharacterList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcCharacterList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("character_list[4, 9]", &self.character_list)
        .finish()
    }
}

pub struct PacketZcHackshErrorMsg {
    pub packet_id: u16,
    pub error_id: u16,
}

impl PacketZcHackshErrorMsg {
    pub fn from(buffer: &[u8]) -> PacketZcHackshErrorMsg {
        PacketZcHackshErrorMsg {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_id: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcHackshErrorMsg {
    fn id(&self) -> &str {
       "0x0449"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcHackshErrorMsg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHackshErrorMsg")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_id[2, 4]", &self.error_id)
        .finish()
    }
}

pub struct PacketCzClientVersion {
    pub packet_id: u16,
    pub client_ver: u32,
}

impl PacketCzClientVersion {
    pub fn from(buffer: &[u8]) -> PacketCzClientVersion {
        PacketCzClientVersion {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            client_ver: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzClientVersion {
    fn id(&self) -> &str {
       "0x044a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzClientVersion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzClientVersion")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("client_ver[2, 6]", &self.client_ver)
        .finish()
    }
}

pub struct PacketCzCloseSimplecashShop {
    pub packet_id: u16,
}

impl PacketCzCloseSimplecashShop {
    pub fn from(buffer: &[u8]) -> PacketCzCloseSimplecashShop {
        PacketCzCloseSimplecashShop {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzCloseSimplecashShop {
    fn id(&self) -> &str {
       "0x044b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCloseSimplecashShop {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseSimplecashShop")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcEsResult {
    pub packet_id: u16,
    pub es_no: u16,
    pub es_msg: u16,
}

impl PacketZcEsResult {
    pub fn from(buffer: &[u8]) -> PacketZcEsResult {
        PacketZcEsResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            es_no: u16::from_le_bytes([buffer[2], buffer[3]]),
            es_msg: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcEsResult {
    fn id(&self) -> &str {
       "0x07d0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEsResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("es_no[2, 4]", &self.es_no)
            .field("es_msg[4, 6]", &self.es_msg)
        .finish()
    }
}

pub struct PacketCzEsGetList {
    pub packet_id: u16,
}

impl PacketCzEsGetList {
    pub fn from(buffer: &[u8]) -> PacketCzEsGetList {
        PacketCzEsGetList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzEsGetList {
    fn id(&self) -> &str {
       "0x07d1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzEsGetList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEsGetList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcEsList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub count: u16,
}

impl PacketZcEsList {
    pub fn from(buffer: &[u8]) -> PacketZcEsList {
        PacketZcEsList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcEsList {
    fn id(&self) -> &str {
       "0x07d2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEsList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct PacketCzEsChoose {
    pub packet_id: u16,
    pub es_no: u16,
}

impl PacketCzEsChoose {
    pub fn from(buffer: &[u8]) -> PacketCzEsChoose {
        PacketCzEsChoose {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            es_no: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzEsChoose {
    fn id(&self) -> &str {
       "0x07d3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzEsChoose {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEsChoose")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("es_no[2, 4]", &self.es_no)
        .finish()
    }
}

pub struct PacketCzEsCancel {
    pub packet_id: u16,
    pub es_no: u16,
}

impl PacketCzEsCancel {
    pub fn from(buffer: &[u8]) -> PacketCzEsCancel {
        PacketCzEsCancel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            es_no: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzEsCancel {
    fn id(&self) -> &str {
       "0x07d4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzEsCancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzEsCancel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("es_no[2, 4]", &self.es_no)
        .finish()
    }
}

pub struct PacketZcEsReady {
    pub packet_id: u16,
    pub es_no: u16,
}

impl PacketZcEsReady {
    pub fn from(buffer: &[u8]) -> PacketZcEsReady {
        PacketZcEsReady {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            es_no: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcEsReady {
    fn id(&self) -> &str {
       "0x07d5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEsReady {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsReady")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("es_no[2, 4]", &self.es_no)
        .finish()
    }
}

pub struct PacketZcEsGoto {
    pub packet_id: u16,
    pub es_no: u16,
}

impl PacketZcEsGoto {
    pub fn from(buffer: &[u8]) -> PacketZcEsGoto {
        PacketZcEsGoto {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            es_no: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcEsGoto {
    fn id(&self) -> &str {
       "0x07d6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEsGoto {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsGoto")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("es_no[2, 4]", &self.es_no)
        .finish()
    }
}

pub struct PacketCzGroupinfoChangeV2 {
    pub packet_id: u16,
    pub exp_option: u32,
    pub item_pickup_rule: char,
    pub item_division_rule: char,
}

impl PacketCzGroupinfoChangeV2 {
    pub fn from(buffer: &[u8]) -> PacketCzGroupinfoChangeV2 {
        PacketCzGroupinfoChangeV2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            exp_option: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            item_pickup_rule: buffer[6] as char,
            item_division_rule: buffer[7] as char,
        }
    }
}

impl Packet for PacketCzGroupinfoChangeV2 {
    fn id(&self) -> &str {
       "0x07d7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzGroupinfoChangeV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGroupinfoChangeV2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("exp_option[2, 6]", &self.exp_option)
            .field("item_pickup_rule[6, 7]", &self.item_pickup_rule)
            .field("item_division_rule[7, 8]", &self.item_division_rule)
        .finish()
    }
}

pub struct PacketZcReqGroupinfoChangeV2 {
    pub packet_id: u16,
    pub exp_option: u32,
    pub item_pickup_rule: char,
    pub item_division_rule: char,
}

impl PacketZcReqGroupinfoChangeV2 {
    pub fn from(buffer: &[u8]) -> PacketZcReqGroupinfoChangeV2 {
        PacketZcReqGroupinfoChangeV2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            exp_option: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            item_pickup_rule: buffer[6] as char,
            item_division_rule: buffer[7] as char,
        }
    }
}

impl Packet for PacketZcReqGroupinfoChangeV2 {
    fn id(&self) -> &str {
       "0x07d8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcReqGroupinfoChangeV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcReqGroupinfoChangeV2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("exp_option[2, 6]", &self.exp_option)
            .field("item_pickup_rule[6, 7]", &self.item_pickup_rule)
            .field("item_division_rule[7, 8]", &self.item_division_rule)
        .finish()
    }
}

pub struct PacketZcShortcutKeyListV2 {
    pub packet_id: u16,
    pub short_cut_key: Vec<ShortCutKey>,
}

impl PacketZcShortcutKeyListV2 {
    pub fn from(buffer: &[u8]) -> PacketZcShortcutKeyListV2 {
        let iter_count = &buffer.len() / 7;
        let mut vec_field: Vec<ShortCutKey> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 2 * i;
            let end_pos = 9 * i;
            vec_field.push(ShortCutKey::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcShortcutKeyListV2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            short_cut_key: vec_field,
        }
    }
}

impl Packet for PacketZcShortcutKeyListV2 {
    fn id(&self) -> &str {
       "0x07d9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcShortcutKeyListV2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcShortcutKeyListV2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("short_cut_key[2, 9]", &self.short_cut_key)
        .finish()
    }
}

pub struct PacketCzChangeGroupMaster {
    pub packet_id: u16,
    pub aid: u32,
}

impl PacketCzChangeGroupMaster {
    pub fn from(buffer: &[u8]) -> PacketCzChangeGroupMaster {
        PacketCzChangeGroupMaster {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzChangeGroupMaster {
    fn id(&self) -> &str {
       "0x07da"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzChangeGroupMaster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzChangeGroupMaster")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
        .finish()
    }
}

pub struct PacketZcHoParChange {
    pub packet_id: u16,
    pub var: u16,
    pub value: u32,
}

impl PacketZcHoParChange {
    pub fn from(buffer: &[u8]) -> PacketZcHoParChange {
        PacketZcHoParChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            var: u16::from_le_bytes([buffer[2], buffer[3]]),
            value: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcHoParChange {
    fn id(&self) -> &str {
       "0x07db"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcHoParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcHoParChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("var[2, 4]", &self.var)
            .field("value[4, 8]", &self.value)
        .finish()
    }
}

pub struct PacketCzSeekParty {
    pub packet_id: u16,
    pub option: u32,
}

impl PacketCzSeekParty {
    pub fn from(buffer: &[u8]) -> PacketCzSeekParty {
        PacketCzSeekParty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            option: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzSeekParty {
    fn id(&self) -> &str {
       "0x07dc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSeekParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSeekParty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("option[2, 6]", &self.option)
        .finish()
    }
}

pub struct PacketZcSeekParty {
    pub packet_id: u16,
    pub name: String,
    pub job: u32,
    pub level: u32,
    pub map_name: String,
    pub option: u32,
}

impl PacketZcSeekParty {
    pub fn from(buffer: &[u8]) -> PacketZcSeekParty {
        PacketZcSeekParty {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            job: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            level: u32::from_le_bytes([buffer[30], buffer[31], buffer[32], buffer[33]]),
            map_name: String::from_utf8_lossy(&buffer[34..50]).to_string(),
            option: u32::from_le_bytes([buffer[50], buffer[51], buffer[52], buffer[53]]),
        }
    }
}

impl Packet for PacketZcSeekParty {
    fn id(&self) -> &str {
       "0x07dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSeekParty {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSeekParty")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
            .field("job[26, 30]", &self.job)
            .field("level[30, 34]", &self.level)
            .field("map_name[34, 50]", &self.map_name)
            .field("option[50, 54]", &self.option)
        .finish()
    }
}

pub struct PacketCzSeekPartyMember {
    pub packet_id: u16,
    pub job: u32,
    pub level: u32,
    pub map_name: String,
    pub option: u32,
}

impl PacketCzSeekPartyMember {
    pub fn from(buffer: &[u8]) -> PacketCzSeekPartyMember {
        PacketCzSeekPartyMember {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            job: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            level: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            map_name: String::from_utf8_lossy(&buffer[10..26]).to_string(),
            option: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
        }
    }
}

impl Packet for PacketCzSeekPartyMember {
    fn id(&self) -> &str {
       "0x07de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSeekPartyMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSeekPartyMember")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("job[2, 6]", &self.job)
            .field("level[6, 10]", &self.level)
            .field("map_name[10, 26]", &self.map_name)
            .field("option[26, 30]", &self.option)
        .finish()
    }
}

pub struct PacketZcSeekPartyMember {
    pub packet_id: u16,
    pub name: String,
    pub job: u32,
    pub level: u32,
    pub map_name: String,
    pub option: u32,
}

impl PacketZcSeekPartyMember {
    pub fn from(buffer: &[u8]) -> PacketZcSeekPartyMember {
        PacketZcSeekPartyMember {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            job: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            level: u32::from_le_bytes([buffer[30], buffer[31], buffer[32], buffer[33]]),
            map_name: String::from_utf8_lossy(&buffer[34..50]).to_string(),
            option: u32::from_le_bytes([buffer[50], buffer[51], buffer[52], buffer[53]]),
        }
    }
}

impl Packet for PacketZcSeekPartyMember {
    fn id(&self) -> &str {
       "0x07df"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSeekPartyMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSeekPartyMember")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("name[2, 26]", &self.name)
            .field("job[26, 30]", &self.job)
            .field("level[30, 34]", &self.level)
            .field("map_name[34, 50]", &self.map_name)
            .field("option[50, 54]", &self.option)
        .finish()
    }
}

pub struct PacketZcEsNotiMyinfo {
    pub packet_id: u16,
    pub es_no: u16,
    pub esname: String,
}

impl PacketZcEsNotiMyinfo {
    pub fn from(buffer: &[u8]) -> PacketZcEsNotiMyinfo {
        PacketZcEsNotiMyinfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            es_no: u16::from_le_bytes([buffer[2], buffer[3]]),
            esname: String::from_utf8_lossy(&buffer[4..58]).to_string(),
        }
    }
}

impl Packet for PacketZcEsNotiMyinfo {
    fn id(&self) -> &str {
       "0x07e0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcEsNotiMyinfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcEsNotiMyinfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("es_no[2, 4]", &self.es_no)
            .field("esname[4, 58]", &self.esname)
        .finish()
    }
}

pub struct PacketZcSkillinfoUpdate2 {
    pub packet_id: u16,
    pub skid: u16,
    pub type_: u32,
    pub level: u16,
    pub spcost: u16,
    pub attack_range: u16,
    pub upgradable: bool,
}

impl PacketZcSkillinfoUpdate2 {
    pub fn from(buffer: &[u8]) -> PacketZcSkillinfoUpdate2 {
        PacketZcSkillinfoUpdate2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            level: u16::from_le_bytes([buffer[8], buffer[9]]),
            spcost: u16::from_le_bytes([buffer[10], buffer[11]]),
            attack_range: u16::from_le_bytes([buffer[12], buffer[13]]),
            upgradable: buffer[14] == 1,
        }
    }
}

impl Packet for PacketZcSkillinfoUpdate2 {
    fn id(&self) -> &str {
       "0x07e1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSkillinfoUpdate2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSkillinfoUpdate2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("type_[4, 8]", &self.type_)
            .field("level[8, 10]", &self.level)
            .field("spcost[10, 12]", &self.spcost)
            .field("attack_range[12, 14]", &self.attack_range)
            .field("upgradable[14, 15]", &self.upgradable)
        .finish()
    }
}

pub struct PacketZcMsgValue {
    pub packet_id: u16,
    pub msg: u16,
    pub value: u32,
}

impl PacketZcMsgValue {
    pub fn from(buffer: &[u8]) -> PacketZcMsgValue {
        PacketZcMsgValue {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            msg: u16::from_le_bytes([buffer[2], buffer[3]]),
            value: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcMsgValue {
    fn id(&self) -> &str {
       "0x07e2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMsgValue {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgValue")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("msg[2, 4]", &self.msg)
            .field("value[4, 8]", &self.value)
        .finish()
    }
}

pub struct PacketZcItemlistwinOpen {
    pub packet_id: u16,
    pub type_: u32,
}

impl PacketZcItemlistwinOpen {
    pub fn from(buffer: &[u8]) -> PacketZcItemlistwinOpen {
        PacketZcItemlistwinOpen {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcItemlistwinOpen {
    fn id(&self) -> &str {
       "0x07e3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemlistwinOpen {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemlistwinOpen")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("type_[2, 6]", &self.type_)
        .finish()
    }
}

pub struct PacketCzItemlistwinRes {
    pub packet_id: u16,
    pub packet_length: u16,
    pub type_: u32,
    pub action: u32,
    pub material_list: u16,
}

impl PacketCzItemlistwinRes {
    pub fn from(buffer: &[u8]) -> PacketCzItemlistwinRes {
        PacketCzItemlistwinRes {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            action: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            material_list: u16::from_le_bytes([buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzItemlistwinRes {
    fn id(&self) -> &str {
       "0x07e4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzItemlistwinRes {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzItemlistwinRes")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("type_[4, 8]", &self.type_)
            .field("action[8, 12]", &self.action)
            .field("material_list[12, 14]", &self.material_list)
        .finish()
    }
}

pub struct PacketChEnterCheckbot {
    pub packet_id: u16,
    pub packet_length: u16,
    pub dw_aid: u32,
    pub sz_string_info: String,
}

impl PacketChEnterCheckbot {
    pub fn from(buffer: &[u8]) -> PacketChEnterCheckbot {
        PacketChEnterCheckbot {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            dw_aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            sz_string_info: String::from_utf8_lossy(&buffer[8..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketChEnterCheckbot {
    fn id(&self) -> &str {
       "0x07e5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChEnterCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChEnterCheckbot")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("dw_aid[4, 8]", &self.dw_aid)
            .field("sz_string_info[8, ?]", &self.sz_string_info)
        .finish()
    }
}

pub struct PacketZcMsgSkill {
    pub packet_id: u16,
    pub skid: u16,
    pub msgid: u32,
}

impl PacketZcMsgSkill {
    pub fn from(buffer: &[u8]) -> PacketZcMsgSkill {
        PacketZcMsgSkill {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            skid: u16::from_le_bytes([buffer[2], buffer[3]]),
            msgid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcMsgSkill {
    fn id(&self) -> &str {
       "0x07e6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMsgSkill {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMsgSkill")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("skid[2, 4]", &self.skid)
            .field("msgid[4, 8]", &self.msgid)
        .finish()
    }
}

pub struct PacketChCheckbot {
    pub packet_id: u16,
    pub packet_length: u16,
    pub dw_aid: u32,
    pub sz_string_info: String,
}

impl PacketChCheckbot {
    pub fn from(buffer: &[u8]) -> PacketChCheckbot {
        PacketChCheckbot {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            dw_aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            sz_string_info: String::from_utf8_lossy(&buffer[8..32]).to_string(),
        }
    }
}

impl Packet for PacketChCheckbot {
    fn id(&self) -> &str {
       "0x07e7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChCheckbot")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("dw_aid[4, 8]", &self.dw_aid)
            .field("sz_string_info[8, 32]", &self.sz_string_info)
        .finish()
    }
}

pub struct PacketHcCheckbot {
    pub packet_id: u16,
    pub packet_length: u16,
    pub img: String,
}

impl PacketHcCheckbot {
    pub fn from(buffer: &[u8]) -> PacketHcCheckbot {
        PacketHcCheckbot {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            img: String::from_utf8_lossy(&buffer[4..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketHcCheckbot {
    fn id(&self) -> &str {
       "0x07e8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcCheckbot {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcCheckbot")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("img[4, ?]", &self.img)
        .finish()
    }
}

pub struct PacketHcCheckbotResult {
    pub packet_id: u16,
    pub packet_length: u16,
    pub result: char,
}

impl PacketHcCheckbotResult {
    pub fn from(buffer: &[u8]) -> PacketHcCheckbotResult {
        PacketHcCheckbotResult {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: buffer[4] as char,
        }
    }
}

impl Packet for PacketHcCheckbotResult {
    fn id(&self) -> &str {
       "0x07e9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcCheckbotResult {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcCheckbotResult")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("result[4, 5]", &self.result)
        .finish()
    }
}

pub struct PacketCzBattleFieldList {
    pub packet_id: u16,
}

impl PacketCzBattleFieldList {
    pub fn from(buffer: &[u8]) -> PacketCzBattleFieldList {
        PacketCzBattleFieldList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzBattleFieldList {
    fn id(&self) -> &str {
       "0x07ea"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzBattleFieldList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzBattleFieldList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcBattleFieldList {
    pub packet_id: u16,
    pub packet_length: u16,
    pub count: u16,
    pub ack_type: u16,
    pub info_list: Vec<BattleFieldInfo>,
}

impl PacketZcBattleFieldList {
    pub fn from(buffer: &[u8]) -> PacketZcBattleFieldList {
        let iter_count = &buffer.len() / 62;
        let mut vec_field: Vec<BattleFieldInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 * i;
            let end_pos = 70 * i;
            vec_field.push(BattleFieldInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcBattleFieldList {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            ack_type: u16::from_le_bytes([buffer[6], buffer[7]]),
            info_list: vec_field,
        }
    }
}

impl Packet for PacketZcBattleFieldList {
    fn id(&self) -> &str {
       "0x07eb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattleFieldList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleFieldList")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("count[4, 6]", &self.count)
            .field("ack_type[6, 8]", &self.ack_type)
            .field("info_list[8, 70]", &self.info_list)
        .finish()
    }
}

pub struct PacketCzJoinBattleField {
    pub packet_id: u16,
    pub bfno: u32,
    pub join_team: u16,
}

impl PacketCzJoinBattleField {
    pub fn from(buffer: &[u8]) -> PacketCzJoinBattleField {
        PacketCzJoinBattleField {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            join_team: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzJoinBattleField {
    fn id(&self) -> &str {
       "0x07ec"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzJoinBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzJoinBattleField")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
            .field("join_team[6, 8]", &self.join_team)
        .finish()
    }
}

pub struct PacketZcJoinBattleField {
    pub packet_id: u16,
    pub bfno: u32,
    pub join_team: u16,
    pub result: u16,
}

impl PacketZcJoinBattleField {
    pub fn from(buffer: &[u8]) -> PacketZcJoinBattleField {
        PacketZcJoinBattleField {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            join_team: u16::from_le_bytes([buffer[6], buffer[7]]),
            result: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcJoinBattleField {
    fn id(&self) -> &str {
       "0x07ed"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcJoinBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcJoinBattleField")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
            .field("join_team[6, 8]", &self.join_team)
            .field("result[8, 10]", &self.result)
        .finish()
    }
}

pub struct PacketCzCancelBattleField {
    pub packet_id: u16,
    pub bfno: u32,
}

impl PacketCzCancelBattleField {
    pub fn from(buffer: &[u8]) -> PacketCzCancelBattleField {
        PacketCzCancelBattleField {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzCancelBattleField {
    fn id(&self) -> &str {
       "0x07ee"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCancelBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCancelBattleField")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
        .finish()
    }
}

pub struct PacketZcCancelBattleField {
    pub packet_id: u16,
    pub bfno: u32,
    pub result: u16,
}

impl PacketZcCancelBattleField {
    pub fn from(buffer: &[u8]) -> PacketZcCancelBattleField {
        PacketZcCancelBattleField {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcCancelBattleField {
    fn id(&self) -> &str {
       "0x07ef"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCancelBattleField {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCancelBattleField")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
            .field("result[6, 8]", &self.result)
        .finish()
    }
}

pub struct PacketCzReqBattleStateMonitor {
    pub packet_id: u16,
    pub bfno: u32,
    pub power_switch: u16,
}

impl PacketCzReqBattleStateMonitor {
    pub fn from(buffer: &[u8]) -> PacketCzReqBattleStateMonitor {
        PacketCzReqBattleStateMonitor {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            power_switch: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketCzReqBattleStateMonitor {
    fn id(&self) -> &str {
       "0x07f0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqBattleStateMonitor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqBattleStateMonitor")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
            .field("power_switch[6, 8]", &self.power_switch)
        .finish()
    }
}

pub struct PacketZcAckBattleStateMonitor {
    pub packet_id: u16,
    pub bfno: u32,
    pub play_count: u16,
    pub battle_state: u16,
    pub team_count_a: u16,
    pub team_count_b: u16,
    pub my_count: u16,
    pub join_team: u16,
}

impl PacketZcAckBattleStateMonitor {
    pub fn from(buffer: &[u8]) -> PacketZcAckBattleStateMonitor {
        PacketZcAckBattleStateMonitor {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            play_count: u16::from_le_bytes([buffer[6], buffer[7]]),
            battle_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            team_count_a: u16::from_le_bytes([buffer[10], buffer[11]]),
            team_count_b: u16::from_le_bytes([buffer[12], buffer[13]]),
            my_count: u16::from_le_bytes([buffer[14], buffer[15]]),
            join_team: u16::from_le_bytes([buffer[16], buffer[17]]),
        }
    }
}

impl Packet for PacketZcAckBattleStateMonitor {
    fn id(&self) -> &str {
       "0x07f1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckBattleStateMonitor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckBattleStateMonitor")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
            .field("play_count[6, 8]", &self.play_count)
            .field("battle_state[8, 10]", &self.battle_state)
            .field("team_count_a[10, 12]", &self.team_count_a)
            .field("team_count_b[12, 14]", &self.team_count_b)
            .field("my_count[14, 16]", &self.my_count)
            .field("join_team[16, 18]", &self.join_team)
        .finish()
    }
}

pub struct PacketZcBattleNotiStartStep {
    pub packet_id: u16,
    pub bfno: u32,
    pub result: u16,
}

impl PacketZcBattleNotiStartStep {
    pub fn from(buffer: &[u8]) -> PacketZcBattleNotiStartStep {
        PacketZcBattleNotiStartStep {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcBattleNotiStartStep {
    fn id(&self) -> &str {
       "0x07f2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattleNotiStartStep {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleNotiStartStep")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
            .field("result[6, 8]", &self.result)
        .finish()
    }
}

pub struct PacketZcBattleJoinNotiDefer {
    pub packet_id: u16,
    pub bfno: u32,
}

impl PacketZcBattleJoinNotiDefer {
    pub fn from(buffer: &[u8]) -> PacketZcBattleJoinNotiDefer {
        PacketZcBattleJoinNotiDefer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bfno: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcBattleJoinNotiDefer {
    fn id(&self) -> &str {
       "0x07f3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattleJoinNotiDefer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleJoinNotiDefer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bfno[2, 6]", &self.bfno)
        .finish()
    }
}

pub struct PacketZcBattleJoinDisableState {
    pub packet_id: u16,
    pub enable: bool,
}

impl PacketZcBattleJoinDisableState {
    pub fn from(buffer: &[u8]) -> PacketZcBattleJoinDisableState {
        PacketZcBattleJoinDisableState {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            enable: buffer[2] == 1,
        }
    }
}

impl Packet for PacketZcBattleJoinDisableState {
    fn id(&self) -> &str {
       "0x07f4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBattleJoinDisableState {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBattleJoinDisableState")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("enable[2, 3]", &self.enable)
        .finish()
    }
}

pub struct PacketCzGmFullstrip {
    pub packet_id: u16,
    pub target_aid: u32,
}

impl PacketCzGmFullstrip {
    pub fn from(buffer: &[u8]) -> PacketCzGmFullstrip {
        PacketCzGmFullstrip {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            target_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzGmFullstrip {
    fn id(&self) -> &str {
       "0x07f5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzGmFullstrip {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzGmFullstrip")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("target_aid[2, 6]", &self.target_aid)
        .finish()
    }
}

pub struct PacketZcNotifyExp {
    pub packet_id: u16,
    pub aid: u32,
    pub amount: u32,
    pub var_id: u16,
    pub exp_type: u16,
}

impl PacketZcNotifyExp {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyExp {
        PacketZcNotifyExp {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            amount: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            var_id: u16::from_le_bytes([buffer[10], buffer[11]]),
            exp_type: u16::from_le_bytes([buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcNotifyExp {
    fn id(&self) -> &str {
       "0x07f6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyExp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyExp")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("amount[6, 10]", &self.amount)
            .field("var_id[10, 12]", &self.var_id)
            .field("exp_type[12, 14]", &self.exp_type)
        .finish()
    }
}

pub struct PacketZcNotifyMoveentry7 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub move_start_time: u32,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub move_data: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
    pub font: u16,
    pub name: String,
}

impl PacketZcNotifyMoveentry7 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyMoveentry7 {
        PacketZcNotifyMoveentry7 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            objecttype: buffer[4] as char,
            gid: u32::from_le_bytes([buffer[5], buffer[6], buffer[7], buffer[8]]),
            speed: u16::from_le_bytes([buffer[9], buffer[10]]),
            body_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            health_state: u16::from_le_bytes([buffer[13], buffer[14]]),
            effect_state: u32::from_le_bytes([buffer[15], buffer[16], buffer[17], buffer[18]]),
            job: u16::from_le_bytes([buffer[19], buffer[20]]),
            head: u16::from_le_bytes([buffer[21], buffer[22]]),
            weapon: u32::from_le_bytes([buffer[23], buffer[24], buffer[25], buffer[26]]),
            accessory: u16::from_le_bytes([buffer[27], buffer[28]]),
            move_start_time: u32::from_le_bytes([buffer[29], buffer[30], buffer[31], buffer[32]]),
            accessory2: u16::from_le_bytes([buffer[33], buffer[34]]),
            accessory3: u16::from_le_bytes([buffer[35], buffer[36]]),
            headpalette: u16::from_le_bytes([buffer[37], buffer[38]]),
            bodypalette: u16::from_le_bytes([buffer[39], buffer[40]]),
            head_dir: u16::from_le_bytes([buffer[41], buffer[42]]),
            guid: u32::from_le_bytes([buffer[43], buffer[44], buffer[45], buffer[46]]),
            gemblem_ver: u16::from_le_bytes([buffer[47], buffer[48]]),
            honor: u16::from_le_bytes([buffer[49], buffer[50]]),
            virtue: u32::from_le_bytes([buffer[51], buffer[52], buffer[53], buffer[54]]),
            is_pkmode_on: buffer[55] == 1,
            sex: buffer[56] as char,
            move_data: String::from_utf8_lossy(&buffer[57..63]).to_string(),
            x_size: buffer[63] as char,
            y_size: buffer[64] as char,
            clevel: u16::from_le_bytes([buffer[65], buffer[66]]),
            font: u16::from_le_bytes([buffer[67], buffer[68]]),
            name: String::from_utf8_lossy(&buffer[69..93]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyMoveentry7 {
    fn id(&self) -> &str {
       "0x07f7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyMoveentry7 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyMoveentry7")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("objecttype[4, 5]", &self.objecttype)
            .field("gid[5, 9]", &self.gid)
            .field("speed[9, 11]", &self.speed)
            .field("body_state[11, 13]", &self.body_state)
            .field("health_state[13, 15]", &self.health_state)
            .field("effect_state[15, 19]", &self.effect_state)
            .field("job[19, 21]", &self.job)
            .field("head[21, 23]", &self.head)
            .field("weapon[23, 27]", &self.weapon)
            .field("accessory[27, 29]", &self.accessory)
            .field("move_start_time[29, 33]", &self.move_start_time)
            .field("accessory2[33, 35]", &self.accessory2)
            .field("accessory3[35, 37]", &self.accessory3)
            .field("headpalette[37, 39]", &self.headpalette)
            .field("bodypalette[39, 41]", &self.bodypalette)
            .field("head_dir[41, 43]", &self.head_dir)
            .field("guid[43, 47]", &self.guid)
            .field("gemblem_ver[47, 49]", &self.gemblem_ver)
            .field("honor[49, 51]", &self.honor)
            .field("virtue[51, 55]", &self.virtue)
            .field("is_pkmode_on[55, 56]", &self.is_pkmode_on)
            .field("sex[56, 57]", &self.sex)
            .field("move_data[57, 63]", &self.move_data)
            .field("x_size[63, 64]", &self.x_size)
            .field("y_size[64, 65]", &self.y_size)
            .field("clevel[65, 67]", &self.clevel)
            .field("font[67, 69]", &self.font)
            .field("name[69, 93]", &self.name)
        .finish()
    }
}

pub struct PacketZcNotifyNewentry5 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub clevel: u16,
    pub font: u16,
    pub name: String,
}

impl PacketZcNotifyNewentry5 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyNewentry5 {
        PacketZcNotifyNewentry5 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            objecttype: buffer[4] as char,
            gid: u32::from_le_bytes([buffer[5], buffer[6], buffer[7], buffer[8]]),
            speed: u16::from_le_bytes([buffer[9], buffer[10]]),
            body_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            health_state: u16::from_le_bytes([buffer[13], buffer[14]]),
            effect_state: u32::from_le_bytes([buffer[15], buffer[16], buffer[17], buffer[18]]),
            job: u16::from_le_bytes([buffer[19], buffer[20]]),
            head: u16::from_le_bytes([buffer[21], buffer[22]]),
            weapon: u32::from_le_bytes([buffer[23], buffer[24], buffer[25], buffer[26]]),
            accessory: u16::from_le_bytes([buffer[27], buffer[28]]),
            accessory2: u16::from_le_bytes([buffer[29], buffer[30]]),
            accessory3: u16::from_le_bytes([buffer[31], buffer[32]]),
            headpalette: u16::from_le_bytes([buffer[33], buffer[34]]),
            bodypalette: u16::from_le_bytes([buffer[35], buffer[36]]),
            head_dir: u16::from_le_bytes([buffer[37], buffer[38]]),
            guid: u32::from_le_bytes([buffer[39], buffer[40], buffer[41], buffer[42]]),
            gemblem_ver: u16::from_le_bytes([buffer[43], buffer[44]]),
            honor: u16::from_le_bytes([buffer[45], buffer[46]]),
            virtue: u32::from_le_bytes([buffer[47], buffer[48], buffer[49], buffer[50]]),
            is_pkmode_on: buffer[51] == 1,
            sex: buffer[52] as char,
            pos_dir: String::from_utf8_lossy(&buffer[53..56]).to_string(),
            x_size: buffer[56] as char,
            y_size: buffer[57] as char,
            clevel: u16::from_le_bytes([buffer[58], buffer[59]]),
            font: u16::from_le_bytes([buffer[60], buffer[61]]),
            name: String::from_utf8_lossy(&buffer[62..86]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyNewentry5 {
    fn id(&self) -> &str {
       "0x07f8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyNewentry5 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyNewentry5")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("objecttype[4, 5]", &self.objecttype)
            .field("gid[5, 9]", &self.gid)
            .field("speed[9, 11]", &self.speed)
            .field("body_state[11, 13]", &self.body_state)
            .field("health_state[13, 15]", &self.health_state)
            .field("effect_state[15, 19]", &self.effect_state)
            .field("job[19, 21]", &self.job)
            .field("head[21, 23]", &self.head)
            .field("weapon[23, 27]", &self.weapon)
            .field("accessory[27, 29]", &self.accessory)
            .field("accessory2[29, 31]", &self.accessory2)
            .field("accessory3[31, 33]", &self.accessory3)
            .field("headpalette[33, 35]", &self.headpalette)
            .field("bodypalette[35, 37]", &self.bodypalette)
            .field("head_dir[37, 39]", &self.head_dir)
            .field("guid[39, 43]", &self.guid)
            .field("gemblem_ver[43, 45]", &self.gemblem_ver)
            .field("honor[45, 47]", &self.honor)
            .field("virtue[47, 51]", &self.virtue)
            .field("is_pkmode_on[51, 52]", &self.is_pkmode_on)
            .field("sex[52, 53]", &self.sex)
            .field("pos_dir[53, 56]", &self.pos_dir)
            .field("x_size[56, 57]", &self.x_size)
            .field("y_size[57, 58]", &self.y_size)
            .field("clevel[58, 60]", &self.clevel)
            .field("font[60, 62]", &self.font)
            .field("name[62, 86]", &self.name)
        .finish()
    }
}

pub struct PacketZcNotifyStandentry5 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub objecttype: char,
    pub gid: u32,
    pub speed: u16,
    pub body_state: u16,
    pub health_state: u16,
    pub effect_state: u32,
    pub job: u16,
    pub head: u16,
    pub weapon: u32,
    pub accessory: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub head_dir: u16,
    pub guid: u32,
    pub gemblem_ver: u16,
    pub honor: u16,
    pub virtue: u32,
    pub is_pkmode_on: bool,
    pub sex: char,
    pub pos_dir: String,
    pub x_size: char,
    pub y_size: char,
    pub state: char,
    pub clevel: u16,
    pub font: u16,
    pub name: String,
}

impl PacketZcNotifyStandentry5 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyStandentry5 {
        PacketZcNotifyStandentry5 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            objecttype: buffer[4] as char,
            gid: u32::from_le_bytes([buffer[5], buffer[6], buffer[7], buffer[8]]),
            speed: u16::from_le_bytes([buffer[9], buffer[10]]),
            body_state: u16::from_le_bytes([buffer[11], buffer[12]]),
            health_state: u16::from_le_bytes([buffer[13], buffer[14]]),
            effect_state: u32::from_le_bytes([buffer[15], buffer[16], buffer[17], buffer[18]]),
            job: u16::from_le_bytes([buffer[19], buffer[20]]),
            head: u16::from_le_bytes([buffer[21], buffer[22]]),
            weapon: u32::from_le_bytes([buffer[23], buffer[24], buffer[25], buffer[26]]),
            accessory: u16::from_le_bytes([buffer[27], buffer[28]]),
            accessory2: u16::from_le_bytes([buffer[29], buffer[30]]),
            accessory3: u16::from_le_bytes([buffer[31], buffer[32]]),
            headpalette: u16::from_le_bytes([buffer[33], buffer[34]]),
            bodypalette: u16::from_le_bytes([buffer[35], buffer[36]]),
            head_dir: u16::from_le_bytes([buffer[37], buffer[38]]),
            guid: u32::from_le_bytes([buffer[39], buffer[40], buffer[41], buffer[42]]),
            gemblem_ver: u16::from_le_bytes([buffer[43], buffer[44]]),
            honor: u16::from_le_bytes([buffer[45], buffer[46]]),
            virtue: u32::from_le_bytes([buffer[47], buffer[48], buffer[49], buffer[50]]),
            is_pkmode_on: buffer[51] == 1,
            sex: buffer[52] as char,
            pos_dir: String::from_utf8_lossy(&buffer[53..56]).to_string(),
            x_size: buffer[56] as char,
            y_size: buffer[57] as char,
            state: buffer[58] as char,
            clevel: u16::from_le_bytes([buffer[59], buffer[60]]),
            font: u16::from_le_bytes([buffer[61], buffer[62]]),
            name: String::from_utf8_lossy(&buffer[63..87]).to_string(),
        }
    }
}

impl Packet for PacketZcNotifyStandentry5 {
    fn id(&self) -> &str {
       "0x07f9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyStandentry5 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyStandentry5")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("objecttype[4, 5]", &self.objecttype)
            .field("gid[5, 9]", &self.gid)
            .field("speed[9, 11]", &self.speed)
            .field("body_state[11, 13]", &self.body_state)
            .field("health_state[13, 15]", &self.health_state)
            .field("effect_state[15, 19]", &self.effect_state)
            .field("job[19, 21]", &self.job)
            .field("head[21, 23]", &self.head)
            .field("weapon[23, 27]", &self.weapon)
            .field("accessory[27, 29]", &self.accessory)
            .field("accessory2[29, 31]", &self.accessory2)
            .field("accessory3[31, 33]", &self.accessory3)
            .field("headpalette[33, 35]", &self.headpalette)
            .field("bodypalette[35, 37]", &self.bodypalette)
            .field("head_dir[37, 39]", &self.head_dir)
            .field("guid[39, 43]", &self.guid)
            .field("gemblem_ver[43, 45]", &self.gemblem_ver)
            .field("honor[45, 47]", &self.honor)
            .field("virtue[47, 51]", &self.virtue)
            .field("is_pkmode_on[51, 52]", &self.is_pkmode_on)
            .field("sex[52, 53]", &self.sex)
            .field("pos_dir[53, 56]", &self.pos_dir)
            .field("x_size[56, 57]", &self.x_size)
            .field("y_size[57, 58]", &self.y_size)
            .field("state[58, 59]", &self.state)
            .field("clevel[59, 61]", &self.clevel)
            .field("font[61, 63]", &self.font)
            .field("name[63, 87]", &self.name)
        .finish()
    }
}

pub struct PacketZcDeleteItemFromBody {
    pub packet_id: u16,
    pub delete_type: u16,
    pub index: u16,
    pub count: u16,
}

impl PacketZcDeleteItemFromBody {
    pub fn from(buffer: &[u8]) -> PacketZcDeleteItemFromBody {
        PacketZcDeleteItemFromBody {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            delete_type: u16::from_le_bytes([buffer[2], buffer[3]]),
            index: u16::from_le_bytes([buffer[4], buffer[5]]),
            count: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcDeleteItemFromBody {
    fn id(&self) -> &str {
       "0x07fa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDeleteItemFromBody {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDeleteItemFromBody")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("delete_type[2, 4]", &self.delete_type)
            .field("index[4, 6]", &self.index)
            .field("count[6, 8]", &self.count)
        .finish()
    }
}

pub struct PacketZcUseskillAck2 {
    pub packet_id: u16,
    pub aid: u32,
    pub target_id: u32,
    pub x_pos: u16,
    pub y_pos: u16,
    pub skid: u16,
    pub property: u32,
    pub delay_time: u32,
    pub is_disposable: bool,
}

impl PacketZcUseskillAck2 {
    pub fn from(buffer: &[u8]) -> PacketZcUseskillAck2 {
        PacketZcUseskillAck2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            target_id: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            x_pos: u16::from_le_bytes([buffer[10], buffer[11]]),
            y_pos: u16::from_le_bytes([buffer[12], buffer[13]]),
            skid: u16::from_le_bytes([buffer[14], buffer[15]]),
            property: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            delay_time: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            is_disposable: buffer[24] == 1,
        }
    }
}

impl Packet for PacketZcUseskillAck2 {
    fn id(&self) -> &str {
       "0x07fb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUseskillAck2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUseskillAck2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("target_id[6, 10]", &self.target_id)
            .field("x_pos[10, 12]", &self.x_pos)
            .field("y_pos[12, 14]", &self.y_pos)
            .field("skid[14, 16]", &self.skid)
            .field("property[16, 20]", &self.property)
            .field("delay_time[20, 24]", &self.delay_time)
            .field("is_disposable[24, 25]", &self.is_disposable)
        .finish()
    }
}

pub struct PacketZcChangeGroupMaster {
    pub packet_id: u16,
    pub old_master_aid: u32,
    pub new_master_aid: u32,
}

impl PacketZcChangeGroupMaster {
    pub fn from(buffer: &[u8]) -> PacketZcChangeGroupMaster {
        PacketZcChangeGroupMaster {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            old_master_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            new_master_aid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcChangeGroupMaster {
    fn id(&self) -> &str {
       "0x07fc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcChangeGroupMaster {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcChangeGroupMaster")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("old_master_aid[2, 6]", &self.old_master_aid)
            .field("new_master_aid[6, 10]", &self.new_master_aid)
        .finish()
    }
}

pub struct PacketZcPlayNpcBgm {
    pub packet_id: u16,
    pub bgm: String,
}

impl PacketZcPlayNpcBgm {
    pub fn from(buffer: &[u8]) -> PacketZcPlayNpcBgm {
        PacketZcPlayNpcBgm {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            bgm: String::from_utf8_lossy(&buffer[2..26]).to_string(),
        }
    }
}

impl Packet for PacketZcPlayNpcBgm {
    fn id(&self) -> &str {
       "0x07fe"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPlayNpcBgm {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPlayNpcBgm")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("bgm[2, 26]", &self.bgm)
        .finish()
    }
}

pub struct PacketZcDefineCheck {
    pub packet_id: u16,
    pub packet_length: u16,
    pub result: u32,
}

impl PacketZcDefineCheck {
    pub fn from(buffer: &[u8]) -> PacketZcDefineCheck {
        PacketZcDefineCheck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            result: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcDefineCheck {
    fn id(&self) -> &str {
       "0x07ff"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDefineCheck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDefineCheck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("result[4, 8]", &self.result)
        .finish()
    }
}

pub struct PacketZcPcPurchaseItemlistFrommc2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub unique_id: u32,
    pub item_list: Vec<PurchaseItemFrommc>,
}

impl PacketZcPcPurchaseItemlistFrommc2 {
    pub fn from(buffer: &[u8]) -> PacketZcPcPurchaseItemlistFrommc2 {
        let iter_count = &buffer.len() / 22;
        let mut vec_field: Vec<PurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 * i;
            let end_pos = 34 * i;
            vec_field.push(PurchaseItemFrommc::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPcPurchaseItemlistFrommc2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            unique_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcPcPurchaseItemlistFrommc2 {
    fn id(&self) -> &str {
       "0x0800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPcPurchaseItemlistFrommc2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPcPurchaseItemlistFrommc2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("unique_id[8, 12]", &self.unique_id)
            .field("item_list[12, 34]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzPcPurchaseItemlistFrommc2 {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub unique_id: u32,
    pub item_list: Vec<CzPurchaseItemFrommc>,
}

impl PacketCzPcPurchaseItemlistFrommc2 {
    pub fn from(buffer: &[u8]) -> PacketCzPcPurchaseItemlistFrommc2 {
        let iter_count = &buffer.len() / 4;
        let mut vec_field: Vec<CzPurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 * i;
            let end_pos = 16 * i;
            vec_field.push(CzPurchaseItemFrommc::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzPcPurchaseItemlistFrommc2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            unique_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketCzPcPurchaseItemlistFrommc2 {
    fn id(&self) -> &str {
       "0x0801"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPcPurchaseItemlistFrommc2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPcPurchaseItemlistFrommc2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("unique_id[8, 12]", &self.unique_id)
            .field("item_list[12, 16]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzPartyBookingReqRegister {
    pub packet_id: u16,
    pub register_info: PartyBookingDetail,
}

impl PacketCzPartyBookingReqRegister {
    pub fn from(buffer: &[u8]) -> PacketCzPartyBookingReqRegister {
        PacketCzPartyBookingReqRegister {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            register_info: PartyBookingDetail::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketCzPartyBookingReqRegister {
    fn id(&self) -> &str {
       "0x0802"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyBookingReqRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqRegister")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("register_info[2, ?]", &self.register_info)
        .finish()
    }
}

pub struct PacketZcPartyBookingAckRegister {
    pub packet_id: u16,
    pub result: u16,
}

impl PacketZcPartyBookingAckRegister {
    pub fn from(buffer: &[u8]) -> PacketZcPartyBookingAckRegister {
        PacketZcPartyBookingAckRegister {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcPartyBookingAckRegister {
    fn id(&self) -> &str {
       "0x0803"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyBookingAckRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingAckRegister")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
        .finish()
    }
}

pub struct PacketCzPartyBookingReqSearch {
    pub packet_id: u16,
    pub level: u16,
    pub map_id: u16,
    pub job: u16,
    pub last_index: u32,
    pub result_count: u16,
}

impl PacketCzPartyBookingReqSearch {
    pub fn from(buffer: &[u8]) -> PacketCzPartyBookingReqSearch {
        PacketCzPartyBookingReqSearch {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            level: u16::from_le_bytes([buffer[2], buffer[3]]),
            map_id: u16::from_le_bytes([buffer[4], buffer[5]]),
            job: u16::from_le_bytes([buffer[6], buffer[7]]),
            last_index: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            result_count: u16::from_le_bytes([buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketCzPartyBookingReqSearch {
    fn id(&self) -> &str {
       "0x0804"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyBookingReqSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqSearch")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("level[2, 4]", &self.level)
            .field("map_id[4, 6]", &self.map_id)
            .field("job[6, 8]", &self.job)
            .field("last_index[8, 12]", &self.last_index)
            .field("result_count[12, 14]", &self.result_count)
        .finish()
    }
}

pub struct PacketZcPartyBookingAckSearch {
    pub packet_id: u16,
    pub packet_length: u16,
    pub is_exist_more_result: bool,
    pub info: Vec<PartyBookingAdInfo>,
}

impl PacketZcPartyBookingAckSearch {
    pub fn from(buffer: &[u8]) -> PacketZcPartyBookingAckSearch {
        let iter_count = &buffer.len() / 48;
        let mut vec_field: Vec<PartyBookingAdInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 5 * i;
            let end_pos = 53 * i;
            vec_field.push(PartyBookingAdInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcPartyBookingAckSearch {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            is_exist_more_result: buffer[4] == 1,
            info: vec_field,
        }
    }
}

impl Packet for PacketZcPartyBookingAckSearch {
    fn id(&self) -> &str {
       "0x0805"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyBookingAckSearch {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingAckSearch")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("is_exist_more_result[4, 5]", &self.is_exist_more_result)
            .field("info[5, 53]", &self.info)
        .finish()
    }
}

pub struct PacketCzPartyBookingReqDelete {
    pub packet_id: u16,
}

impl PacketCzPartyBookingReqDelete {
    pub fn from(buffer: &[u8]) -> PacketCzPartyBookingReqDelete {
        PacketCzPartyBookingReqDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzPartyBookingReqDelete {
    fn id(&self) -> &str {
       "0x0806"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyBookingReqDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcPartyBookingAckDelete {
    pub packet_id: u16,
    pub result: u16,
}

impl PacketZcPartyBookingAckDelete {
    pub fn from(buffer: &[u8]) -> PacketZcPartyBookingAckDelete {
        PacketZcPartyBookingAckDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcPartyBookingAckDelete {
    fn id(&self) -> &str {
       "0x0807"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyBookingAckDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingAckDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
        .finish()
    }
}

pub struct PacketCzPartyBookingReqUpdate {
    pub packet_id: u16,
    pub job: u16,
}

impl PacketCzPartyBookingReqUpdate {
    pub fn from(buffer: &[u8]) -> PacketCzPartyBookingReqUpdate {
        PacketCzPartyBookingReqUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            job: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketCzPartyBookingReqUpdate {
    fn id(&self) -> &str {
       "0x0808"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzPartyBookingReqUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzPartyBookingReqUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("job[2, 4]", &self.job)
        .finish()
    }
}

pub struct PacketZcPartyBookingNotifyInsert {
    pub packet_id: u16,
    pub info: PartyBookingAdInfo,
}

impl PacketZcPartyBookingNotifyInsert {
    pub fn from(buffer: &[u8]) -> PacketZcPartyBookingNotifyInsert {
        PacketZcPartyBookingNotifyInsert {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            info: PartyBookingAdInfo::from(&buffer[2..buffer.len()]),
        }
    }
}

impl Packet for PacketZcPartyBookingNotifyInsert {
    fn id(&self) -> &str {
       "0x0809"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyBookingNotifyInsert {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingNotifyInsert")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("info[2, ?]", &self.info)
        .finish()
    }
}

pub struct PacketZcPartyBookingNotifyUpdate {
    pub packet_id: u16,
    pub index: u32,
    pub job1: u16,
    pub job2: u16,
    pub job3: u16,
    pub job4: u16,
    pub job5: u16,
    pub job6: u16,
}

impl PacketZcPartyBookingNotifyUpdate {
    pub fn from(buffer: &[u8]) -> PacketZcPartyBookingNotifyUpdate {
        PacketZcPartyBookingNotifyUpdate {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            job1: u16::from_le_bytes([buffer[6], buffer[7]]),
            job2: u16::from_le_bytes([buffer[8], buffer[9]]),
            job3: u16::from_le_bytes([buffer[10], buffer[11]]),
            job4: u16::from_le_bytes([buffer[12], buffer[13]]),
            job5: u16::from_le_bytes([buffer[14], buffer[15]]),
            job6: u16::from_le_bytes([buffer[16], buffer[17]]),
        }
    }
}

impl Packet for PacketZcPartyBookingNotifyUpdate {
    fn id(&self) -> &str {
       "0x080a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyBookingNotifyUpdate {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingNotifyUpdate")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 6]", &self.index)
            .field("job1[6, 8]", &self.job1)
            .field("job2[8, 10]", &self.job2)
            .field("job3[10, 12]", &self.job3)
            .field("job4[12, 14]", &self.job4)
            .field("job5[14, 16]", &self.job5)
            .field("job6[16, 18]", &self.job6)
        .finish()
    }
}

pub struct PacketZcPartyBookingNotifyDelete {
    pub packet_id: u16,
    pub index: u32,
}

impl PacketZcPartyBookingNotifyDelete {
    pub fn from(buffer: &[u8]) -> PacketZcPartyBookingNotifyDelete {
        PacketZcPartyBookingNotifyDelete {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcPartyBookingNotifyDelete {
    fn id(&self) -> &str {
       "0x080b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcPartyBookingNotifyDelete {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcPartyBookingNotifyDelete")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 6]", &self.index)
        .finish()
    }
}

pub struct PacketCzSimpleCashBtnshow {
    pub packet_id: u16,
}

impl PacketCzSimpleCashBtnshow {
    pub fn from(buffer: &[u8]) -> PacketCzSimpleCashBtnshow {
        PacketCzSimpleCashBtnshow {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzSimpleCashBtnshow {
    fn id(&self) -> &str {
       "0x080c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSimpleCashBtnshow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSimpleCashBtnshow")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcSimpleCashBtnshow {
    pub packet_id: u16,
    pub show: bool,
}

impl PacketZcSimpleCashBtnshow {
    pub fn from(buffer: &[u8]) -> PacketZcSimpleCashBtnshow {
        PacketZcSimpleCashBtnshow {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            show: buffer[2] == 1,
        }
    }
}

impl Packet for PacketZcSimpleCashBtnshow {
    fn id(&self) -> &str {
       "0x080d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSimpleCashBtnshow {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSimpleCashBtnshow")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("show[2, 3]", &self.show)
        .finish()
    }
}

pub struct PacketZcNotifyHpToGroupmR2 {
    pub packet_id: u16,
    pub aid: u32,
    pub hp: u32,
    pub maxhp: u32,
}

impl PacketZcNotifyHpToGroupmR2 {
    pub fn from(buffer: &[u8]) -> PacketZcNotifyHpToGroupmR2 {
        PacketZcNotifyHpToGroupmR2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            hp: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            maxhp: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketZcNotifyHpToGroupmR2 {
    fn id(&self) -> &str {
       "0x080e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcNotifyHpToGroupmR2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcNotifyHpToGroupmR2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("hp[6, 10]", &self.hp)
            .field("maxhp[10, 14]", &self.maxhp)
        .finish()
    }
}

pub struct PacketZcAddExchangeItem2 {
    pub packet_id: u16,
    pub itid: u16,
    pub type_: char,
    pub count: u32,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PacketZcAddExchangeItem2 {
    pub fn from(buffer: &[u8]) -> PacketZcAddExchangeItem2 {
        PacketZcAddExchangeItem2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            count: u32::from_le_bytes([buffer[5], buffer[6], buffer[7], buffer[8]]),
            is_identified: buffer[9] == 1,
            is_damaged: buffer[10] == 1,
            refining_level: buffer[11] as char,
            slot: EQUIPSLOTINFO::from(&buffer[12..20]),
        }
    }
}

impl Packet for PacketZcAddExchangeItem2 {
    fn id(&self) -> &str {
       "0x080f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAddExchangeItem2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAddExchangeItem2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("count[5, 9]", &self.count)
            .field("is_identified[9, 10]", &self.is_identified)
            .field("is_damaged[10, 11]", &self.is_damaged)
            .field("refining_level[11, 12]", &self.refining_level)
            .field("slot[12, 20]", &self.slot)
        .finish()
    }
}

pub struct PacketZcOpenBuyingStore {
    pub packet_id: u16,
    pub count: char,
}

impl PacketZcOpenBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketZcOpenBuyingStore {
        PacketZcOpenBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            count: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcOpenBuyingStore {
    fn id(&self) -> &str {
       "0x0810"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcOpenBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("count[2, 3]", &self.count)
        .finish()
    }
}

pub struct PacketCzReqOpenBuyingStore {
    pub packet_id: u16,
    pub packet_length: u16,
    pub limit_zeny: u32,
    pub result: char,
    pub store_name: String,
    pub item_list: Vec<ProductinfoInBuyingStore>,
}

impl PacketCzReqOpenBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketCzReqOpenBuyingStore {
        let iter_count = &buffer.len() / 8;
        let mut vec_field: Vec<ProductinfoInBuyingStore> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 89 * i;
            let end_pos = 97 * i;
            vec_field.push(ProductinfoInBuyingStore::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzReqOpenBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            limit_zeny: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            result: buffer[8] as char,
            store_name: String::from_utf8_lossy(&buffer[9..89]).to_string(),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketCzReqOpenBuyingStore {
    fn id(&self) -> &str {
       "0x0811"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqOpenBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqOpenBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("limit_zeny[4, 8]", &self.limit_zeny)
            .field("result[8, 9]", &self.result)
            .field("store_name[9, 89]", &self.store_name)
            .field("item_list[89, 97]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcFailedOpenBuyingStoreToBuyer {
    pub packet_id: u16,
    pub result: u16,
    pub total_weight: u32,
}

impl PacketZcFailedOpenBuyingStoreToBuyer {
    pub fn from(buffer: &[u8]) -> PacketZcFailedOpenBuyingStoreToBuyer {
        PacketZcFailedOpenBuyingStoreToBuyer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            total_weight: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcFailedOpenBuyingStoreToBuyer {
    fn id(&self) -> &str {
       "0x0812"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFailedOpenBuyingStoreToBuyer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFailedOpenBuyingStoreToBuyer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("total_weight[4, 8]", &self.total_weight)
        .finish()
    }
}

pub struct PacketZcMyitemlistBuyingStore {
    pub packet_id: u16,
    pub packet_length: u16,
    pub aid: u32,
    pub limit_zeny: u32,
    pub item_list: Vec<BuyingStoreItemlist>,
}

impl PacketZcMyitemlistBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketZcMyitemlistBuyingStore {
        let iter_count = &buffer.len() / 9;
        let mut vec_field: Vec<BuyingStoreItemlist> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 * i;
            let end_pos = 21 * i;
            vec_field.push(BuyingStoreItemlist::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcMyitemlistBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            limit_zeny: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcMyitemlistBuyingStore {
    fn id(&self) -> &str {
       "0x0813"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcMyitemlistBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMyitemlistBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("aid[4, 8]", &self.aid)
            .field("limit_zeny[8, 12]", &self.limit_zeny)
            .field("item_list[12, 21]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcBuyingStoreEntry {
    pub packet_id: u16,
    pub maker_aid: u32,
    pub store_name: String,
}

impl PacketZcBuyingStoreEntry {
    pub fn from(buffer: &[u8]) -> PacketZcBuyingStoreEntry {
        PacketZcBuyingStoreEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            maker_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            store_name: String::from_utf8_lossy(&buffer[6..86]).to_string(),
        }
    }
}

impl Packet for PacketZcBuyingStoreEntry {
    fn id(&self) -> &str {
       "0x0814"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBuyingStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBuyingStoreEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("maker_aid[2, 6]", &self.maker_aid)
            .field("store_name[6, 86]", &self.store_name)
        .finish()
    }
}

pub struct PacketCzReqCloseBuyingStore {
    pub packet_id: u16,
}

impl PacketCzReqCloseBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketCzReqCloseBuyingStore {
        PacketCzReqCloseBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzReqCloseBuyingStore {
    fn id(&self) -> &str {
       "0x0815"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqCloseBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqCloseBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcDisappearBuyingStoreEntry {
    pub packet_id: u16,
    pub maker_aid: u32,
}

impl PacketZcDisappearBuyingStoreEntry {
    pub fn from(buffer: &[u8]) -> PacketZcDisappearBuyingStoreEntry {
        PacketZcDisappearBuyingStoreEntry {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            maker_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcDisappearBuyingStoreEntry {
    fn id(&self) -> &str {
       "0x0816"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcDisappearBuyingStoreEntry {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcDisappearBuyingStoreEntry")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("maker_aid[2, 6]", &self.maker_aid)
        .finish()
    }
}

pub struct PacketCzReqClickToBuyingStore {
    pub packet_id: u16,
    pub maker_aid: u32,
}

impl PacketCzReqClickToBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketCzReqClickToBuyingStore {
        PacketCzReqClickToBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            maker_aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketCzReqClickToBuyingStore {
    fn id(&self) -> &str {
       "0x0817"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqClickToBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqClickToBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("maker_aid[2, 6]", &self.maker_aid)
        .finish()
    }
}

pub struct PacketZcAckItemlistBuyingStore {
    pub packet_id: u16,
    pub packet_length: u16,
    pub maker_aid: u32,
    pub store_id: u32,
    pub limit_zeny: u32,
    pub item_list: Vec<BuyingStoreItemlist>,
}

impl PacketZcAckItemlistBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketZcAckItemlistBuyingStore {
        let iter_count = &buffer.len() / 9;
        let mut vec_field: Vec<BuyingStoreItemlist> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 16 * i;
            let end_pos = 25 * i;
            vec_field.push(BuyingStoreItemlist::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcAckItemlistBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            maker_aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            store_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            limit_zeny: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketZcAckItemlistBuyingStore {
    fn id(&self) -> &str {
       "0x0818"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckItemlistBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckItemlistBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("maker_aid[4, 8]", &self.maker_aid)
            .field("store_id[8, 12]", &self.store_id)
            .field("limit_zeny[12, 16]", &self.limit_zeny)
            .field("item_list[16, 25]", &self.item_list)
        .finish()
    }
}

pub struct PacketCzReqTradeBuyingStore {
    pub packet_id: u16,
    pub packet_length: u16,
    pub maker_aid: u32,
    pub store_id: u32,
    pub item_list: Vec<TradeItemBuyingStore>,
}

impl PacketCzReqTradeBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketCzReqTradeBuyingStore {
        let iter_count = &buffer.len() / 6;
        let mut vec_field: Vec<TradeItemBuyingStore> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 * i;
            let end_pos = 18 * i;
            vec_field.push(TradeItemBuyingStore::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketCzReqTradeBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            maker_aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            store_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            item_list: vec_field,
        }
    }
}

impl Packet for PacketCzReqTradeBuyingStore {
    fn id(&self) -> &str {
       "0x0819"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzReqTradeBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzReqTradeBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("maker_aid[4, 8]", &self.maker_aid)
            .field("store_id[8, 12]", &self.store_id)
            .field("item_list[12, 18]", &self.item_list)
        .finish()
    }
}

pub struct PacketZcFailedTradeBuyingStoreToBuyer {
    pub packet_id: u16,
    pub result: u16,
}

impl PacketZcFailedTradeBuyingStoreToBuyer {
    pub fn from(buffer: &[u8]) -> PacketZcFailedTradeBuyingStoreToBuyer {
        PacketZcFailedTradeBuyingStoreToBuyer {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketZcFailedTradeBuyingStoreToBuyer {
    fn id(&self) -> &str {
       "0x081a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFailedTradeBuyingStoreToBuyer {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFailedTradeBuyingStoreToBuyer")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
        .finish()
    }
}

pub struct PacketZcUpdateItemFromBuyingStore {
    pub packet_id: u16,
    pub itid: u16,
    pub count: u16,
    pub limit_zeny: u32,
}

impl PacketZcUpdateItemFromBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketZcUpdateItemFromBuyingStore {
        PacketZcUpdateItemFromBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            limit_zeny: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcUpdateItemFromBuyingStore {
    fn id(&self) -> &str {
       "0x081b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcUpdateItemFromBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcUpdateItemFromBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("itid[2, 4]", &self.itid)
            .field("count[4, 6]", &self.count)
            .field("limit_zeny[6, 10]", &self.limit_zeny)
        .finish()
    }
}

pub struct PacketZcItemDeleteBuyingStore {
    pub packet_id: u16,
    pub index: u16,
    pub count: u16,
    pub zeny: u32,
}

impl PacketZcItemDeleteBuyingStore {
    pub fn from(buffer: &[u8]) -> PacketZcItemDeleteBuyingStore {
        PacketZcItemDeleteBuyingStore {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            zeny: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketZcItemDeleteBuyingStore {
    fn id(&self) -> &str {
       "0x081c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcItemDeleteBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcItemDeleteBuyingStore")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("index[2, 4]", &self.index)
            .field("count[4, 6]", &self.count)
            .field("zeny[6, 10]", &self.zeny)
        .finish()
    }
}

pub struct PacketZcElInit {
    pub packet_id: u16,
    pub aid: u32,
    pub hp: u32,
    pub max_hp: u32,
    pub sp: u32,
    pub max_sp: u32,
}

impl PacketZcElInit {
    pub fn from(buffer: &[u8]) -> PacketZcElInit {
        PacketZcElInit {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            hp: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            max_hp: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
            sp: u32::from_le_bytes([buffer[14], buffer[15], buffer[16], buffer[17]]),
            max_sp: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
        }
    }
}

impl Packet for PacketZcElInit {
    fn id(&self) -> &str {
       "0x081d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcElInit {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcElInit")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("hp[6, 10]", &self.hp)
            .field("max_hp[10, 14]", &self.max_hp)
            .field("sp[14, 18]", &self.sp)
            .field("max_sp[18, 22]", &self.max_sp)
        .finish()
    }
}

pub struct PacketZcElParChange {
    pub packet_id: u16,
    pub var: u16,
    pub value: u32,
}

impl PacketZcElParChange {
    pub fn from(buffer: &[u8]) -> PacketZcElParChange {
        PacketZcElParChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            var: u16::from_le_bytes([buffer[2], buffer[3]]),
            value: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Packet for PacketZcElParChange {
    fn id(&self) -> &str {
       "0x081e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcElParChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcElParChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("var[2, 4]", &self.var)
            .field("value[4, 8]", &self.value)
        .finish()
    }
}

pub struct PacketZcBroadcast4 {
    pub pakcet_type: u16,
    pub packet_length: u16,
    pub msgtype: char,
    pub color_rgb: u32,
    pub msg: String,
}

impl PacketZcBroadcast4 {
    pub fn from(buffer: &[u8]) -> PacketZcBroadcast4 {
        PacketZcBroadcast4 {
            pakcet_type: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            msgtype: buffer[4] as char,
            color_rgb: u32::from_le_bytes([buffer[5], buffer[6], buffer[7], buffer[8]]),
            msg: String::from_utf8_lossy(&buffer[9..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketZcBroadcast4 {
    fn id(&self) -> &str {
       "0x081f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcBroadcast4 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcBroadcast4")
            .field("id", &self.id())
            .field("pakcet_type[0, 2]", &self.pakcet_type)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("msgtype[4, 5]", &self.msgtype)
            .field("color_rgb[5, 9]", &self.color_rgb)
            .field("msg[9, ?]", &self.msg)
        .finish()
    }
}

pub struct PacketZcCostumeSpriteChange {
    pub packet_id: u16,
    pub gid: u32,
    pub type_: char,
    pub value: u32,
}

impl PacketZcCostumeSpriteChange {
    pub fn from(buffer: &[u8]) -> PacketZcCostumeSpriteChange {
        PacketZcCostumeSpriteChange {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            value: u32::from_le_bytes([buffer[7], buffer[8], buffer[9], buffer[10]]),
        }
    }
}

impl Packet for PacketZcCostumeSpriteChange {
    fn id(&self) -> &str {
       "0x0820"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcCostumeSpriteChange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcCostumeSpriteChange")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("type_[6, 7]", &self.type_)
            .field("value[7, 11]", &self.value)
        .finish()
    }
}

pub struct PacketAcOtpUser {
    pub packet_id: u16,
}

impl PacketAcOtpUser {
    pub fn from(buffer: &[u8]) -> PacketAcOtpUser {
        PacketAcOtpUser {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketAcOtpUser {
    fn id(&self) -> &str {
       "0x0821"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcOtpUser {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcOtpUser")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCaOtpAuthReq {
    pub packet_id: u16,
    pub otpcode: String,
}

impl PacketCaOtpAuthReq {
    pub fn from(buffer: &[u8]) -> PacketCaOtpAuthReq {
        PacketCaOtpAuthReq {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            otpcode: String::from_utf8_lossy(&buffer[2..9]).to_string(),
        }
    }
}

impl Packet for PacketCaOtpAuthReq {
    fn id(&self) -> &str {
       "0x0822"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaOtpAuthReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaOtpAuthReq")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("otpcode[2, 9]", &self.otpcode)
        .finish()
    }
}

pub struct PacketAcOtpAuthAck {
    pub packet_id: u16,
    pub packet_length: u16,
    pub login_result: u16,
}

impl PacketAcOtpAuthAck {
    pub fn from(buffer: &[u8]) -> PacketAcOtpAuthAck {
        PacketAcOtpAuthAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            login_result: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketAcOtpAuthAck {
    fn id(&self) -> &str {
       "0x0823"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcOtpAuthAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcOtpAuthAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("login_result[4, 6]", &self.login_result)
        .finish()
    }
}

pub struct PacketZcFailedTradeBuyingStoreToSeller {
    pub packet_id: u16,
    pub result: u16,
    pub itid: u16,
}

impl PacketZcFailedTradeBuyingStoreToSeller {
    pub fn from(buffer: &[u8]) -> PacketZcFailedTradeBuyingStoreToSeller {
        PacketZcFailedTradeBuyingStoreToSeller {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
            itid: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcFailedTradeBuyingStoreToSeller {
    fn id(&self) -> &str {
       "0x0824"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcFailedTradeBuyingStoreToSeller {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcFailedTradeBuyingStoreToSeller")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
            .field("itid[4, 6]", &self.itid)
        .finish()
    }
}

pub struct PacketCaSsoLoginReqa {
    pub packet_id: u16,
    pub packet_length: u16,
    pub version: u32,
    pub clienttype: char,
    pub id: String,
    pub mac_addr: String,
    pub ip_addr: String,
    pub t1: String,
}

impl PacketCaSsoLoginReqa {
    pub fn from(buffer: &[u8]) -> PacketCaSsoLoginReqa {
        PacketCaSsoLoginReqa {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            version: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            clienttype: buffer[8] as char,
            id: String::from_utf8_lossy(&buffer[9..33]).to_string(),
            mac_addr: String::from_utf8_lossy(&buffer[33..50]).to_string(),
            ip_addr: String::from_utf8_lossy(&buffer[50..65]).to_string(),
            t1: String::from_utf8_lossy(&buffer[65..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCaSsoLoginReqa {
    fn id(&self) -> &str {
       "0x825a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaSsoLoginReqa {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaSsoLoginReqa")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("version[4, 8]", &self.version)
            .field("clienttype[8, 9]", &self.clienttype)
            .field("id[9, 33]", &self.id)
            .field("mac_addr[33, 50]", &self.mac_addr)
            .field("ip_addr[50, 65]", &self.ip_addr)
            .field("t1[65, ?]", &self.t1)
        .finish()
    }
}

pub struct PacketCaSsoLoginReq {
    pub packet_id: u16,
    pub packet_length: u16,
    pub version: u32,
    pub clienttype: char,
    pub id: String,
    pub passwd: String,
    pub mac_adress: String,
    pub ip: String,
    pub t1: String,
}

impl PacketCaSsoLoginReq {
    pub fn from(buffer: &[u8]) -> PacketCaSsoLoginReq {
        PacketCaSsoLoginReq {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            version: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            clienttype: buffer[8] as char,
            id: String::from_utf8_lossy(&buffer[9..33]).to_string(),
            passwd: String::from_utf8_lossy(&buffer[33..60]).to_string(),
            mac_adress: String::from_utf8_lossy(&buffer[60..77]).to_string(),
            ip: String::from_utf8_lossy(&buffer[77..92]).to_string(),
            t1: String::from_utf8_lossy(&buffer[92..buffer.len()]).to_string(),
        }
    }
}

impl Packet for PacketCaSsoLoginReq {
    fn id(&self) -> &str {
       "0x0825"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCaSsoLoginReq {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCaSsoLoginReq")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("version[4, 8]", &self.version)
            .field("clienttype[8, 9]", &self.clienttype)
            .field("id[9, 33]", &self.id)
            .field("passwd[33, 60]", &self.passwd)
            .field("mac_adress[60, 77]", &self.mac_adress)
            .field("ip[77, 92]", &self.ip)
            .field("t1[92, ?]", &self.t1)
        .finish()
    }
}

pub struct PacketAcSsoLoginAck {
    pub packet_id: u16,
    pub result: u16,
}

impl PacketAcSsoLoginAck {
    pub fn from(buffer: &[u8]) -> PacketAcSsoLoginAck {
        PacketAcSsoLoginAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            result: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Packet for PacketAcSsoLoginAck {
    fn id(&self) -> &str {
       "0x0826"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcSsoLoginAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcSsoLoginAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("result[2, 4]", &self.result)
        .finish()
    }
}

pub struct PacketChDeleteChar3Reserved {
    pub packet_id: u16,
    pub gid: u32,
}

impl PacketChDeleteChar3Reserved {
    pub fn from(buffer: &[u8]) -> PacketChDeleteChar3Reserved {
        PacketChDeleteChar3Reserved {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketChDeleteChar3Reserved {
    fn id(&self) -> &str {
       "0x0827"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChDeleteChar3Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar3Reserved")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
        .finish()
    }
}

pub struct PacketHcDeleteChar3Reserved {
    pub packet_id: u16,
    pub gid: u32,
    pub result: u32,
    pub delete_reserved_date: u32,
}

impl PacketHcDeleteChar3Reserved {
    pub fn from(buffer: &[u8]) -> PacketHcDeleteChar3Reserved {
        PacketHcDeleteChar3Reserved {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            delete_reserved_date: u32::from_le_bytes([buffer[10], buffer[11], buffer[12], buffer[13]]),
        }
    }
}

impl Packet for PacketHcDeleteChar3Reserved {
    fn id(&self) -> &str {
       "0x0828"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcDeleteChar3Reserved {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar3Reserved")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("result[6, 10]", &self.result)
            .field("delete_reserved_date[10, 14]", &self.delete_reserved_date)
        .finish()
    }
}

pub struct PacketChDeleteChar3 {
    pub packet_id: u16,
    pub gid: u32,
    pub birth: String,
}

impl PacketChDeleteChar3 {
    pub fn from(buffer: &[u8]) -> PacketChDeleteChar3 {
        PacketChDeleteChar3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            birth: String::from_utf8_lossy(&buffer[6..12]).to_string(),
        }
    }
}

impl Packet for PacketChDeleteChar3 {
    fn id(&self) -> &str {
       "0x0829"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChDeleteChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("birth[6, 12]", &self.birth)
        .finish()
    }
}

pub struct PacketHcDeleteChar3 {
    pub packet_id: u16,
    pub gid: u32,
    pub result: u32,
}

impl PacketHcDeleteChar3 {
    pub fn from(buffer: &[u8]) -> PacketHcDeleteChar3 {
        PacketHcDeleteChar3 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketHcDeleteChar3 {
    fn id(&self) -> &str {
       "0x082a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcDeleteChar3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar3")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("result[6, 10]", &self.result)
        .finish()
    }
}

pub struct PacketChDeleteChar3Cancel {
    pub packet_id: u16,
    pub gid: u32,
}

impl PacketChDeleteChar3Cancel {
    pub fn from(buffer: &[u8]) -> PacketChDeleteChar3Cancel {
        PacketChDeleteChar3Cancel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketChDeleteChar3Cancel {
    fn id(&self) -> &str {
       "0x082b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChDeleteChar3Cancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChDeleteChar3Cancel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
        .finish()
    }
}

pub struct PacketHcDeleteChar3Cancel {
    pub packet_id: u16,
    pub gid: u32,
    pub result: u32,
}

impl PacketHcDeleteChar3Cancel {
    pub fn from(buffer: &[u8]) -> PacketHcDeleteChar3Cancel {
        PacketHcDeleteChar3Cancel {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            gid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            result: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Packet for PacketHcDeleteChar3Cancel {
    fn id(&self) -> &str {
       "0x082c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketHcDeleteChar3Cancel {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketHcDeleteChar3Cancel")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("gid[2, 6]", &self.gid)
            .field("result[6, 10]", &self.result)
        .finish()
    }
}

pub struct PacketCzSearchStoreInfo {
    pub packet_id: u16,
    pub packet_length: u16,
    pub store_type: char,
    pub max_price: u32,
    pub min_price: u32,
    pub item_idlist_size: char,
    pub card_idlist_size: char,
}

impl PacketCzSearchStoreInfo {
    pub fn from(buffer: &[u8]) -> PacketCzSearchStoreInfo {
        PacketCzSearchStoreInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            store_type: buffer[4] as char,
            max_price: u32::from_le_bytes([buffer[5], buffer[6], buffer[7], buffer[8]]),
            min_price: u32::from_le_bytes([buffer[9], buffer[10], buffer[11], buffer[12]]),
            item_idlist_size: buffer[13] as char,
            card_idlist_size: buffer[14] as char,
        }
    }
}

impl Packet for PacketCzSearchStoreInfo {
    fn id(&self) -> &str {
       "0x0835"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSearchStoreInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("store_type[4, 5]", &self.store_type)
            .field("max_price[5, 9]", &self.max_price)
            .field("min_price[9, 13]", &self.min_price)
            .field("item_idlist_size[13, 14]", &self.item_idlist_size)
            .field("card_idlist_size[14, 15]", &self.card_idlist_size)
        .finish()
    }
}

pub struct PacketZcSearchStoreInfoAck {
    pub packet_id: u16,
    pub packet_length: u16,
    pub is_first_page: bool,
    pub is_nex_page: bool,
    pub remained_search_cnt: char,
    pub ssilist: Vec<ResultItemInfo>,
}

impl PacketZcSearchStoreInfoAck {
    pub fn from(buffer: &[u8]) -> PacketZcSearchStoreInfoAck {
        let iter_count = &buffer.len() / 106;
        let mut vec_field: Vec<ResultItemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 7 * i;
            let end_pos = 113 * i;
            vec_field.push(ResultItemInfo::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcSearchStoreInfoAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            packet_length: u16::from_le_bytes([buffer[2], buffer[3]]),
            is_first_page: buffer[4] == 1,
            is_nex_page: buffer[5] == 1,
            remained_search_cnt: buffer[6] as char,
            ssilist: vec_field,
        }
    }
}

impl Packet for PacketZcSearchStoreInfoAck {
    fn id(&self) -> &str {
       "0x0836"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSearchStoreInfoAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSearchStoreInfoAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("packet_length[2, 4]", &self.packet_length)
            .field("is_first_page[4, 5]", &self.is_first_page)
            .field("is_nex_page[5, 6]", &self.is_nex_page)
            .field("remained_search_cnt[6, 7]", &self.remained_search_cnt)
            .field("ssilist[7, 113]", &self.ssilist)
        .finish()
    }
}

pub struct PacketZcSearchStoreInfoFailed {
    pub packet_id: u16,
    pub reason: char,
}

impl PacketZcSearchStoreInfoFailed {
    pub fn from(buffer: &[u8]) -> PacketZcSearchStoreInfoFailed {
        PacketZcSearchStoreInfoFailed {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            reason: buffer[2] as char,
        }
    }
}

impl Packet for PacketZcSearchStoreInfoFailed {
    fn id(&self) -> &str {
       "0x0837"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSearchStoreInfoFailed {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSearchStoreInfoFailed")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("reason[2, 3]", &self.reason)
        .finish()
    }
}

pub struct PacketCzSearchStoreInfoNextPage {
    pub packet_id: u16,
}

impl PacketCzSearchStoreInfoNextPage {
    pub fn from(buffer: &[u8]) -> PacketCzSearchStoreInfoNextPage {
        PacketCzSearchStoreInfoNextPage {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzSearchStoreInfoNextPage {
    fn id(&self) -> &str {
       "0x0838"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSearchStoreInfoNextPage {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSearchStoreInfoNextPage")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketZcAckBanGuildSso {
    pub packet_id: u16,
    pub char_name: String,
    pub reason_desc: String,
}

impl PacketZcAckBanGuildSso {
    pub fn from(buffer: &[u8]) -> PacketZcAckBanGuildSso {
        PacketZcAckBanGuildSso {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_name: String::from_utf8_lossy(&buffer[2..26]).to_string(),
            reason_desc: String::from_utf8_lossy(&buffer[26..66]).to_string(),
        }
    }
}

impl Packet for PacketZcAckBanGuildSso {
    fn id(&self) -> &str {
       "0x0839"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcAckBanGuildSso {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcAckBanGuildSso")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_name[2, 26]", &self.char_name)
            .field("reason_desc[26, 66]", &self.reason_desc)
        .finish()
    }
}

pub struct PacketZcOpenSearchStoreInfo {
    pub packet_id: u16,
    pub open_type: u16,
    pub search_cnt_max: char,
}

impl PacketZcOpenSearchStoreInfo {
    pub fn from(buffer: &[u8]) -> PacketZcOpenSearchStoreInfo {
        PacketZcOpenSearchStoreInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            open_type: u16::from_le_bytes([buffer[2], buffer[3]]),
            search_cnt_max: buffer[4] as char,
        }
    }
}

impl Packet for PacketZcOpenSearchStoreInfo {
    fn id(&self) -> &str {
       "0x083a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcOpenSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcOpenSearchStoreInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("open_type[2, 4]", &self.open_type)
            .field("search_cnt_max[4, 5]", &self.search_cnt_max)
        .finish()
    }
}

pub struct PacketCzCloseSearchStoreInfo {
    pub packet_id: u16,
}

impl PacketCzCloseSearchStoreInfo {
    pub fn from(buffer: &[u8]) -> PacketCzCloseSearchStoreInfo {
        PacketCzCloseSearchStoreInfo {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Packet for PacketCzCloseSearchStoreInfo {
    fn id(&self) -> &str {
       "0x083b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzCloseSearchStoreInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzCloseSearchStoreInfo")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
        .finish()
    }
}

pub struct PacketCzSsilistItemClick {
    pub packet_id: u16,
    pub aid: u32,
    pub ssiid: u32,
    pub itid: u16,
}

impl PacketCzSsilistItemClick {
    pub fn from(buffer: &[u8]) -> PacketCzSsilistItemClick {
        PacketCzSsilistItemClick {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            aid: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            ssiid: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
            itid: u16::from_le_bytes([buffer[10], buffer[11]]),
        }
    }
}

impl Packet for PacketCzSsilistItemClick {
    fn id(&self) -> &str {
       "0x083c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketCzSsilistItemClick {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketCzSsilistItemClick")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("aid[2, 6]", &self.aid)
            .field("ssiid[6, 10]", &self.ssiid)
            .field("itid[10, 12]", &self.itid)
        .finish()
    }
}

pub struct PacketZcSsilistItemClickAck {
    pub packet_id: u16,
    pub x: u16,
    pub y: u16,
}

impl PacketZcSsilistItemClickAck {
    pub fn from(buffer: &[u8]) -> PacketZcSsilistItemClickAck {
        PacketZcSsilistItemClickAck {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            x: u16::from_le_bytes([buffer[2], buffer[3]]),
            y: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Packet for PacketZcSsilistItemClickAck {
    fn id(&self) -> &str {
       "0x083d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketZcSsilistItemClickAck {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcSsilistItemClickAck")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("x[2, 4]", &self.x)
            .field("y[4, 6]", &self.y)
        .finish()
    }
}

pub struct PacketAcRefuseLoginR2 {
    pub packet_id: u16,
    pub error_code: u32,
    pub block_date: String,
}

impl PacketAcRefuseLoginR2 {
    pub fn from(buffer: &[u8]) -> PacketAcRefuseLoginR2 {
        PacketAcRefuseLoginR2 {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            error_code: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            block_date: String::from_utf8_lossy(&buffer[6..26]).to_string(),
        }
    }
}

impl Packet for PacketAcRefuseLoginR2 {
    fn id(&self) -> &str {
       "0x083e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketAcRefuseLoginR2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketAcRefuseLoginR2")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("error_code[2, 6]", &self.error_code)
            .field("block_date[6, 26]", &self.block_date)
        .finish()
    }
}

pub struct PacketChSelectAccessibleMapname {
    pub packet_id: u16,
    pub char_num: char,
    pub map_list_num: char,
}

impl PacketChSelectAccessibleMapname {
    pub fn from(buffer: &[u8]) -> PacketChSelectAccessibleMapname {
        PacketChSelectAccessibleMapname {
            packet_id: u16::from_le_bytes([buffer[0], buffer[1]]),
            char_num: buffer[2] as char,
            map_list_num: buffer[3] as char,
        }
    }
}

impl Packet for PacketChSelectAccessibleMapname {
    fn id(&self) -> &str {
       "0x0841"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}

impl Debug for PacketChSelectAccessibleMapname {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketChSelectAccessibleMapname")
            .field("id", &self.id())
            .field("packet_id[0, 2]", &self.packet_id)
            .field("char_num[2, 3]", &self.char_num)
            .field("map_list_num[3, 4]", &self.map_list_num)
        .finish()
    }
}

pub struct ServerAddr {
    pub ip: u32,
    pub port: u16,
    pub name: String,
    pub user_count: u16,
    pub state: u16,
    pub property: u16,
}

impl ServerAddr {
    pub fn from(buffer: &[u8]) -> ServerAddr {
        ServerAddr {
            ip: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            port: u16::from_le_bytes([buffer[4], buffer[5]]),
            name: String::from_utf8_lossy(&buffer[6..26]).to_string(),
            user_count: u16::from_le_bytes([buffer[26], buffer[27]]),
            state: u16::from_le_bytes([buffer[28], buffer[29]]),
            property: u16::from_le_bytes([buffer[30], buffer[31]]),
        }
    }
}

impl Debug for ServerAddr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ServerAddr")
            .field("ip[0, 4]", &self.ip)
            .field("port[4, 6]", &self.port)
            .field("name[6, 26]", &self.name)
            .field("user_count[26, 28]", &self.user_count)
            .field("state[28, 30]", &self.state)
            .field("property[30, 32]", &self.property)
        .finish()
    }
}

pub struct CharacterInfoNeoUnion {
    pub gid: u32,
    pub exp: u32,
    pub money: u32,
    pub jobexp: u32,
    pub joblevel: u32,
    pub bodystate: u32,
    pub healthstate: u32,
    pub effectstate: u32,
    pub virtue: u32,
    pub honor: u32,
    pub jobpoint: u16,
    pub hp: u32,
    pub maxhp: u32,
    pub sp: u16,
    pub maxsp: u16,
    pub speed: u16,
    pub job: u16,
    pub head: u16,
    pub weapon: u16,
    pub level: u16,
    pub sppoint: u16,
    pub accessory: u16,
    pub shield: u16,
    pub accessory2: u16,
    pub accessory3: u16,
    pub headpalette: u16,
    pub bodypalette: u16,
    pub name: String,
    pub str: char,
    pub agi: char,
    pub vit: char,
    pub int: char,
    pub dex: char,
    pub luk: char,
    pub char_num: char,
    pub haircolor: char,
    pub b_is_changed_char_name: u16,
    pub last_map: String,
    pub delete_date: u32,
    pub robe: u32,
    pub slot_addon: u32,
    pub rename_addon: u32,
}

impl CharacterInfoNeoUnion {
    pub fn from(buffer: &[u8]) -> CharacterInfoNeoUnion {
        CharacterInfoNeoUnion {
            gid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            exp: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            money: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            jobexp: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            joblevel: u32::from_le_bytes([buffer[16], buffer[17], buffer[18], buffer[19]]),
            bodystate: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            healthstate: u32::from_le_bytes([buffer[24], buffer[25], buffer[26], buffer[27]]),
            effectstate: u32::from_le_bytes([buffer[28], buffer[29], buffer[30], buffer[31]]),
            virtue: u32::from_le_bytes([buffer[32], buffer[33], buffer[34], buffer[35]]),
            honor: u32::from_le_bytes([buffer[36], buffer[37], buffer[38], buffer[39]]),
            jobpoint: u16::from_le_bytes([buffer[40], buffer[41]]),
            hp: u32::from_le_bytes([buffer[42], buffer[43], buffer[44], buffer[45]]),
            maxhp: u32::from_le_bytes([buffer[46], buffer[47], buffer[48], buffer[49]]),
            sp: u16::from_le_bytes([buffer[50], buffer[51]]),
            maxsp: u16::from_le_bytes([buffer[52], buffer[53]]),
            speed: u16::from_le_bytes([buffer[54], buffer[55]]),
            job: u16::from_le_bytes([buffer[56], buffer[57]]),
            head: u16::from_le_bytes([buffer[58], buffer[59]]),
            weapon: u16::from_le_bytes([buffer[60], buffer[61]]),
            level: u16::from_le_bytes([buffer[62], buffer[63]]),
            sppoint: u16::from_le_bytes([buffer[64], buffer[65]]),
            accessory: u16::from_le_bytes([buffer[66], buffer[67]]),
            shield: u16::from_le_bytes([buffer[68], buffer[69]]),
            accessory2: u16::from_le_bytes([buffer[70], buffer[71]]),
            accessory3: u16::from_le_bytes([buffer[72], buffer[73]]),
            headpalette: u16::from_le_bytes([buffer[74], buffer[75]]),
            bodypalette: u16::from_le_bytes([buffer[76], buffer[77]]),
            name: String::from_utf8_lossy(&buffer[78..102]).to_string(),
            str: buffer[102] as char,
            agi: buffer[103] as char,
            vit: buffer[104] as char,
            int: buffer[105] as char,
            dex: buffer[106] as char,
            luk: buffer[107] as char,
            char_num: buffer[108] as char,
            haircolor: buffer[109] as char,
            b_is_changed_char_name: u16::from_le_bytes([buffer[110], buffer[111]]),
            last_map: String::from_utf8_lossy(&buffer[112..128]).to_string(),
            delete_date: u32::from_le_bytes([buffer[128], buffer[129], buffer[130], buffer[131]]),
            robe: u32::from_le_bytes([buffer[132], buffer[133], buffer[134], buffer[135]]),
            slot_addon: u32::from_le_bytes([buffer[136], buffer[137], buffer[138], buffer[139]]),
            rename_addon: u32::from_le_bytes([buffer[140], buffer[141], buffer[142], buffer[143]]),
        }
    }
}

impl Debug for CharacterInfoNeoUnion {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CharacterInfoNeoUnion")
            .field("gid[0, 4]", &self.gid)
            .field("exp[4, 8]", &self.exp)
            .field("money[8, 12]", &self.money)
            .field("jobexp[12, 16]", &self.jobexp)
            .field("joblevel[16, 20]", &self.joblevel)
            .field("bodystate[20, 24]", &self.bodystate)
            .field("healthstate[24, 28]", &self.healthstate)
            .field("effectstate[28, 32]", &self.effectstate)
            .field("virtue[32, 36]", &self.virtue)
            .field("honor[36, 40]", &self.honor)
            .field("jobpoint[40, 42]", &self.jobpoint)
            .field("hp[42, 46]", &self.hp)
            .field("maxhp[46, 50]", &self.maxhp)
            .field("sp[50, 52]", &self.sp)
            .field("maxsp[52, 54]", &self.maxsp)
            .field("speed[54, 56]", &self.speed)
            .field("job[56, 58]", &self.job)
            .field("head[58, 60]", &self.head)
            .field("weapon[60, 62]", &self.weapon)
            .field("level[62, 64]", &self.level)
            .field("sppoint[64, 66]", &self.sppoint)
            .field("accessory[66, 68]", &self.accessory)
            .field("shield[68, 70]", &self.shield)
            .field("accessory2[70, 72]", &self.accessory2)
            .field("accessory3[72, 74]", &self.accessory3)
            .field("headpalette[74, 76]", &self.headpalette)
            .field("bodypalette[76, 78]", &self.bodypalette)
            .field("name[78, 102]", &self.name)
            .field("str[102, 103]", &self.str)
            .field("agi[103, 104]", &self.agi)
            .field("vit[104, 105]", &self.vit)
            .field("int[105, 106]", &self.int)
            .field("dex[106, 107]", &self.dex)
            .field("luk[107, 108]", &self.luk)
            .field("char_num[108, 109]", &self.char_num)
            .field("haircolor[109, 110]", &self.haircolor)
            .field("b_is_changed_char_name[110, 112]", &self.b_is_changed_char_name)
            .field("last_map[112, 128]", &self.last_map)
            .field("delete_date[128, 132]", &self.delete_date)
            .field("robe[132, 136]", &self.robe)
            .field("slot_addon[136, 140]", &self.slot_addon)
            .field("rename_addon[140, 144]", &self.rename_addon)
        .finish()
    }
}

pub struct ZserverAddr {
    pub ip: u32,
    pub port: u16,
}

impl ZserverAddr {
    pub fn from(buffer: &[u8]) -> ZserverAddr {
        ZserverAddr {
            ip: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            port: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Debug for ZserverAddr {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ZserverAddr")
            .field("ip[0, 4]", &self.ip)
            .field("port[4, 6]", &self.port)
        .finish()
    }
}

pub struct EQUIPSLOTINFO {
    pub card1: u16,
    pub card2: u16,
    pub card3: u16,
    pub card4: u16,
}

impl EQUIPSLOTINFO {
    pub fn from(buffer: &[u8]) -> EQUIPSLOTINFO {
        EQUIPSLOTINFO {
            card1: u16::from_le_bytes([buffer[0], buffer[1]]),
            card2: u16::from_le_bytes([buffer[2], buffer[3]]),
            card3: u16::from_le_bytes([buffer[4], buffer[5]]),
            card4: u16::from_le_bytes([buffer[6], buffer[7]]),
        }
    }
}

impl Debug for EQUIPSLOTINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EQUIPSLOTINFO")
            .field("card1[0, 2]", &self.card1)
            .field("card2[2, 4]", &self.card2)
            .field("card3[4, 6]", &self.card3)
            .field("card4[6, 8]", &self.card4)
        .finish()
    }
}

pub struct NormalitemExtrainfo {
    pub index: u16,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub count: u16,
    pub wear_state: u16,
}

impl NormalitemExtrainfo {
    pub fn from(buffer: &[u8]) -> NormalitemExtrainfo {
        NormalitemExtrainfo {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            is_identified: buffer[5] == 1,
            count: u16::from_le_bytes([buffer[6], buffer[7]]),
            wear_state: u16::from_le_bytes([buffer[8], buffer[9]]),
        }
    }
}

impl Debug for NormalitemExtrainfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NormalitemExtrainfo")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("is_identified[5, 6]", &self.is_identified)
            .field("count[6, 8]", &self.count)
            .field("wear_state[8, 10]", &self.wear_state)
        .finish()
    }
}

pub struct EquipmentitemExtrainfo {
    pub index: u16,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub location: u16,
    pub wear_state: u16,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl EquipmentitemExtrainfo {
    pub fn from(buffer: &[u8]) -> EquipmentitemExtrainfo {
        EquipmentitemExtrainfo {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            is_identified: buffer[5] == 1,
            location: u16::from_le_bytes([buffer[6], buffer[7]]),
            wear_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            is_damaged: buffer[10] == 1,
            refining_level: buffer[11] as char,
            slot: EQUIPSLOTINFO::from(&buffer[12..20]),
        }
    }
}

impl Debug for EquipmentitemExtrainfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EquipmentitemExtrainfo")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("is_identified[5, 6]", &self.is_identified)
            .field("location[6, 8]", &self.location)
            .field("wear_state[8, 10]", &self.wear_state)
            .field("is_damaged[10, 11]", &self.is_damaged)
            .field("refining_level[11, 12]", &self.refining_level)
            .field("slot[12, 20]", &self.slot)
        .finish()
    }
}

pub struct PurchaseItem {
    pub price: u32,
    pub discountprice: u32,
    pub type_: char,
    pub itid: u16,
}

impl PurchaseItem {
    pub fn from(buffer: &[u8]) -> PurchaseItem {
        PurchaseItem {
            price: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            discountprice: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            type_: buffer[8] as char,
            itid: u16::from_le_bytes([buffer[9], buffer[10]]),
        }
    }
}

impl Debug for PurchaseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PurchaseItem")
            .field("price[0, 4]", &self.price)
            .field("discountprice[4, 8]", &self.discountprice)
            .field("type_[8, 9]", &self.type_)
            .field("itid[9, 11]", &self.itid)
        .finish()
    }
}

pub struct SellItem {
    pub index: u16,
    pub price: u32,
    pub overchargeprice: u32,
}

impl SellItem {
    pub fn from(buffer: &[u8]) -> SellItem {
        SellItem {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            price: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            overchargeprice: u32::from_le_bytes([buffer[6], buffer[7], buffer[8], buffer[9]]),
        }
    }
}

impl Debug for SellItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("SellItem")
            .field("index[0, 2]", &self.index)
            .field("price[2, 6]", &self.price)
            .field("overchargeprice[6, 10]", &self.overchargeprice)
        .finish()
    }
}

pub struct CzPurchaseItem {
    pub count: u16,
    pub itid: u16,
}

impl CzPurchaseItem {
    pub fn from(buffer: &[u8]) -> CzPurchaseItem {
        CzPurchaseItem {
            count: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Debug for CzPurchaseItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CzPurchaseItem")
            .field("count[0, 2]", &self.count)
            .field("itid[2, 4]", &self.itid)
        .finish()
    }
}

pub struct CzSellItem {
    pub index: u16,
    pub count: u16,
}

impl CzSellItem {
    pub fn from(buffer: &[u8]) -> CzSellItem {
        CzSellItem {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            count: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Debug for CzSellItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CzSellItem")
            .field("index[0, 2]", &self.index)
            .field("count[2, 4]", &self.count)
        .finish()
    }
}

pub struct WhisperItem {
    pub name: String,
}

impl WhisperItem {
    pub fn from(buffer: &[u8]) -> WhisperItem {
        WhisperItem {
            name: String::from_utf8_lossy(&buffer[0..24]).to_string(),
        }
    }
}

impl Debug for WhisperItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("WhisperItem")
            .field("name[0, 24]", &self.name)
        .finish()
    }
}

pub struct RoomMember {
    pub role: u32,
    pub name: String,
}

impl RoomMember {
    pub fn from(buffer: &[u8]) -> RoomMember {
        RoomMember {
            role: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
        }
    }
}

impl Debug for RoomMember {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RoomMember")
            .field("role[0, 4]", &self.role)
            .field("name[4, 28]", &self.name)
        .finish()
    }
}

pub struct GroupmemberInfo {
    pub aid: u32,
    pub character_name: String,
    pub map_name: String,
    pub role: char,
    pub state: char,
}

impl GroupmemberInfo {
    pub fn from(buffer: &[u8]) -> GroupmemberInfo {
        GroupmemberInfo {
            aid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            character_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            map_name: String::from_utf8_lossy(&buffer[28..44]).to_string(),
            role: buffer[44] as char,
            state: buffer[45] as char,
        }
    }
}

impl Debug for GroupmemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GroupmemberInfo")
            .field("aid[0, 4]", &self.aid)
            .field("character_name[4, 28]", &self.character_name)
            .field("map_name[28, 44]", &self.map_name)
            .field("role[44, 45]", &self.role)
            .field("state[45, 46]", &self.state)
        .finish()
    }
}

pub struct SKILLINFO {
    pub skid: u16,
    pub type_: u32,
    pub level: u16,
    pub spcost: u16,
    pub attack_range: u16,
    pub skill_name: String,
    pub upgradable: char,
}

impl SKILLINFO {
    pub fn from(buffer: &[u8]) -> SKILLINFO {
        SKILLINFO {
            skid: u16::from_le_bytes([buffer[0], buffer[1]]),
            type_: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
            level: u16::from_le_bytes([buffer[6], buffer[7]]),
            spcost: u16::from_le_bytes([buffer[8], buffer[9]]),
            attack_range: u16::from_le_bytes([buffer[10], buffer[11]]),
            skill_name: String::from_utf8_lossy(&buffer[12..36]).to_string(),
            upgradable: buffer[36] as char,
        }
    }
}

impl Debug for SKILLINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("SKILLINFO")
            .field("skid[0, 2]", &self.skid)
            .field("type_[2, 6]", &self.type_)
            .field("level[6, 8]", &self.level)
            .field("spcost[8, 10]", &self.spcost)
            .field("attack_range[10, 12]", &self.attack_range)
            .field("skill_name[12, 36]", &self.skill_name)
            .field("upgradable[36, 37]", &self.upgradable)
        .finish()
    }
}

pub struct StoreItem {
    pub index: u16,
    pub count: u16,
    pub price: u32,
}

impl StoreItem {
    pub fn from(buffer: &[u8]) -> StoreItem {
        StoreItem {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            count: u16::from_le_bytes([buffer[2], buffer[3]]),
            price: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Debug for StoreItem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("StoreItem")
            .field("index[0, 2]", &self.index)
            .field("count[2, 4]", &self.count)
            .field("price[4, 8]", &self.price)
        .finish()
    }
}

pub struct PurchaseItemFrommc {
    pub price: u32,
    pub count: u16,
    pub index: u16,
    pub type_: char,
    pub itid: u16,
    pub is_identified: char,
    pub is_damaged: char,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PurchaseItemFrommc {
    pub fn from(buffer: &[u8]) -> PurchaseItemFrommc {
        PurchaseItemFrommc {
            price: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            index: u16::from_le_bytes([buffer[6], buffer[7]]),
            type_: buffer[8] as char,
            itid: u16::from_le_bytes([buffer[9], buffer[10]]),
            is_identified: buffer[11] as char,
            is_damaged: buffer[12] as char,
            refining_level: buffer[13] as char,
            slot: EQUIPSLOTINFO::from(&buffer[14..22]),
        }
    }
}

impl Debug for PurchaseItemFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PurchaseItemFrommc")
            .field("price[0, 4]", &self.price)
            .field("count[4, 6]", &self.count)
            .field("index[6, 8]", &self.index)
            .field("type_[8, 9]", &self.type_)
            .field("itid[9, 11]", &self.itid)
            .field("is_identified[11, 12]", &self.is_identified)
            .field("is_damaged[12, 13]", &self.is_damaged)
            .field("refining_level[13, 14]", &self.refining_level)
            .field("slot[14, 22]", &self.slot)
        .finish()
    }
}

pub struct CzPurchaseItemFrommc {
    pub count: u16,
    pub index: u16,
}

impl CzPurchaseItemFrommc {
    pub fn from(buffer: &[u8]) -> CzPurchaseItemFrommc {
        CzPurchaseItemFrommc {
            count: u16::from_le_bytes([buffer[0], buffer[1]]),
            index: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Debug for CzPurchaseItemFrommc {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CzPurchaseItemFrommc")
            .field("count[0, 2]", &self.count)
            .field("index[2, 4]", &self.index)
        .finish()
    }
}

pub struct PurchaseMyitem {
    pub price: u32,
    pub index: u16,
    pub count: u16,
    pub type_: char,
    pub itid: u16,
    pub is_identified: char,
    pub is_damaged: char,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl PurchaseMyitem {
    pub fn from(buffer: &[u8]) -> PurchaseMyitem {
        PurchaseMyitem {
            price: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            index: u16::from_le_bytes([buffer[4], buffer[5]]),
            count: u16::from_le_bytes([buffer[6], buffer[7]]),
            type_: buffer[8] as char,
            itid: u16::from_le_bytes([buffer[9], buffer[10]]),
            is_identified: buffer[11] as char,
            is_damaged: buffer[12] as char,
            refining_level: buffer[13] as char,
            slot: EQUIPSLOTINFO::from(&buffer[14..22]),
        }
    }
}

impl Debug for PurchaseMyitem {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PurchaseMyitem")
            .field("price[0, 4]", &self.price)
            .field("index[4, 6]", &self.index)
            .field("count[6, 8]", &self.count)
            .field("type_[8, 9]", &self.type_)
            .field("itid[9, 11]", &self.itid)
            .field("is_identified[11, 12]", &self.is_identified)
            .field("is_damaged[12, 13]", &self.is_damaged)
            .field("refining_level[13, 14]", &self.refining_level)
            .field("slot[14, 22]", &self.slot)
        .finish()
    }
}

pub struct RelatedGuild {
    pub gdid: u32,
    pub relation: u32,
    pub guild_name: String,
}

impl RelatedGuild {
    pub fn from(buffer: &[u8]) -> RelatedGuild {
        RelatedGuild {
            gdid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            relation: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            guild_name: String::from_utf8_lossy(&buffer[8..32]).to_string(),
        }
    }
}

impl Debug for RelatedGuild {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RelatedGuild")
            .field("gdid[0, 4]", &self.gdid)
            .field("relation[4, 8]", &self.relation)
            .field("guild_name[8, 32]", &self.guild_name)
        .finish()
    }
}

pub struct GuildMembermgrInfo {
    pub aid: u32,
    pub gid: u32,
    pub head_type: u16,
    pub head_palette: u16,
    pub sex: u16,
    pub job: u16,
    pub level: u16,
    pub member_exp: u32,
    pub current_state: u32,
    pub gposition_id: u32,
    pub memo: String,
    pub char_name: String,
}

impl GuildMembermgrInfo {
    pub fn from(buffer: &[u8]) -> GuildMembermgrInfo {
        GuildMembermgrInfo {
            aid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            head_type: u16::from_le_bytes([buffer[8], buffer[9]]),
            head_palette: u16::from_le_bytes([buffer[10], buffer[11]]),
            sex: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            level: u16::from_le_bytes([buffer[16], buffer[17]]),
            member_exp: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            current_state: u32::from_le_bytes([buffer[22], buffer[23], buffer[24], buffer[25]]),
            gposition_id: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            memo: String::from_utf8_lossy(&buffer[30..80]).to_string(),
            char_name: String::from_utf8_lossy(&buffer[80..104]).to_string(),
        }
    }
}

impl Debug for GuildMembermgrInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildMembermgrInfo")
            .field("aid[0, 4]", &self.aid)
            .field("gid[4, 8]", &self.gid)
            .field("head_type[8, 10]", &self.head_type)
            .field("head_palette[10, 12]", &self.head_palette)
            .field("sex[12, 14]", &self.sex)
            .field("job[14, 16]", &self.job)
            .field("level[16, 18]", &self.level)
            .field("member_exp[18, 22]", &self.member_exp)
            .field("current_state[22, 26]", &self.current_state)
            .field("gposition_id[26, 30]", &self.gposition_id)
            .field("memo[30, 80]", &self.memo)
            .field("char_name[80, 104]", &self.char_name)
        .finish()
    }
}

pub struct MemberPositionInfo {
    pub aid: u32,
    pub gid: u32,
    pub position_id: u32,
}

impl MemberPositionInfo {
    pub fn from(buffer: &[u8]) -> MemberPositionInfo {
        MemberPositionInfo {
            aid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            position_id: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
        }
    }
}

impl Debug for MemberPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MemberPositionInfo")
            .field("aid[0, 4]", &self.aid)
            .field("gid[4, 8]", &self.gid)
            .field("position_id[8, 12]", &self.position_id)
        .finish()
    }
}

pub struct GuildMemberPositionInfo {
    pub position_id: u32,
    pub right: u32,
    pub ranking: u32,
    pub pay_rate: u32,
}

impl GuildMemberPositionInfo {
    pub fn from(buffer: &[u8]) -> GuildMemberPositionInfo {
        GuildMemberPositionInfo {
            position_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            right: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            ranking: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            pay_rate: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
        }
    }
}

impl Debug for GuildMemberPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildMemberPositionInfo")
            .field("position_id[0, 4]", &self.position_id)
            .field("right[4, 8]", &self.right)
            .field("ranking[8, 12]", &self.ranking)
            .field("pay_rate[12, 16]", &self.pay_rate)
        .finish()
    }
}

pub struct GuildRegPositionInfo {
    pub position_id: u32,
    pub right: u32,
    pub ranking: u32,
    pub pay_rate: u32,
    pub pos_name: String,
}

impl GuildRegPositionInfo {
    pub fn from(buffer: &[u8]) -> GuildRegPositionInfo {
        GuildRegPositionInfo {
            position_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            right: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            ranking: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            pay_rate: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
            pos_name: String::from_utf8_lossy(&buffer[16..40]).to_string(),
        }
    }
}

impl Debug for GuildRegPositionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildRegPositionInfo")
            .field("position_id[0, 4]", &self.position_id)
            .field("right[4, 8]", &self.right)
            .field("ranking[8, 12]", &self.ranking)
            .field("pay_rate[12, 16]", &self.pay_rate)
            .field("pos_name[16, 40]", &self.pos_name)
        .finish()
    }
}

pub struct GuildBanInfo {
    pub charname: String,
    pub account: String,
    pub reason: String,
}

impl GuildBanInfo {
    pub fn from(buffer: &[u8]) -> GuildBanInfo {
        GuildBanInfo {
            charname: String::from_utf8_lossy(&buffer[0..24]).to_string(),
            account: String::from_utf8_lossy(&buffer[24..48]).to_string(),
            reason: String::from_utf8_lossy(&buffer[48..88]).to_string(),
        }
    }
}

impl Debug for GuildBanInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildBanInfo")
            .field("charname[0, 24]", &self.charname)
            .field("account[24, 48]", &self.account)
            .field("reason[48, 88]", &self.reason)
        .finish()
    }
}

pub struct OtherGuildInfo {
    pub guildname: String,
    pub guild_level: u32,
    pub guild_member_size: u32,
    pub guild_ranking: u32,
}

impl OtherGuildInfo {
    pub fn from(buffer: &[u8]) -> OtherGuildInfo {
        OtherGuildInfo {
            guildname: String::from_utf8_lossy(&buffer[0..24]).to_string(),
            guild_level: u32::from_le_bytes([buffer[24], buffer[25], buffer[26], buffer[27]]),
            guild_member_size: u32::from_le_bytes([buffer[28], buffer[29], buffer[30], buffer[31]]),
            guild_ranking: u32::from_le_bytes([buffer[32], buffer[33], buffer[34], buffer[35]]),
        }
    }
}

impl Debug for OtherGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("OtherGuildInfo")
            .field("guildname[0, 24]", &self.guildname)
            .field("guild_level[24, 28]", &self.guild_level)
            .field("guild_member_size[28, 32]", &self.guild_member_size)
            .field("guild_ranking[32, 36]", &self.guild_ranking)
        .finish()
    }
}

pub struct MemberPositionIdNameInfo {
    pub position_id: u32,
    pub pos_name: String,
}

impl MemberPositionIdNameInfo {
    pub fn from(buffer: &[u8]) -> MemberPositionIdNameInfo {
        MemberPositionIdNameInfo {
            position_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            pos_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
        }
    }
}

impl Debug for MemberPositionIdNameInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MemberPositionIdNameInfo")
            .field("position_id[0, 4]", &self.position_id)
            .field("pos_name[4, 28]", &self.pos_name)
        .finish()
    }
}

pub struct GuildMemberInfo {
    pub aid: u32,
    pub gid: u32,
    pub head: u16,
    pub head_palette: u16,
    pub sex: u16,
    pub job: u16,
    pub level: u16,
    pub contribution_exp: u32,
    pub current_state: u32,
    pub position_id: u32,
    pub intro: String,
    pub charname: String,
}

impl GuildMemberInfo {
    pub fn from(buffer: &[u8]) -> GuildMemberInfo {
        GuildMemberInfo {
            aid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            head: u16::from_le_bytes([buffer[8], buffer[9]]),
            head_palette: u16::from_le_bytes([buffer[10], buffer[11]]),
            sex: u16::from_le_bytes([buffer[12], buffer[13]]),
            job: u16::from_le_bytes([buffer[14], buffer[15]]),
            level: u16::from_le_bytes([buffer[16], buffer[17]]),
            contribution_exp: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
            current_state: u32::from_le_bytes([buffer[22], buffer[23], buffer[24], buffer[25]]),
            position_id: u32::from_le_bytes([buffer[26], buffer[27], buffer[28], buffer[29]]),
            intro: String::from_utf8_lossy(&buffer[30..80]).to_string(),
            charname: String::from_utf8_lossy(&buffer[80..104]).to_string(),
        }
    }
}

impl Debug for GuildMemberInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GuildMemberInfo")
            .field("aid[0, 4]", &self.aid)
            .field("gid[4, 8]", &self.gid)
            .field("head[8, 10]", &self.head)
            .field("head_palette[10, 12]", &self.head_palette)
            .field("sex[12, 14]", &self.sex)
            .field("job[14, 16]", &self.job)
            .field("level[16, 18]", &self.level)
            .field("contribution_exp[18, 22]", &self.contribution_exp)
            .field("current_state[22, 26]", &self.current_state)
            .field("position_id[26, 30]", &self.position_id)
            .field("intro[30, 80]", &self.intro)
            .field("charname[80, 104]", &self.charname)
        .finish()
    }
}

pub struct RelatedGuildInfo {
    pub relation: u32,
    pub gdid: u32,
    pub guildname: String,
}

impl RelatedGuildInfo {
    pub fn from(buffer: &[u8]) -> RelatedGuildInfo {
        RelatedGuildInfo {
            relation: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            gdid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            guildname: String::from_utf8_lossy(&buffer[8..32]).to_string(),
        }
    }
}

impl Debug for RelatedGuildInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RelatedGuildInfo")
            .field("relation[0, 4]", &self.relation)
            .field("gdid[4, 8]", &self.gdid)
            .field("guildname[8, 32]", &self.guildname)
        .finish()
    }
}

pub struct MonsterInfoElement {
    pub water: char,
    pub earth: char,
    pub fire: char,
    pub wind: char,
    pub poison: char,
    pub saint: char,
    pub dark: char,
    pub mental: char,
    pub undead: char,
}

impl MonsterInfoElement {
    pub fn from(buffer: &[u8]) -> MonsterInfoElement {
        MonsterInfoElement {
            water: buffer[0] as char,
            earth: buffer[1] as char,
            fire: buffer[2] as char,
            wind: buffer[3] as char,
            poison: buffer[4] as char,
            saint: buffer[5] as char,
            dark: buffer[6] as char,
            mental: buffer[7] as char,
            undead: buffer[8] as char,
        }
    }
}

impl Debug for MonsterInfoElement {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MonsterInfoElement")
            .field("water[0, 1]", &self.water)
            .field("earth[1, 2]", &self.earth)
            .field("fire[2, 3]", &self.fire)
            .field("wind[3, 4]", &self.wind)
            .field("poison[4, 5]", &self.poison)
            .field("saint[5, 6]", &self.saint)
            .field("dark[6, 7]", &self.dark)
            .field("mental[7, 8]", &self.mental)
            .field("undead[8, 9]", &self.undead)
        .finish()
    }
}

pub struct MakableitemInfo {
    pub itid: u16,
    pub material_id: u16,
}

impl MakableitemInfo {
    pub fn from(buffer: &[u8]) -> MakableitemInfo {
        MakableitemInfo {
            itid: u16::from_le_bytes([buffer[0], buffer[1]]),
            material_id: u16::from_le_bytes([buffer[2], buffer[3]]),
        }
    }
}

impl Debug for MakableitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MakableitemInfo")
            .field("itid[0, 2]", &self.itid)
            .field("material_id[2, 4]", &self.material_id)
        .finish()
    }
}

pub struct PeteggitemInfo {
    pub index: u16,
}

impl PeteggitemInfo {
    pub fn from(buffer: &[u8]) -> PeteggitemInfo {
        PeteggitemInfo {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Debug for PeteggitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PeteggitemInfo")
            .field("index[0, 2]", &self.index)
        .finish()
    }
}

pub struct ArrowitemInfo {
    pub index: u16,
}

impl ArrowitemInfo {
    pub fn from(buffer: &[u8]) -> ArrowitemInfo {
        ArrowitemInfo {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
        }
    }
}

impl Debug for ArrowitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ArrowitemInfo")
            .field("index[0, 2]", &self.index)
        .finish()
    }
}

pub struct NormalitemExtrainfo2 {
    pub index: u16,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub count: u16,
    pub wear_state: u16,
    pub slot: EQUIPSLOTINFO,
}

impl NormalitemExtrainfo2 {
    pub fn from(buffer: &[u8]) -> NormalitemExtrainfo2 {
        NormalitemExtrainfo2 {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            is_identified: buffer[5] == 1,
            count: u16::from_le_bytes([buffer[6], buffer[7]]),
            wear_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            slot: EQUIPSLOTINFO::from(&buffer[10..18]),
        }
    }
}

impl Debug for NormalitemExtrainfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NormalitemExtrainfo2")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("is_identified[5, 6]", &self.is_identified)
            .field("count[6, 8]", &self.count)
            .field("wear_state[8, 10]", &self.wear_state)
            .field("slot[10, 18]", &self.slot)
        .finish()
    }
}

pub struct RepairitemInfo {
    pub index: u16,
    pub itid: u16,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
}

impl RepairitemInfo {
    pub fn from(buffer: &[u8]) -> RepairitemInfo {
        RepairitemInfo {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            refining_level: buffer[4] as char,
            slot: EQUIPSLOTINFO::from(&buffer[5..13]),
        }
    }
}

impl Debug for RepairitemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RepairitemInfo")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("refining_level[4, 5]", &self.refining_level)
            .field("slot[5, 13]", &self.slot)
        .finish()
    }
}

pub struct StructFriend {
    pub aid: u32,
    pub gid: u32,
    pub name: String,
}

impl StructFriend {
    pub fn from(buffer: &[u8]) -> StructFriend {
        StructFriend {
            aid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            name: String::from_utf8_lossy(&buffer[8..32]).to_string(),
        }
    }
}

impl Debug for StructFriend {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("StructFriend")
            .field("aid[0, 4]", &self.aid)
            .field("gid[4, 8]", &self.gid)
            .field("name[8, 32]", &self.name)
        .finish()
    }
}

pub struct TagCharacterBlockInfo {
    pub gid: u32,
    pub sz_expire_date: String,
}

impl TagCharacterBlockInfo {
    pub fn from(buffer: &[u8]) -> TagCharacterBlockInfo {
        TagCharacterBlockInfo {
            gid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            sz_expire_date: String::from_utf8_lossy(&buffer[4..24]).to_string(),
        }
    }
}

impl Debug for TagCharacterBlockInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("TagCharacterBlockInfo")
            .field("gid[0, 4]", &self.gid)
            .field("sz_expire_date[4, 24]", &self.sz_expire_date)
        .finish()
    }
}

pub struct PVPINFO {
    pub win_point: u32,
    pub lose_point: u32,
    pub point: u32,
}

impl PVPINFO {
    pub fn from(buffer: &[u8]) -> PVPINFO {
        PVPINFO {
            win_point: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            lose_point: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            point: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
        }
    }
}

impl Debug for PVPINFO {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PVPINFO")
            .field("win_point[0, 4]", &self.win_point)
            .field("lose_point[4, 8]", &self.lose_point)
            .field("point[8, 12]", &self.point)
        .finish()
    }
}

pub struct Filetime {
    pub dw_low_date_time: u32,
    pub dw_high_date_time: u32,
}

impl Filetime {
    pub fn from(buffer: &[u8]) -> Filetime {
        Filetime {
            dw_low_date_time: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            dw_high_date_time: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Debug for Filetime {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("Filetime")
            .field("dw_low_date_time[0, 4]", &self.dw_low_date_time)
            .field("dw_high_date_time[4, 8]", &self.dw_high_date_time)
        .finish()
    }
}

pub struct MailList {
    pub mail_id: u32,
    pub header: String,
    pub is_open: char,
    pub from_name: String,
    pub delete_time: u32,
}

impl MailList {
    pub fn from(buffer: &[u8]) -> MailList {
        MailList {
            mail_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            header: String::from_utf8_lossy(&buffer[4..44]).to_string(),
            is_open: buffer[44] as char,
            from_name: String::from_utf8_lossy(&buffer[45..69]).to_string(),
            delete_time: u32::from_le_bytes([buffer[69], buffer[70], buffer[71], buffer[72]]),
        }
    }
}

impl Debug for MailList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("MailList")
            .field("mail_id[0, 4]", &self.mail_id)
            .field("header[4, 44]", &self.header)
            .field("is_open[44, 45]", &self.is_open)
            .field("from_name[45, 69]", &self.from_name)
            .field("delete_time[69, 73]", &self.delete_time)
        .finish()
    }
}

pub struct AuctionItemSearchInfo {
    pub auction_id: u32,
    pub seller_name: String,
    pub itid: u16,
    pub type_: u32,
    pub count: u16,
    pub is_identified: bool,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub now_price: u32,
    pub max_price: u32,
    pub buyer_name: String,
    pub delete_time: u32,
}

impl AuctionItemSearchInfo {
    pub fn from(buffer: &[u8]) -> AuctionItemSearchInfo {
        AuctionItemSearchInfo {
            auction_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            seller_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            itid: u16::from_le_bytes([buffer[28], buffer[29]]),
            type_: u32::from_le_bytes([buffer[30], buffer[31], buffer[32], buffer[33]]),
            count: u16::from_le_bytes([buffer[34], buffer[35]]),
            is_identified: buffer[36] == 1,
            is_damaged: buffer[37] == 1,
            refining_level: buffer[38] as char,
            slot: EQUIPSLOTINFO::from(&buffer[39..47]),
            now_price: u32::from_le_bytes([buffer[47], buffer[48], buffer[49], buffer[50]]),
            max_price: u32::from_le_bytes([buffer[51], buffer[52], buffer[53], buffer[54]]),
            buyer_name: String::from_utf8_lossy(&buffer[55..79]).to_string(),
            delete_time: u32::from_le_bytes([buffer[79], buffer[80], buffer[81], buffer[82]]),
        }
    }
}

impl Debug for AuctionItemSearchInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("AuctionItemSearchInfo")
            .field("auction_id[0, 4]", &self.auction_id)
            .field("seller_name[4, 28]", &self.seller_name)
            .field("itid[28, 30]", &self.itid)
            .field("type_[30, 34]", &self.type_)
            .field("count[34, 36]", &self.count)
            .field("is_identified[36, 37]", &self.is_identified)
            .field("is_damaged[37, 38]", &self.is_damaged)
            .field("refining_level[38, 39]", &self.refining_level)
            .field("slot[39, 47]", &self.slot)
            .field("now_price[47, 51]", &self.now_price)
            .field("max_price[51, 55]", &self.max_price)
            .field("buyer_name[55, 79]", &self.buyer_name)
            .field("delete_time[79, 83]", &self.delete_time)
        .finish()
    }
}

pub struct PacketMobHunting {
    pub quest_id: u32,
    pub mob_gid: u32,
    pub max_count: u16,
    pub count: u16,
}

impl PacketMobHunting {
    pub fn from(buffer: &[u8]) -> PacketMobHunting {
        PacketMobHunting {
            quest_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            mob_gid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            max_count: u16::from_le_bytes([buffer[8], buffer[9]]),
            count: u16::from_le_bytes([buffer[10], buffer[11]]),
        }
    }
}

impl Debug for PacketMobHunting {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketMobHunting")
            .field("quest_id[0, 4]", &self.quest_id)
            .field("mob_gid[4, 8]", &self.mob_gid)
            .field("max_count[8, 10]", &self.max_count)
            .field("count[10, 12]", &self.count)
        .finish()
    }
}

pub struct EquipmentitemExtrainfo2 {
    pub index: u16,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub location: u16,
    pub wear_state: u16,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub hire_expire_date: u32,
}

impl EquipmentitemExtrainfo2 {
    pub fn from(buffer: &[u8]) -> EquipmentitemExtrainfo2 {
        EquipmentitemExtrainfo2 {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            is_identified: buffer[5] == 1,
            location: u16::from_le_bytes([buffer[6], buffer[7]]),
            wear_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            is_damaged: buffer[10] == 1,
            refining_level: buffer[11] as char,
            slot: EQUIPSLOTINFO::from(&buffer[12..20]),
            hire_expire_date: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
        }
    }
}

impl Debug for EquipmentitemExtrainfo2 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EquipmentitemExtrainfo2")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("is_identified[5, 6]", &self.is_identified)
            .field("location[6, 8]", &self.location)
            .field("wear_state[8, 10]", &self.wear_state)
            .field("is_damaged[10, 11]", &self.is_damaged)
            .field("refining_level[11, 12]", &self.refining_level)
            .field("slot[12, 20]", &self.slot)
            .field("hire_expire_date[20, 24]", &self.hire_expire_date)
        .finish()
    }
}

pub struct PggLingoKeyTemp {
    pub dw_alg_num: u32,
    pub dw_alg_key1: u32,
    pub dw_alg_key2: u32,
    pub dw_seed: u32,
}

impl PggLingoKeyTemp {
    pub fn from(buffer: &[u8]) -> PggLingoKeyTemp {
        PggLingoKeyTemp {
            dw_alg_num: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            dw_alg_key1: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            dw_alg_key2: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            dw_seed: u32::from_le_bytes([buffer[12], buffer[13], buffer[14], buffer[15]]),
        }
    }
}

impl Debug for PggLingoKeyTemp {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PggLingoKeyTemp")
            .field("dw_alg_num[0, 4]", &self.dw_alg_num)
            .field("dw_alg_key1[4, 8]", &self.dw_alg_key1)
            .field("dw_alg_key2[8, 12]", &self.dw_alg_key2)
            .field("dw_seed[12, 16]", &self.dw_seed)
        .finish()
    }
}

pub struct PacketZcQuestInfo {
    pub quest_id: u32,
    pub active: bool,
}

impl PacketZcQuestInfo {
    pub fn from(buffer: &[u8]) -> PacketZcQuestInfo {
        PacketZcQuestInfo {
            quest_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            active: buffer[4] == 1,
        }
    }
}

impl Debug for PacketZcQuestInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcQuestInfo")
            .field("quest_id[0, 4]", &self.quest_id)
            .field("active[4, 5]", &self.active)
        .finish()
    }
}

pub struct PacketZcMissionHunt {
    pub mob_gid: u32,
    pub hunt_count: u16,
    pub mob_name: String,
}

impl PacketZcMissionHunt {
    pub fn from(buffer: &[u8]) -> PacketZcMissionHunt {
        PacketZcMissionHunt {
            mob_gid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            hunt_count: u16::from_le_bytes([buffer[4], buffer[5]]),
            mob_name: String::from_utf8_lossy(&buffer[6..30]).to_string(),
        }
    }
}

impl Debug for PacketZcMissionHunt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcMissionHunt")
            .field("mob_gid[0, 4]", &self.mob_gid)
            .field("hunt_count[4, 6]", &self.hunt_count)
            .field("mob_name[6, 30]", &self.mob_name)
        .finish()
    }
}

pub struct PacketZcQuestMissionInfo {
    pub quest_id: u32,
    pub quest_svr_time: u32,
    pub quest_end_time: u32,
    pub count: u16,
    pub hunt: Vec<PacketZcMissionHunt>,
}

impl PacketZcQuestMissionInfo {
    pub fn from(buffer: &[u8]) -> PacketZcQuestMissionInfo {
        let iter_count = &buffer.len() / 30;
        let mut vec_field: Vec<PacketZcMissionHunt> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 14 * i;
            let end_pos = 44 * i;
            vec_field.push(PacketZcMissionHunt::from(&buffer[start_pos..end_pos]));
            i += 1;
        }
        PacketZcQuestMissionInfo {
            quest_id: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            quest_svr_time: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            quest_end_time: u32::from_le_bytes([buffer[8], buffer[9], buffer[10], buffer[11]]),
            count: u16::from_le_bytes([buffer[12], buffer[13]]),
            hunt: vec_field,
        }
    }
}

impl Debug for PacketZcQuestMissionInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PacketZcQuestMissionInfo")
            .field("quest_id[0, 4]", &self.quest_id)
            .field("quest_svr_time[4, 8]", &self.quest_svr_time)
            .field("quest_end_time[8, 12]", &self.quest_end_time)
            .field("count[12, 14]", &self.count)
            .field("hunt[14, 44]", &self.hunt)
        .finish()
    }
}

pub struct ShortCutKey {
    pub is_skill: char,
    pub id: u32,
    pub count: u16,
}

impl ShortCutKey {
    pub fn from(buffer: &[u8]) -> ShortCutKey {
        ShortCutKey {
            is_skill: buffer[0] as char,
            id: u32::from_le_bytes([buffer[1], buffer[2], buffer[3], buffer[4]]),
            count: u16::from_le_bytes([buffer[5], buffer[6]]),
        }
    }
}

impl Debug for ShortCutKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ShortCutKey")
            .field("is_skill[0, 1]", &self.is_skill)
            .field("id[1, 5]", &self.id)
            .field("count[5, 7]", &self.count)
        .finish()
    }
}

pub struct EquipmentitemExtrainfo301 {
    pub index: u16,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub location: u16,
    pub wear_state: u16,
    pub is_damaged: bool,
    pub refining_level: char,
    pub slot: EQUIPSLOTINFO,
    pub hire_expire_date: u32,
    pub bind_on_equip_type: u16,
    pub w_item_sprite_number: u16,
}

impl EquipmentitemExtrainfo301 {
    pub fn from(buffer: &[u8]) -> EquipmentitemExtrainfo301 {
        EquipmentitemExtrainfo301 {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            is_identified: buffer[5] == 1,
            location: u16::from_le_bytes([buffer[6], buffer[7]]),
            wear_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            is_damaged: buffer[10] == 1,
            refining_level: buffer[11] as char,
            slot: EQUIPSLOTINFO::from(&buffer[12..20]),
            hire_expire_date: u32::from_le_bytes([buffer[20], buffer[21], buffer[22], buffer[23]]),
            bind_on_equip_type: u16::from_le_bytes([buffer[24], buffer[25]]),
            w_item_sprite_number: u16::from_le_bytes([buffer[26], buffer[27]]),
        }
    }
}

impl Debug for EquipmentitemExtrainfo301 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("EquipmentitemExtrainfo301")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("is_identified[5, 6]", &self.is_identified)
            .field("location[6, 8]", &self.location)
            .field("wear_state[8, 10]", &self.wear_state)
            .field("is_damaged[10, 11]", &self.is_damaged)
            .field("refining_level[11, 12]", &self.refining_level)
            .field("slot[12, 20]", &self.slot)
            .field("hire_expire_date[20, 24]", &self.hire_expire_date)
            .field("bind_on_equip_type[24, 26]", &self.bind_on_equip_type)
            .field("w_item_sprite_number[26, 28]", &self.w_item_sprite_number)
        .finish()
    }
}

pub struct NormalitemExtrainfo3 {
    pub index: u16,
    pub itid: u16,
    pub type_: char,
    pub is_identified: bool,
    pub count: u16,
    pub wear_state: u16,
    pub slot: EQUIPSLOTINFO,
    pub hire_expire_date: u32,
}

impl NormalitemExtrainfo3 {
    pub fn from(buffer: &[u8]) -> NormalitemExtrainfo3 {
        NormalitemExtrainfo3 {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            type_: buffer[4] as char,
            is_identified: buffer[5] == 1,
            count: u16::from_le_bytes([buffer[6], buffer[7]]),
            wear_state: u16::from_le_bytes([buffer[8], buffer[9]]),
            slot: EQUIPSLOTINFO::from(&buffer[10..18]),
            hire_expire_date: u32::from_le_bytes([buffer[18], buffer[19], buffer[20], buffer[21]]),
        }
    }
}

impl Debug for NormalitemExtrainfo3 {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NormalitemExtrainfo3")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("type_[4, 5]", &self.type_)
            .field("is_identified[5, 6]", &self.is_identified)
            .field("count[6, 8]", &self.count)
            .field("wear_state[8, 10]", &self.wear_state)
            .field("slot[10, 18]", &self.slot)
            .field("hire_expire_date[18, 22]", &self.hire_expire_date)
        .finish()
    }
}

pub struct SkillPostdelay {
    pub skid: u16,
    pub delay_tm: u32,
}

impl SkillPostdelay {
    pub fn from(buffer: &[u8]) -> SkillPostdelay {
        SkillPostdelay {
            skid: u16::from_le_bytes([buffer[0], buffer[1]]),
            delay_tm: u32::from_le_bytes([buffer[2], buffer[3], buffer[4], buffer[5]]),
        }
    }
}

impl Debug for SkillPostdelay {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("SkillPostdelay")
            .field("skid[0, 2]", &self.skid)
            .field("delay_tm[2, 6]", &self.delay_tm)
        .finish()
    }
}

pub struct CharacterList {
    pub dw_gid: u32,
    pub slot_idx: char,
}

impl CharacterList {
    pub fn from(buffer: &[u8]) -> CharacterList {
        CharacterList {
            dw_gid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            slot_idx: buffer[4] as char,
        }
    }
}

impl Debug for CharacterList {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CharacterList")
            .field("dw_gid[0, 4]", &self.dw_gid)
            .field("slot_idx[4, 5]", &self.slot_idx)
        .finish()
    }
}

pub struct BattleFieldInfo {
    pub bfno: u32,
    pub battle_field_name: String,
    pub join_team: u16,
}

impl BattleFieldInfo {
    pub fn from(buffer: &[u8]) -> BattleFieldInfo {
        BattleFieldInfo {
            bfno: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            battle_field_name: String::from_utf8_lossy(&buffer[4..60]).to_string(),
            join_team: u16::from_le_bytes([buffer[60], buffer[61]]),
        }
    }
}

impl Debug for BattleFieldInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("BattleFieldInfo")
            .field("bfno[0, 4]", &self.bfno)
            .field("battle_field_name[4, 60]", &self.battle_field_name)
            .field("join_team[60, 62]", &self.join_team)
        .finish()
    }
}

pub struct PartyBookingDetail {
    pub level: u16,
    pub map_id: u16,
    pub job: u16,
}

impl PartyBookingDetail {
    pub fn from(buffer: &[u8]) -> PartyBookingDetail {
        PartyBookingDetail {
            level: u16::from_le_bytes([buffer[0], buffer[1]]),
            map_id: u16::from_le_bytes([buffer[2], buffer[3]]),
            job: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Debug for PartyBookingDetail {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PartyBookingDetail")
            .field("level[0, 2]", &self.level)
            .field("map_id[2, 4]", &self.map_id)
            .field("job[4, 6]", &self.job)
        .finish()
    }
}

pub struct PartyBookingAdInfo {
    pub index: u32,
    pub char_name: String,
    pub expire_time: u32,
    pub detail: PartyBookingDetail,
}

impl PartyBookingAdInfo {
    pub fn from(buffer: &[u8]) -> PartyBookingAdInfo {
        PartyBookingAdInfo {
            index: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            char_name: String::from_utf8_lossy(&buffer[4..28]).to_string(),
            expire_time: u32::from_le_bytes([buffer[28], buffer[29], buffer[30], buffer[31]]),
            detail: PartyBookingDetail::from(&buffer[32..buffer.len()]),
        }
    }
}

impl Debug for PartyBookingAdInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PartyBookingAdInfo")
            .field("index[0, 4]", &self.index)
            .field("char_name[4, 28]", &self.char_name)
            .field("expire_time[28, 32]", &self.expire_time)
            .field("detail[32, ?]", &self.detail)
        .finish()
    }
}

pub struct ProductinfoInBuyingStore {
    pub itid: u16,
    pub count: u16,
    pub price: u32,
}

impl ProductinfoInBuyingStore {
    pub fn from(buffer: &[u8]) -> ProductinfoInBuyingStore {
        ProductinfoInBuyingStore {
            itid: u16::from_le_bytes([buffer[0], buffer[1]]),
            count: u16::from_le_bytes([buffer[2], buffer[3]]),
            price: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
        }
    }
}

impl Debug for ProductinfoInBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ProductinfoInBuyingStore")
            .field("itid[0, 2]", &self.itid)
            .field("count[2, 4]", &self.count)
            .field("price[4, 8]", &self.price)
        .finish()
    }
}

pub struct BuyingStoreItemlist {
    pub price: u32,
    pub count: u16,
    pub type_: char,
    pub itid: u16,
}

impl BuyingStoreItemlist {
    pub fn from(buffer: &[u8]) -> BuyingStoreItemlist {
        BuyingStoreItemlist {
            price: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
            type_: buffer[6] as char,
            itid: u16::from_le_bytes([buffer[7], buffer[8]]),
        }
    }
}

impl Debug for BuyingStoreItemlist {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("BuyingStoreItemlist")
            .field("price[0, 4]", &self.price)
            .field("count[4, 6]", &self.count)
            .field("type_[6, 7]", &self.type_)
            .field("itid[7, 9]", &self.itid)
        .finish()
    }
}

pub struct TradeItemBuyingStore {
    pub index: u16,
    pub itid: u16,
    pub count: u16,
}

impl TradeItemBuyingStore {
    pub fn from(buffer: &[u8]) -> TradeItemBuyingStore {
        TradeItemBuyingStore {
            index: u16::from_le_bytes([buffer[0], buffer[1]]),
            itid: u16::from_le_bytes([buffer[2], buffer[3]]),
            count: u16::from_le_bytes([buffer[4], buffer[5]]),
        }
    }
}

impl Debug for TradeItemBuyingStore {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("TradeItemBuyingStore")
            .field("index[0, 2]", &self.index)
            .field("itid[2, 4]", &self.itid)
            .field("count[4, 6]", &self.count)
        .finish()
    }
}

pub struct ResultItemInfo {
    pub ssiid: u32,
    pub aid: u32,
    pub store_name: String,
    pub itid: u16,
    pub item_type: char,
    pub price: u32,
    pub count: u16,
    pub refining_level: char,
    pub card1: u16,
    pub card2: u16,
    pub card3: u16,
    pub card4: u16,
}

impl ResultItemInfo {
    pub fn from(buffer: &[u8]) -> ResultItemInfo {
        ResultItemInfo {
            ssiid: u32::from_le_bytes([buffer[0], buffer[1], buffer[2], buffer[3]]),
            aid: u32::from_le_bytes([buffer[4], buffer[5], buffer[6], buffer[7]]),
            store_name: String::from_utf8_lossy(&buffer[8..88]).to_string(),
            itid: u16::from_le_bytes([buffer[88], buffer[89]]),
            item_type: buffer[90] as char,
            price: u32::from_le_bytes([buffer[91], buffer[92], buffer[93], buffer[94]]),
            count: u16::from_le_bytes([buffer[95], buffer[96]]),
            refining_level: buffer[97] as char,
            card1: u16::from_le_bytes([buffer[98], buffer[99]]),
            card2: u16::from_le_bytes([buffer[100], buffer[101]]),
            card3: u16::from_le_bytes([buffer[102], buffer[103]]),
            card4: u16::from_le_bytes([buffer[104], buffer[105]]),
        }
    }
}

impl Debug for ResultItemInfo {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ResultItemInfo")
            .field("ssiid[0, 4]", &self.ssiid)
            .field("aid[4, 8]", &self.aid)
            .field("store_name[8, 88]", &self.store_name)
            .field("itid[88, 90]", &self.itid)
            .field("item_type[90, 91]", &self.item_type)
            .field("price[91, 95]", &self.price)
            .field("count[95, 97]", &self.count)
            .field("refining_level[97, 98]", &self.refining_level)
            .field("card1[98, 100]", &self.card1)
            .field("card2[100, 102]", &self.card2)
            .field("card3[102, 104]", &self.card3)
            .field("card4[104, 106]", &self.card4)
        .finish()
    }
}

#[derive(Debug)]
pub struct PacketUnknown {
    packet_id: String,
}
impl Packet for PacketUnknown {
    fn id(&self) -> &str {
        self.packet_id.as_str()
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
}
impl PacketUnknown {
    pub fn from(buffer: &[u8]) -> PacketUnknown {
        PacketUnknown { packet_id: format!("{:02X?}{:02X?}", buffer[0], buffer[1])}
    }
}
