use crate::{Condition, PacketStructDefinition, StructDefinition, StructField};
use std::fs::File;
use std::io::Write;
use std::path::Path;

pub fn write_packets_struct(packets: Vec<PacketStructDefinition>, nested_structures: &Vec<StructDefinition>, output_path: &Path) {
    let file_packets_res = File::create(output_path.join("packets.rs"));
    let file_packets_impl_res = File::create(output_path.join("packets_impl.rs"));
    let file_print_res = File::create(output_path.join("packets_print.rs"));
    let file_packets_parser_res = File::create(output_path.join("packets_parser.rs"));
    let mut file_packets = file_packets_res.unwrap();
    let mut file_packets_print = file_print_res.unwrap();
    let mut file_packets_impl = file_packets_impl_res.unwrap();
    let mut file_packets_parser = file_packets_parser_res.unwrap();
    write_file_header(&mut file_packets);
    write_file_header(&mut file_packets_print);
    write_file_header(&mut file_packets_impl);
    write_file_header(&mut file_packets_parser);

    file_packets.write_all(format!("#![allow(dead_code)]\n\n").as_bytes()).unwrap();
    file_packets.write_all(format!("use std::any::Any;\n\n").as_bytes()).unwrap();

    file_packets_print.write_all(format!("#![allow(dead_code)]\n\n").as_bytes()).unwrap();
    file_packets_print.write_all(format!("use crate::packets::*;\n").as_bytes()).unwrap();
    file_packets_print.write_all(format!("use std::fmt::{{Formatter, Debug, Display}};\n").as_bytes()).unwrap();
    file_packets_print.write_all(format!("use crate::print::PrettyOutput;\n\n").as_bytes()).unwrap();

    file_packets_parser.write_all(format!("use crate::packets::*;\n\n").as_bytes()).unwrap();

    file_packets_impl.write_all(format!("#![allow(dead_code)]\n\n").as_bytes()).unwrap();
    file_packets_impl.write_all(format!("#![allow(unused_assignments)]\n\n").as_bytes()).unwrap();
    file_packets_impl.write_all(format!("#![allow(unused_variables)]\n\n").as_bytes()).unwrap();
    file_packets_impl.write_all(format!("use crate::packets::*;\n").as_bytes()).unwrap();
    file_packets_impl.write_all(format!("use byteorder::{{LittleEndian,WriteBytesExt}};\n").as_bytes()).unwrap();
    file_packets_impl.write_all(format!("use std::any::Any;\n").as_bytes()).unwrap();
    file_packets_impl.write_all(format!("use std::convert::TryInto;\n\n").as_bytes()).unwrap();

    write_packet_parser(&mut file_packets_parser, &packets);
    write_packet_trait(&mut file_packets);
    for packet in packets {
        write_struct_definition(&mut file_packets, &packet.struct_def);
        write_struct_impl(&mut file_packets_impl, &packet.struct_def, Some(packet.id.clone()));
        write_packet_trait_impl(&mut file_packets_impl, &packet);
        write_default_trait_impl(&mut file_packets_impl, &packet.struct_def);
        write_debug_trait(&mut file_packets_print, &packet.struct_def, true);
        write_display_trait(&mut file_packets_print, &packet.struct_def, true);
    }

    for nested_struct in nested_structures {
        write_struct_definition(&mut file_packets, &nested_struct);
        write_default_trait_impl(&mut file_packets_impl, &nested_struct);
        write_struct_impl(&mut file_packets_impl, &nested_struct, None);
        write_debug_trait(&mut file_packets_print, &nested_struct, false);
        write_display_trait(&mut file_packets_print, &nested_struct, false);
    }
    write_unknown_packet(&mut file_packets);
}

fn write_file_header(file: &mut File) {
    file.write_all(format!("// Generated by tools/packets_db/main.rs\n").as_bytes()).unwrap();
    file.write_all(format!("// Auto generated file do not edit manually\n\n").as_bytes()).unwrap();
}

fn write_packet_parser(file: &mut File, packets: &Vec<PacketStructDefinition>) {
    file.write_all(format!("pub fn parse(buffer: &[u8], packetver: u32) -> Box<dyn Packet> {{\n").as_bytes()).unwrap();
    for packet in packets {
        for id in packet.ids.iter() {
            let packet_id = packet_id(id.clone()).replace("0x", "");
            let (first_byte, second_byte) = packet_id.split_at(2);
            file.write_all(format!("    if buffer[0] == 0x{} && buffer[1] == 0x{} {{\n", first_byte, second_byte).as_bytes()).unwrap();
            file.write_all(format!("        return Box::new({}::from(buffer, packetver));\n", packet.struct_def.name).as_bytes()).unwrap();
            file.write_all(format!("    }}\n").as_bytes()).unwrap();
        }
    }
    file.write_all(format!("    Box::new(PacketUnknown::from(buffer))\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_packet_trait(file: &mut File) {
    file.write_all(format!("pub trait Packet {{\n").as_bytes()).unwrap();
    file.write_all(format!("    fn id(&self) -> &str;\n").as_bytes()).unwrap();
    file.write_all(format!("    fn display(&self);\n").as_bytes()).unwrap();
    file.write_all(format!("    fn debug(&self);\n").as_bytes()).unwrap();
    file.write_all(format!("    fn pretty_debug(&self);\n").as_bytes()).unwrap();
    file.write_all(format!("    fn raw(&self) -> &Vec<u8>;\n").as_bytes()).unwrap();
    file.write_all(format!("    fn as_any(&self) -> &dyn Any;\n").as_bytes()).unwrap();
    file.write_all(format!("    fn as_any_mut(&mut self) -> &mut dyn Any;\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_packet_trait_impl(file: &mut File, packet: &PacketStructDefinition) {
    file.write_all(format!("impl Packet for {} {{\n", packet.struct_def.name).as_bytes()).unwrap();
    file.write_all(format!("    fn id(&self) -> &str {{\n").as_bytes()).unwrap();
    let id = packet_id(packet.id.clone());
    file.write_all(format!("       \"{}\"\n", id).as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn debug(&self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("            println!(\"{{:?}}\", self)\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn display(&self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("            println!(\"{{}}\", self)\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn pretty_debug(&self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("            println!(\"{{:#?}}\", self)\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn raw(&self) -> &Vec<u8> {{\n").as_bytes()).unwrap();
    file.write_all(format!("            &self.raw\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn as_any(&self) -> &dyn Any{{\n").as_bytes()).unwrap();
    file.write_all(format!("        self\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn as_any_mut(&mut self) -> &mut dyn Any{{\n").as_bytes()).unwrap();
    file.write_all(format!("        self\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}


fn write_default_trait_impl(file: &mut File, struct_definition: &StructDefinition) {
    file.write_all(format!("impl Default for {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("    fn default() -> Self {{\n\n").as_bytes()).unwrap();
    file.write_all(format!("       Self::new()\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_debug_trait(file: &mut File, struct_definition: &StructDefinition, is_packet: bool) {
    file.write_all(format!("impl Debug for {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {{\n").as_bytes()).unwrap();
    file.write_all(format!("        f.debug_struct(\"{}\")\n", struct_definition.name).as_bytes()).unwrap();
    if is_packet {
        file.write_all(format!("            .field(\"id\", &self.id())\n").as_bytes()).unwrap();
    }
    for field in &struct_definition.fields {
        file.write_all(format!("            .field(\"{}{}\", &format!(\"{{:02X?}}\", &self.{}_raw))\n",
                               field.name,
                               format!("[{}, {}]", field.position, if field.length > -1 { (field.position + field.length).to_string() } else { "?".to_string() }),
                               field.name
        ).as_bytes()).unwrap();
    }
    file.write_all(format!("        .finish()\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_display_trait(file: &mut File, struct_definition: &StructDefinition, _is_packet: bool) {
    file.write_all(format!("impl Display for {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {{\n").as_bytes()).unwrap();
    file.write_all(format!("        let mut fields = Vec::new();\n").as_bytes()).unwrap();
    for field in &struct_definition.fields {
        let value_to_print;
        if field.data_type.name == "Array" {
            value_to_print = format!("&self.{}.pretty_output()", field.name);
        } else if field.data_type.name == "Vec" {
            value_to_print = format!("&self.{}.iter().map(|item| format!(\"\n  >{{}}\", item)).collect::<String>()", field.name);
        } else {
            value_to_print = format!("&self.{}", field.name);
        }
        file.write_all(format!("        fields.push(format!(\"{}{}{}: {{}}\", {}));\n",
                               field.name,
                               display_type(&field),
                               format!("[{}, {}]", field.position, if field.length > -1 { (field.position + field.length).to_string() } else { "?".to_string() }),
                               value_to_print
        ).as_bytes()).unwrap();
    }
    file.write_all(format!("        write!(f, \"{}\\n {{}}\", fields.join(\",\\n \"))\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_struct_definition(file: &mut File, struct_definition: &StructDefinition) {
    file.write_all(format!("#[derive(Clone)]\n").as_bytes()).unwrap();
    file.write_all(format!("pub struct {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("    pub raw: Vec<u8>,\n").as_bytes()).unwrap();
    for field in &struct_definition.fields {
        file.write_all(format!("    pub {}: {},\n", field.name, field_type(field)).as_bytes()).unwrap();
        file.write_all(format!("    pub {}_raw: {},\n", field.name, field_type_raw(field)).as_bytes()).unwrap();
    }
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_struct_impl(file: &mut File, struct_definition: &StructDefinition, packet_id: Option<String>) {
    file.write_all(format!("impl {} {{\n", struct_definition.name).as_bytes()).unwrap();
    if packet_id.is_some() {
        write_struct_packet_id_method(file, &packet_id);
    }
    write_struct_from_method(file, struct_definition);
    write_struct_fill_raw_method(file);
    write_struct_fill_raw_with_packetver_method(file, struct_definition);
    write_struct_base_len_method(file, struct_definition);
    write_struct_setter_methods(file, struct_definition);
    write_struct_new_method(file, struct_definition, &packet_id);
    file.write_all(format!("}}\n\n").as_bytes()).unwrap();
}

fn write_struct_from_method(file: &mut File, struct_definition: &StructDefinition) {
    file.write_all(format!("    pub fn from(buffer: &[u8], packetver: u32) -> {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("        let mut offset: usize = 0;\n").as_bytes()).unwrap();
    let field_with_vec = struct_definition.fields.iter().find(|field| field.data_type.name == "Vec");
    if field_with_vec.is_some() {
        write_vec_field(file, &field_with_vec.unwrap());
    }
    file.write_all(format!("        {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("            raw: buffer.to_vec(),\n").as_bytes()).unwrap();
    for field in &struct_definition.fields {
        if field.data_type.name == "Vec" {
            file.write_all(format!("            {}: {{\n", field.name).as_bytes()).unwrap();
            file.write_all(format!("                let field = vec_field.clone();\n").as_bytes()).unwrap();
            file.write_all(format!("                field\n").as_bytes()).unwrap();
            file.write_all(format!("            }},\n").as_bytes()).unwrap();
        } else if field.data_type.name == "Struct" {
            file.write_all(format!("            {}: {{\n", field.name).as_bytes()).unwrap();
            file.write_all(format!("                let field = {}::from(&buffer[offset..offset + {}::base_len(packetver)], packetver);\n", field.complex_type.as_ref().unwrap(), field.complex_type.as_ref().unwrap()).as_bytes()).unwrap();
            file.write_all(format!("                field\n").as_bytes()).unwrap();
            file.write_all(format!("            }},\n").as_bytes()).unwrap();
        } else {
            file.write_all(format!("            {}: {{\n", field.name).as_bytes()).unwrap();
            if field.condition.is_some() {
                file.write_all(format!("                let field = {}", packetver_if("packetver", field)).as_bytes()).unwrap();
                file.write_all(format!("                   {}\n", struct_impl_field_value(field)).as_bytes()).unwrap();
                file.write_all(format!("                }} else {{\n").as_bytes()).unwrap();
                file.write_all(format!("                   {}\n", struct_impl_default_field_value(field)).as_bytes()).unwrap();
                file.write_all(format!("                }};\n").as_bytes()).unwrap();
            } else {
                file.write_all(format!("                let field = {};\n", struct_impl_field_value(field)).as_bytes()).unwrap();
            }
            file.write_all(format!("                field\n").as_bytes()).unwrap();
            file.write_all(format!("            }},\n").as_bytes()).unwrap();
        }
        if &field.data_type.name == "Vec" {
            file.write_all(format!("            {}_raw: {{\n", field.name).as_bytes()).unwrap();
            file.write_all(format!("                let raw = vec_field.iter().map(|item| item.raw.clone()).collect::<Vec<Vec<u8>>>();\n").as_bytes()).unwrap();
            file.write_all(format!("                offset += raw.len();\n").as_bytes()).unwrap();
            file.write_all(format!("                raw\n").as_bytes()).unwrap();
            file.write_all(format!("            }},\n").as_bytes()).unwrap();
        } else if field.length > -1 {
            file.write_all(format!("            {}_raw: {{\n", field.name).as_bytes()).unwrap();
            file.write_all(format!("                let mut dst: [u8; {}] = [0u8; {}];\n", field_length(field), field_length(field)).as_bytes()).unwrap();
            if field.condition.is_some() {
                file.write_all(format!("                {}", packetver_if("packetver", field)).as_bytes()).unwrap();
                file.write_all(format!("                    dst.clone_from_slice(&buffer[offset..offset + {}]);\n", field_length(field)).as_bytes()).unwrap();
                file.write_all(format!("                    offset += {};\n", field.length).as_bytes()).unwrap();
                file.write_all(format!("                }}\n").as_bytes()).unwrap();
            } else {
                file.write_all(format!("                dst.clone_from_slice(&buffer[offset..offset + {}]);\n", field_length(field)).as_bytes()).unwrap();
                file.write_all(format!("                offset += {};\n", field.length).as_bytes()).unwrap();
            }
            file.write_all(format!("                dst\n").as_bytes()).unwrap();
            file.write_all(format!("            }},\n").as_bytes()).unwrap();
        } else {
            file.write_all(format!("            {}_raw: {{\n", field.name).as_bytes()).unwrap();
            file.write_all(format!("                let raw = buffer[offset..{}].to_vec();\n", field_length(field)).as_bytes()).unwrap();
            file.write_all(format!("                offset += raw.len();\n").as_bytes()).unwrap();
            file.write_all(format!("                raw\n").as_bytes()).unwrap();
            file.write_all(format!("            }},\n").as_bytes()).unwrap();
        }
    }
    file.write_all(format!("        }}\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
}

fn write_struct_fill_raw_method(file: &mut File) {
    file.write_all(format!("    pub fn fill_raw(&mut self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("      self.fill_raw_with_packetver(None)\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
}

fn write_struct_fill_raw_with_packetver_method(file: &mut File, struct_definition: &StructDefinition) {
    file.write_all(format!("    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {{\n").as_bytes()).unwrap();
    file.write_all(format!("    let mut wtr;\n").as_bytes()).unwrap();
    for field in &struct_definition.fields {
        file.write_all(field_serialization(field).as_bytes()).unwrap();
        file.write_all(format!("\n").as_bytes()).unwrap();
    }
    file.write_all(format!("\n").as_bytes()).unwrap();
    file.write_all(format!("        wtr = vec![];\n").as_bytes()).unwrap();
    for field in &struct_definition.fields {
        if field.data_type.name == "Vec" && field.complex_type.is_some() {
            file.write_all(format!("        self.{}.iter_mut().for_each(|item| wtr.append(&mut item.raw));\n", field.name).as_bytes()).unwrap();
        } else {
            if field.condition.is_none() {
                file.write_all(format!("        wtr.append(&mut self.{}_raw.to_vec());\n", field.name).as_bytes()).unwrap();
            } else {
                file.write_all(format!("        if packetver.is_none() {{\n").as_bytes()).unwrap();
                file.write_all(format!("          wtr.append(&mut self.{}_raw.to_vec());\n", field.name).as_bytes()).unwrap();
                file.write_all(format!("        }} else {}", packetver_if("packetver.unwrap()", field)).as_bytes()).unwrap();
                file.write_all(format!("            wtr.append(&mut self.{}_raw.to_vec());\n", field.name).as_bytes()).unwrap();
                file.write_all(format!("        }}\n").as_bytes()).unwrap();
            }
        }
    }
    file.write_all(format!("        self.raw = wtr;\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
}

fn write_struct_setter_methods(file: &mut File, struct_definition: &StructDefinition) {
    for field in &struct_definition.fields {
        file.write_all(format!("    pub fn set_{}(&mut self, value: {}) {{\n", field.name, field_type(field)).as_bytes()).unwrap();
        file.write_all(format!("        self.{} = value;\n", field.name).as_bytes()).unwrap();
        file.write_all(format!("    }}\n").as_bytes()).unwrap();
        file.write_all(format!("    pub fn set_{}_raw(&mut self, value: {}) {{\n", field.name, field_type_raw(field)).as_bytes()).unwrap();
        file.write_all(format!("        self.{}_raw = value;\n", field.name).as_bytes()).unwrap();
        file.write_all(format!("    }}\n").as_bytes()).unwrap();
    }
}

fn write_struct_base_len_method(file: &mut File, struct_definition: &StructDefinition) {
    file.write_all(format!("    pub fn base_len(packetver: u32) -> usize {{\n").as_bytes()).unwrap();
    let base_len_is_mut = struct_definition.fields.iter().filter(|f| f.condition.is_some()).count() > 0;
    file.write_all(format!("        let {} base_len: usize = {};\n", if base_len_is_mut { "mut" } else { "" }, struct_definition.fields.iter().filter(|f| f.condition.is_none()).map(|f| f.length).sum::<i16>()).as_bytes()).unwrap();
    for f in struct_definition.fields.iter().filter(|f| f.condition.is_some()) {
        file.write_all(format!("        {}", packetver_if("packetver", f)).as_bytes()).unwrap();
        file.write_all(format!("            base_len += {};\n", f.length).as_bytes()).unwrap();
        file.write_all(format!("        }}\n").as_bytes()).unwrap();
    }
    file.write_all(format!("        base_len\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
}

fn write_struct_packet_id_method(file: &mut File, id: &Option<String>) {
    file.write_all(format!("    pub fn packet_id() -> &'static str {{\n").as_bytes()).unwrap();
    file.write_all(format!("        \"{}\"\n", packet_id(id.clone().unwrap())).as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
}

fn write_struct_new_method(file: &mut File, struct_definition: &StructDefinition, packet_id: &Option<String>) {
    file.write_all(format!("    pub fn new() -> {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("        {} {{\n", struct_definition.name).as_bytes()).unwrap();
    file.write_all(format!("        raw: vec![],\n").as_bytes()).unwrap();
    for field in &struct_definition.fields {
        if field.name == "packet_id" && packet_id.is_some() {
            let id = packet_id.clone().unwrap().replace("0x", "");
            let (first_byte, second_byte) = id.split_at(2);
            let mut second_byte = second_byte;
            if second_byte == "" {
                second_byte = "0"
            }
            file.write_all(format!("        packet_id: i16::from_le_bytes([0x{}, 0x{}]),\n", first_byte, second_byte).as_bytes()).unwrap();
            file.write_all(format!("        packet_id_raw: [0x{}, 0x{}],\n", first_byte, second_byte).as_bytes()).unwrap();
        } else {
            file.write_all(field_default_value(field).as_bytes()).unwrap();
        }
    }
    file.write_all(format!("        }}\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
}

fn write_vec_field(file: &mut File, field: &StructField) {
    file.write_all(format!("        let vec_type_len = {}::base_len(packetver);\n", field.complex_type.as_ref().unwrap()).as_bytes()).unwrap();
    file.write_all(format!("        let iter_count = (&buffer.len() - {}) / vec_type_len;\n", field.position).as_bytes()).unwrap();
    file.write_all(format!("        let mut vec_field: Vec<{}> = Vec::new();\n", field.complex_type.as_ref().unwrap()).as_bytes()).unwrap();
    file.write_all(format!("        let mut i = 1;\n").as_bytes()).unwrap();
    file.write_all(format!("        while i <= iter_count {{\n").as_bytes()).unwrap();
    file.write_all(format!("            let start_pos = {} + (vec_type_len * (i - 1));\n", field.position).as_bytes()).unwrap();
    file.write_all(format!("            let end_pos = {} + vec_type_len * i;\n", field.position).as_bytes()).unwrap();
    file.write_all(format!("            vec_field.push({}::from(&buffer[start_pos..end_pos], packetver));\n", field.complex_type.as_ref().unwrap()).as_bytes()).unwrap();
    file.write_all(format!("            i += 1;\n").as_bytes()).unwrap();
    file.write_all(format!("        }}\n").as_bytes()).unwrap();
}

fn write_unknown_packet(file: &mut File) {
    file.write_all(format!("#[derive(Debug)]\n").as_bytes()).unwrap();
    file.write_all(format!("pub struct PacketUnknown {{\n").as_bytes()).unwrap();
    file.write_all(format!("    pub raw: Vec<u8>,\n").as_bytes()).unwrap();
    file.write_all(format!("    pub packet_id: String,\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n").as_bytes()).unwrap();
    file.write_all(format!("impl Packet for PacketUnknown {{\n").as_bytes()).unwrap();
    file.write_all(format!("    fn id(&self) -> &str {{\n").as_bytes()).unwrap();
    file.write_all(format!("        self.packet_id.as_str()\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn debug(&self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("            println!(\"{{:?}}\", self)\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn display(&self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("            self.debug()\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn pretty_debug(&self) {{\n").as_bytes()).unwrap();
    file.write_all(format!("            self.debug()\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn raw(&self) -> &Vec<u8> {{\n").as_bytes()).unwrap();
    file.write_all(format!("            &self.raw\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn as_any(&self) -> &dyn Any{{\n").as_bytes()).unwrap();
    file.write_all(format!("        self\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("    fn as_any_mut(&mut self) -> &mut dyn Any{{\n").as_bytes()).unwrap();
    file.write_all(format!("        self\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n").as_bytes()).unwrap();
    file.write_all(format!("impl PacketUnknown {{\n").as_bytes()).unwrap();
    file.write_all(format!("    pub fn from(buffer: &[u8]) -> PacketUnknown {{\n").as_bytes()).unwrap();
    file.write_all(format!("        PacketUnknown {{ raw: buffer.to_vec(), packet_id: format!(\"0x{{:02X?}}{{:02X?}}\", buffer[0], buffer[1])}}\n").as_bytes()).unwrap();
    file.write_all(format!("    }}\n").as_bytes()).unwrap();
    file.write_all(format!("}}\n").as_bytes()).unwrap();
}


fn struct_impl_field_value(field: &StructField) -> String {
    match field.data_type.name.as_str() {
        "char" => {
            String::from("buffer[offset] as char")
        }
        "u8" => {
            String::from("u8::from_le_bytes([buffer[offset]])")
        }
        "i8" => {
            String::from("i8::from_le_bytes([buffer[offset]])")
        }
        "u16" => {
            String::from("u16::from_le_bytes([buffer[offset], buffer[offset + 1]])")
        }
        "i16" => {
            String::from("i16::from_le_bytes([buffer[offset], buffer[offset + 1]])")
        }
        "u32" => {
            String::from("u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])")
        }
        "i32" => {
            String::from("i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])")
        }
        "u64" => {
            String::from("u64::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3], buffer[offset + 4], buffer[offset + 5], buffer[offset + 6], buffer[offset + 7]])")
        }
        "i64" => {
            String::from("i64::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3], buffer[offset + 4], buffer[offset + 5], buffer[offset + 6], buffer[offset + 7]])")
        }
        "bool" => {
            String::from("buffer[offset] == 1")
        }
        "String" => {
            format!("String::from_utf8_lossy(&buffer[offset..offset + buffer.len()]).to_string()")
        }
        "Array" => {
            let mut array_block = " {\n".to_string();
            let length = &field.length;
            if field.sub_type.is_some() {
                let sub_type_name = &field.sub_type.unwrap().name;
                if sub_type_name == "char" {
                    array_block = format!("{}                let mut dst: [{}; {}] = [0 as {}; {}];\n", array_block, sub_type_name, length, sub_type_name, length);
                } else {
                    array_block = format!("{}                let mut dst: [{}; {}] = [0_{}; {}];\n", array_block, sub_type_name, length, sub_type_name, length);
                }

                array_block = format!("{}                for (index, byte) in buffer[offset..offset + {}].iter().enumerate() {{\n", array_block, field.length);
                array_block = format!("{}                    dst[index] = *byte as {};\n", array_block, sub_type_name);
                array_block = format!("{}                }}\n", array_block);
            } else if field.length > -1 {
                array_block = format!("{}                let mut dst: [u8; {}] = [0; {}];\n", array_block, length, length);
                array_block = format!("{}                dst.clone_from_slice(&buffer[offset..offset + {}]);\n", array_block, field.length);
            } else {
                array_block = format!("{}                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();\n", array_block);
            }
            array_block = format!("{}                dst\n            }}", array_block);
            array_block
        }
        _ => {
            format!("\"found unknown type {} for field {}. this won't compile!\"", field.data_type.name, field.name)
        }
    }
}

fn struct_impl_default_field_value(field: &StructField) -> String {
    match field.data_type.name.as_str() {
        "char" => {
            String::from("0 as char")
        }
        "u8" => {
            String::from("0 as u8")
        }
        "i8" => {
            String::from("0 as i8")
        }
        "u16" => {
            String::from("0 as u16")
        }
        "i16" => {
            String::from("0 as i16")
        }
        "u32" => {
            String::from("0 as u32")
        }
        "i32" => {
            String::from("0 as i32")
        }
        "u64" => {
            String::from("0 as u64")
        }
        "i64" => {
            String::from("0 as i64")
        }
        "bool" => {
            String::from("false")
        }
        "String" => {
            String::from("String::new()")
        }
        "Array" => {
            if field.sub_type.is_some() {
                let sub_type_name = &field.sub_type.unwrap().name;
                let length = &field.length;
                if sub_type_name == "char" {
                    format!("[0 as char; {}]", length)
                } else {
                    format!("[{}; {}]", sub_type_name, length)
                }
            } else if field.length > -1 {
                format!("[0 as u8; {}]", field.length)
            } else {
                String::from("vec![]")
            }
        }
        _ => {
            format!("\"found unknown type {} for field {}. this won't compile!\"", field.data_type.name, field.name)
        }
    }
}

fn field_serialization(field: &StructField) -> String {
    let mut res = String::new();
    match field.data_type.name.as_str() {
        "char" => {
            res = "        wtr = vec![];\n".to_string();
            res = format!("{}        wtr.write_u8(self.{}).unwrap();\n", res, field.name);
            res = format!("{}        self.{}_raw = wtr.try_into().unwrap();", res, field.name);
            res
        }
        "bool" => {
            res = "        wtr = vec![];\n".to_string();
            res = format!("{}        wtr.write_u8(self.{} as u8).unwrap();\n", res, field.name);
            res = format!("{}        self.{}_raw = wtr.try_into().unwrap();", res, field.name);
            res
        }
        "u8" | "i8" => {
            res = "        wtr = vec![];\n".to_string();
            res = format!("{}        wtr.write_{}(self.{}).unwrap();\n", res, field.data_type.name, field.name);
            res = format!("{}        self.{}_raw = wtr.try_into().unwrap();", res, field.name);
            res
        }
        "u16" | "i16" | "u32" | "i32" | "u64" | "i64" => {
            res = "        wtr = vec![];\n".to_string();
            res = format!("{}        wtr.write_{}::<LittleEndian>(self.{}).unwrap();\n", res, field.data_type.name, field.name);
            res = format!("{}        self.{}_raw = wtr.try_into().unwrap();", res, field.name);
            res
        }
        "String" => {
            format!("        self.{}_raw = self.{}.as_bytes().to_vec();", field.name, field.name)
        }
        "Array" => {
            if field.sub_type.is_some() {
                res = "        wtr = vec![];\n".to_string();
                let sub_type = field.sub_type.unwrap();
                if sub_type.name == "u8" || sub_type.name == "i8" {
                    res = format!("{}        for item in self.{} {{\n", res, field.name);
                    res = format!("{}            wtr.write_{}(item).unwrap();\n", res, sub_type.name);
                    res = format!("{}        }}\n", res);
                } else if sub_type.name == "char" {
                    res = format!("{}        for item in self.{} {{\n", res, field.name);
                    res = format!("{}            wtr.write_u8(item as u8 ).unwrap();\n", res);
                    res = format!("{}        }}\n", res);
                } else {
                    res = format!("{}        for item in self.{} {{\n", res, field.name);
                    res = format!("{}            wtr.write_{}::<LittleEndian>(item).unwrap();\n", res, sub_type.name);
                    res = format!("{}        }}\n", res);
                }
                res = format!("{}        self.{}_raw = wtr.try_into().unwrap();", res, field.name);
                res
            } else {
                res
            }
        }
        "Vec" => {
            if field.complex_type.is_some() {
                res = format!("        self.{}_raw = {{\n", field.name);
                res = format!("{}            self.{}.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));\n", res, field.name);
                res = format!("{}            self.{}.iter().map(|item| item.raw.clone()).collect()\n", res, field.name);
                res = format!("{}      }};\n", res);
                res
            } else {
                format!("\"found unknown type {} for field {}. this won't compile!\"", field.data_type.name, field.name)
            }
        }
        "Struct" => {
            if field.complex_type.is_some() {
                res = format!("        self.{}.fill_raw_with_packetver(packetver);\n", field.name);
                if field.length > -1 {
                    res = format!("{}        self.{}_raw = self.{}.clone().raw.try_into().unwrap();\n", res, field.name, field.name);
                } else {
                    res = format!("{}        self.{}_raw = self.{}.clone().raw;\n", res, field.name, field.name);
                }
                res
            } else {
                format!("\"found unknown type {} for field {}. this won't compile!\"", field.data_type.name, field.name)
            }
        }
        _ => {
            format!("\"found unknown type {} for field {}. this won't compile!\"", field.data_type.name, field.name)
        }
    }
}

fn field_length(field: &StructField) -> String {
    if field.length > -1 { (field.length).to_string() } else { "buffer.len()".to_string() }
}

fn packet_id(packet_id: String) -> String {
    let mut id = packet_id.clone();
    if packet_id.len() == 4 {
        id = format!("{:0<6}", packet_id);
    } else if packet_id.len() == 5 {
        id = packet_id.replace("0x", "0x0");
    }
    id
}

fn display_type(field: &StructField) -> String {
    if field.data_type.name == "Array" && field.sub_type.is_some() {
        let sub_type = field.sub_type.unwrap();
        return format!("({}[] as {}[])", sub_type.cname, sub_type.name);
    }

    format!("({} as {})", field.data_type.cname, field.data_type.name)
}

fn field_type(field: &StructField) -> String {
    if field.data_type.name == "Vec" {
        format!("Vec<{}>", field.complex_type.as_ref().unwrap())
    } else if field.data_type.name == "Struct" {
        field.complex_type.as_ref().unwrap().to_string()
    } else if field.data_type.name == "Array" {
        if field.sub_type.is_some() {
            format!("[{}; {}]", &field.sub_type.unwrap().name, field.length)
        } else {
            "Vec<u8>".to_string()
        }
    } else {
        format!("{}", field.data_type.name)
    }
}

fn field_type_raw(field: &StructField) -> String {
    if field.data_type.name == "Vec" {
        "Vec<Vec<u8>>".to_string()
    } else if field.length > -1 {
        format!("[u8; {}]", field.length)
    } else {
        "Vec<u8>".to_string()
    }
}

fn field_default_value(field: &StructField) -> String {
    let mut res = String::new();
    match field.data_type.name.as_str() {
        "char" => {
            res = format!("{}        {}: '',\n", res, field.name);
            res = format!("{}        {}_raw: 0,\n", res, field.name);
            res
        }
        "u8" | "i8" | "u16" | "i16" | "u32" | "i32" | "u64" | "i64" => {
            res = format!("{}        {}: 0,\n", res, field.name);
            res = format!("{}        {}_raw: [0; {}],\n", res, field.name, field.length);
            res
        }
        "bool" => {
            res = format!("{}        {}: false,\n", res, field.name);
            res = format!("{}        {}_raw: [0; 1],\n", res, field.name);
            res
        }
        "String" => {
            res = format!("{}        {}: String::new(),\n", res, field.name);
            res = format!("{}        {}_raw: vec![],\n", res, field.name);
            res
        }
        "Array" => {
            if field.length > -1 {
                let mut value = "0";
                if field.sub_type.unwrap().name == "char" {
                    value = "0 as char";
                }
                res = format!("{}        {}: [{}; {}],\n", res, field.name, value, field.length);
                res = format!("{}        {}_raw: [0; {}],\n", res, field.name, field.length);
                res
            } else {
                res = format!("{}        {}: vec![],\n", res, field.name);
                res = format!("{}        {}_raw: vec![],\n", res, field.name);
                res
            }
        }
        "Vec" => {
            res = format!("{}        {}: vec![],\n", res, field.name);
            res = format!("{}        {}_raw: vec![],\n", res, field.name);
            res
        }
        "Struct" => {
            res = format!("{}        {}: {}::new(),\n", res, field.name, field.complex_type.as_ref().unwrap());
            if field.length > -1 {
                res = format!("{}        {}_raw: [0; {}],\n", res, field.name, field.length);
            } else {
                res = format!("{}        {}_raw: vec![],\n", res, field.name);
            }
            res
        }
        _ => {
            panic!("\"found unknown type {} for field {}. this won't compile!\"", field.data_type.name, field.name)
        }
    }
}

fn packetver_if(packetver_variable: &str, field: &StructField) -> String {
    format!("if {} {} {{\n", packetver_variable,
            match field.condition.as_ref().unwrap() {
                Condition::GTE(ver) => format!(">= {}", ver),
                Condition::GT(ver) => format!("> {}", ver),
                Condition::LTE(ver) => format!("<= {}", ver),
                Condition::LT(ver) => format!("< {}", ver),
            })
}