use crate::{PacketStructDefinition, StructDefinition};
use std::fs::File;
use std::io::Write;
use std::path::Path;

pub fn write_packets_struct(packets: Vec<PacketStructDefinition>, nested_structures: &Vec<StructDefinition>, output_path: &Path) {
    let mut file_res = File::create(output_path);
    let mut file = file_res.unwrap();
    file.write(b"// Generated by tools/packets_db/main.rs\n").unwrap();
    file.write(b"// Auto generated file do not edit manually\n\n").unwrap();
    file.write(b"use std::fmt::{Formatter, Debug};\n\n").unwrap();
    write_packet_id_trait(&mut file);
    for packet in packets {
        write_struct_definition(&mut file, &packet.struct_def);
        write_packet_id_trait_impl(&mut file, &packet);
        write_struct_info_trait(&mut file, &packet.struct_def, true);
    }

    for nested_struct in nested_structures {
        write_struct_definition(&mut file, &nested_struct);
        write_struct_info_trait(&mut file, &nested_struct, false);
    }
}

fn write_packet_id_trait(file: &mut File) {
    file.write(b"pub trait PacketId {\n");
    file.write(b"  fn id(&self) -> &str;\n");
    file.write(b"}\n\n");
}


fn write_packet_id_trait_impl(file: &mut File, packet: &PacketStructDefinition) {
    file.write(format!("impl PacketId for {} {{\n", packet.struct_def.name).as_bytes());
    file.write(b"    fn id(&self) -> &str {\n");
    let mut id = packet.id.clone();
    if packet.id.len() == 4 {
        id = format!("{:0<6}", packet.id);
    } else if packet.id.len() == 5 {
        id = packet.id.replace("0x", "0x0");
    }
    file.write(format!("       \"{}\"\n", id).as_bytes());
    file.write(b"    }\n");
    file.write(b"}\n\n");
}

fn write_struct_definition(file: &mut File, struct_definition: &StructDefinition) {
    file.write(format!("pub struct {} {{\n", struct_definition.name).as_bytes());
    for field in &struct_definition.fields {
        if &field.data_type.name == "Vec" {
            file.write(format!("    pub {}: Vec<{}>,\n", field.name, &field.complex_type.as_ref().unwrap()).as_bytes());
        } else if &field.data_type.name == "Struct" {
            file.write(format!("    pub {}: {},\n", field.name, &field.complex_type.as_ref().unwrap()).as_bytes());
        } else {
            file.write(format!("    pub {}: {},\n", field.name, field.data_type.name).as_bytes());
        }
    }
    file.write(b"}\n\n");
}

fn write_struct_info_trait(file: &mut File, struct_definition: &StructDefinition, is_packet: bool) {
    file.write(format!("impl Debug for {} {{\n", struct_definition.name).as_bytes());
    file.write(b"    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {\n");
    file.write(format!("        f.debug_struct(\"{}\")\n", struct_definition.name).as_bytes());
    if is_packet {
        file.write(b"            .field(\"id\", &self.id())\n");
    }
    for field in &struct_definition.fields {
        file.write(format!("            .field(\"{}{}\", &self.{})\n",
                           field.name,
                           format!("[{}, {}]", field.position, if field.length > -1 { (i32::from(field.position) + field.length).to_string() } else { "?".to_string() }),
                           field.name
        ).as_bytes());
    }
    file.write(b"        .finish()\n");
    file.write(b"    }\n");
    file.write(b"}\n\n");
}
