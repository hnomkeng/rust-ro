// Generated by lib/script-interpreter/generator
// Auto generated file do not edit manually

#[derive(Clone, Debug)]
pub enum AssignmentExpressionTodo {
    ConditionalExpression(Box<crate::ast::conditional_expression::ConditionalExpression>),
    AssignmentExpressionTodo1{ unary_expression: Box<crate::ast::unary_expression::UnaryExpression>, assignment_operator: Box<crate::ast::assignment_operator::AssignmentOperator>, assignment_expression: Box<crate::ast::assignment_expression::AssignmentExpression> },
    UnaryExpression(Box<crate::ast::unary_expression::UnaryExpression>),
    
}

impl AssignmentExpressionTodo {
    pub fn build_from_conditional_expression(conditional_expression: Box<crate::ast::conditional_expression::ConditionalExpression>) -> Self {
        AssignmentExpressionTodo::ConditionalExpression(conditional_expression)
    }
    pub fn build_from_assignment_expression_todo1(unary_expression: Box<crate::ast::unary_expression::UnaryExpression>, assignment_operator: Box<crate::ast::assignment_operator::AssignmentOperator>, assignment_expression: Box<crate::ast::assignment_expression::AssignmentExpression>) -> Self {
        AssignmentExpressionTodo::AssignmentExpressionTodo1{ unary_expression, assignment_operator, assignment_expression }
    }
    pub fn build_from_unary_expression(unary_expression: Box<crate::ast::unary_expression::UnaryExpression>) -> Self {
        AssignmentExpressionTodo::UnaryExpression(unary_expression)
    }
}

impl crate::ast::expression::Expression for AssignmentExpressionTodo {
    fn accept(&self, visitor: Box<dyn crate::ast::visitor::Visitor>) {
        visitor.visit_assignment_expression_todo(self)
    }

}

