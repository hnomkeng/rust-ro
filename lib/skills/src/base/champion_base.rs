// Generated by tools/skills/main.rs
// Auto generated file do not edit manually

#![allow(dead_code, unused_must_use, unused_imports, unused_variables)]

use enums::{EnumWithMaskValueU64, EnumWithNumberValue};
use enums::skill::*;
use enums::weapon::AmmoType;

use models::item::WearWeapon;

use models::status::Status;
use models::item::NormalInventoryItem;

use crate::{SkillBase, Skill, SkillRequirementResult};

use crate::base::*;
// CH_PALMSTRIKE
pub struct RagingPalmStrike {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for RagingPalmStrike {
    fn _id(&self) -> u32 {
        370
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 2 { return Ok(2) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 4 { return Ok(4) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 6 { return Ok(6) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 8 { return Ok(8) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 10 { return Ok(10) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_state(&self, status: &Status) -> SkillRequirementResult<()> {
        if status.state > 0 {
            // ExplosionSpirits
            if status.state & 8388608 > 0 { Ok(()) } else { Err(()) }
        } else {
            Err(())
        }
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
        if self.level == 1 {
            return Some(3.000)
        }
        if self.level == 2 {
            return Some(4.000)
        }
        if self.level == 3 {
            return Some(5.000)
        }
        if self.level == 4 {
            return Some(6.000)
        }
        if self.level == 5 {
            return Some(7.000)
        }
        None
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       300
    }
}
// CH_TIGERFIST
pub struct GlacierFist {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for GlacierFist {
    fn _id(&self) -> u32 {
        371
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 4 { return Ok(4) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 6 { return Ok(6) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 8 { return Ok(8) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 10 { return Ok(10) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 12 { return Ok(12) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
}
// CH_CHAINCRUSH
pub struct ChainCrushCombo {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ChainCrushCombo {
    fn _id(&self) -> u32 {
        372
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 4 { return Ok(4) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 6 { return Ok(6) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 8 { return Ok(8) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 10 { return Ok(10) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 12 { return Ok(12) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 14 { return Ok(14) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 16 { return Ok(16) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 22 { return Ok(22) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
        if self.level == 1 {
            return -1
        }
        if self.level == 2 {
            return -1
        }
        if self.level == 3 {
            return -2
        }
        if self.level == 4 {
            return -2
        }
        if self.level == 5 {
            return -3
        }
        if self.level == 6 {
            return -3
        }
        if self.level == 7 {
            return -4
        }
        if self.level == 8 {
            return -4
        }
        if self.level == 9 {
            return -5
        }
        if self.level == 10 {
            return -5
        }
        0
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
        if self.level == 1 {
            return Some(5.000)
        }
        if self.level == 2 {
            return Some(6.000)
        }
        if self.level == 3 {
            return Some(7.000)
        }
        if self.level == 4 {
            return Some(8.000)
        }
        if self.level == 5 {
            return Some(9.000)
        }
        if self.level == 6 {
            return Some(10.000)
        }
        if self.level == 7 {
            return Some(11.000)
        }
        if self.level == 8 {
            return Some(12.000)
        }
        if self.level == 9 {
            return Some(13.000)
        }
        if self.level == 10 {
            return Some(14.000)
        }
        None
    }
}
// CH_SOULCOLLECT
pub struct Zen {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for Zen {
    fn _id(&self) -> u32 {
        401
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 20 { Ok(20) } else {Err(())}
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
       2000
    }
}
