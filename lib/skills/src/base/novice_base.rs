// Generated by tools/skills/main.rs
// Auto generated file do not edit manually

#![allow(dead_code, unused_must_use, unused_imports, unused_variables)]

use enums::{EnumWithMaskValueU64, EnumWithNumberValue};
use enums::skill::*;
use enums::weapon::AmmoType;

use models::item::WearWeapon;

use models::status::Status;
use models::item::NormalInventoryItem;

use crate::{SkillBase, Skill, SkillRequirementResult};

use crate::base::*;
// NV_BASIC
pub struct BasicSkill {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for BasicSkill {
    fn _id(&self) -> u32 {
        1
    }
    fn _level(&self) -> u8 {
        self.level
    }
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_hp(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_ammo(&self, character_ammo: Option<(AmmoType, u32)>) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_state(&self, status: &Status) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_zeny(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_spirit_sphere(&self,status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        Ok(None)
    }
    fn _validate_target(&self, target_type: SkillTargetType) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_weapon(&self, status: &Status) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_range(&self, status: &Status) -> SkillRequirementResult<()> {
         Ok(())
    }
    fn _skip_item_validation(&self, state: Option<u64>) -> bool {
        false
    }
    fn _base_cast_time(&self) -> u32 {
        0
    }
    fn _hit_count(&self) -> i8 {
        0
    }
    fn _base_after_cast_act_delay(&self) -> u32 {
        0
    }
    fn _base_after_cast_walk_delay(&self) -> u32 {
        0
    }
}
// NV_FIRSTAID
pub struct FirstAid {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for FirstAid {
    fn _id(&self) -> u32 {
        142
    }
    fn _level(&self) -> u8 {
        self.level
    }
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 3 { Ok(3) } else {Err(())}
    }
    fn _validate_hp(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_ammo(&self, character_ammo: Option<(AmmoType, u32)>) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_state(&self, status: &Status) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_zeny(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_spirit_sphere(&self,status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        Ok(None)
    }
    fn _validate_target(&self, target_type: SkillTargetType) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_weapon(&self, status: &Status) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_range(&self, status: &Status) -> SkillRequirementResult<()> {
         Ok(())
    }
    fn _skip_item_validation(&self, state: Option<u64>) -> bool {
        false
    }
    fn _base_cast_time(&self) -> u32 {
        0
    }
    fn _hit_count(&self) -> i8 {
       1
    }
    fn _base_after_cast_act_delay(&self) -> u32 {
        0
    }
    fn _base_after_cast_walk_delay(&self) -> u32 {
        0
    }
}
// NV_TRICKDEAD
pub struct PlayDead {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for PlayDead {
    fn _id(&self) -> u32 {
        143
    }
    fn _level(&self) -> u8 {
        self.level
    }
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 5 { Ok(5) } else {Err(())}
    }
    fn _validate_hp(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_ammo(&self, character_ammo: Option<(AmmoType, u32)>) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_state(&self, status: &Status) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_zeny(&self, status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_spirit_sphere(&self,status: &Status) -> SkillRequirementResult<u32> {
        Ok(0)
    }
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        Ok(None)
    }
    fn _validate_target(&self, target_type: SkillTargetType) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_weapon(&self, status: &Status) -> SkillRequirementResult<()> {
        Ok(())
    }
    fn _validate_range(&self, status: &Status) -> SkillRequirementResult<()> {
         Ok(())
    }
    fn _skip_item_validation(&self, state: Option<u64>) -> bool {
        false
    }
    fn _base_cast_time(&self) -> u32 {
        0
    }
    fn _hit_count(&self) -> i8 {
       1
    }
    fn _base_after_cast_act_delay(&self) -> u32 {
        0
    }
    fn _base_after_cast_walk_delay(&self) -> u32 {
        0
    }
}
