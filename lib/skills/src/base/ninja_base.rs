// Generated by tools/skills/main.rs
// Auto generated file do not edit manually

#![allow(dead_code, unused_must_use, unused_imports, unused_variables)]

use enums::{EnumWithMaskValueU64, EnumWithNumberValue};
use enums::skill::*;
use enums::weapon::AmmoType;

use models::item::WearWeapon;

use models::status::Status;
use models::item::NormalInventoryItem;

use crate::{SkillBase, Skill, SkillRequirementResult};

use crate::base::*;
// NJ_TOBIDOUGU
pub struct ShurikenTraining {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ShurikenTraining {
    fn _id(&self) -> u32 {
        522
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
}
// NJ_SYURIKEN
pub struct ThrowShuriken {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ThrowShuriken {
    fn _id(&self) -> u32 {
        523
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 2 { Ok(2) } else {Err(())}
    }
    #[inline(always)]
    fn _validate_ammo(&self, character_ammo: Option<(AmmoType, u32)>) -> SkillRequirementResult<u32> {
        if let Some(ammo_and_amount) = character_ammo {
            if ammo_and_amount.1 >= 1 && (64 & ammo_and_amount.0.as_flag()) > 0 { Ok(1) } else { Err(()) }
        } else {
            Err(())
        }
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
       Some(1.000)
    }
}
// NJ_KUNAI
pub struct ThrowKunai {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ThrowKunai {
    fn _id(&self) -> u32 {
        524
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 25 { return Ok(25) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 15 { return Ok(15) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 10 { return Ok(10) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_ammo(&self, character_ammo: Option<(AmmoType, u32)>) -> SkillRequirementResult<u32> {
        if let Some(ammo_and_amount) = character_ammo {
            if ammo_and_amount.1 >= 1 && (128 & ammo_and_amount.0.as_flag()) > 0 { Ok(1) } else { Err(()) }
        } else {
            Err(())
        }
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       3
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
       Some(3.000)
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_HUUMA
pub struct ThrowHuumaShuriken {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ThrowHuumaShuriken {
    fn _id(&self) -> u32 {
        525
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 25 { return Ok(25) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 35 { return Ok(35) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 40 { return Ok(40) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_weapon(&self, status: &Status) -> SkillRequirementResult<()> {
        if let Some(character_weapon) = status.right_hand_weapon() {
            if 4194304 & character_weapon.weapon_type.as_flag() > 0 { Ok(()) } else { Err(()) }
        } else {
            Err(())
        }
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
        if self.level == 1 {
            return -3
        }
        if self.level == 2 {
            return -3
        }
        if self.level == 3 {
            return -4
        }
        if self.level == 4 {
            return -4
        }
        if self.level == 5 {
            return -5
        }
        0
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
        if self.level == 1 {
            return Some(3.000)
        }
        if self.level == 2 {
            return Some(4.500)
        }
        if self.level == 3 {
            return Some(6.000)
        }
        if self.level == 4 {
            return Some(7.500)
        }
        if self.level == 5 {
            return Some(9.000)
        }
        None
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
       3000
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       2000
    }
}
// NJ_ZENYNAGE
pub struct ThrowZeny {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ThrowZeny {
    fn _id(&self) -> u32 {
        526
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 50 { Ok(50) } else {Err(())}
    }
    #[inline(always)]
    fn _validate_zeny(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.zeny >= 500 { return Ok(500) } else {return Err(())}
        }
        if self.level == 2 {
            if status.zeny >= 1000 { return Ok(1000) } else {return Err(())}
        }
        if self.level == 3 {
            if status.zeny >= 1500 { return Ok(1500) } else {return Err(())}
        }
        if self.level == 4 {
            if status.zeny >= 2000 { return Ok(2000) } else {return Err(())}
        }
        if self.level == 5 {
            if status.zeny >= 2500 { return Ok(2500) } else {return Err(())}
        }
        if self.level == 6 {
            if status.zeny >= 3000 { return Ok(3000) } else {return Err(())}
        }
        if self.level == 7 {
            if status.zeny >= 3500 { return Ok(3500) } else {return Err(())}
        }
        if self.level == 8 {
            if status.zeny >= 4000 { return Ok(4000) } else {return Err(())}
        }
        if self.level == 9 {
            if status.zeny >= 4500 { return Ok(4500) } else {return Err(())}
        }
        if self.level == 10 {
            if status.zeny >= 5000 { return Ok(5000) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       5000
    }
}
// NJ_TATAMIGAESHI
pub struct ImprovisedDefense {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ImprovisedDefense {
    fn _id(&self) -> u32 {
        527
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 15 { Ok(15) } else {Err(())}
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
        if self.level == 1 {
            return Some(1.100)
        }
        if self.level == 2 {
            return Some(1.200)
        }
        if self.level == 3 {
            return Some(1.300)
        }
        if self.level == 4 {
            return Some(1.400)
        }
        if self.level == 5 {
            return Some(1.500)
        }
        None
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       3000
    }
}
// NJ_KASUMIKIRI
pub struct VanishingSlash {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for VanishingSlash {
    fn _id(&self) -> u32 {
        528
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 10 { return Ok(10) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 12 { return Ok(12) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 14 { return Ok(14) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 16 { return Ok(16) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 22 { return Ok(22) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 26 { return Ok(26) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 28 { return Ok(28) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
        if self.level == 1 {
            return Some(1.100)
        }
        if self.level == 2 {
            return Some(1.200)
        }
        if self.level == 3 {
            return Some(1.300)
        }
        if self.level == 4 {
            return Some(1.400)
        }
        if self.level == 5 {
            return Some(1.500)
        }
        if self.level == 6 {
            return Some(1.600)
        }
        if self.level == 7 {
            return Some(1.700)
        }
        if self.level == 8 {
            return Some(1.800)
        }
        if self.level == 9 {
            return Some(1.900)
        }
        if self.level == 10 {
            return Some(2.000)
        }
        None
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_SHADOWJUMP
pub struct ShadowLeap {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ShadowLeap {
    fn _id(&self) -> u32 {
        529
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 10 { Ok(10) } else {Err(())}
    }
    #[inline(always)]
    fn _validate_state(&self, status: &Status) -> SkillRequirementResult<()> {
        if status.state > 0 {
            // Hidding
            if status.state & 2 > 0 { Ok(()) } else { Err(()) }
        } else {
            Err(())
        }
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_KIRIKAGE
pub struct ShadowSlash {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for ShadowSlash {
    fn _id(&self) -> u32 {
        530
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 14 { return Ok(14) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 16 { return Ok(16) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 22 { return Ok(22) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_state(&self, status: &Status) -> SkillRequirementResult<()> {
        if status.state > 0 {
            // Hidding
            if status.state & 2 > 0 { Ok(()) } else { Err(()) }
        } else {
            Err(())
        }
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _dmg_atk(&self) -> Option<f32> {
        if self.level == 1 {
            return Some(1.000)
        }
        if self.level == 2 {
            return Some(2.000)
        }
        if self.level == 3 {
            return Some(3.000)
        }
        if self.level == 4 {
            return Some(4.000)
        }
        if self.level == 5 {
            return Some(5.000)
        }
        None
    }
}
// NJ_UTSUSEMI
pub struct CicadaSkinSheeding {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for CicadaSkinSheeding {
    fn _id(&self) -> u32 {
        531
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 12 { return Ok(12) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 15 { return Ok(15) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 21 { return Ok(21) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_BUNSINJYUTSU
pub struct MirrorImage {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for MirrorImage {
    fn _id(&self) -> u32 {
        532
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 32 { return Ok(32) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 34 { return Ok(34) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 36 { return Ok(36) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 38 { return Ok(38) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 40 { return Ok(40) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 42 { return Ok(42) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 44 { return Ok(44) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 46 { return Ok(46) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 48 { return Ok(48) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7524, name_english: "Shadow_Orb".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7524 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 4000
        }
        if self.level == 2 {
            return 3500
        }
        if self.level == 3 {
            return 3000
        }
        if self.level == 4 {
            return 2500
        }
        if self.level == 5 {
            return 2000
        }
        if self.level == 6 {
            return 1500
        }
        if self.level == 7 {
            return 1000
        }
        if self.level == 8 {
            return 1000
        }
        if self.level == 9 {
            return 1000
        }
        if self.level == 10 {
            return 1000
        }
        0
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_NINPOU
pub struct SpiritoftheBlade {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for SpiritoftheBlade {
    fn _id(&self) -> u32 {
        533
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 10 { Ok(10) } else {Err(())}
    }
}
// NJ_KOUENKA
pub struct CrimsonFirePetal {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for CrimsonFirePetal {
    fn _id(&self) -> u32 {
        534
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 22 { return Ok(22) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 26 { return Ok(26) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 28 { return Ok(28) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 32 { return Ok(32) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 34 { return Ok(34) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 36 { return Ok(36) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
        if self.level == 1 {
            return 1
        }
        if self.level == 2 {
            return 2
        }
        if self.level == 3 {
            return 3
        }
        if self.level == 4 {
            return 4
        }
        if self.level == 5 {
            return 5
        }
        if self.level == 6 {
            return 6
        }
        if self.level == 7 {
            return 7
        }
        if self.level == 8 {
            return 8
        }
        if self.level == 9 {
            return 9
        }
        if self.level == 10 {
            return 10
        }
        0
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 700
        }
        if self.level == 2 {
            return 1400
        }
        if self.level == 3 {
            return 2100
        }
        if self.level == 4 {
            return 2800
        }
        if self.level == 5 {
            return 3500
        }
        if self.level == 6 {
            return 4200
        }
        if self.level == 7 {
            return 4900
        }
        if self.level == 8 {
            return 5600
        }
        if self.level == 9 {
            return 6300
        }
        if self.level == 10 {
            return 7000
        }
        0
    }
}
// NJ_KAENSIN
pub struct CrimsonFireFormation {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for CrimsonFireFormation {
    fn _id(&self) -> u32 {
        535
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if status.sp > 25 { Ok(25) } else {Err(())}
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7521, name_english: "Flame_Stone".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7521 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 6000
        }
        if self.level == 2 {
            return 5500
        }
        if self.level == 3 {
            return 5000
        }
        if self.level == 4 {
            return 4500
        }
        if self.level == 5 {
            return 4000
        }
        if self.level == 6 {
            return 3500
        }
        if self.level == 7 {
            return 3000
        }
        if self.level == 8 {
            return 2500
        }
        if self.level == 9 {
            return 2000
        }
        if self.level == 10 {
            return 1500
        }
        0
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_BAKUENRYU
pub struct RagingFireDragon {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for RagingFireDragon {
    fn _id(&self) -> u32 {
        536
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 25 { return Ok(25) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 35 { return Ok(35) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 40 { return Ok(40) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7521, name_english: "Flame_Stone".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7521 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       -3
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
       3000
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       2000
    }
}
// NJ_HYOUSENSOU
pub struct SpearofIce {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for SpearofIce {
    fn _id(&self) -> u32 {
        537
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 15 { return Ok(15) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 21 { return Ok(21) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 27 { return Ok(27) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 33 { return Ok(33) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 36 { return Ok(36) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 39 { return Ok(39) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 42 { return Ok(42) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
        if self.level == 1 {
            return 3
        }
        if self.level == 2 {
            return 4
        }
        if self.level == 3 {
            return 5
        }
        if self.level == 4 {
            return 6
        }
        if self.level == 5 {
            return 7
        }
        if self.level == 6 {
            return 8
        }
        if self.level == 7 {
            return 9
        }
        if self.level == 8 {
            return 10
        }
        if self.level == 9 {
            return 11
        }
        if self.level == 10 {
            return 12
        }
        0
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 700
        }
        if self.level == 2 {
            return 1400
        }
        if self.level == 3 {
            return 2100
        }
        if self.level == 4 {
            return 2800
        }
        if self.level == 5 {
            return 3500
        }
        if self.level == 6 {
            return 4200
        }
        if self.level == 7 {
            return 4900
        }
        if self.level == 8 {
            return 5600
        }
        if self.level == 9 {
            return 6300
        }
        if self.level == 10 {
            return 7000
        }
        0
    }
}
// NJ_SUITON
pub struct HiddenWater {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for HiddenWater {
    fn _id(&self) -> u32 {
        538
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 15 { return Ok(15) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 21 { return Ok(21) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 27 { return Ok(27) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 33 { return Ok(33) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 36 { return Ok(36) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 39 { return Ok(39) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 42 { return Ok(42) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7522, name_english: "Ice_Stone".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7522 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
       3000
    }
}
// NJ_HYOUSYOURAKU
pub struct IceMeteor {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for IceMeteor {
    fn _id(&self) -> u32 {
        539
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 40 { return Ok(40) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 45 { return Ok(45) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 50 { return Ok(50) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 55 { return Ok(55) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 60 { return Ok(60) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7522, name_english: "Ice_Stone".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7522 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 2000
        }
        if self.level == 2 {
            return 2500
        }
        if self.level == 3 {
            return 3000
        }
        if self.level == 4 {
            return 3500
        }
        if self.level == 5 {
            return 4000
        }
        0
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       2000
    }
}
// NJ_HUUJIN
pub struct WindBlade {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for WindBlade {
    fn _id(&self) -> u32 {
        540
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 12 { return Ok(12) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 14 { return Ok(14) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 16 { return Ok(16) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 18 { return Ok(18) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 22 { return Ok(22) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 26 { return Ok(26) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 28 { return Ok(28) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
        if self.level == 1 {
            return 1
        }
        if self.level == 2 {
            return 2
        }
        if self.level == 3 {
            return 2
        }
        if self.level == 4 {
            return 3
        }
        if self.level == 5 {
            return 3
        }
        if self.level == 6 {
            return 4
        }
        if self.level == 7 {
            return 4
        }
        if self.level == 8 {
            return 5
        }
        if self.level == 9 {
            return 5
        }
        if self.level == 10 {
            return 6
        }
        0
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 1000
        }
        if self.level == 2 {
            return 1500
        }
        if self.level == 3 {
            return 2000
        }
        if self.level == 4 {
            return 2500
        }
        if self.level == 5 {
            return 3000
        }
        if self.level == 6 {
            return 3500
        }
        if self.level == 7 {
            return 4000
        }
        if self.level == 8 {
            return 4500
        }
        if self.level == 9 {
            return 5000
        }
        if self.level == 10 {
            return 5500
        }
        0
    }
    #[inline(always)]
    fn _base_after_cast_act_delay(&self) -> u32 {
       1000
    }
}
// NJ_RAIGEKISAI
pub struct LightningStrikeofDestruction {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for LightningStrikeofDestruction {
    fn _id(&self) -> u32 {
        541
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 16 { return Ok(16) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 28 { return Ok(28) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 32 { return Ok(32) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7523, name_english: "Wind_Stone".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7523 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
       4000
    }
}
// NJ_KAMAITACHI
pub struct Kamaitachi {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for Kamaitachi {
    fn _id(&self) -> u32 {
        542
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 24 { return Ok(24) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 28 { return Ok(28) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 32 { return Ok(32) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 36 { return Ok(36) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 40 { return Ok(40) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _validate_item(&self, inventory: &Vec<NormalInventoryItem>) -> Result<Option<Vec<NormalInventoryItem>>, UseSkillFailure> {
        let required_items = vec![(NormalInventoryItem {item_id: 7523, name_english: "Wind_Stone".to_string(), amount: 1})]; 
        if inventory.iter().find(|item| item.item_id == 7523 && item.amount >= 1).is_none() {
            return Err(UseSkillFailure::NeedItem);
        }
        Ok(Some(required_items))
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
       4000
    }
}
// NJ_NEN
pub struct Soul {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for Soul {
    fn _id(&self) -> u32 {
        543
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 20 { return Ok(20) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 30 { return Ok(30) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 40 { return Ok(40) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 50 { return Ok(50) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 60 { return Ok(60) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
    #[inline(always)]
    fn _base_cast_time(&self) -> u32 {
        if self.level == 1 {
            return 5000
        }
        if self.level == 2 {
            return 4000
        }
        if self.level == 3 {
            return 3000
        }
        if self.level == 4 {
            return 2000
        }
        if self.level == 5 {
            return 1000
        }
        0
    }
}
// NJ_ISSEN
pub struct FinalStrike {
    pub(crate) level: u8,
    pub(crate) cast_time: u32,
    pub(crate) after_cast_act_delay: u32,
    pub(crate) after_cast_walk_delay: u32,
}
impl SkillBase for FinalStrike {
    fn _id(&self) -> u32 {
        544
    }
    fn _level(&self) -> u8 {
        self.level
    }
    #[inline(always)]
    fn _cast_time(&self) -> u32 {
        self.cast_time
    }
    #[inline(always)]
    fn _after_cast_act_delay(&self) -> u32 {
        self.after_cast_act_delay
    }
    #[inline(always)]
    fn _after_cast_walk_delay(&self) -> u32 {
        self.after_cast_walk_delay
    }
    #[inline(always)]
    fn _update_cast_time(&mut self, new_value: u32) {
        self.cast_time = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_act_delay(&mut self, new_value: u32) {
        self.after_cast_act_delay = new_value;
    }
    #[inline(always)]
    fn _update_after_cast_walk_delay(&mut self, new_value: u32) {
        self.after_cast_walk_delay = new_value;
    }
    #[inline(always)]
    fn _validate_sp(&self, status: &Status) -> SkillRequirementResult<u32> {
        if self.level == 1 {
            if status.sp >= 55 { return Ok(55) } else {return Err(())}
        }
        if self.level == 2 {
            if status.sp >= 60 { return Ok(60) } else {return Err(())}
        }
        if self.level == 3 {
            if status.sp >= 65 { return Ok(65) } else {return Err(())}
        }
        if self.level == 4 {
            if status.sp >= 70 { return Ok(70) } else {return Err(())}
        }
        if self.level == 5 {
            if status.sp >= 75 { return Ok(75) } else {return Err(())}
        }
        if self.level == 6 {
            if status.sp >= 80 { return Ok(80) } else {return Err(())}
        }
        if self.level == 7 {
            if status.sp >= 85 { return Ok(85) } else {return Err(())}
        }
        if self.level == 8 {
            if status.sp >= 90 { return Ok(90) } else {return Err(())}
        }
        if self.level == 9 {
            if status.sp >= 95 { return Ok(95) } else {return Err(())}
        }
        if self.level == 10 {
            if status.sp >= 100 { return Ok(100) } else {return Err(())}
        }
        Err(())
    }
    #[inline(always)]
    fn _hit_count(&self) -> i8 {
       1
    }
}
