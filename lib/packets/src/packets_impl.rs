// Generated by tools/packets_db/main.rs
// Auto generated file do not edit manually

#![allow(dead_code)]

#![allow(unused_assignments)]

#![allow(unused_variables)]

use crate::packets::*;
use byteorder::{LittleEndian,WriteBytesExt};
use std::any::Any;
use std::convert::TryInto;

impl PacketCaLogin {
    pub fn packet_id() -> &'static str {
        "0x6400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaLogin {
        let mut offset: usize = 0;
        PacketCaLogin {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            client_type: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            client_type_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.client_type).unwrap();
        self.client_type_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        wtr.append(&mut self.client_type_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 55;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 24]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 24]) {
        self.passwd_raw = value;
    }
    pub fn set_client_type(&mut self, value: u8) {
        self.client_type = value;
    }
    pub fn set_client_type_raw(&mut self, value: [u8; 1]) {
        self.client_type_raw = value;
    }
    pub fn new() -> PacketCaLogin {
        PacketCaLogin {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x64, 0x0]),
        packet_id_raw: [0x64, 0x0],
        version: 0,
        version_raw: [0; 4],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd: [0 as char; 24],
        passwd_raw: [0; 24],
        client_type: 0,
        client_type_raw: [0; 1],
        }
    }
}

impl Packet for PacketCaLogin {
    fn id(&self) -> &str {
       "0x6400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaLogin {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChEnter {
    pub fn packet_id() -> &'static str {
        "0x6500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChEnter {
        let mut offset: usize = 0;
        PacketChEnter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            client_type: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            client_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.user_level).unwrap();
        self.user_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.client_type).unwrap();
        self.client_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.user_level_raw.to_vec());
        wtr.append(&mut self.client_type_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 17;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_user_level(&mut self, value: u32) {
        self.user_level = value;
    }
    pub fn set_user_level_raw(&mut self, value: [u8; 4]) {
        self.user_level_raw = value;
    }
    pub fn set_client_type(&mut self, value: u16) {
        self.client_type = value;
    }
    pub fn set_client_type_raw(&mut self, value: [u8; 2]) {
        self.client_type_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn new() -> PacketChEnter {
        PacketChEnter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x65, 0x0]),
        packet_id_raw: [0x65, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        auth_code: 0,
        auth_code_raw: [0; 4],
        user_level: 0,
        user_level_raw: [0; 4],
        client_type: 0,
        client_type_raw: [0; 2],
        sex: 0,
        sex_raw: [0; 1],
        }
    }
}

impl Packet for PacketChEnter {
    fn id(&self) -> &str {
       "0x6500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChEnter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChSelectChar {
    pub fn packet_id() -> &'static str {
        "0x6600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChSelectChar {
        let mut offset: usize = 0;
        PacketChSelectChar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            char_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.char_num).unwrap();
        self.char_num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_num(&mut self, value: u8) {
        self.char_num = value;
    }
    pub fn set_char_num_raw(&mut self, value: [u8; 1]) {
        self.char_num_raw = value;
    }
    pub fn new() -> PacketChSelectChar {
        PacketChSelectChar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x66, 0x0]),
        packet_id_raw: [0x66, 0x0],
        char_num: 0,
        char_num_raw: [0; 1],
        }
    }
}

impl Packet for PacketChSelectChar {
    fn id(&self) -> &str {
       "0x6600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChSelectChar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChMakeChar {
    pub fn packet_id() -> &'static str {
        "0x6700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChMakeChar {
        let mut offset: usize = 0;
        PacketChMakeChar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            char_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            char_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            head_pal: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_pal_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.str).unwrap();
        self.str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.agi).unwrap();
        self.agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.vit).unwrap();
        self.vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.int).unwrap();
        self.int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dex).unwrap();
        self.dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.luk).unwrap();
        self.luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.char_num).unwrap();
        self.char_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_pal).unwrap();
        self.head_pal_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.str_raw.to_vec());
        wtr.append(&mut self.agi_raw.to_vec());
        wtr.append(&mut self.vit_raw.to_vec());
        wtr.append(&mut self.int_raw.to_vec());
        wtr.append(&mut self.dex_raw.to_vec());
        wtr.append(&mut self.luk_raw.to_vec());
        wtr.append(&mut self.char_num_raw.to_vec());
        wtr.append(&mut self.head_pal_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 37;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_str(&mut self, value: u8) {
        self.str = value;
    }
    pub fn set_str_raw(&mut self, value: [u8; 1]) {
        self.str_raw = value;
    }
    pub fn set_agi(&mut self, value: u8) {
        self.agi = value;
    }
    pub fn set_agi_raw(&mut self, value: [u8; 1]) {
        self.agi_raw = value;
    }
    pub fn set_vit(&mut self, value: u8) {
        self.vit = value;
    }
    pub fn set_vit_raw(&mut self, value: [u8; 1]) {
        self.vit_raw = value;
    }
    pub fn set_int(&mut self, value: u8) {
        self.int = value;
    }
    pub fn set_int_raw(&mut self, value: [u8; 1]) {
        self.int_raw = value;
    }
    pub fn set_dex(&mut self, value: u8) {
        self.dex = value;
    }
    pub fn set_dex_raw(&mut self, value: [u8; 1]) {
        self.dex_raw = value;
    }
    pub fn set_luk(&mut self, value: u8) {
        self.luk = value;
    }
    pub fn set_luk_raw(&mut self, value: [u8; 1]) {
        self.luk_raw = value;
    }
    pub fn set_char_num(&mut self, value: u8) {
        self.char_num = value;
    }
    pub fn set_char_num_raw(&mut self, value: [u8; 1]) {
        self.char_num_raw = value;
    }
    pub fn set_head_pal(&mut self, value: i16) {
        self.head_pal = value;
    }
    pub fn set_head_pal_raw(&mut self, value: [u8; 2]) {
        self.head_pal_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn new() -> PacketChMakeChar {
        PacketChMakeChar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x67, 0x0]),
        packet_id_raw: [0x67, 0x0],
        name: [0 as char; 24],
        name_raw: [0; 24],
        str: 0,
        str_raw: [0; 1],
        agi: 0,
        agi_raw: [0; 1],
        vit: 0,
        vit_raw: [0; 1],
        int: 0,
        int_raw: [0; 1],
        dex: 0,
        dex_raw: [0; 1],
        luk: 0,
        luk_raw: [0; 1],
        char_num: 0,
        char_num_raw: [0; 1],
        head_pal: 0,
        head_pal_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        }
    }
}

impl Packet for PacketChMakeChar {
    fn id(&self) -> &str {
       "0x6700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChMakeChar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChMakeChar2 {
    pub fn packet_id() -> &'static str {
        "0x7009"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChMakeChar2 {
        let mut offset: usize = 0;
        PacketChMakeChar2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            char_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            char_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            head_pal: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_pal_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.str).unwrap();
        self.str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.agi).unwrap();
        self.agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.vit).unwrap();
        self.vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.int).unwrap();
        self.int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dex).unwrap();
        self.dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.luk).unwrap();
        self.luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.char_num).unwrap();
        self.char_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_pal).unwrap();
        self.head_pal_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.str_raw.to_vec());
        wtr.append(&mut self.agi_raw.to_vec());
        wtr.append(&mut self.vit_raw.to_vec());
        wtr.append(&mut self.int_raw.to_vec());
        wtr.append(&mut self.dex_raw.to_vec());
        wtr.append(&mut self.luk_raw.to_vec());
        wtr.append(&mut self.char_num_raw.to_vec());
        wtr.append(&mut self.head_pal_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 37;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_str(&mut self, value: u8) {
        self.str = value;
    }
    pub fn set_str_raw(&mut self, value: [u8; 1]) {
        self.str_raw = value;
    }
    pub fn set_agi(&mut self, value: u8) {
        self.agi = value;
    }
    pub fn set_agi_raw(&mut self, value: [u8; 1]) {
        self.agi_raw = value;
    }
    pub fn set_vit(&mut self, value: u8) {
        self.vit = value;
    }
    pub fn set_vit_raw(&mut self, value: [u8; 1]) {
        self.vit_raw = value;
    }
    pub fn set_int(&mut self, value: u8) {
        self.int = value;
    }
    pub fn set_int_raw(&mut self, value: [u8; 1]) {
        self.int_raw = value;
    }
    pub fn set_dex(&mut self, value: u8) {
        self.dex = value;
    }
    pub fn set_dex_raw(&mut self, value: [u8; 1]) {
        self.dex_raw = value;
    }
    pub fn set_luk(&mut self, value: u8) {
        self.luk = value;
    }
    pub fn set_luk_raw(&mut self, value: [u8; 1]) {
        self.luk_raw = value;
    }
    pub fn set_char_num(&mut self, value: u8) {
        self.char_num = value;
    }
    pub fn set_char_num_raw(&mut self, value: [u8; 1]) {
        self.char_num_raw = value;
    }
    pub fn set_head_pal(&mut self, value: i16) {
        self.head_pal = value;
    }
    pub fn set_head_pal_raw(&mut self, value: [u8; 2]) {
        self.head_pal_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn new() -> PacketChMakeChar2 {
        PacketChMakeChar2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x70, 0x09]),
        packet_id_raw: [0x70, 0x09],
        name: [0 as char; 24],
        name_raw: [0; 24],
        str: 0,
        str_raw: [0; 1],
        agi: 0,
        agi_raw: [0; 1],
        vit: 0,
        vit_raw: [0; 1],
        int: 0,
        int_raw: [0; 1],
        dex: 0,
        dex_raw: [0; 1],
        luk: 0,
        luk_raw: [0; 1],
        char_num: 0,
        char_num_raw: [0; 1],
        head_pal: 0,
        head_pal_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        }
    }
}

impl Packet for PacketChMakeChar2 {
    fn id(&self) -> &str {
       "0x7009"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChMakeChar2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChDeleteChar {
    pub fn packet_id() -> &'static str {
        "0x6800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChDeleteChar {
        let mut offset: usize = 0;
        PacketChDeleteChar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            key: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            key_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.key {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.key_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.key_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 46;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_key(&mut self, value: [char; 40]) {
        self.key = value;
    }
    pub fn set_key_raw(&mut self, value: [u8; 40]) {
        self.key_raw = value;
    }
    pub fn new() -> PacketChDeleteChar {
        PacketChDeleteChar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x68, 0x0]),
        packet_id_raw: [0x68, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        key: [0 as char; 40],
        key_raw: [0; 40],
        }
    }
}

impl Packet for PacketChDeleteChar {
    fn id(&self) -> &str {
       "0x6800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChDeleteChar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAcceptLogin {
    pub fn packet_id() -> &'static str {
        "0x6900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAcceptLogin {
        let mut offset: usize = 0;
        let vec_type_len = ServerAddr::base_len(packetver);
        let iter_count = (&buffer.len() - 47) / vec_type_len;
        let mut vec_field: Vec<ServerAddr> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 47 + (vec_type_len * (i - 1));
            let end_pos = 47 + vec_type_len * i;
            vec_field.push(ServerAddr::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketAcAcceptLogin {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            last_login_ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            last_login_ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            last_login_time: {
                let field =  {
                let mut dst: [char; 26] = [0 as char; 26];
                for (index, byte) in buffer[offset..offset + 26].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            last_login_time_raw: {
                let mut dst: [u8; 26] = [0u8; 26];
                dst.clone_from_slice(&buffer[offset..offset + 26]);
                offset += 26;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            server_list: {
                let field = vec_field.clone();
                field
            },
            server_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.user_level).unwrap();
        self.user_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.last_login_ip).unwrap();
        self.last_login_ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.last_login_time {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.last_login_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        self.server_list_raw = {
            self.server_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.server_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.user_level_raw.to_vec());
        wtr.append(&mut self.last_login_ip_raw.to_vec());
        wtr.append(&mut self.last_login_time_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        self.server_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 47;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_user_level(&mut self, value: u32) {
        self.user_level = value;
    }
    pub fn set_user_level_raw(&mut self, value: [u8; 4]) {
        self.user_level_raw = value;
    }
    pub fn set_last_login_ip(&mut self, value: u32) {
        self.last_login_ip = value;
    }
    pub fn set_last_login_ip_raw(&mut self, value: [u8; 4]) {
        self.last_login_ip_raw = value;
    }
    pub fn set_last_login_time(&mut self, value: [char; 26]) {
        self.last_login_time = value;
    }
    pub fn set_last_login_time_raw(&mut self, value: [u8; 26]) {
        self.last_login_time_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_server_list(&mut self, value: Vec<ServerAddr>) {
        self.server_list = value;
    }
    pub fn set_server_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.server_list_raw = value;
    }
    pub fn new() -> PacketAcAcceptLogin {
        PacketAcAcceptLogin {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x69, 0x0]),
        packet_id_raw: [0x69, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        auth_code: 0,
        auth_code_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        user_level: 0,
        user_level_raw: [0; 4],
        last_login_ip: 0,
        last_login_ip_raw: [0; 4],
        last_login_time: [0 as char; 26],
        last_login_time_raw: [0; 26],
        sex: 0,
        sex_raw: [0; 1],
        server_list: vec![],
        server_list_raw: vec![],
        }
    }
}

impl Packet for PacketAcAcceptLogin {
    fn id(&self) -> &str {
       "0x6900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAcceptLogin {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAcceptLogin2 {
    pub fn packet_id() -> &'static str {
        "0xc40a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAcceptLogin2 {
        let mut offset: usize = 0;
        let vec_type_len = ServerAddr2::base_len(packetver);
        let iter_count = (&buffer.len() - 64) / vec_type_len;
        let mut vec_field: Vec<ServerAddr2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 64 + (vec_type_len * (i - 1));
            let end_pos = 64 + vec_type_len * i;
            vec_field.push(ServerAddr2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketAcAcceptLogin2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            last_login_ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            last_login_ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            last_login_time: {
                let field =  {
                let mut dst: [char; 26] = [0 as char; 26];
                for (index, byte) in buffer[offset..offset + 26].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            last_login_time_raw: {
                let mut dst: [u8; 26] = [0u8; 26];
                dst.clone_from_slice(&buffer[offset..offset + 26]);
                offset += 26;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            twitter_auth_token: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            twitter_auth_token_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            twitter_flag: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            twitter_flag_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            server_list: {
                let field = vec_field.clone();
                field
            },
            server_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.user_level).unwrap();
        self.user_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.last_login_ip).unwrap();
        self.last_login_ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.last_login_time {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.last_login_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.twitter_auth_token {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.twitter_auth_token_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.twitter_flag).unwrap();
        self.twitter_flag_raw = wtr.try_into().unwrap();
        self.server_list_raw = {
            self.server_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.server_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.user_level_raw.to_vec());
        wtr.append(&mut self.last_login_ip_raw.to_vec());
        wtr.append(&mut self.last_login_time_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.twitter_auth_token_raw.to_vec());
        wtr.append(&mut self.twitter_flag_raw.to_vec());
        self.server_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 64;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_user_level(&mut self, value: u32) {
        self.user_level = value;
    }
    pub fn set_user_level_raw(&mut self, value: [u8; 4]) {
        self.user_level_raw = value;
    }
    pub fn set_last_login_ip(&mut self, value: u32) {
        self.last_login_ip = value;
    }
    pub fn set_last_login_ip_raw(&mut self, value: [u8; 4]) {
        self.last_login_ip_raw = value;
    }
    pub fn set_last_login_time(&mut self, value: [char; 26]) {
        self.last_login_time = value;
    }
    pub fn set_last_login_time_raw(&mut self, value: [u8; 26]) {
        self.last_login_time_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_twitter_auth_token(&mut self, value: [char; 16]) {
        self.twitter_auth_token = value;
    }
    pub fn set_twitter_auth_token_raw(&mut self, value: [u8; 16]) {
        self.twitter_auth_token_raw = value;
    }
    pub fn set_twitter_flag(&mut self, value: u8) {
        self.twitter_flag = value;
    }
    pub fn set_twitter_flag_raw(&mut self, value: [u8; 1]) {
        self.twitter_flag_raw = value;
    }
    pub fn set_server_list(&mut self, value: Vec<ServerAddr2>) {
        self.server_list = value;
    }
    pub fn set_server_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.server_list_raw = value;
    }
    pub fn new() -> PacketAcAcceptLogin2 {
        PacketAcAcceptLogin2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc4, 0x0a]),
        packet_id_raw: [0xc4, 0x0a],
        packet_length: 0,
        packet_length_raw: [0; 2],
        auth_code: 0,
        auth_code_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        user_level: 0,
        user_level_raw: [0; 4],
        last_login_ip: 0,
        last_login_ip_raw: [0; 4],
        last_login_time: [0 as char; 26],
        last_login_time_raw: [0; 26],
        sex: 0,
        sex_raw: [0; 1],
        twitter_auth_token: [0 as char; 16],
        twitter_auth_token_raw: [0; 16],
        twitter_flag: 0,
        twitter_flag_raw: [0; 1],
        server_list: vec![],
        server_list_raw: vec![],
        }
    }
}

impl Packet for PacketAcAcceptLogin2 {
    fn id(&self) -> &str {
       "0xc40a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAcceptLogin2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcRefuseLogin {
    pub fn packet_id() -> &'static str {
        "0x6a00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcRefuseLogin {
        let mut offset: usize = 0;
        PacketAcRefuseLogin {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            block_date: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            block_date_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.block_date {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.block_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        wtr.append(&mut self.block_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 23;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn set_block_date(&mut self, value: [char; 20]) {
        self.block_date = value;
    }
    pub fn set_block_date_raw(&mut self, value: [u8; 20]) {
        self.block_date_raw = value;
    }
    pub fn new() -> PacketAcRefuseLogin {
        PacketAcRefuseLogin {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x6a, 0x0]),
        packet_id_raw: [0x6a, 0x0],
        error_code: 0,
        error_code_raw: [0; 1],
        block_date: [0 as char; 20],
        block_date_raw: [0; 20],
        }
    }
}

impl Packet for PacketAcRefuseLogin {
    fn id(&self) -> &str {
       "0x6a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcRefuseLogin {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcAcceptEnterNeoUnion {
    pub fn packet_id() -> &'static str {
        "0x6b00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcAcceptEnterNeoUnion {
        let mut offset: usize = 0;
        let vec_type_len = CharacterInfoNeoUnion::base_len(packetver);
        let iter_count = (&buffer.len() - 27) / vec_type_len;
        let mut vec_field: Vec<CharacterInfoNeoUnion> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 27 + (vec_type_len * (i - 1));
            let end_pos = 27 + vec_type_len * i;
            vec_field.push(CharacterInfoNeoUnion::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketHcAcceptEnterNeoUnion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            total_slot_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            total_slot_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            premium_start_slot: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            premium_start_slot_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            premium_end_slot: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            premium_end_slot_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dummy1_beginbilling: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            dummy1_beginbilling_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            code: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            time1: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            time1_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            time2: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            time2_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dummy2_endbilling: {
                let field =  {
                let mut dst: [char; 7] = [0 as char; 7];
                for (index, byte) in buffer[offset..offset + 7].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            dummy2_endbilling_raw: {
                let mut dst: [u8; 7] = [0u8; 7];
                dst.clone_from_slice(&buffer[offset..offset + 7]);
                offset += 7;
                dst
            },
            char_info: {
                let field = vec_field.clone();
                field
            },
            char_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.total_slot_num).unwrap();
        self.total_slot_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.premium_start_slot).unwrap();
        self.premium_start_slot_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.premium_end_slot).unwrap();
        self.premium_end_slot_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.dummy1_beginbilling).unwrap();
        self.dummy1_beginbilling_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.code).unwrap();
        self.code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.time1).unwrap();
        self.time1_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.time2).unwrap();
        self.time2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.dummy2_endbilling {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.dummy2_endbilling_raw = wtr.try_into().unwrap();
        self.char_info_raw = {
            self.char_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.char_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.total_slot_num_raw.to_vec());
        wtr.append(&mut self.premium_start_slot_raw.to_vec());
        wtr.append(&mut self.premium_end_slot_raw.to_vec());
        wtr.append(&mut self.dummy1_beginbilling_raw.to_vec());
        wtr.append(&mut self.code_raw.to_vec());
        wtr.append(&mut self.time1_raw.to_vec());
        wtr.append(&mut self.time2_raw.to_vec());
        wtr.append(&mut self.dummy2_endbilling_raw.to_vec());
        self.char_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_total_slot_num(&mut self, value: u8) {
        self.total_slot_num = value;
    }
    pub fn set_total_slot_num_raw(&mut self, value: [u8; 1]) {
        self.total_slot_num_raw = value;
    }
    pub fn set_premium_start_slot(&mut self, value: u8) {
        self.premium_start_slot = value;
    }
    pub fn set_premium_start_slot_raw(&mut self, value: [u8; 1]) {
        self.premium_start_slot_raw = value;
    }
    pub fn set_premium_end_slot(&mut self, value: u8) {
        self.premium_end_slot = value;
    }
    pub fn set_premium_end_slot_raw(&mut self, value: [u8; 1]) {
        self.premium_end_slot_raw = value;
    }
    pub fn set_dummy1_beginbilling(&mut self, value: i8) {
        self.dummy1_beginbilling = value;
    }
    pub fn set_dummy1_beginbilling_raw(&mut self, value: [u8; 1]) {
        self.dummy1_beginbilling_raw = value;
    }
    pub fn set_code(&mut self, value: u32) {
        self.code = value;
    }
    pub fn set_code_raw(&mut self, value: [u8; 4]) {
        self.code_raw = value;
    }
    pub fn set_time1(&mut self, value: u32) {
        self.time1 = value;
    }
    pub fn set_time1_raw(&mut self, value: [u8; 4]) {
        self.time1_raw = value;
    }
    pub fn set_time2(&mut self, value: u32) {
        self.time2 = value;
    }
    pub fn set_time2_raw(&mut self, value: [u8; 4]) {
        self.time2_raw = value;
    }
    pub fn set_dummy2_endbilling(&mut self, value: [char; 7]) {
        self.dummy2_endbilling = value;
    }
    pub fn set_dummy2_endbilling_raw(&mut self, value: [u8; 7]) {
        self.dummy2_endbilling_raw = value;
    }
    pub fn set_char_info(&mut self, value: Vec<CharacterInfoNeoUnion>) {
        self.char_info = value;
    }
    pub fn set_char_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.char_info_raw = value;
    }
    pub fn new() -> PacketHcAcceptEnterNeoUnion {
        PacketHcAcceptEnterNeoUnion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x6b, 0x0]),
        packet_id_raw: [0x6b, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        total_slot_num: 0,
        total_slot_num_raw: [0; 1],
        premium_start_slot: 0,
        premium_start_slot_raw: [0; 1],
        premium_end_slot: 0,
        premium_end_slot_raw: [0; 1],
        dummy1_beginbilling: 0,
        dummy1_beginbilling_raw: [0; 1],
        code: 0,
        code_raw: [0; 4],
        time1: 0,
        time1_raw: [0; 4],
        time2: 0,
        time2_raw: [0; 4],
        dummy2_endbilling: [0 as char; 7],
        dummy2_endbilling_raw: [0; 7],
        char_info: vec![],
        char_info_raw: vec![],
        }
    }
}

impl Packet for PacketHcAcceptEnterNeoUnion {
    fn id(&self) -> &str {
       "0x6b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcAcceptEnterNeoUnion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcRefuseEnter {
    pub fn packet_id() -> &'static str {
        "0x6c00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcRefuseEnter {
        let mut offset: usize = 0;
        PacketHcRefuseEnter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketHcRefuseEnter {
        PacketHcRefuseEnter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x6c, 0x0]),
        packet_id_raw: [0x6c, 0x0],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketHcRefuseEnter {
    fn id(&self) -> &str {
       "0x6c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcRefuseEnter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcAcceptMakecharNeoUnion {
    pub fn packet_id() -> &'static str {
        "0x6d00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcAcceptMakecharNeoUnion {
        let mut offset: usize = 0;
        PacketHcAcceptMakecharNeoUnion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            charinfo: {
                let field = CharacterInfoNeoUnion::from(&buffer[offset..offset + CharacterInfoNeoUnion::base_len(packetver)], packetver);
                field
            },
            charinfo_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.charinfo.fill_raw_with_packetver(packetver);
        self.charinfo_raw = self.charinfo.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.charinfo_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_charinfo(&mut self, value: CharacterInfoNeoUnion) {
        self.charinfo = value;
    }
    pub fn set_charinfo_raw(&mut self, value: Vec<u8>) {
        self.charinfo_raw = value;
    }
    pub fn new() -> PacketHcAcceptMakecharNeoUnion {
        PacketHcAcceptMakecharNeoUnion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x6d, 0x0]),
        packet_id_raw: [0x6d, 0x0],
        charinfo: CharacterInfoNeoUnion::new(),
        charinfo_raw: vec![],
        }
    }
}

impl Packet for PacketHcAcceptMakecharNeoUnion {
    fn id(&self) -> &str {
       "0x6d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcAcceptMakecharNeoUnion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcRefuseMakechar {
    pub fn packet_id() -> &'static str {
        "0x6e00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcRefuseMakechar {
        let mut offset: usize = 0;
        PacketHcRefuseMakechar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketHcRefuseMakechar {
        PacketHcRefuseMakechar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x6e, 0x0]),
        packet_id_raw: [0x6e, 0x0],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketHcRefuseMakechar {
    fn id(&self) -> &str {
       "0x6e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcRefuseMakechar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcAcceptDeletechar {
    pub fn packet_id() -> &'static str {
        "0x6f00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcAcceptDeletechar {
        let mut offset: usize = 0;
        PacketHcAcceptDeletechar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketHcAcceptDeletechar {
        PacketHcAcceptDeletechar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x6f, 0x0]),
        packet_id_raw: [0x6f, 0x0],
        }
    }
}

impl Packet for PacketHcAcceptDeletechar {
    fn id(&self) -> &str {
       "0x6f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcAcceptDeletechar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcRefuseDeletechar {
    pub fn packet_id() -> &'static str {
        "0x7000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcRefuseDeletechar {
        let mut offset: usize = 0;
        PacketHcRefuseDeletechar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketHcRefuseDeletechar {
        PacketHcRefuseDeletechar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x70, 0x0]),
        packet_id_raw: [0x70, 0x0],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketHcRefuseDeletechar {
    fn id(&self) -> &str {
       "0x7000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcRefuseDeletechar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcNotifyZonesvr {
    pub fn packet_id() -> &'static str {
        "0x7100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcNotifyZonesvr {
        let mut offset: usize = 0;
        PacketHcNotifyZonesvr {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            addr: {
                let field = ZserverAddr::from(&buffer[offset..offset + ZserverAddr::base_len(packetver)], packetver);
                field
            },
            addr_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        self.addr.fill_raw_with_packetver(packetver);
        self.addr_raw = self.addr.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.addr_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 21;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_addr(&mut self, value: ZserverAddr) {
        self.addr = value;
    }
    pub fn set_addr_raw(&mut self, value: Vec<u8>) {
        self.addr_raw = value;
    }
    pub fn new() -> PacketHcNotifyZonesvr {
        PacketHcNotifyZonesvr {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x71, 0x0]),
        packet_id_raw: [0x71, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        addr: ZserverAddr::new(),
        addr_raw: vec![],
        }
    }
}

impl Packet for PacketHcNotifyZonesvr {
    fn id(&self) -> &str {
       "0x7100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcNotifyZonesvr {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzEnter {
    pub fn packet_id() -> &'static str {
        "0x7200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzEnter {
        let mut offset: usize = 0;
        PacketCzEnter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            client_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            client_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.client_time).unwrap();
        self.client_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.client_time_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_client_time(&mut self, value: u32) {
        self.client_time = value;
    }
    pub fn set_client_time_raw(&mut self, value: [u8; 4]) {
        self.client_time_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn new() -> PacketCzEnter {
        PacketCzEnter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x72, 0x0]),
        packet_id_raw: [0x72, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        auth_code: 0,
        auth_code_raw: [0; 4],
        client_time: 0,
        client_time_raw: [0; 4],
        sex: 0,
        sex_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzEnter {
    fn id(&self) -> &str {
       "0x7200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzEnter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAcceptEnter {
    pub fn packet_id() -> &'static str {
        "0x7300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAcceptEnter {
        let mut offset: usize = 0;
        PacketZcAcceptEnter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn new() -> PacketZcAcceptEnter {
        PacketZcAcceptEnter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x73, 0x0]),
        packet_id_raw: [0x73, 0x0],
        start_time: 0,
        start_time_raw: [0; 4],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAcceptEnter {
    fn id(&self) -> &str {
       "0x7300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAcceptEnter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRefuseEnter {
    pub fn packet_id() -> &'static str {
        "0x7400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRefuseEnter {
        let mut offset: usize = 0;
        PacketZcRefuseEnter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketZcRefuseEnter {
        PacketZcRefuseEnter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x74, 0x0]),
        packet_id_raw: [0x74, 0x0],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcRefuseEnter {
    fn id(&self) -> &str {
       "0x7400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRefuseEnter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyInitchar {
    pub fn packet_id() -> &'static str {
        "0x7500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyInitchar {
        let mut offset: usize = 0;
        PacketZcNotifyInitchar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            style: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            style_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.style).unwrap();
        self.style_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item).unwrap();
        self.item_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.style_raw.to_vec());
        wtr.append(&mut self.item_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_style(&mut self, value: i16) {
        self.style = value;
    }
    pub fn set_style_raw(&mut self, value: [u8; 2]) {
        self.style_raw = value;
    }
    pub fn set_item(&mut self, value: u8) {
        self.item = value;
    }
    pub fn set_item_raw(&mut self, value: [u8; 1]) {
        self.item_raw = value;
    }
    pub fn new() -> PacketZcNotifyInitchar {
        PacketZcNotifyInitchar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x75, 0x0]),
        packet_id_raw: [0x75, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        gid: 0,
        gid_raw: [0; 4],
        style: 0,
        style_raw: [0; 2],
        item: 0,
        item_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifyInitchar {
    fn id(&self) -> &str {
       "0x7500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyInitchar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyUpdatechar {
    pub fn packet_id() -> &'static str {
        "0x7600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyUpdatechar {
        let mut offset: usize = 0;
        PacketZcNotifyUpdatechar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            style: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            style_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.style).unwrap();
        self.style_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item).unwrap();
        self.item_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.style_raw.to_vec());
        wtr.append(&mut self.item_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_style(&mut self, value: i16) {
        self.style = value;
    }
    pub fn set_style_raw(&mut self, value: [u8; 2]) {
        self.style_raw = value;
    }
    pub fn set_item(&mut self, value: u8) {
        self.item = value;
    }
    pub fn set_item_raw(&mut self, value: [u8; 1]) {
        self.item_raw = value;
    }
    pub fn new() -> PacketZcNotifyUpdatechar {
        PacketZcNotifyUpdatechar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x76, 0x0]),
        packet_id_raw: [0x76, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        style: 0,
        style_raw: [0; 2],
        item: 0,
        item_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifyUpdatechar {
    fn id(&self) -> &str {
       "0x7600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyUpdatechar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyUpdateplayer {
    pub fn packet_id() -> &'static str {
        "0x7700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyUpdateplayer {
        let mut offset: usize = 0;
        PacketZcNotifyUpdateplayer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            style: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            style_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.style).unwrap();
        self.style_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item).unwrap();
        self.item_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.style_raw.to_vec());
        wtr.append(&mut self.item_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_style(&mut self, value: i16) {
        self.style = value;
    }
    pub fn set_style_raw(&mut self, value: [u8; 2]) {
        self.style_raw = value;
    }
    pub fn set_item(&mut self, value: u8) {
        self.item = value;
    }
    pub fn set_item_raw(&mut self, value: [u8; 1]) {
        self.item_raw = value;
    }
    pub fn new() -> PacketZcNotifyUpdateplayer {
        PacketZcNotifyUpdateplayer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x77, 0x0]),
        packet_id_raw: [0x77, 0x0],
        style: 0,
        style_raw: [0; 2],
        item: 0,
        item_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifyUpdateplayer {
    fn id(&self) -> &str {
       "0x7700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyUpdateplayer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry {
    pub fn packet_id() -> &'static str {
        "0x7800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 55;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i16) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 2]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_shield(&mut self, value: i16) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 2]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry {
        PacketZcNotifyStandentry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x78, 0x0]),
        packet_id_raw: [0x78, 0x0],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 2],
        accessory: 0,
        accessory_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyStandentry {
    fn id(&self) -> &str {
       "0x7800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyNewentry {
    pub fn packet_id() -> &'static str {
        "0x7900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyNewentry {
        let mut offset: usize = 0;
        PacketZcNotifyNewentry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 53;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i16) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 2]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_shield(&mut self, value: i16) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 2]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyNewentry {
        PacketZcNotifyNewentry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x79, 0x0]),
        packet_id_raw: [0x79, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 2],
        accessory: 0,
        accessory_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyNewentry {
    fn id(&self) -> &str {
       "0x7900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyNewentry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyActentry {
    pub fn packet_id() -> &'static str {
        "0x7a00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyActentry {
        let mut offset: usize = 0;
        PacketZcNotifyActentry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            act_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            act_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.act_start_time).unwrap();
        self.act_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        wtr.append(&mut self.act_start_time_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 58;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i16) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 2]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_shield(&mut self, value: i16) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 2]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn set_act_start_time(&mut self, value: u32) {
        self.act_start_time = value;
    }
    pub fn set_act_start_time_raw(&mut self, value: [u8; 4]) {
        self.act_start_time_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyActentry {
        PacketZcNotifyActentry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7a, 0x0]),
        packet_id_raw: [0x7a, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 2],
        accessory: 0,
        accessory_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        action: 0,
        action_raw: [0; 1],
        act_start_time: 0,
        act_start_time_raw: [0; 4],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyActentry {
    fn id(&self) -> &str {
       "0x7a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyActentry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMoveentry {
    pub fn packet_id() -> &'static str {
        "0x7b00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMoveentry {
        let mut offset: usize = 0;
        PacketZcNotifyMoveentry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            shield: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u16; 6] = [0_u16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 60;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i16) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 2]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_shield(&mut self, value: i16) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 2]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u16; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyMoveentry {
        PacketZcNotifyMoveentry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7b, 0x0]),
        packet_id_raw: [0x7b, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 2],
        accessory: 0,
        accessory_raw: [0; 2],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        shield: 0,
        shield_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMoveentry {
    fn id(&self) -> &str {
       "0x7b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMoveentry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentryNpc {
    pub fn packet_id() -> &'static str {
        "0x7c00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentryNpc {
        let mut offset: usize = 0;
        PacketZcNotifyStandentryNpc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 42;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i16) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 2]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_shield(&mut self, value: i16) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 2]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentryNpc {
        PacketZcNotifyStandentryNpc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7c, 0x0]),
        packet_id_raw: [0x7c, 0x0],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 2],
        accessory: 0,
        accessory_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifyStandentryNpc {
    fn id(&self) -> &str {
       "0x7c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentryNpc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzNotifyActorinit {
    pub fn packet_id() -> &'static str {
        "0x7d00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzNotifyActorinit {
        let mut offset: usize = 0;
        PacketCzNotifyActorinit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzNotifyActorinit {
        PacketCzNotifyActorinit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x0]),
        packet_id_raw: [0x7d, 0x0],
        }
    }
}

impl Packet for PacketCzNotifyActorinit {
    fn id(&self) -> &str {
       "0x7d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzNotifyActorinit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestTime {
    pub fn packet_id() -> &'static str {
        "0x7e00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestTime {
        let mut offset: usize = 0;
        PacketCzRequestTime {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            client_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            client_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.client_time).unwrap();
        self.client_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.client_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_client_time(&mut self, value: u32) {
        self.client_time = value;
    }
    pub fn set_client_time_raw(&mut self, value: [u8; 4]) {
        self.client_time_raw = value;
    }
    pub fn new() -> PacketCzRequestTime {
        PacketCzRequestTime {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x0]),
        packet_id_raw: [0x7e, 0x0],
        client_time: 0,
        client_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzRequestTime {
    fn id(&self) -> &str {
       "0x7e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestTime {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyTime {
    pub fn packet_id() -> &'static str {
        "0x7f00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyTime {
        let mut offset: usize = 0;
        PacketZcNotifyTime {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.time).unwrap();
        self.time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_time(&mut self, value: u32) {
        self.time = value;
    }
    pub fn set_time_raw(&mut self, value: [u8; 4]) {
        self.time_raw = value;
    }
    pub fn new() -> PacketZcNotifyTime {
        PacketZcNotifyTime {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x0]),
        packet_id_raw: [0x7f, 0x0],
        time: 0,
        time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyTime {
    fn id(&self) -> &str {
       "0x7f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyTime {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyVanish {
    pub fn packet_id() -> &'static str {
        "0x8000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyVanish {
        let mut offset: usize = 0;
        PacketZcNotifyVanish {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcNotifyVanish {
        PacketZcNotifyVanish {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x0]),
        packet_id_raw: [0x80, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifyVanish {
    fn id(&self) -> &str {
       "0x8000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyVanish {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketScNotifyBan {
    pub fn packet_id() -> &'static str {
        "0x8100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketScNotifyBan {
        let mut offset: usize = 0;
        PacketScNotifyBan {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketScNotifyBan {
        PacketScNotifyBan {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x0]),
        packet_id_raw: [0x81, 0x0],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketScNotifyBan {
    fn id(&self) -> &str {
       "0x8100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketScNotifyBan {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestQuit {
    pub fn packet_id() -> &'static str {
        "0x8200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestQuit {
        let mut offset: usize = 0;
        PacketCzRequestQuit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzRequestQuit {
        PacketCzRequestQuit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x0]),
        packet_id_raw: [0x82, 0x0],
        }
    }
}

impl Packet for PacketCzRequestQuit {
    fn id(&self) -> &str {
       "0x8200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestQuit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAcceptQuit {
    pub fn packet_id() -> &'static str {
        "0x8300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAcceptQuit {
        let mut offset: usize = 0;
        PacketZcAcceptQuit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcAcceptQuit {
        PacketZcAcceptQuit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x0]),
        packet_id_raw: [0x83, 0x0],
        }
    }
}

impl Packet for PacketZcAcceptQuit {
    fn id(&self) -> &str {
       "0x8300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAcceptQuit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRefuseQuit {
    pub fn packet_id() -> &'static str {
        "0x8400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRefuseQuit {
        let mut offset: usize = 0;
        PacketZcRefuseQuit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcRefuseQuit {
        PacketZcRefuseQuit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x84, 0x0]),
        packet_id_raw: [0x84, 0x0],
        }
    }
}

impl Packet for PacketZcRefuseQuit {
    fn id(&self) -> &str {
       "0x8400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRefuseQuit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestMove {
    pub fn packet_id() -> &'static str {
        "0x8500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestMove {
        let mut offset: usize = 0;
        PacketCzRequestMove {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dest: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            dest_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.dest {
            wtr.write_u8(item).unwrap();
        }
        self.dest_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.dest_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_dest(&mut self, value: [u8; 3]) {
        self.dest = value;
    }
    pub fn set_dest_raw(&mut self, value: [u8; 3]) {
        self.dest_raw = value;
    }
    pub fn new() -> PacketCzRequestMove {
        PacketCzRequestMove {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x85, 0x0]),
        packet_id_raw: [0x85, 0x0],
        dest: [0; 3],
        dest_raw: [0; 3],
        }
    }
}

impl Packet for PacketCzRequestMove {
    fn id(&self) -> &str {
       "0x8500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestMove {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMove {
    pub fn packet_id() -> &'static str {
        "0x8600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMove {
        let mut offset: usize = 0;
        PacketZcNotifyMove {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u8; 6] = [0_u8; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u8(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u8; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn new() -> PacketZcNotifyMove {
        PacketZcNotifyMove {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x86, 0x0]),
        packet_id_raw: [0x86, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyMove {
    fn id(&self) -> &str {
       "0x8600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMove {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPlayermove {
    pub fn packet_id() -> &'static str {
        "0x8700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPlayermove {
        let mut offset: usize = 0;
        PacketZcNotifyPlayermove {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u8; 6] = [0_u8; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u8(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u8; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn new() -> PacketZcNotifyPlayermove {
        PacketZcNotifyPlayermove {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x87, 0x0]),
        packet_id_raw: [0x87, 0x0],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        }
    }
}

impl Packet for PacketZcNotifyPlayermove {
    fn id(&self) -> &str {
       "0x8700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPlayermove {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStopmove {
    pub fn packet_id() -> &'static str {
        "0x8800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStopmove {
        let mut offset: usize = 0;
        PacketZcStopmove {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketZcStopmove {
        PacketZcStopmove {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x88, 0x0]),
        packet_id_raw: [0x88, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcStopmove {
    fn id(&self) -> &str {
       "0x8800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStopmove {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestAct {
    pub fn packet_id() -> &'static str {
        "0x8900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestAct {
        let mut offset: usize = 0;
        PacketCzRequestAct {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketCzRequestAct {
        PacketCzRequestAct {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x89, 0x0]),
        packet_id_raw: [0x89, 0x0],
        target_gid: 0,
        target_gid_raw: [0; 4],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzRequestAct {
    fn id(&self) -> &str {
       "0x8900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestAct {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyAct {
    pub fn packet_id() -> &'static str {
        "0x8a00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyAct {
        let mut offset: usize = 0;
        PacketZcNotifyAct {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attack_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attack_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attacked_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attacked_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            damage: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            left_damage: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            left_damage_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attack_mt).unwrap();
        self.attack_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attacked_mt).unwrap();
        self.attacked_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.left_damage).unwrap();
        self.left_damage_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.attack_mt_raw.to_vec());
        wtr.append(&mut self.attacked_mt_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        wtr.append(&mut self.left_damage_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 29;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_attack_mt(&mut self, value: i32) {
        self.attack_mt = value;
    }
    pub fn set_attack_mt_raw(&mut self, value: [u8; 4]) {
        self.attack_mt_raw = value;
    }
    pub fn set_attacked_mt(&mut self, value: i32) {
        self.attacked_mt = value;
    }
    pub fn set_attacked_mt_raw(&mut self, value: [u8; 4]) {
        self.attacked_mt_raw = value;
    }
    pub fn set_damage(&mut self, value: i16) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 2]) {
        self.damage_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn set_left_damage(&mut self, value: i16) {
        self.left_damage = value;
    }
    pub fn set_left_damage_raw(&mut self, value: [u8; 2]) {
        self.left_damage_raw = value;
    }
    pub fn new() -> PacketZcNotifyAct {
        PacketZcNotifyAct {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8a, 0x0]),
        packet_id_raw: [0x8a, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        target_gid: 0,
        target_gid_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        attack_mt: 0,
        attack_mt_raw: [0; 4],
        attacked_mt: 0,
        attacked_mt_raw: [0; 4],
        damage: 0,
        damage_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        left_damage: 0,
        left_damage_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyAct {
    fn id(&self) -> &str {
       "0x8a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyAct {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyActPosition {
    pub fn packet_id() -> &'static str {
        "0x8b00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyActPosition {
        let mut offset: usize = 0;
        PacketZcNotifyActPosition {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            damage: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 23;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_damage(&mut self, value: i16) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 2]) {
        self.damage_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketZcNotifyActPosition {
        PacketZcNotifyActPosition {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8b, 0x0]),
        packet_id_raw: [0x8b, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        target_gid: 0,
        target_gid_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        damage: 0,
        damage_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifyActPosition {
    fn id(&self) -> &str {
       "0x8b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyActPosition {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestChat {
    pub fn packet_id() -> &'static str {
        "0x8c00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestChat {
        let mut offset: usize = 0;
        PacketCzRequestChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzRequestChat {
        PacketCzRequestChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8c, 0x0]),
        packet_id_raw: [0x8c, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzRequestChat {
    fn id(&self) -> &str {
       "0x8c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyChat {
    pub fn packet_id() -> &'static str {
        "0x8d00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyChat {
        let mut offset: usize = 0;
        PacketZcNotifyChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcNotifyChat {
        PacketZcNotifyChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8d, 0x0]),
        packet_id_raw: [0x8d, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        gid: 0,
        gid_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcNotifyChat {
    fn id(&self) -> &str {
       "0x8d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPlayerchat {
    pub fn packet_id() -> &'static str {
        "0x8e00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPlayerchat {
        let mut offset: usize = 0;
        PacketZcNotifyPlayerchat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcNotifyPlayerchat {
        PacketZcNotifyPlayerchat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8e, 0x0]),
        packet_id_raw: [0x8e, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcNotifyPlayerchat {
    fn id(&self) -> &str {
       "0x8e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPlayerchat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketServerEntryAck {
    pub fn packet_id() -> &'static str {
        "0x8f00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketServerEntryAck {
        let mut offset: usize = 0;
        PacketServerEntryAck {
            header: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            header_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.header).unwrap();
        self.header_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.header_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_header(&mut self, value: i16) {
        self.header = value;
    }
    pub fn set_header_raw(&mut self, value: [u8; 2]) {
        self.header_raw = value;
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketServerEntryAck {
        PacketServerEntryAck {
        raw: vec![],
        header: 0,
        header_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketServerEntryAck {
    fn id(&self) -> &str {
       "0x8f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketServerEntryAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzContactnpc {
    pub fn packet_id() -> &'static str {
        "0x9000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzContactnpc {
        let mut offset: usize = 0;
        PacketCzContactnpc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzContactnpc {
        PacketCzContactnpc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x90, 0x0]),
        packet_id_raw: [0x90, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzContactnpc {
    fn id(&self) -> &str {
       "0x9000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzContactnpc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNpcackMapmove {
    pub fn packet_id() -> &'static str {
        "0x9100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNpcackMapmove {
        let mut offset: usize = 0;
        PacketZcNpcackMapmove {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketZcNpcackMapmove {
        PacketZcNpcackMapmove {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x91, 0x0]),
        packet_id_raw: [0x91, 0x0],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNpcackMapmove {
    fn id(&self) -> &str {
       "0x9100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNpcackMapmove {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNpcackServermove {
    pub fn packet_id() -> &'static str {
        "0x9200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNpcackServermove {
        let mut offset: usize = 0;
        PacketZcNpcackServermove {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            addr: {
                let field = ZserverAddr::from(&buffer[offset..offset + ZserverAddr::base_len(packetver)], packetver);
                field
            },
            addr_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        self.addr.fill_raw_with_packetver(packetver);
        self.addr_raw = self.addr.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.addr_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 21;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_addr(&mut self, value: ZserverAddr) {
        self.addr = value;
    }
    pub fn set_addr_raw(&mut self, value: Vec<u8>) {
        self.addr_raw = value;
    }
    pub fn new() -> PacketZcNpcackServermove {
        PacketZcNpcackServermove {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x92, 0x0]),
        packet_id_raw: [0x92, 0x0],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        addr: ZserverAddr::new(),
        addr_raw: vec![],
        }
    }
}

impl Packet for PacketZcNpcackServermove {
    fn id(&self) -> &str {
       "0x9200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNpcackServermove {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNpcackEnable {
    pub fn packet_id() -> &'static str {
        "0x9300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNpcackEnable {
        let mut offset: usize = 0;
        PacketZcNpcackEnable {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcNpcackEnable {
        PacketZcNpcackEnable {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x93, 0x0]),
        packet_id_raw: [0x93, 0x0],
        }
    }
}

impl Packet for PacketZcNpcackEnable {
    fn id(&self) -> &str {
       "0x9300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNpcackEnable {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqname {
    pub fn packet_id() -> &'static str {
        "0x9400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqname {
        let mut offset: usize = 0;
        PacketCzReqname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqname {
        PacketCzReqname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x94, 0x0]),
        packet_id_raw: [0x94, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqname {
    fn id(&self) -> &str {
       "0x9400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqname {
    pub fn packet_id() -> &'static str {
        "0x9500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqname {
        let mut offset: usize = 0;
        PacketZcAckReqname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            cname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            cname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.cname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.cname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.cname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_cname(&mut self, value: [char; 24]) {
        self.cname = value;
    }
    pub fn set_cname_raw(&mut self, value: [u8; 24]) {
        self.cname_raw = value;
    }
    pub fn new() -> PacketZcAckReqname {
        PacketZcAckReqname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x95, 0x0]),
        packet_id_raw: [0x95, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        cname: [0 as char; 24],
        cname_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcAckReqname {
    fn id(&self) -> &str {
       "0x9500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzWhisper {
    pub fn packet_id() -> &'static str {
        "0x9600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzWhisper {
        let mut offset: usize = 0;
        PacketCzWhisper {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            receiver: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            receiver_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.receiver {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.receiver_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.receiver_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_receiver(&mut self, value: [char; 24]) {
        self.receiver = value;
    }
    pub fn set_receiver_raw(&mut self, value: [u8; 24]) {
        self.receiver_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzWhisper {
        PacketCzWhisper {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x96, 0x0]),
        packet_id_raw: [0x96, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        receiver: [0 as char; 24],
        receiver_raw: [0; 24],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzWhisper {
    fn id(&self) -> &str {
       "0x9600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzWhisper {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcWhisper {
    pub fn packet_id() -> &'static str {
        "0x9700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcWhisper {
        let mut offset: usize = 0;
        PacketZcWhisper {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sender: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sender_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sender {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sender_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.sender_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_sender(&mut self, value: [char; 24]) {
        self.sender = value;
    }
    pub fn set_sender_raw(&mut self, value: [u8; 24]) {
        self.sender_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcWhisper {
        PacketZcWhisper {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x97, 0x0]),
        packet_id_raw: [0x97, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        sender: [0 as char; 24],
        sender_raw: [0; 24],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcWhisper {
    fn id(&self) -> &str {
       "0x9700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcWhisper {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckWhisper {
    pub fn packet_id() -> &'static str {
        "0x9800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckWhisper {
        let mut offset: usize = 0;
        PacketZcAckWhisper {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckWhisper {
        PacketZcAckWhisper {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x98, 0x0]),
        packet_id_raw: [0x98, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckWhisper {
    fn id(&self) -> &str {
       "0x9800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckWhisper {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzBroadcast {
    pub fn packet_id() -> &'static str {
        "0x9900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzBroadcast {
        let mut offset: usize = 0;
        PacketCzBroadcast {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzBroadcast {
        PacketCzBroadcast {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x99, 0x0]),
        packet_id_raw: [0x99, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzBroadcast {
    fn id(&self) -> &str {
       "0x9900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzBroadcast {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBroadcast {
    pub fn packet_id() -> &'static str {
        "0x9a00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBroadcast {
        let mut offset: usize = 0;
        PacketZcBroadcast {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcBroadcast {
        PacketZcBroadcast {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9a, 0x0]),
        packet_id_raw: [0x9a, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcBroadcast {
    fn id(&self) -> &str {
       "0x9a00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBroadcast {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChangeDirection {
    pub fn packet_id() -> &'static str {
        "0x9b00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChangeDirection {
        let mut offset: usize = 0;
        PacketCzChangeDirection {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dir: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dir_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dir).unwrap();
        self.dir_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.dir_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_dir(&mut self, value: u8) {
        self.dir = value;
    }
    pub fn set_dir_raw(&mut self, value: [u8; 1]) {
        self.dir_raw = value;
    }
    pub fn new() -> PacketCzChangeDirection {
        PacketCzChangeDirection {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9b, 0x0]),
        packet_id_raw: [0x9b, 0x0],
        head_dir: 0,
        head_dir_raw: [0; 2],
        dir: 0,
        dir_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzChangeDirection {
    fn id(&self) -> &str {
       "0x9b00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChangeDirection {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcChangeDirection {
    pub fn packet_id() -> &'static str {
        "0x9c00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcChangeDirection {
        let mut offset: usize = 0;
        PacketZcChangeDirection {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dir: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dir_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dir).unwrap();
        self.dir_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.dir_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_dir(&mut self, value: u8) {
        self.dir = value;
    }
    pub fn set_dir_raw(&mut self, value: [u8; 1]) {
        self.dir_raw = value;
    }
    pub fn new() -> PacketZcChangeDirection {
        PacketZcChangeDirection {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9c, 0x0]),
        packet_id_raw: [0x9c, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        head_dir: 0,
        head_dir_raw: [0; 2],
        dir: 0,
        dir_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcChangeDirection {
    fn id(&self) -> &str {
       "0x9c00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcChangeDirection {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemEntry {
    pub fn packet_id() -> &'static str {
        "0x9d00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemEntry {
        let mut offset: usize = 0;
        PacketZcItemEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itaid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            itaid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sub_x: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sub_x_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sub_y: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sub_y_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.itaid).unwrap();
        self.itaid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sub_x).unwrap();
        self.sub_x_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sub_y).unwrap();
        self.sub_y_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itaid_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.sub_x_raw.to_vec());
        wtr.append(&mut self.sub_y_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 17;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itaid(&mut self, value: u32) {
        self.itaid = value;
    }
    pub fn set_itaid_raw(&mut self, value: [u8; 4]) {
        self.itaid_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_sub_x(&mut self, value: u8) {
        self.sub_x = value;
    }
    pub fn set_sub_x_raw(&mut self, value: [u8; 1]) {
        self.sub_x_raw = value;
    }
    pub fn set_sub_y(&mut self, value: u8) {
        self.sub_y = value;
    }
    pub fn set_sub_y_raw(&mut self, value: [u8; 1]) {
        self.sub_y_raw = value;
    }
    pub fn new() -> PacketZcItemEntry {
        PacketZcItemEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9d, 0x0]),
        packet_id_raw: [0x9d, 0x0],
        itaid: 0,
        itaid_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        sub_x: 0,
        sub_x_raw: [0; 1],
        sub_y: 0,
        sub_y_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcItemEntry {
    fn id(&self) -> &str {
       "0x9d00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemFallEntry {
    pub fn packet_id() -> &'static str {
        "0x9e00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemFallEntry {
        let mut offset: usize = 0;
        PacketZcItemFallEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itaid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            itaid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sub_x: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sub_x_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sub_y: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sub_y_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.itaid).unwrap();
        self.itaid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sub_x).unwrap();
        self.sub_x_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sub_y).unwrap();
        self.sub_y_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itaid_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.sub_x_raw.to_vec());
        wtr.append(&mut self.sub_y_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 17;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itaid(&mut self, value: u32) {
        self.itaid = value;
    }
    pub fn set_itaid_raw(&mut self, value: [u8; 4]) {
        self.itaid_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_sub_x(&mut self, value: u8) {
        self.sub_x = value;
    }
    pub fn set_sub_x_raw(&mut self, value: [u8; 1]) {
        self.sub_x_raw = value;
    }
    pub fn set_sub_y(&mut self, value: u8) {
        self.sub_y = value;
    }
    pub fn set_sub_y_raw(&mut self, value: [u8; 1]) {
        self.sub_y_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcItemFallEntry {
        PacketZcItemFallEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9e, 0x0]),
        packet_id_raw: [0x9e, 0x0],
        itaid: 0,
        itaid_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        sub_x: 0,
        sub_x_raw: [0; 1],
        sub_y: 0,
        sub_y_raw: [0; 1],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcItemFallEntry {
    fn id(&self) -> &str {
       "0x9e00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemFallEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzItemPickup {
    pub fn packet_id() -> &'static str {
        "0x9f00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzItemPickup {
        let mut offset: usize = 0;
        PacketCzItemPickup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itaid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            itaid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.itaid).unwrap();
        self.itaid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itaid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itaid(&mut self, value: u32) {
        self.itaid = value;
    }
    pub fn set_itaid_raw(&mut self, value: [u8; 4]) {
        self.itaid_raw = value;
    }
    pub fn new() -> PacketCzItemPickup {
        PacketCzItemPickup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9f, 0x0]),
        packet_id_raw: [0x9f, 0x0],
        itaid: 0,
        itaid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzItemPickup {
    fn id(&self) -> &str {
       "0x9f00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzItemPickup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemPickupAck {
    pub fn packet_id() -> &'static str {
        "0xa000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemPickupAck {
        let mut offset: usize = 0;
        PacketZcItemPickupAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 23;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: u16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcItemPickupAck {
        PacketZcItemPickupAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa0, 0x0]),
        packet_id_raw: [0xa0, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        location: 0,
        location_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcItemPickupAck {
    fn id(&self) -> &str {
       "0xa000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemPickupAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemDisappear {
    pub fn packet_id() -> &'static str {
        "0xa100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemDisappear {
        let mut offset: usize = 0;
        PacketZcItemDisappear {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itaid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            itaid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.itaid).unwrap();
        self.itaid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itaid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itaid(&mut self, value: u32) {
        self.itaid = value;
    }
    pub fn set_itaid_raw(&mut self, value: [u8; 4]) {
        self.itaid_raw = value;
    }
    pub fn new() -> PacketZcItemDisappear {
        PacketZcItemDisappear {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa1, 0x0]),
        packet_id_raw: [0xa1, 0x0],
        itaid: 0,
        itaid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcItemDisappear {
    fn id(&self) -> &str {
       "0xa100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemDisappear {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzItemThrow {
    pub fn packet_id() -> &'static str {
        "0xa200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzItemThrow {
        let mut offset: usize = 0;
        PacketCzItemThrow {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzItemThrow {
        PacketCzItemThrow {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa2, 0x0]),
        packet_id_raw: [0xa2, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzItemThrow {
    fn id(&self) -> &str {
       "0xa200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzItemThrow {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNormalItemlist {
    pub fn packet_id() -> &'static str {
        "0xa300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNormalItemlist {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcNormalItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcNormalItemlist {
        PacketZcNormalItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa3, 0x0]),
        packet_id_raw: [0xa3, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcNormalItemlist {
    fn id(&self) -> &str {
       "0xa300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNormalItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEquipmentItemlist {
    pub fn packet_id() -> &'static str {
        "0xa400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEquipmentItemlist {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcEquipmentItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcEquipmentItemlist {
        PacketZcEquipmentItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa4, 0x0]),
        packet_id_raw: [0xa4, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcEquipmentItemlist {
    fn id(&self) -> &str {
       "0xa400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEquipmentItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreNormalItemlist {
    pub fn packet_id() -> &'static str {
        "0xa500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreNormalItemlist {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcStoreNormalItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcStoreNormalItemlist {
        PacketZcStoreNormalItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa5, 0x0]),
        packet_id_raw: [0xa5, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcStoreNormalItemlist {
    fn id(&self) -> &str {
       "0xa500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreNormalItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreEquipmentItemlist {
    pub fn packet_id() -> &'static str {
        "0xa600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreEquipmentItemlist {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcStoreEquipmentItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcStoreEquipmentItemlist {
        PacketZcStoreEquipmentItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa6, 0x0]),
        packet_id_raw: [0xa6, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcStoreEquipmentItemlist {
    fn id(&self) -> &str {
       "0xa600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreEquipmentItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUseItem {
    pub fn packet_id() -> &'static str {
        "0xa700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUseItem {
        let mut offset: usize = 0;
        PacketCzUseItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzUseItem {
        PacketCzUseItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa7, 0x0]),
        packet_id_raw: [0xa7, 0x0],
        index: 0,
        index_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzUseItem {
    fn id(&self) -> &str {
       "0xa700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUseItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUseItemAck {
    pub fn packet_id() -> &'static str {
        "0xa800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUseItemAck {
        let mut offset: usize = 0;
        PacketZcUseItemAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcUseItemAck {
        PacketZcUseItemAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa8, 0x0]),
        packet_id_raw: [0xa8, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        result: false,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcUseItemAck {
    fn id(&self) -> &str {
       "0xa800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUseItemAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqWearEquip {
    pub fn packet_id() -> &'static str {
        "0xa900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqWearEquip {
        let mut offset: usize = 0;
        PacketCzReqWearEquip {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_location).unwrap();
        self.wear_location_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.wear_location_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_wear_location(&mut self, value: u16) {
        self.wear_location = value;
    }
    pub fn set_wear_location_raw(&mut self, value: [u8; 2]) {
        self.wear_location_raw = value;
    }
    pub fn new() -> PacketCzReqWearEquip {
        PacketCzReqWearEquip {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xa9, 0x0]),
        packet_id_raw: [0xa9, 0x0],
        index: 0,
        index_raw: [0; 2],
        wear_location: 0,
        wear_location_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqWearEquip {
    fn id(&self) -> &str {
       "0xa900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqWearEquip {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqWearEquipAck {
    pub fn packet_id() -> &'static str {
        "0xaa00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqWearEquipAck {
        let mut offset: usize = 0;
        PacketZcReqWearEquipAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_location).unwrap();
        self.wear_location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.wear_location_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_wear_location(&mut self, value: u16) {
        self.wear_location = value;
    }
    pub fn set_wear_location_raw(&mut self, value: [u8; 2]) {
        self.wear_location_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcReqWearEquipAck {
        PacketZcReqWearEquipAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xaa, 0x0]),
        packet_id_raw: [0xaa, 0x0],
        index: 0,
        index_raw: [0; 2],
        wear_location: 0,
        wear_location_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcReqWearEquipAck {
    fn id(&self) -> &str {
       "0xaa00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqWearEquipAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqTakeoffEquip {
    pub fn packet_id() -> &'static str {
        "0xab00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqTakeoffEquip {
        let mut offset: usize = 0;
        PacketCzReqTakeoffEquip {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketCzReqTakeoffEquip {
        PacketCzReqTakeoffEquip {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xab, 0x0]),
        packet_id_raw: [0xab, 0x0],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqTakeoffEquip {
    fn id(&self) -> &str {
       "0xab00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqTakeoffEquip {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqTakeoffEquipAck {
    pub fn packet_id() -> &'static str {
        "0xac00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqTakeoffEquipAck {
        let mut offset: usize = 0;
        PacketZcReqTakeoffEquipAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_location).unwrap();
        self.wear_location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.wear_location_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_wear_location(&mut self, value: u16) {
        self.wear_location = value;
    }
    pub fn set_wear_location_raw(&mut self, value: [u8; 2]) {
        self.wear_location_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcReqTakeoffEquipAck {
        PacketZcReqTakeoffEquipAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xac, 0x0]),
        packet_id_raw: [0xac, 0x0],
        index: 0,
        index_raw: [0; 2],
        wear_location: 0,
        wear_location_raw: [0; 2],
        result: false,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcReqTakeoffEquipAck {
    fn id(&self) -> &str {
       "0xac00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqTakeoffEquipAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemThrowAck {
    pub fn packet_id() -> &'static str {
        "0xaf00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemThrowAck {
        let mut offset: usize = 0;
        PacketZcItemThrowAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcItemThrowAck {
        PacketZcItemThrowAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xaf, 0x0]),
        packet_id_raw: [0xaf, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcItemThrowAck {
    fn id(&self) -> &str {
       "0xaf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemThrowAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcParChange {
    pub fn packet_id() -> &'static str {
        "0xb000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcParChange {
        let mut offset: usize = 0;
        PacketZcParChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            var_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var_id).unwrap();
        self.var_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.var_id_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_var_id(&mut self, value: u16) {
        self.var_id = value;
    }
    pub fn set_var_id_raw(&mut self, value: [u8; 2]) {
        self.var_id_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcParChange {
        PacketZcParChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb0, 0x0]),
        packet_id_raw: [0xb0, 0x0],
        var_id: 0,
        var_id_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcParChange {
    fn id(&self) -> &str {
       "0xb000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcParChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcLongparChange {
    pub fn packet_id() -> &'static str {
        "0xb100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcLongparChange {
        let mut offset: usize = 0;
        PacketZcLongparChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            var_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            amount: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            amount_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var_id).unwrap();
        self.var_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.amount).unwrap();
        self.amount_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.var_id_raw.to_vec());
        wtr.append(&mut self.amount_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_var_id(&mut self, value: u16) {
        self.var_id = value;
    }
    pub fn set_var_id_raw(&mut self, value: [u8; 2]) {
        self.var_id_raw = value;
    }
    pub fn set_amount(&mut self, value: i32) {
        self.amount = value;
    }
    pub fn set_amount_raw(&mut self, value: [u8; 4]) {
        self.amount_raw = value;
    }
    pub fn new() -> PacketZcLongparChange {
        PacketZcLongparChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb1, 0x0]),
        packet_id_raw: [0xb1, 0x0],
        var_id: 0,
        var_id_raw: [0; 2],
        amount: 0,
        amount_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcLongparChange {
    fn id(&self) -> &str {
       "0xb100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcLongparChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRestart {
    pub fn packet_id() -> &'static str {
        "0xb200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRestart {
        let mut offset: usize = 0;
        PacketCzRestart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzRestart {
        PacketCzRestart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb2, 0x0]),
        packet_id_raw: [0xb2, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzRestart {
    fn id(&self) -> &str {
       "0xb200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRestart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRestartAck {
    pub fn packet_id() -> &'static str {
        "0xb300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRestartAck {
        let mut offset: usize = 0;
        PacketZcRestartAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcRestartAck {
        PacketZcRestartAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb3, 0x0]),
        packet_id_raw: [0xb3, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcRestartAck {
    fn id(&self) -> &str {
       "0xb300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRestartAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSayDialog {
    pub fn packet_id() -> &'static str {
        "0xb400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSayDialog {
        let mut offset: usize = 0;
        PacketZcSayDialog {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcSayDialog {
        PacketZcSayDialog {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb4, 0x0]),
        packet_id_raw: [0xb4, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        naid: 0,
        naid_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcSayDialog {
    fn id(&self) -> &str {
       "0xb400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSayDialog {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcWaitDialog {
    pub fn packet_id() -> &'static str {
        "0xb500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcWaitDialog {
        let mut offset: usize = 0;
        PacketZcWaitDialog {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketZcWaitDialog {
        PacketZcWaitDialog {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb5, 0x0]),
        packet_id_raw: [0xb5, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcWaitDialog {
    fn id(&self) -> &str {
       "0xb500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcWaitDialog {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCloseDialog {
    pub fn packet_id() -> &'static str {
        "0xb600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCloseDialog {
        let mut offset: usize = 0;
        PacketZcCloseDialog {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketZcCloseDialog {
        PacketZcCloseDialog {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb6, 0x0]),
        packet_id_raw: [0xb6, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcCloseDialog {
    fn id(&self) -> &str {
       "0xb600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCloseDialog {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMenuList {
    pub fn packet_id() -> &'static str {
        "0xb700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMenuList {
        let mut offset: usize = 0;
        PacketZcMenuList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcMenuList {
        PacketZcMenuList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb7, 0x0]),
        packet_id_raw: [0xb7, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        naid: 0,
        naid_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcMenuList {
    fn id(&self) -> &str {
       "0xb700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMenuList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChooseMenu {
    pub fn packet_id() -> &'static str {
        "0xb800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChooseMenu {
        let mut offset: usize = 0;
        PacketCzChooseMenu {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.num).unwrap();
        self.num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_num(&mut self, value: u8) {
        self.num = value;
    }
    pub fn set_num_raw(&mut self, value: [u8; 1]) {
        self.num_raw = value;
    }
    pub fn new() -> PacketCzChooseMenu {
        PacketCzChooseMenu {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb8, 0x0]),
        packet_id_raw: [0xb8, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        num: 0,
        num_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzChooseMenu {
    fn id(&self) -> &str {
       "0xb800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChooseMenu {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqNextScript {
    pub fn packet_id() -> &'static str {
        "0xb900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqNextScript {
        let mut offset: usize = 0;
        PacketCzReqNextScript {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketCzReqNextScript {
        PacketCzReqNextScript {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb9, 0x0]),
        packet_id_raw: [0xb9, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqNextScript {
    fn id(&self) -> &str {
       "0xb900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqNextScript {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqStatus {
    pub fn packet_id() -> &'static str {
        "0xba00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqStatus {
        let mut offset: usize = 0;
        PacketCzReqStatus {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqStatus {
        PacketCzReqStatus {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xba, 0x0]),
        packet_id_raw: [0xba, 0x0],
        }
    }
}

impl Packet for PacketCzReqStatus {
    fn id(&self) -> &str {
       "0xba00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqStatus {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzStatusChange {
    pub fn packet_id() -> &'static str {
        "0xbb00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzStatusChange {
        let mut offset: usize = 0;
        PacketCzStatusChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            status_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            status_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            change_amount: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            change_amount_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.status_id).unwrap();
        self.status_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.change_amount).unwrap();
        self.change_amount_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.status_id_raw.to_vec());
        wtr.append(&mut self.change_amount_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_status_id(&mut self, value: u16) {
        self.status_id = value;
    }
    pub fn set_status_id_raw(&mut self, value: [u8; 2]) {
        self.status_id_raw = value;
    }
    pub fn set_change_amount(&mut self, value: u8) {
        self.change_amount = value;
    }
    pub fn set_change_amount_raw(&mut self, value: [u8; 1]) {
        self.change_amount_raw = value;
    }
    pub fn new() -> PacketCzStatusChange {
        PacketCzStatusChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xbb, 0x0]),
        packet_id_raw: [0xbb, 0x0],
        status_id: 0,
        status_id_raw: [0; 2],
        change_amount: 0,
        change_amount_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzStatusChange {
    fn id(&self) -> &str {
       "0xbb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzStatusChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStatusChangeAck {
    pub fn packet_id() -> &'static str {
        "0xbc00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStatusChangeAck {
        let mut offset: usize = 0;
        PacketZcStatusChangeAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            status_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            status_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            value: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.status_id).unwrap();
        self.status_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.status_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_status_id(&mut self, value: u16) {
        self.status_id = value;
    }
    pub fn set_status_id_raw(&mut self, value: [u8; 2]) {
        self.status_id_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_value(&mut self, value: u8) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 1]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcStatusChangeAck {
        PacketZcStatusChangeAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xbc, 0x0]),
        packet_id_raw: [0xbc, 0x0],
        status_id: 0,
        status_id_raw: [0; 2],
        result: false,
        result_raw: [0; 1],
        value: 0,
        value_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcStatusChangeAck {
    fn id(&self) -> &str {
       "0xbc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStatusChangeAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStatus {
    pub fn packet_id() -> &'static str {
        "0xbd00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStatus {
        let mut offset: usize = 0;
        PacketZcStatus {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            att_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            att_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            refining_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            refining_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_matt_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_matt_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            min_matt_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            min_matt_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itemdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itemdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plusdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plusdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plusmdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plusmdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hit_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hit_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            avoid_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            avoid_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plus_avoid_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plus_avoid_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            critical_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            critical_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plus_aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plus_aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.str).unwrap();
        self.str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_str).unwrap();
        self.standard_str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.agi).unwrap();
        self.agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_agi).unwrap();
        self.standard_agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.vit).unwrap();
        self.vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_vit).unwrap();
        self.standard_vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.int).unwrap();
        self.int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_int).unwrap();
        self.standard_int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dex).unwrap();
        self.dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_dex).unwrap();
        self.standard_dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.luk).unwrap();
        self.luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_luk).unwrap();
        self.standard_luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.att_power).unwrap();
        self.att_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.refining_power).unwrap();
        self.refining_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_matt_power).unwrap();
        self.max_matt_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.min_matt_power).unwrap();
        self.min_matt_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.itemdef_power).unwrap();
        self.itemdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plusdef_power).unwrap();
        self.plusdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef_power).unwrap();
        self.mdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plusmdef_power).unwrap();
        self.plusmdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hit_success_value).unwrap();
        self.hit_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.avoid_success_value).unwrap();
        self.avoid_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plus_avoid_success_value).unwrap();
        self.plus_avoid_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.critical_success_value).unwrap();
        self.critical_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.aspd).unwrap();
        self.aspd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plus_aspd).unwrap();
        self.plus_aspd_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.str_raw.to_vec());
        wtr.append(&mut self.standard_str_raw.to_vec());
        wtr.append(&mut self.agi_raw.to_vec());
        wtr.append(&mut self.standard_agi_raw.to_vec());
        wtr.append(&mut self.vit_raw.to_vec());
        wtr.append(&mut self.standard_vit_raw.to_vec());
        wtr.append(&mut self.int_raw.to_vec());
        wtr.append(&mut self.standard_int_raw.to_vec());
        wtr.append(&mut self.dex_raw.to_vec());
        wtr.append(&mut self.standard_dex_raw.to_vec());
        wtr.append(&mut self.luk_raw.to_vec());
        wtr.append(&mut self.standard_luk_raw.to_vec());
        wtr.append(&mut self.att_power_raw.to_vec());
        wtr.append(&mut self.refining_power_raw.to_vec());
        wtr.append(&mut self.max_matt_power_raw.to_vec());
        wtr.append(&mut self.min_matt_power_raw.to_vec());
        wtr.append(&mut self.itemdef_power_raw.to_vec());
        wtr.append(&mut self.plusdef_power_raw.to_vec());
        wtr.append(&mut self.mdef_power_raw.to_vec());
        wtr.append(&mut self.plusmdef_power_raw.to_vec());
        wtr.append(&mut self.hit_success_value_raw.to_vec());
        wtr.append(&mut self.avoid_success_value_raw.to_vec());
        wtr.append(&mut self.plus_avoid_success_value_raw.to_vec());
        wtr.append(&mut self.critical_success_value_raw.to_vec());
        wtr.append(&mut self.aspd_raw.to_vec());
        wtr.append(&mut self.plus_aspd_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 44;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_point(&mut self, value: i16) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 2]) {
        self.point_raw = value;
    }
    pub fn set_str(&mut self, value: u8) {
        self.str = value;
    }
    pub fn set_str_raw(&mut self, value: [u8; 1]) {
        self.str_raw = value;
    }
    pub fn set_standard_str(&mut self, value: u8) {
        self.standard_str = value;
    }
    pub fn set_standard_str_raw(&mut self, value: [u8; 1]) {
        self.standard_str_raw = value;
    }
    pub fn set_agi(&mut self, value: u8) {
        self.agi = value;
    }
    pub fn set_agi_raw(&mut self, value: [u8; 1]) {
        self.agi_raw = value;
    }
    pub fn set_standard_agi(&mut self, value: u8) {
        self.standard_agi = value;
    }
    pub fn set_standard_agi_raw(&mut self, value: [u8; 1]) {
        self.standard_agi_raw = value;
    }
    pub fn set_vit(&mut self, value: u8) {
        self.vit = value;
    }
    pub fn set_vit_raw(&mut self, value: [u8; 1]) {
        self.vit_raw = value;
    }
    pub fn set_standard_vit(&mut self, value: u8) {
        self.standard_vit = value;
    }
    pub fn set_standard_vit_raw(&mut self, value: [u8; 1]) {
        self.standard_vit_raw = value;
    }
    pub fn set_int(&mut self, value: u8) {
        self.int = value;
    }
    pub fn set_int_raw(&mut self, value: [u8; 1]) {
        self.int_raw = value;
    }
    pub fn set_standard_int(&mut self, value: u8) {
        self.standard_int = value;
    }
    pub fn set_standard_int_raw(&mut self, value: [u8; 1]) {
        self.standard_int_raw = value;
    }
    pub fn set_dex(&mut self, value: u8) {
        self.dex = value;
    }
    pub fn set_dex_raw(&mut self, value: [u8; 1]) {
        self.dex_raw = value;
    }
    pub fn set_standard_dex(&mut self, value: u8) {
        self.standard_dex = value;
    }
    pub fn set_standard_dex_raw(&mut self, value: [u8; 1]) {
        self.standard_dex_raw = value;
    }
    pub fn set_luk(&mut self, value: u8) {
        self.luk = value;
    }
    pub fn set_luk_raw(&mut self, value: [u8; 1]) {
        self.luk_raw = value;
    }
    pub fn set_standard_luk(&mut self, value: u8) {
        self.standard_luk = value;
    }
    pub fn set_standard_luk_raw(&mut self, value: [u8; 1]) {
        self.standard_luk_raw = value;
    }
    pub fn set_att_power(&mut self, value: i16) {
        self.att_power = value;
    }
    pub fn set_att_power_raw(&mut self, value: [u8; 2]) {
        self.att_power_raw = value;
    }
    pub fn set_refining_power(&mut self, value: i16) {
        self.refining_power = value;
    }
    pub fn set_refining_power_raw(&mut self, value: [u8; 2]) {
        self.refining_power_raw = value;
    }
    pub fn set_max_matt_power(&mut self, value: i16) {
        self.max_matt_power = value;
    }
    pub fn set_max_matt_power_raw(&mut self, value: [u8; 2]) {
        self.max_matt_power_raw = value;
    }
    pub fn set_min_matt_power(&mut self, value: i16) {
        self.min_matt_power = value;
    }
    pub fn set_min_matt_power_raw(&mut self, value: [u8; 2]) {
        self.min_matt_power_raw = value;
    }
    pub fn set_itemdef_power(&mut self, value: i16) {
        self.itemdef_power = value;
    }
    pub fn set_itemdef_power_raw(&mut self, value: [u8; 2]) {
        self.itemdef_power_raw = value;
    }
    pub fn set_plusdef_power(&mut self, value: i16) {
        self.plusdef_power = value;
    }
    pub fn set_plusdef_power_raw(&mut self, value: [u8; 2]) {
        self.plusdef_power_raw = value;
    }
    pub fn set_mdef_power(&mut self, value: i16) {
        self.mdef_power = value;
    }
    pub fn set_mdef_power_raw(&mut self, value: [u8; 2]) {
        self.mdef_power_raw = value;
    }
    pub fn set_plusmdef_power(&mut self, value: i16) {
        self.plusmdef_power = value;
    }
    pub fn set_plusmdef_power_raw(&mut self, value: [u8; 2]) {
        self.plusmdef_power_raw = value;
    }
    pub fn set_hit_success_value(&mut self, value: i16) {
        self.hit_success_value = value;
    }
    pub fn set_hit_success_value_raw(&mut self, value: [u8; 2]) {
        self.hit_success_value_raw = value;
    }
    pub fn set_avoid_success_value(&mut self, value: i16) {
        self.avoid_success_value = value;
    }
    pub fn set_avoid_success_value_raw(&mut self, value: [u8; 2]) {
        self.avoid_success_value_raw = value;
    }
    pub fn set_plus_avoid_success_value(&mut self, value: i16) {
        self.plus_avoid_success_value = value;
    }
    pub fn set_plus_avoid_success_value_raw(&mut self, value: [u8; 2]) {
        self.plus_avoid_success_value_raw = value;
    }
    pub fn set_critical_success_value(&mut self, value: i16) {
        self.critical_success_value = value;
    }
    pub fn set_critical_success_value_raw(&mut self, value: [u8; 2]) {
        self.critical_success_value_raw = value;
    }
    pub fn set_aspd(&mut self, value: i16) {
        self.aspd = value;
    }
    pub fn set_aspd_raw(&mut self, value: [u8; 2]) {
        self.aspd_raw = value;
    }
    pub fn set_plus_aspd(&mut self, value: i16) {
        self.plus_aspd = value;
    }
    pub fn set_plus_aspd_raw(&mut self, value: [u8; 2]) {
        self.plus_aspd_raw = value;
    }
    pub fn new() -> PacketZcStatus {
        PacketZcStatus {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xbd, 0x0]),
        packet_id_raw: [0xbd, 0x0],
        point: 0,
        point_raw: [0; 2],
        str: 0,
        str_raw: [0; 1],
        standard_str: 0,
        standard_str_raw: [0; 1],
        agi: 0,
        agi_raw: [0; 1],
        standard_agi: 0,
        standard_agi_raw: [0; 1],
        vit: 0,
        vit_raw: [0; 1],
        standard_vit: 0,
        standard_vit_raw: [0; 1],
        int: 0,
        int_raw: [0; 1],
        standard_int: 0,
        standard_int_raw: [0; 1],
        dex: 0,
        dex_raw: [0; 1],
        standard_dex: 0,
        standard_dex_raw: [0; 1],
        luk: 0,
        luk_raw: [0; 1],
        standard_luk: 0,
        standard_luk_raw: [0; 1],
        att_power: 0,
        att_power_raw: [0; 2],
        refining_power: 0,
        refining_power_raw: [0; 2],
        max_matt_power: 0,
        max_matt_power_raw: [0; 2],
        min_matt_power: 0,
        min_matt_power_raw: [0; 2],
        itemdef_power: 0,
        itemdef_power_raw: [0; 2],
        plusdef_power: 0,
        plusdef_power_raw: [0; 2],
        mdef_power: 0,
        mdef_power_raw: [0; 2],
        plusmdef_power: 0,
        plusmdef_power_raw: [0; 2],
        hit_success_value: 0,
        hit_success_value_raw: [0; 2],
        avoid_success_value: 0,
        avoid_success_value_raw: [0; 2],
        plus_avoid_success_value: 0,
        plus_avoid_success_value_raw: [0; 2],
        critical_success_value: 0,
        critical_success_value_raw: [0; 2],
        aspd: 0,
        aspd_raw: [0; 2],
        plus_aspd: 0,
        plus_aspd_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcStatus {
    fn id(&self) -> &str {
       "0xbd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStatus {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStatusChange {
    pub fn packet_id() -> &'static str {
        "0xbe00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStatusChange {
        let mut offset: usize = 0;
        PacketZcStatusChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            status_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            status_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            value: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.status_id).unwrap();
        self.status_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.status_id_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_status_id(&mut self, value: u16) {
        self.status_id = value;
    }
    pub fn set_status_id_raw(&mut self, value: [u8; 2]) {
        self.status_id_raw = value;
    }
    pub fn set_value(&mut self, value: u8) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 1]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcStatusChange {
        PacketZcStatusChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xbe, 0x0]),
        packet_id_raw: [0xbe, 0x0],
        status_id: 0,
        status_id_raw: [0; 2],
        value: 0,
        value_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcStatusChange {
    fn id(&self) -> &str {
       "0xbe00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStatusChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqEmotion {
    pub fn packet_id() -> &'static str {
        "0xbf00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqEmotion {
        let mut offset: usize = 0;
        PacketCzReqEmotion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzReqEmotion {
        PacketCzReqEmotion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xbf, 0x0]),
        packet_id_raw: [0xbf, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzReqEmotion {
    fn id(&self) -> &str {
       "0xbf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqEmotion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEmotion {
    pub fn packet_id() -> &'static str {
        "0xc000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEmotion {
        let mut offset: usize = 0;
        PacketZcEmotion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcEmotion {
        PacketZcEmotion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc0, 0x0]),
        packet_id_raw: [0xc0, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcEmotion {
    fn id(&self) -> &str {
       "0xc000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEmotion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqUserCount {
    pub fn packet_id() -> &'static str {
        "0xc100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqUserCount {
        let mut offset: usize = 0;
        PacketCzReqUserCount {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqUserCount {
        PacketCzReqUserCount {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc1, 0x0]),
        packet_id_raw: [0xc1, 0x0],
        }
    }
}

impl Packet for PacketCzReqUserCount {
    fn id(&self) -> &str {
       "0xc100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqUserCount {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUserCount {
    pub fn packet_id() -> &'static str {
        "0xc200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUserCount {
        let mut offset: usize = 0;
        PacketZcUserCount {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcUserCount {
        PacketZcUserCount {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc2, 0x0]),
        packet_id_raw: [0xc2, 0x0],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcUserCount {
    fn id(&self) -> &str {
       "0xc200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUserCount {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSpriteChange {
    pub fn packet_id() -> &'static str {
        "0xc300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSpriteChange {
        let mut offset: usize = 0;
        PacketZcSpriteChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            value: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_value(&mut self, value: u8) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 1]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcSpriteChange {
        PacketZcSpriteChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc3, 0x0]),
        packet_id_raw: [0xc3, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        value: 0,
        value_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSpriteChange {
    fn id(&self) -> &str {
       "0xc300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSpriteChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSelectDealtype {
    pub fn packet_id() -> &'static str {
        "0xc400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSelectDealtype {
        let mut offset: usize = 0;
        PacketZcSelectDealtype {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketZcSelectDealtype {
        PacketZcSelectDealtype {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc4, 0x0]),
        packet_id_raw: [0xc4, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSelectDealtype {
    fn id(&self) -> &str {
       "0xc400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSelectDealtype {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAckSelectDealtype {
    pub fn packet_id() -> &'static str {
        "0xc500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAckSelectDealtype {
        let mut offset: usize = 0;
        PacketCzAckSelectDealtype {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzAckSelectDealtype {
        PacketCzAckSelectDealtype {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc5, 0x0]),
        packet_id_raw: [0xc5, 0x0],
        naid: 0,
        naid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzAckSelectDealtype {
    fn id(&self) -> &str {
       "0xc500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAckSelectDealtype {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcPurchaseItemlist {
    pub fn packet_id() -> &'static str {
        "0xc600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcPurchaseItemlist {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseItem::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPcPurchaseItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcPcPurchaseItemlist {
        PacketZcPcPurchaseItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc6, 0x0]),
        packet_id_raw: [0xc6, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPcPurchaseItemlist {
    fn id(&self) -> &str {
       "0xc600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcPurchaseItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcSellItemlist {
    pub fn packet_id() -> &'static str {
        "0xc700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcSellItemlist {
        let mut offset: usize = 0;
        let vec_type_len = SellItem::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<SellItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(SellItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPcSellItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<SellItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcPcSellItemlist {
        PacketZcPcSellItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc7, 0x0]),
        packet_id_raw: [0xc7, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPcSellItemlist {
    fn id(&self) -> &str {
       "0xc700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcSellItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPcPurchaseItemlist {
    pub fn packet_id() -> &'static str {
        "0xc800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPcPurchaseItemlist {
        let mut offset: usize = 0;
        let vec_type_len = CzPurchaseItem::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<CzPurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(CzPurchaseItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzPcPurchaseItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<CzPurchaseItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketCzPcPurchaseItemlist {
        PacketCzPcPurchaseItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc8, 0x0]),
        packet_id_raw: [0xc8, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzPcPurchaseItemlist {
    fn id(&self) -> &str {
       "0xc800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPcPurchaseItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPcSellItemlist {
    pub fn packet_id() -> &'static str {
        "0xc900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPcSellItemlist {
        let mut offset: usize = 0;
        let vec_type_len = CzSellItem::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<CzSellItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(CzSellItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzPcSellItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<CzSellItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketCzPcSellItemlist {
        PacketCzPcSellItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc9, 0x0]),
        packet_id_raw: [0xc9, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzPcSellItemlist {
    fn id(&self) -> &str {
       "0xc900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPcSellItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcPurchaseResult {
    pub fn packet_id() -> &'static str {
        "0xca00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcPurchaseResult {
        let mut offset: usize = 0;
        PacketZcPcPurchaseResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcPcPurchaseResult {
        PacketZcPcPurchaseResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xca, 0x0]),
        packet_id_raw: [0xca, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcPcPurchaseResult {
    fn id(&self) -> &str {
       "0xca00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcPurchaseResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcSellResult {
    pub fn packet_id() -> &'static str {
        "0xcb00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcSellResult {
        let mut offset: usize = 0;
        PacketZcPcSellResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcPcSellResult {
        PacketZcPcSellResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xcb, 0x0]),
        packet_id_raw: [0xcb, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcPcSellResult {
    fn id(&self) -> &str {
       "0xcb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcSellResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzDisconnectCharacter {
    pub fn packet_id() -> &'static str {
        "0xcc00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzDisconnectCharacter {
        let mut offset: usize = 0;
        PacketCzDisconnectCharacter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzDisconnectCharacter {
        PacketCzDisconnectCharacter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xcc, 0x0]),
        packet_id_raw: [0xcc, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzDisconnectCharacter {
    fn id(&self) -> &str {
       "0xcc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzDisconnectCharacter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckDisconnectCharacter {
    pub fn packet_id() -> &'static str {
        "0xcd00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckDisconnectCharacter {
        let mut offset: usize = 0;
        PacketZcAckDisconnectCharacter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckDisconnectCharacter {
        PacketZcAckDisconnectCharacter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xcd, 0x0]),
        packet_id_raw: [0xcd, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckDisconnectCharacter {
    fn id(&self) -> &str {
       "0xcd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckDisconnectCharacter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzDisconnectAllCharacter {
    pub fn packet_id() -> &'static str {
        "0xce00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzDisconnectAllCharacter {
        let mut offset: usize = 0;
        PacketCzDisconnectAllCharacter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzDisconnectAllCharacter {
        PacketCzDisconnectAllCharacter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xce, 0x0]),
        packet_id_raw: [0xce, 0x0],
        }
    }
}

impl Packet for PacketCzDisconnectAllCharacter {
    fn id(&self) -> &str {
       "0xce00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzDisconnectAllCharacter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSettingWhisperPc {
    pub fn packet_id() -> &'static str {
        "0xcf00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSettingWhisperPc {
        let mut offset: usize = 0;
        PacketCzSettingWhisperPc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzSettingWhisperPc {
        PacketCzSettingWhisperPc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xcf, 0x0]),
        packet_id_raw: [0xcf, 0x0],
        name: [0 as char; 24],
        name_raw: [0; 24],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzSettingWhisperPc {
    fn id(&self) -> &str {
       "0xcf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSettingWhisperPc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSettingWhisperState {
    pub fn packet_id() -> &'static str {
        "0xd000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSettingWhisperState {
        let mut offset: usize = 0;
        PacketCzSettingWhisperState {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzSettingWhisperState {
        PacketCzSettingWhisperState {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd0, 0x0]),
        packet_id_raw: [0xd0, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzSettingWhisperState {
    fn id(&self) -> &str {
       "0xd000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSettingWhisperState {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSettingWhisperPc {
    pub fn packet_id() -> &'static str {
        "0xd100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSettingWhisperPc {
        let mut offset: usize = 0;
        PacketZcSettingWhisperPc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcSettingWhisperPc {
        PacketZcSettingWhisperPc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd1, 0x0]),
        packet_id_raw: [0xd1, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSettingWhisperPc {
    fn id(&self) -> &str {
       "0xd100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSettingWhisperPc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSettingWhisperState {
    pub fn packet_id() -> &'static str {
        "0xd200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSettingWhisperState {
        let mut offset: usize = 0;
        PacketZcSettingWhisperState {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcSettingWhisperState {
        PacketZcSettingWhisperState {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd2, 0x0]),
        packet_id_raw: [0xd2, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSettingWhisperState {
    fn id(&self) -> &str {
       "0xd200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSettingWhisperState {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqWhisperList {
    pub fn packet_id() -> &'static str {
        "0xd300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqWhisperList {
        let mut offset: usize = 0;
        PacketCzReqWhisperList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqWhisperList {
        PacketCzReqWhisperList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd3, 0x0]),
        packet_id_raw: [0xd3, 0x0],
        }
    }
}

impl Packet for PacketCzReqWhisperList {
    fn id(&self) -> &str {
       "0xd300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqWhisperList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcWhisperList {
    pub fn packet_id() -> &'static str {
        "0xd400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcWhisperList {
        let mut offset: usize = 0;
        let vec_type_len = WhisperItem::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<WhisperItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(WhisperItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcWhisperList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wisper_list: {
                let field = vec_field.clone();
                field
            },
            wisper_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.wisper_list_raw = {
            self.wisper_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.wisper_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.wisper_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_wisper_list(&mut self, value: Vec<WhisperItem>) {
        self.wisper_list = value;
    }
    pub fn set_wisper_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.wisper_list_raw = value;
    }
    pub fn new() -> PacketZcWhisperList {
        PacketZcWhisperList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd4, 0x0]),
        packet_id_raw: [0xd4, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        wisper_list: vec![],
        wisper_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcWhisperList {
    fn id(&self) -> &str {
       "0xd400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcWhisperList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCreateChatroom {
    pub fn packet_id() -> &'static str {
        "0xd500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCreateChatroom {
        let mut offset: usize = 0;
        PacketCzCreateChatroom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            size: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            size_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 8] = [0 as char; 8];
                for (index, byte) in buffer[offset..offset + 8].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            title: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            title_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.size).unwrap();
        self.size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();
        self.title_raw = self.title.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.size_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        wtr.append(&mut self.title_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_size(&mut self, value: i16) {
        self.size = value;
    }
    pub fn set_size_raw(&mut self, value: [u8; 2]) {
        self.size_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 8]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 8]) {
        self.passwd_raw = value;
    }
    pub fn set_title(&mut self, value: String) {
        self.title = value;
    }
    pub fn set_title_raw(&mut self, value: Vec<u8>) {
        self.title_raw = value;
    }
    pub fn new() -> PacketCzCreateChatroom {
        PacketCzCreateChatroom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd5, 0x0]),
        packet_id_raw: [0xd5, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        size: 0,
        size_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        passwd: [0 as char; 8],
        passwd_raw: [0; 8],
        title: String::new(),
        title_raw: vec![],
        }
    }
}

impl Packet for PacketCzCreateChatroom {
    fn id(&self) -> &str {
       "0xd500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCreateChatroom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckCreateChatroom {
    pub fn packet_id() -> &'static str {
        "0xd600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckCreateChatroom {
        let mut offset: usize = 0;
        PacketZcAckCreateChatroom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckCreateChatroom {
        PacketZcAckCreateChatroom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd6, 0x0]),
        packet_id_raw: [0xd6, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckCreateChatroom {
    fn id(&self) -> &str {
       "0xd600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckCreateChatroom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRoomNewentry {
    pub fn packet_id() -> &'static str {
        "0xd700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRoomNewentry {
        let mut offset: usize = 0;
        PacketZcRoomNewentry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            room_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            room_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            maxcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            maxcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            curcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            curcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            title: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            title_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.room_id).unwrap();
        self.room_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.maxcount).unwrap();
        self.maxcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.curcount).unwrap();
        self.curcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        self.title_raw = self.title.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.room_id_raw.to_vec());
        wtr.append(&mut self.maxcount_raw.to_vec());
        wtr.append(&mut self.curcount_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.title_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_room_id(&mut self, value: u32) {
        self.room_id = value;
    }
    pub fn set_room_id_raw(&mut self, value: [u8; 4]) {
        self.room_id_raw = value;
    }
    pub fn set_maxcount(&mut self, value: i16) {
        self.maxcount = value;
    }
    pub fn set_maxcount_raw(&mut self, value: [u8; 2]) {
        self.maxcount_raw = value;
    }
    pub fn set_curcount(&mut self, value: i16) {
        self.curcount = value;
    }
    pub fn set_curcount_raw(&mut self, value: [u8; 2]) {
        self.curcount_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_title(&mut self, value: String) {
        self.title = value;
    }
    pub fn set_title_raw(&mut self, value: Vec<u8>) {
        self.title_raw = value;
    }
    pub fn new() -> PacketZcRoomNewentry {
        PacketZcRoomNewentry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd7, 0x0]),
        packet_id_raw: [0xd7, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        room_id: 0,
        room_id_raw: [0; 4],
        maxcount: 0,
        maxcount_raw: [0; 2],
        curcount: 0,
        curcount_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        title: String::new(),
        title_raw: vec![],
        }
    }
}

impl Packet for PacketZcRoomNewentry {
    fn id(&self) -> &str {
       "0xd700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRoomNewentry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDestroyRoom {
    pub fn packet_id() -> &'static str {
        "0xd800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDestroyRoom {
        let mut offset: usize = 0;
        PacketZcDestroyRoom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            room_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            room_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.room_id).unwrap();
        self.room_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.room_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_room_id(&mut self, value: u32) {
        self.room_id = value;
    }
    pub fn set_room_id_raw(&mut self, value: [u8; 4]) {
        self.room_id_raw = value;
    }
    pub fn new() -> PacketZcDestroyRoom {
        PacketZcDestroyRoom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd8, 0x0]),
        packet_id_raw: [0xd8, 0x0],
        room_id: 0,
        room_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDestroyRoom {
    fn id(&self) -> &str {
       "0xd800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDestroyRoom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqEnterRoom {
    pub fn packet_id() -> &'static str {
        "0xd900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqEnterRoom {
        let mut offset: usize = 0;
        PacketCzReqEnterRoom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            room_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            room_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 8] = [0 as char; 8];
                for (index, byte) in buffer[offset..offset + 8].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.room_id).unwrap();
        self.room_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.room_id_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_room_id(&mut self, value: u32) {
        self.room_id = value;
    }
    pub fn set_room_id_raw(&mut self, value: [u8; 4]) {
        self.room_id_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 8]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 8]) {
        self.passwd_raw = value;
    }
    pub fn new() -> PacketCzReqEnterRoom {
        PacketCzReqEnterRoom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd9, 0x0]),
        packet_id_raw: [0xd9, 0x0],
        room_id: 0,
        room_id_raw: [0; 4],
        passwd: [0 as char; 8],
        passwd_raw: [0; 8],
        }
    }
}

impl Packet for PacketCzReqEnterRoom {
    fn id(&self) -> &str {
       "0xd900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqEnterRoom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRefuseEnterRoom {
    pub fn packet_id() -> &'static str {
        "0xda00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRefuseEnterRoom {
        let mut offset: usize = 0;
        PacketZcRefuseEnterRoom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcRefuseEnterRoom {
        PacketZcRefuseEnterRoom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xda, 0x0]),
        packet_id_raw: [0xda, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcRefuseEnterRoom {
    fn id(&self) -> &str {
       "0xda00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRefuseEnterRoom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEnterRoom {
    pub fn packet_id() -> &'static str {
        "0xdb00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEnterRoom {
        let mut offset: usize = 0;
        let vec_type_len = RoomMember::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<RoomMember> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(RoomMember::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcEnterRoom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            room_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            room_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            member_list: {
                let field = vec_field.clone();
                field
            },
            member_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.room_id).unwrap();
        self.room_id_raw = wtr.try_into().unwrap();
        self.member_list_raw = {
            self.member_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.room_id_raw.to_vec());
        self.member_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_room_id(&mut self, value: u32) {
        self.room_id = value;
    }
    pub fn set_room_id_raw(&mut self, value: [u8; 4]) {
        self.room_id_raw = value;
    }
    pub fn set_member_list(&mut self, value: Vec<RoomMember>) {
        self.member_list = value;
    }
    pub fn set_member_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_list_raw = value;
    }
    pub fn new() -> PacketZcEnterRoom {
        PacketZcEnterRoom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xdb, 0x0]),
        packet_id_raw: [0xdb, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        room_id: 0,
        room_id_raw: [0; 4],
        member_list: vec![],
        member_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcEnterRoom {
    fn id(&self) -> &str {
       "0xdb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEnterRoom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemberNewentry {
    pub fn packet_id() -> &'static str {
        "0xdc00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemberNewentry {
        let mut offset: usize = 0;
        PacketZcMemberNewentry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            curcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            curcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.curcount).unwrap();
        self.curcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.curcount_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_curcount(&mut self, value: i16) {
        self.curcount = value;
    }
    pub fn set_curcount_raw(&mut self, value: [u8; 2]) {
        self.curcount_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcMemberNewentry {
        PacketZcMemberNewentry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xdc, 0x0]),
        packet_id_raw: [0xdc, 0x0],
        curcount: 0,
        curcount_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcMemberNewentry {
    fn id(&self) -> &str {
       "0xdc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemberNewentry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemberExit {
    pub fn packet_id() -> &'static str {
        "0xdd00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemberExit {
        let mut offset: usize = 0;
        PacketZcMemberExit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            curcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            curcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.curcount).unwrap();
        self.curcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.curcount_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 29;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_curcount(&mut self, value: i16) {
        self.curcount = value;
    }
    pub fn set_curcount_raw(&mut self, value: [u8; 2]) {
        self.curcount_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcMemberExit {
        PacketZcMemberExit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xdd, 0x0]),
        packet_id_raw: [0xdd, 0x0],
        curcount: 0,
        curcount_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcMemberExit {
    fn id(&self) -> &str {
       "0xdd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemberExit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChangeChatroom {
    pub fn packet_id() -> &'static str {
        "0xde00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChangeChatroom {
        let mut offset: usize = 0;
        PacketCzChangeChatroom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            size: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            size_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 8] = [0 as char; 8];
                for (index, byte) in buffer[offset..offset + 8].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            title: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            title_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.size).unwrap();
        self.size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();
        self.title_raw = self.title.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.size_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        wtr.append(&mut self.title_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_size(&mut self, value: i16) {
        self.size = value;
    }
    pub fn set_size_raw(&mut self, value: [u8; 2]) {
        self.size_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 8]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 8]) {
        self.passwd_raw = value;
    }
    pub fn set_title(&mut self, value: String) {
        self.title = value;
    }
    pub fn set_title_raw(&mut self, value: Vec<u8>) {
        self.title_raw = value;
    }
    pub fn new() -> PacketCzChangeChatroom {
        PacketCzChangeChatroom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xde, 0x0]),
        packet_id_raw: [0xde, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        size: 0,
        size_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        passwd: [0 as char; 8],
        passwd_raw: [0; 8],
        title: String::new(),
        title_raw: vec![],
        }
    }
}

impl Packet for PacketCzChangeChatroom {
    fn id(&self) -> &str {
       "0xde00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChangeChatroom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcChangeChatroom {
    pub fn packet_id() -> &'static str {
        "0xdf00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcChangeChatroom {
        let mut offset: usize = 0;
        PacketZcChangeChatroom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            room_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            room_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            maxcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            maxcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            curcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            curcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            title: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            title_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.room_id).unwrap();
        self.room_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.maxcount).unwrap();
        self.maxcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.curcount).unwrap();
        self.curcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        self.title_raw = self.title.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.room_id_raw.to_vec());
        wtr.append(&mut self.maxcount_raw.to_vec());
        wtr.append(&mut self.curcount_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.title_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_room_id(&mut self, value: u32) {
        self.room_id = value;
    }
    pub fn set_room_id_raw(&mut self, value: [u8; 4]) {
        self.room_id_raw = value;
    }
    pub fn set_maxcount(&mut self, value: i16) {
        self.maxcount = value;
    }
    pub fn set_maxcount_raw(&mut self, value: [u8; 2]) {
        self.maxcount_raw = value;
    }
    pub fn set_curcount(&mut self, value: i16) {
        self.curcount = value;
    }
    pub fn set_curcount_raw(&mut self, value: [u8; 2]) {
        self.curcount_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_title(&mut self, value: String) {
        self.title = value;
    }
    pub fn set_title_raw(&mut self, value: Vec<u8>) {
        self.title_raw = value;
    }
    pub fn new() -> PacketZcChangeChatroom {
        PacketZcChangeChatroom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xdf, 0x0]),
        packet_id_raw: [0xdf, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        room_id: 0,
        room_id_raw: [0; 4],
        maxcount: 0,
        maxcount_raw: [0; 2],
        curcount: 0,
        curcount_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        title: String::new(),
        title_raw: vec![],
        }
    }
}

impl Packet for PacketZcChangeChatroom {
    fn id(&self) -> &str {
       "0xdf00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcChangeChatroom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqRoleChange {
    pub fn packet_id() -> &'static str {
        "0xe000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqRoleChange {
        let mut offset: usize = 0;
        PacketCzReqRoleChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            role: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            role_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.role).unwrap();
        self.role_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.role_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_role(&mut self, value: u32) {
        self.role = value;
    }
    pub fn set_role_raw(&mut self, value: [u8; 4]) {
        self.role_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketCzReqRoleChange {
        PacketCzReqRoleChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe0, 0x0]),
        packet_id_raw: [0xe0, 0x0],
        role: 0,
        role_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqRoleChange {
    fn id(&self) -> &str {
       "0xe000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqRoleChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRoleChange {
    pub fn packet_id() -> &'static str {
        "0xe100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRoleChange {
        let mut offset: usize = 0;
        PacketZcRoleChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            role: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            role_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.role).unwrap();
        self.role_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.role_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_role(&mut self, value: u32) {
        self.role = value;
    }
    pub fn set_role_raw(&mut self, value: [u8; 4]) {
        self.role_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcRoleChange {
        PacketZcRoleChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe1, 0x0]),
        packet_id_raw: [0xe1, 0x0],
        role: 0,
        role_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcRoleChange {
    fn id(&self) -> &str {
       "0xe100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRoleChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqExpelMember {
    pub fn packet_id() -> &'static str {
        "0xe200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqExpelMember {
        let mut offset: usize = 0;
        PacketCzReqExpelMember {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketCzReqExpelMember {
        PacketCzReqExpelMember {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe2, 0x0]),
        packet_id_raw: [0xe2, 0x0],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqExpelMember {
    fn id(&self) -> &str {
       "0xe200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqExpelMember {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzExitRoom {
    pub fn packet_id() -> &'static str {
        "0xe300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzExitRoom {
        let mut offset: usize = 0;
        PacketCzExitRoom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzExitRoom {
        PacketCzExitRoom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe3, 0x0]),
        packet_id_raw: [0xe3, 0x0],
        }
    }
}

impl Packet for PacketCzExitRoom {
    fn id(&self) -> &str {
       "0xe300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzExitRoom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xe400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqExchangeItem {
        let mut offset: usize = 0;
        PacketCzReqExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqExchangeItem {
        PacketCzReqExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe4, 0x0]),
        packet_id_raw: [0xe4, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqExchangeItem {
    fn id(&self) -> &str {
       "0xe400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xe500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqExchangeItem {
        let mut offset: usize = 0;
        PacketZcReqExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcReqExchangeItem {
        PacketZcReqExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe5, 0x0]),
        packet_id_raw: [0xe5, 0x0],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqExchangeItem {
    fn id(&self) -> &str {
       "0xe500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAckExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xe600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAckExchangeItem {
        let mut offset: usize = 0;
        PacketCzAckExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketCzAckExchangeItem {
        PacketCzAckExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe6, 0x0]),
        packet_id_raw: [0xe6, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzAckExchangeItem {
    fn id(&self) -> &str {
       "0xe600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAckExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xe700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckExchangeItem {
        let mut offset: usize = 0;
        PacketZcAckExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckExchangeItem {
        PacketZcAckExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe7, 0x0]),
        packet_id_raw: [0xe7, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckExchangeItem {
    fn id(&self) -> &str {
       "0xe700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAddExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xe800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAddExchangeItem {
        let mut offset: usize = 0;
        PacketCzAddExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzAddExchangeItem {
        PacketCzAddExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe8, 0x0]),
        packet_id_raw: [0xe8, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAddExchangeItem {
    fn id(&self) -> &str {
       "0xe800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAddExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xe900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddExchangeItem {
        let mut offset: usize = 0;
        PacketZcAddExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PacketZcAddExchangeItem {
        PacketZcAddExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe9, 0x0]),
        packet_id_raw: [0xe9, 0x0],
        count: 0,
        count_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Packet for PacketZcAddExchangeItem {
    fn id(&self) -> &str {
       "0xe900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckAddExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xea00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckAddExchangeItem {
        let mut offset: usize = 0;
        PacketZcAckAddExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckAddExchangeItem {
        PacketZcAckAddExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xea, 0x0]),
        packet_id_raw: [0xea, 0x0],
        index: 0,
        index_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckAddExchangeItem {
    fn id(&self) -> &str {
       "0xea00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckAddExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzConcludeExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xeb00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzConcludeExchangeItem {
        let mut offset: usize = 0;
        PacketCzConcludeExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzConcludeExchangeItem {
        PacketCzConcludeExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xeb, 0x0]),
        packet_id_raw: [0xeb, 0x0],
        }
    }
}

impl Packet for PacketCzConcludeExchangeItem {
    fn id(&self) -> &str {
       "0xeb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzConcludeExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcConcludeExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xec00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcConcludeExchangeItem {
        let mut offset: usize = 0;
        PacketZcConcludeExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            who: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            who_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.who).unwrap();
        self.who_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.who_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_who(&mut self, value: u8) {
        self.who = value;
    }
    pub fn set_who_raw(&mut self, value: [u8; 1]) {
        self.who_raw = value;
    }
    pub fn new() -> PacketZcConcludeExchangeItem {
        PacketZcConcludeExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xec, 0x0]),
        packet_id_raw: [0xec, 0x0],
        who: 0,
        who_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcConcludeExchangeItem {
    fn id(&self) -> &str {
       "0xec00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcConcludeExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCancelExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xed00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCancelExchangeItem {
        let mut offset: usize = 0;
        PacketCzCancelExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzCancelExchangeItem {
        PacketCzCancelExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xed, 0x0]),
        packet_id_raw: [0xed, 0x0],
        }
    }
}

impl Packet for PacketCzCancelExchangeItem {
    fn id(&self) -> &str {
       "0xed00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCancelExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCancelExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xee00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCancelExchangeItem {
        let mut offset: usize = 0;
        PacketZcCancelExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcCancelExchangeItem {
        PacketZcCancelExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xee, 0x0]),
        packet_id_raw: [0xee, 0x0],
        }
    }
}

impl Packet for PacketZcCancelExchangeItem {
    fn id(&self) -> &str {
       "0xee00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCancelExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzExecExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xef00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzExecExchangeItem {
        let mut offset: usize = 0;
        PacketCzExecExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzExecExchangeItem {
        PacketCzExecExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xef, 0x0]),
        packet_id_raw: [0xef, 0x0],
        }
    }
}

impl Packet for PacketCzExecExchangeItem {
    fn id(&self) -> &str {
       "0xef00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzExecExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcExecExchangeItem {
    pub fn packet_id() -> &'static str {
        "0xf000"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcExecExchangeItem {
        let mut offset: usize = 0;
        PacketZcExecExchangeItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcExecExchangeItem {
        PacketZcExecExchangeItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf0, 0x0]),
        packet_id_raw: [0xf0, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcExecExchangeItem {
    fn id(&self) -> &str {
       "0xf000"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcExecExchangeItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcExchangeitemUndo {
    pub fn packet_id() -> &'static str {
        "0xf100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcExchangeitemUndo {
        let mut offset: usize = 0;
        PacketZcExchangeitemUndo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcExchangeitemUndo {
        PacketZcExchangeitemUndo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf1, 0x0]),
        packet_id_raw: [0xf1, 0x0],
        }
    }
}

impl Packet for PacketZcExchangeitemUndo {
    fn id(&self) -> &str {
       "0xf100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcExchangeitemUndo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStoreitemCountinfo {
    pub fn packet_id() -> &'static str {
        "0xf200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStoreitemCountinfo {
        let mut offset: usize = 0;
        PacketZcNotifyStoreitemCountinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cur_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            cur_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.cur_count).unwrap();
        self.cur_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_count).unwrap();
        self.max_count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.cur_count_raw.to_vec());
        wtr.append(&mut self.max_count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_cur_count(&mut self, value: i16) {
        self.cur_count = value;
    }
    pub fn set_cur_count_raw(&mut self, value: [u8; 2]) {
        self.cur_count_raw = value;
    }
    pub fn set_max_count(&mut self, value: i16) {
        self.max_count = value;
    }
    pub fn set_max_count_raw(&mut self, value: [u8; 2]) {
        self.max_count_raw = value;
    }
    pub fn new() -> PacketZcNotifyStoreitemCountinfo {
        PacketZcNotifyStoreitemCountinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf2, 0x0]),
        packet_id_raw: [0xf2, 0x0],
        cur_count: 0,
        cur_count_raw: [0; 2],
        max_count: 0,
        max_count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyStoreitemCountinfo {
    fn id(&self) -> &str {
       "0xf200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStoreitemCountinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPlayerChat {
    pub fn packet_id() -> &'static str {
        "0xf300"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPlayerChat {
        let mut offset: usize = 0;
        PacketCzPlayerChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzPlayerChat {
        PacketCzPlayerChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf3, 0x0]),
        packet_id_raw: [0xf3, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzPlayerChat {
    fn id(&self) -> &str {
       "0xf300"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPlayerChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddItemToStore {
    pub fn packet_id() -> &'static str {
        "0xf400"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddItemToStore {
        let mut offset: usize = 0;
        PacketZcAddItemToStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 21;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PacketZcAddItemToStore {
        PacketZcAddItemToStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf4, 0x0]),
        packet_id_raw: [0xf4, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Packet for PacketZcAddItemToStore {
    fn id(&self) -> &str {
       "0xf400"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddItemToStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMoveItemFromStoreToBody {
    pub fn packet_id() -> &'static str {
        "0xf500"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMoveItemFromStoreToBody {
        let mut offset: usize = 0;
        PacketCzMoveItemFromStoreToBody {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzMoveItemFromStoreToBody {
        PacketCzMoveItemFromStoreToBody {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf5, 0x0]),
        packet_id_raw: [0xf5, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMoveItemFromStoreToBody {
    fn id(&self) -> &str {
       "0xf500"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMoveItemFromStoreToBody {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteItemFromStore {
    pub fn packet_id() -> &'static str {
        "0xf600"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteItemFromStore {
        let mut offset: usize = 0;
        PacketZcDeleteItemFromStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcDeleteItemFromStore {
        PacketZcDeleteItemFromStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf6, 0x0]),
        packet_id_raw: [0xf6, 0x0],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDeleteItemFromStore {
    fn id(&self) -> &str {
       "0xf600"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteItemFromStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCloseStore {
    pub fn packet_id() -> &'static str {
        "0xf700"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCloseStore {
        let mut offset: usize = 0;
        PacketCzCloseStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzCloseStore {
        PacketCzCloseStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf7, 0x0]),
        packet_id_raw: [0xf7, 0x0],
        }
    }
}

impl Packet for PacketCzCloseStore {
    fn id(&self) -> &str {
       "0xf700"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCloseStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCloseStore {
    pub fn packet_id() -> &'static str {
        "0xf800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCloseStore {
        let mut offset: usize = 0;
        PacketZcCloseStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcCloseStore {
        PacketZcCloseStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf8, 0x0]),
        packet_id_raw: [0xf8, 0x0],
        }
    }
}

impl Packet for PacketZcCloseStore {
    fn id(&self) -> &str {
       "0xf800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCloseStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMakeGroup {
    pub fn packet_id() -> &'static str {
        "0xf900"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMakeGroup {
        let mut offset: usize = 0;
        PacketCzMakeGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn new() -> PacketCzMakeGroup {
        PacketCzMakeGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xf9, 0x0]),
        packet_id_raw: [0xf9, 0x0],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzMakeGroup {
    fn id(&self) -> &str {
       "0xf900"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMakeGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckMakeGroup {
    pub fn packet_id() -> &'static str {
        "0xfa00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckMakeGroup {
        let mut offset: usize = 0;
        PacketZcAckMakeGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckMakeGroup {
        PacketZcAckMakeGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xfa, 0x0]),
        packet_id_raw: [0xfa, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckMakeGroup {
    fn id(&self) -> &str {
       "0xfa00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckMakeGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGroupList {
    pub fn packet_id() -> &'static str {
        "0xfb00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGroupList {
        let mut offset: usize = 0;
        let vec_type_len = GroupmemberInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 28) / vec_type_len;
        let mut vec_field: Vec<GroupmemberInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 28 + (vec_type_len * (i - 1));
            let end_pos = 28 + vec_type_len * i;
            vec_field.push(GroupmemberInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcGroupList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            group_info: {
                let field = vec_field.clone();
                field
            },
            group_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();
        self.group_info_raw = {
            self.group_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.group_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        self.group_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn set_group_info(&mut self, value: Vec<GroupmemberInfo>) {
        self.group_info = value;
    }
    pub fn set_group_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.group_info_raw = value;
    }
    pub fn new() -> PacketZcGroupList {
        PacketZcGroupList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xfb, 0x0]),
        packet_id_raw: [0xfb, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        group_info: vec![],
        group_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcGroupList {
    fn id(&self) -> &str {
       "0xfb00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGroupList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqJoinGroup {
    pub fn packet_id() -> &'static str {
        "0xfc00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqJoinGroup {
        let mut offset: usize = 0;
        PacketCzReqJoinGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqJoinGroup {
        PacketCzReqJoinGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xfc, 0x0]),
        packet_id_raw: [0xfc, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqJoinGroup {
    fn id(&self) -> &str {
       "0xfc00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqJoinGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqJoinGroup {
    pub fn packet_id() -> &'static str {
        "0xfd00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqJoinGroup {
        let mut offset: usize = 0;
        PacketZcAckReqJoinGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            answer: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_answer(&mut self, value: u8) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 1]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketZcAckReqJoinGroup {
        PacketZcAckReqJoinGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xfd, 0x0]),
        packet_id_raw: [0xfd, 0x0],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        answer: 0,
        answer_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckReqJoinGroup {
    fn id(&self) -> &str {
       "0xfd00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqJoinGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqJoinGroup {
    pub fn packet_id() -> &'static str {
        "0xfe00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqJoinGroup {
        let mut offset: usize = 0;
        PacketZcReqJoinGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            grid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            grid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.grid).unwrap();
        self.grid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.grid_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_grid(&mut self, value: u32) {
        self.grid = value;
    }
    pub fn set_grid_raw(&mut self, value: [u8; 4]) {
        self.grid_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn new() -> PacketZcReqJoinGroup {
        PacketZcReqJoinGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xfe, 0x0]),
        packet_id_raw: [0xfe, 0x0],
        grid: 0,
        grid_raw: [0; 4],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqJoinGroup {
    fn id(&self) -> &str {
       "0xfe00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqJoinGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzJoinGroup {
    pub fn packet_id() -> &'static str {
        "0xff00"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzJoinGroup {
        let mut offset: usize = 0;
        PacketCzJoinGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            grid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            grid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            answer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.grid).unwrap();
        self.grid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.grid_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_grid(&mut self, value: u32) {
        self.grid = value;
    }
    pub fn set_grid_raw(&mut self, value: [u8; 4]) {
        self.grid_raw = value;
    }
    pub fn set_answer(&mut self, value: i32) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 4]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketCzJoinGroup {
        PacketCzJoinGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xff, 0x0]),
        packet_id_raw: [0xff, 0x0],
        grid: 0,
        grid_raw: [0; 4],
        answer: 0,
        answer_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzJoinGroup {
    fn id(&self) -> &str {
       "0xff00"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzJoinGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqLeaveGroup {
    pub fn packet_id() -> &'static str {
        "0x0100"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqLeaveGroup {
        let mut offset: usize = 0;
        PacketCzReqLeaveGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqLeaveGroup {
        PacketCzReqLeaveGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x0]),
        packet_id_raw: [0x10, 0x0],
        }
    }
}

impl Packet for PacketCzReqLeaveGroup {
    fn id(&self) -> &str {
       "0x0100"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqLeaveGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGroupinfoChange {
    pub fn packet_id() -> &'static str {
        "0x0101"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGroupinfoChange {
        let mut offset: usize = 0;
        PacketZcGroupinfoChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp_option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.exp_option).unwrap();
        self.exp_option_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.exp_option_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_exp_option(&mut self, value: u32) {
        self.exp_option = value;
    }
    pub fn set_exp_option_raw(&mut self, value: [u8; 4]) {
        self.exp_option_raw = value;
    }
    pub fn new() -> PacketZcGroupinfoChange {
        PacketZcGroupinfoChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x1]),
        packet_id_raw: [0x10, 0x1],
        exp_option: 0,
        exp_option_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcGroupinfoChange {
    fn id(&self) -> &str {
       "0x0101"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGroupinfoChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChangeGroupexpoption {
    pub fn packet_id() -> &'static str {
        "0x0102"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChangeGroupexpoption {
        let mut offset: usize = 0;
        PacketCzChangeGroupexpoption {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp_option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.exp_option).unwrap();
        self.exp_option_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.exp_option_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_exp_option(&mut self, value: u32) {
        self.exp_option = value;
    }
    pub fn set_exp_option_raw(&mut self, value: [u8; 4]) {
        self.exp_option_raw = value;
    }
    pub fn new() -> PacketCzChangeGroupexpoption {
        PacketCzChangeGroupexpoption {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x2]),
        packet_id_raw: [0x10, 0x2],
        exp_option: 0,
        exp_option_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzChangeGroupexpoption {
    fn id(&self) -> &str {
       "0x0102"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChangeGroupexpoption {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqExpelGroupMember {
    pub fn packet_id() -> &'static str {
        "0x0103"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqExpelGroupMember {
        let mut offset: usize = 0;
        PacketCzReqExpelGroupMember {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn new() -> PacketCzReqExpelGroupMember {
        PacketCzReqExpelGroupMember {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x3]),
        packet_id_raw: [0x10, 0x3],
        aid: 0,
        aid_raw: [0; 4],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqExpelGroupMember {
    fn id(&self) -> &str {
       "0x0103"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqExpelGroupMember {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddMemberToGroup {
    pub fn packet_id() -> &'static str {
        "0x0104"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddMemberToGroup {
        let mut offset: usize = 0;
        PacketZcAddMemberToGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            role: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            role_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.role).unwrap();
        self.role_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.role_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 79;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_role(&mut self, value: u32) {
        self.role = value;
    }
    pub fn set_role_raw(&mut self, value: [u8; 4]) {
        self.role_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn new() -> PacketZcAddMemberToGroup {
        PacketZcAddMemberToGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x4]),
        packet_id_raw: [0x10, 0x4],
        aid: 0,
        aid_raw: [0; 4],
        role: 0,
        role_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        state: 0,
        state_raw: [0; 1],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        }
    }
}

impl Packet for PacketZcAddMemberToGroup {
    fn id(&self) -> &str {
       "0x0104"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddMemberToGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteMemberFromGroup {
    pub fn packet_id() -> &'static str {
        "0x0105"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteMemberFromGroup {
        let mut offset: usize = 0;
        PacketZcDeleteMemberFromGroup {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 31;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcDeleteMemberFromGroup {
        PacketZcDeleteMemberFromGroup {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x5]),
        packet_id_raw: [0x10, 0x5],
        aid: 0,
        aid_raw: [0; 4],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcDeleteMemberFromGroup {
    fn id(&self) -> &str {
       "0x0105"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteMemberFromGroup {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyHpToGroupm {
    pub fn packet_id() -> &'static str {
        "0x0106"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyHpToGroupm {
        let mut offset: usize = 0;
        PacketZcNotifyHpToGroupm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maxhp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            maxhp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.maxhp).unwrap();
        self.maxhp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.maxhp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_hp(&mut self, value: i16) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 2]) {
        self.hp_raw = value;
    }
    pub fn set_maxhp(&mut self, value: i16) {
        self.maxhp = value;
    }
    pub fn set_maxhp_raw(&mut self, value: [u8; 2]) {
        self.maxhp_raw = value;
    }
    pub fn new() -> PacketZcNotifyHpToGroupm {
        PacketZcNotifyHpToGroupm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x6]),
        packet_id_raw: [0x10, 0x6],
        aid: 0,
        aid_raw: [0; 4],
        hp: 0,
        hp_raw: [0; 2],
        maxhp: 0,
        maxhp_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyHpToGroupm {
    fn id(&self) -> &str {
       "0x0106"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyHpToGroupm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPositionToGroupm {
    pub fn packet_id() -> &'static str {
        "0x0107"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPositionToGroupm {
        let mut offset: usize = 0;
        PacketZcNotifyPositionToGroupm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketZcNotifyPositionToGroupm {
        PacketZcNotifyPositionToGroupm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x7]),
        packet_id_raw: [0x10, 0x7],
        aid: 0,
        aid_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyPositionToGroupm {
    fn id(&self) -> &str {
       "0x0107"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPositionToGroupm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestChatParty {
    pub fn packet_id() -> &'static str {
        "0x0108"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestChatParty {
        let mut offset: usize = 0;
        PacketCzRequestChatParty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzRequestChatParty {
        PacketCzRequestChatParty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x8]),
        packet_id_raw: [0x10, 0x8],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzRequestChatParty {
    fn id(&self) -> &str {
       "0x0108"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestChatParty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyChatParty {
    pub fn packet_id() -> &'static str {
        "0x0109"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyChatParty {
        let mut offset: usize = 0;
        PacketZcNotifyChatParty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcNotifyChatParty {
        PacketZcNotifyChatParty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0x9]),
        packet_id_raw: [0x10, 0x9],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcNotifyChatParty {
    fn id(&self) -> &str {
       "0x0109"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyChatParty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMvpGettingItem {
    pub fn packet_id() -> &'static str {
        "0x010a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMvpGettingItem {
        let mut offset: usize = 0;
        PacketZcMvpGettingItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketZcMvpGettingItem {
        PacketZcMvpGettingItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0xa]),
        packet_id_raw: [0x10, 0xa],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcMvpGettingItem {
    fn id(&self) -> &str {
       "0x010a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMvpGettingItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMvpGettingSpecialExp {
    pub fn packet_id() -> &'static str {
        "0x010b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMvpGettingSpecialExp {
        let mut offset: usize = 0;
        PacketZcMvpGettingSpecialExp {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.exp).unwrap();
        self.exp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.exp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_exp(&mut self, value: u32) {
        self.exp = value;
    }
    pub fn set_exp_raw(&mut self, value: [u8; 4]) {
        self.exp_raw = value;
    }
    pub fn new() -> PacketZcMvpGettingSpecialExp {
        PacketZcMvpGettingSpecialExp {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0xb]),
        packet_id_raw: [0x10, 0xb],
        exp: 0,
        exp_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMvpGettingSpecialExp {
    fn id(&self) -> &str {
       "0x010b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMvpGettingSpecialExp {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMvp {
    pub fn packet_id() -> &'static str {
        "0x010c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMvp {
        let mut offset: usize = 0;
        PacketZcMvp {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcMvp {
        PacketZcMvp {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0xc]),
        packet_id_raw: [0x10, 0xc],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMvp {
    fn id(&self) -> &str {
       "0x010c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMvp {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcThrowMvpitem {
    pub fn packet_id() -> &'static str {
        "0x010d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcThrowMvpitem {
        let mut offset: usize = 0;
        PacketZcThrowMvpitem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcThrowMvpitem {
        PacketZcThrowMvpitem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0xd]),
        packet_id_raw: [0x10, 0xd],
        }
    }
}

impl Packet for PacketZcThrowMvpitem {
    fn id(&self) -> &str {
       "0x010d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcThrowMvpitem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillinfoUpdate {
    pub fn packet_id() -> &'static str {
        "0x010e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillinfoUpdate {
        let mut offset: usize = 0;
        PacketZcSkillinfoUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            spcost: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            spcost_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            attack_range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            attack_range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            upgradable: {
                let field = buffer[offset] == 1;
                field
            },
            upgradable_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.spcost).unwrap();
        self.spcost_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.attack_range).unwrap();
        self.attack_range_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.upgradable as u8).unwrap();
        self.upgradable_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.spcost_raw.to_vec());
        wtr.append(&mut self.attack_range_raw.to_vec());
        wtr.append(&mut self.upgradable_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_spcost(&mut self, value: i16) {
        self.spcost = value;
    }
    pub fn set_spcost_raw(&mut self, value: [u8; 2]) {
        self.spcost_raw = value;
    }
    pub fn set_attack_range(&mut self, value: i16) {
        self.attack_range = value;
    }
    pub fn set_attack_range_raw(&mut self, value: [u8; 2]) {
        self.attack_range_raw = value;
    }
    pub fn set_upgradable(&mut self, value: bool) {
        self.upgradable = value;
    }
    pub fn set_upgradable_raw(&mut self, value: [u8; 1]) {
        self.upgradable_raw = value;
    }
    pub fn new() -> PacketZcSkillinfoUpdate {
        PacketZcSkillinfoUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0xe]),
        packet_id_raw: [0x10, 0xe],
        skid: 0,
        skid_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        spcost: 0,
        spcost_raw: [0; 2],
        attack_range: 0,
        attack_range_raw: [0; 2],
        upgradable: false,
        upgradable_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSkillinfoUpdate {
    fn id(&self) -> &str {
       "0x010e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillinfoUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillinfoList {
    pub fn packet_id() -> &'static str {
        "0x010f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillinfoList {
        let mut offset: usize = 0;
        let vec_type_len = SKILLINFO::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<SKILLINFO> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(SKILLINFO::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcSkillinfoList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skill_list: {
                let field = vec_field.clone();
                field
            },
            skill_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.skill_list_raw = {
            self.skill_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.skill_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.skill_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_skill_list(&mut self, value: Vec<SKILLINFO>) {
        self.skill_list = value;
    }
    pub fn set_skill_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.skill_list_raw = value;
    }
    pub fn new() -> PacketZcSkillinfoList {
        PacketZcSkillinfoList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x10, 0xf]),
        packet_id_raw: [0x10, 0xf],
        packet_length: 0,
        packet_length_raw: [0; 2],
        skill_list: vec![],
        skill_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcSkillinfoList {
    fn id(&self) -> &str {
       "0x010f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillinfoList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckTouseskill {
    pub fn packet_id() -> &'static str {
        "0x0110"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckTouseskill {
        let mut offset: usize = 0;
        PacketZcAckTouseskill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            num: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            cause: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            cause_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.num).unwrap();
        self.num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.cause).unwrap();
        self.cause_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.num_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.cause_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_num(&mut self, value: u32) {
        self.num = value;
    }
    pub fn set_num_raw(&mut self, value: [u8; 4]) {
        self.num_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_cause(&mut self, value: u8) {
        self.cause = value;
    }
    pub fn set_cause_raw(&mut self, value: [u8; 1]) {
        self.cause_raw = value;
    }
    pub fn new() -> PacketZcAckTouseskill {
        PacketZcAckTouseskill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x0]),
        packet_id_raw: [0x11, 0x0],
        skid: 0,
        skid_raw: [0; 2],
        num: 0,
        num_raw: [0; 4],
        result: false,
        result_raw: [0; 1],
        cause: 0,
        cause_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckTouseskill {
    fn id(&self) -> &str {
       "0x0110"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckTouseskill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddSkill {
    pub fn packet_id() -> &'static str {
        "0x0111"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddSkill {
        let mut offset: usize = 0;
        PacketZcAddSkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            data: {
                let field = SKILLINFO::from(&buffer[offset..offset + SKILLINFO::base_len(packetver)], packetver);
                field
            },
            data_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.data.fill_raw_with_packetver(packetver);
        self.data_raw = self.data.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_data(&mut self, value: SKILLINFO) {
        self.data = value;
    }
    pub fn set_data_raw(&mut self, value: Vec<u8>) {
        self.data_raw = value;
    }
    pub fn new() -> PacketZcAddSkill {
        PacketZcAddSkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x1]),
        packet_id_raw: [0x11, 0x1],
        data: SKILLINFO::new(),
        data_raw: vec![],
        }
    }
}

impl Packet for PacketZcAddSkill {
    fn id(&self) -> &str {
       "0x0111"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddSkill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUpgradeSkilllevel {
    pub fn packet_id() -> &'static str {
        "0x0112"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUpgradeSkilllevel {
        let mut offset: usize = 0;
        PacketCzUpgradeSkilllevel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn new() -> PacketCzUpgradeSkilllevel {
        PacketCzUpgradeSkilllevel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x2]),
        packet_id_raw: [0x11, 0x2],
        skid: 0,
        skid_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzUpgradeSkilllevel {
    fn id(&self) -> &str {
       "0x0112"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUpgradeSkilllevel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUseSkill {
    pub fn packet_id() -> &'static str {
        "0x0113"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUseSkill {
        let mut offset: usize = 0;
        PacketCzUseSkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            selected_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            selected_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.selected_level).unwrap();
        self.selected_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.selected_level_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_selected_level(&mut self, value: i16) {
        self.selected_level = value;
    }
    pub fn set_selected_level_raw(&mut self, value: [u8; 2]) {
        self.selected_level_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn new() -> PacketCzUseSkill {
        PacketCzUseSkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x3]),
        packet_id_raw: [0x11, 0x3],
        selected_level: 0,
        selected_level_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        target_id: 0,
        target_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzUseSkill {
    fn id(&self) -> &str {
       "0x0113"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUseSkill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifySkill {
    pub fn packet_id() -> &'static str {
        "0x0114"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifySkill {
        let mut offset: usize = 0;
        PacketZcNotifySkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attack_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attack_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attacked_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attacked_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            damage: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attack_mt).unwrap();
        self.attack_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attacked_mt).unwrap();
        self.attacked_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.attack_mt_raw.to_vec());
        wtr.append(&mut self.attacked_mt_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 31;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_attack_mt(&mut self, value: i32) {
        self.attack_mt = value;
    }
    pub fn set_attack_mt_raw(&mut self, value: [u8; 4]) {
        self.attack_mt_raw = value;
    }
    pub fn set_attacked_mt(&mut self, value: i32) {
        self.attacked_mt = value;
    }
    pub fn set_attacked_mt_raw(&mut self, value: [u8; 4]) {
        self.attacked_mt_raw = value;
    }
    pub fn set_damage(&mut self, value: i16) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 2]) {
        self.damage_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketZcNotifySkill {
        PacketZcNotifySkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x4]),
        packet_id_raw: [0x11, 0x4],
        skid: 0,
        skid_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        target_id: 0,
        target_id_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        attack_mt: 0,
        attack_mt_raw: [0; 4],
        attacked_mt: 0,
        attacked_mt_raw: [0; 4],
        damage: 0,
        damage_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifySkill {
    fn id(&self) -> &str {
       "0x0114"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifySkill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifySkillPosition {
    pub fn packet_id() -> &'static str {
        "0x0115"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifySkillPosition {
        let mut offset: usize = 0;
        PacketZcNotifySkillPosition {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attack_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attack_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attacked_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attacked_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            damage: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attack_mt).unwrap();
        self.attack_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attacked_mt).unwrap();
        self.attacked_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.attack_mt_raw.to_vec());
        wtr.append(&mut self.attacked_mt_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 35;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_attack_mt(&mut self, value: i32) {
        self.attack_mt = value;
    }
    pub fn set_attack_mt_raw(&mut self, value: [u8; 4]) {
        self.attack_mt_raw = value;
    }
    pub fn set_attacked_mt(&mut self, value: i32) {
        self.attacked_mt = value;
    }
    pub fn set_attacked_mt_raw(&mut self, value: [u8; 4]) {
        self.attacked_mt_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_damage(&mut self, value: i16) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 2]) {
        self.damage_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketZcNotifySkillPosition {
        PacketZcNotifySkillPosition {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x5]),
        packet_id_raw: [0x11, 0x5],
        skid: 0,
        skid_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        target_id: 0,
        target_id_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        attack_mt: 0,
        attack_mt_raw: [0; 4],
        attacked_mt: 0,
        attacked_mt_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        damage: 0,
        damage_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifySkillPosition {
    fn id(&self) -> &str {
       "0x0115"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifySkillPosition {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUseSkillToground {
    pub fn packet_id() -> &'static str {
        "0x0116"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUseSkillToground {
        let mut offset: usize = 0;
        PacketCzUseSkillToground {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            selected_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            selected_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.selected_level).unwrap();
        self.selected_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.selected_level_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_selected_level(&mut self, value: i16) {
        self.selected_level = value;
    }
    pub fn set_selected_level_raw(&mut self, value: [u8; 2]) {
        self.selected_level_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketCzUseSkillToground {
        PacketCzUseSkillToground {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x6]),
        packet_id_raw: [0x11, 0x6],
        selected_level: 0,
        selected_level_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzUseSkillToground {
    fn id(&self) -> &str {
       "0x0116"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUseSkillToground {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyGroundskill {
    pub fn packet_id() -> &'static str {
        "0x0117"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyGroundskill {
        let mut offset: usize = 0;
        PacketZcNotifyGroundskill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn new() -> PacketZcNotifyGroundskill {
        PacketZcNotifyGroundskill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x7]),
        packet_id_raw: [0x11, 0x7],
        skid: 0,
        skid_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        level: 0,
        level_raw: [0; 2],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        start_time: 0,
        start_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyGroundskill {
    fn id(&self) -> &str {
       "0x0117"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyGroundskill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCancelLockon {
    pub fn packet_id() -> &'static str {
        "0x0118"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCancelLockon {
        let mut offset: usize = 0;
        PacketCzCancelLockon {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzCancelLockon {
        PacketCzCancelLockon {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x8]),
        packet_id_raw: [0x11, 0x8],
        }
    }
}

impl Packet for PacketCzCancelLockon {
    fn id(&self) -> &str {
       "0x0118"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCancelLockon {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStateChange {
    pub fn packet_id() -> &'static str {
        "0x0119"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStateChange {
        let mut offset: usize = 0;
        PacketZcStateChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 13;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn new() -> PacketZcStateChange {
        PacketZcStateChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0x9]),
        packet_id_raw: [0x11, 0x9],
        aid: 0,
        aid_raw: [0; 4],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcStateChange {
    fn id(&self) -> &str {
       "0x0119"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStateChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUseSkill {
    pub fn packet_id() -> &'static str {
        "0x011a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUseSkill {
        let mut offset: usize = 0;
        PacketZcUseSkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            src_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            src_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_aid).unwrap();
        self.target_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.src_aid).unwrap();
        self.src_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.target_aid_raw.to_vec());
        wtr.append(&mut self.src_aid_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 15;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_target_aid(&mut self, value: u32) {
        self.target_aid = value;
    }
    pub fn set_target_aid_raw(&mut self, value: [u8; 4]) {
        self.target_aid_raw = value;
    }
    pub fn set_src_aid(&mut self, value: u32) {
        self.src_aid = value;
    }
    pub fn set_src_aid_raw(&mut self, value: [u8; 4]) {
        self.src_aid_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcUseSkill {
        PacketZcUseSkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0xa]),
        packet_id_raw: [0x11, 0xa],
        skid: 0,
        skid_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        target_aid: 0,
        target_aid_raw: [0; 4],
        src_aid: 0,
        src_aid_raw: [0; 4],
        result: false,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcUseSkill {
    fn id(&self) -> &str {
       "0x011a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUseSkill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSelectWarppoint {
    pub fn packet_id() -> &'static str {
        "0x011b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSelectWarppoint {
        let mut offset: usize = 0;
        PacketCzSelectWarppoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 20;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn new() -> PacketCzSelectWarppoint {
        PacketCzSelectWarppoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0xb]),
        packet_id_raw: [0x11, 0xb],
        skid: 0,
        skid_raw: [0; 2],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        }
    }
}

impl Packet for PacketCzSelectWarppoint {
    fn id(&self) -> &str {
       "0x011b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSelectWarppoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcWarplist {
    pub fn packet_id() -> &'static str {
        "0x011c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcWarplist {
        let mut offset: usize = 0;
        PacketZcWarplist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 4] = [0 as char; 4];
                for (index, byte) in buffer[offset..offset + 4].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 4]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 4]) {
        self.map_name_raw = value;
    }
    pub fn new() -> PacketZcWarplist {
        PacketZcWarplist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0xc]),
        packet_id_raw: [0x11, 0xc],
        skid: 0,
        skid_raw: [0; 2],
        map_name: [0 as char; 4],
        map_name_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcWarplist {
    fn id(&self) -> &str {
       "0x011c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcWarplist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRememberWarppoint {
    pub fn packet_id() -> &'static str {
        "0x011d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRememberWarppoint {
        let mut offset: usize = 0;
        PacketCzRememberWarppoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzRememberWarppoint {
        PacketCzRememberWarppoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0xd]),
        packet_id_raw: [0x11, 0xd],
        }
    }
}

impl Packet for PacketCzRememberWarppoint {
    fn id(&self) -> &str {
       "0x011d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRememberWarppoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckRememberWarppoint {
    pub fn packet_id() -> &'static str {
        "0x011e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckRememberWarppoint {
        let mut offset: usize = 0;
        PacketZcAckRememberWarppoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketZcAckRememberWarppoint {
        PacketZcAckRememberWarppoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0xe]),
        packet_id_raw: [0x11, 0xe],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckRememberWarppoint {
    fn id(&self) -> &str {
       "0x011e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckRememberWarppoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillEntry {
    pub fn packet_id() -> &'static str {
        "0x011f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillEntry {
        let mut offset: usize = 0;
        PacketZcSkillEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            creator_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            creator_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_visible: {
                let field = buffer[offset] == 1;
                field
            },
            is_visible_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.creator_aid).unwrap();
        self.creator_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_visible as u8).unwrap();
        self.is_visible_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.creator_aid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.is_visible_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_creator_aid(&mut self, value: u32) {
        self.creator_aid = value;
    }
    pub fn set_creator_aid_raw(&mut self, value: [u8; 4]) {
        self.creator_aid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_job(&mut self, value: u8) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 1]) {
        self.job_raw = value;
    }
    pub fn set_is_visible(&mut self, value: bool) {
        self.is_visible = value;
    }
    pub fn set_is_visible_raw(&mut self, value: [u8; 1]) {
        self.is_visible_raw = value;
    }
    pub fn new() -> PacketZcSkillEntry {
        PacketZcSkillEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x11, 0xf]),
        packet_id_raw: [0x11, 0xf],
        aid: 0,
        aid_raw: [0; 4],
        creator_aid: 0,
        creator_aid_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        job: 0,
        job_raw: [0; 1],
        is_visible: false,
        is_visible_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSkillEntry {
    fn id(&self) -> &str {
       "0x011f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillDisappear {
    pub fn packet_id() -> &'static str {
        "0x0120"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillDisappear {
        let mut offset: usize = 0;
        PacketZcSkillDisappear {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcSkillDisappear {
        PacketZcSkillDisappear {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x0]),
        packet_id_raw: [0x12, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSkillDisappear {
    fn id(&self) -> &str {
       "0x0120"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillDisappear {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyCartitemCountinfo {
    pub fn packet_id() -> &'static str {
        "0x0121"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyCartitemCountinfo {
        let mut offset: usize = 0;
        PacketZcNotifyCartitemCountinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cur_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            cur_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cur_weight: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            cur_weight_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_weight: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_weight_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.cur_count).unwrap();
        self.cur_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_count).unwrap();
        self.max_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.cur_weight).unwrap();
        self.cur_weight_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_weight).unwrap();
        self.max_weight_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.cur_count_raw.to_vec());
        wtr.append(&mut self.max_count_raw.to_vec());
        wtr.append(&mut self.cur_weight_raw.to_vec());
        wtr.append(&mut self.max_weight_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_cur_count(&mut self, value: i16) {
        self.cur_count = value;
    }
    pub fn set_cur_count_raw(&mut self, value: [u8; 2]) {
        self.cur_count_raw = value;
    }
    pub fn set_max_count(&mut self, value: i16) {
        self.max_count = value;
    }
    pub fn set_max_count_raw(&mut self, value: [u8; 2]) {
        self.max_count_raw = value;
    }
    pub fn set_cur_weight(&mut self, value: i32) {
        self.cur_weight = value;
    }
    pub fn set_cur_weight_raw(&mut self, value: [u8; 4]) {
        self.cur_weight_raw = value;
    }
    pub fn set_max_weight(&mut self, value: i32) {
        self.max_weight = value;
    }
    pub fn set_max_weight_raw(&mut self, value: [u8; 4]) {
        self.max_weight_raw = value;
    }
    pub fn new() -> PacketZcNotifyCartitemCountinfo {
        PacketZcNotifyCartitemCountinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x1]),
        packet_id_raw: [0x12, 0x1],
        cur_count: 0,
        cur_count_raw: [0; 2],
        max_count: 0,
        max_count_raw: [0; 2],
        cur_weight: 0,
        cur_weight_raw: [0; 4],
        max_weight: 0,
        max_weight_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyCartitemCountinfo {
    fn id(&self) -> &str {
       "0x0121"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyCartitemCountinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartEquipmentItemlist {
    pub fn packet_id() -> &'static str {
        "0x0122"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartEquipmentItemlist {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcCartEquipmentItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcCartEquipmentItemlist {
        PacketZcCartEquipmentItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x2]),
        packet_id_raw: [0x12, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcCartEquipmentItemlist {
    fn id(&self) -> &str {
       "0x0122"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartEquipmentItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartNormalItemlist {
    pub fn packet_id() -> &'static str {
        "0x0123"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartNormalItemlist {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcCartNormalItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcCartNormalItemlist {
        PacketZcCartNormalItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x3]),
        packet_id_raw: [0x12, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcCartNormalItemlist {
    fn id(&self) -> &str {
       "0x0123"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartNormalItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddItemToCart {
    pub fn packet_id() -> &'static str {
        "0x0124"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddItemToCart {
        let mut offset: usize = 0;
        PacketZcAddItemToCart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 21;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PacketZcAddItemToCart {
        PacketZcAddItemToCart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x4]),
        packet_id_raw: [0x12, 0x4],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Packet for PacketZcAddItemToCart {
    fn id(&self) -> &str {
       "0x0124"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddItemToCart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteItemFromCart {
    pub fn packet_id() -> &'static str {
        "0x0125"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteItemFromCart {
        let mut offset: usize = 0;
        PacketZcDeleteItemFromCart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcDeleteItemFromCart {
        PacketZcDeleteItemFromCart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x5]),
        packet_id_raw: [0x12, 0x5],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDeleteItemFromCart {
    fn id(&self) -> &str {
       "0x0125"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteItemFromCart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMoveItemFromBodyToCart {
    pub fn packet_id() -> &'static str {
        "0x0126"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMoveItemFromBodyToCart {
        let mut offset: usize = 0;
        PacketCzMoveItemFromBodyToCart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzMoveItemFromBodyToCart {
        PacketCzMoveItemFromBodyToCart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x6]),
        packet_id_raw: [0x12, 0x6],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMoveItemFromBodyToCart {
    fn id(&self) -> &str {
       "0x0126"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMoveItemFromBodyToCart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMoveItemFromCartToBody {
    pub fn packet_id() -> &'static str {
        "0x0127"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMoveItemFromCartToBody {
        let mut offset: usize = 0;
        PacketCzMoveItemFromCartToBody {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzMoveItemFromCartToBody {
        PacketCzMoveItemFromCartToBody {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x7]),
        packet_id_raw: [0x12, 0x7],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMoveItemFromCartToBody {
    fn id(&self) -> &str {
       "0x0127"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMoveItemFromCartToBody {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMoveItemFromStoreToCart {
    pub fn packet_id() -> &'static str {
        "0x0128"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMoveItemFromStoreToCart {
        let mut offset: usize = 0;
        PacketCzMoveItemFromStoreToCart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzMoveItemFromStoreToCart {
        PacketCzMoveItemFromStoreToCart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x8]),
        packet_id_raw: [0x12, 0x8],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMoveItemFromStoreToCart {
    fn id(&self) -> &str {
       "0x0128"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMoveItemFromStoreToCart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMoveItemFromCartToStore {
    pub fn packet_id() -> &'static str {
        "0x0129"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMoveItemFromCartToStore {
        let mut offset: usize = 0;
        PacketCzMoveItemFromCartToStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzMoveItemFromCartToStore {
        PacketCzMoveItemFromCartToStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0x9]),
        packet_id_raw: [0x12, 0x9],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMoveItemFromCartToStore {
    fn id(&self) -> &str {
       "0x0129"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMoveItemFromCartToStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqCartoff {
    pub fn packet_id() -> &'static str {
        "0x012a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqCartoff {
        let mut offset: usize = 0;
        PacketCzReqCartoff {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqCartoff {
        PacketCzReqCartoff {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0xa]),
        packet_id_raw: [0x12, 0xa],
        }
    }
}

impl Packet for PacketCzReqCartoff {
    fn id(&self) -> &str {
       "0x012a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqCartoff {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartoff {
    pub fn packet_id() -> &'static str {
        "0x012b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartoff {
        let mut offset: usize = 0;
        PacketZcCartoff {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcCartoff {
        PacketZcCartoff {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0xb]),
        packet_id_raw: [0x12, 0xb],
        }
    }
}

impl Packet for PacketZcCartoff {
    fn id(&self) -> &str {
       "0x012b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartoff {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckAdditemToCart {
    pub fn packet_id() -> &'static str {
        "0x012c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckAdditemToCart {
        let mut offset: usize = 0;
        PacketZcAckAdditemToCart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckAdditemToCart {
        PacketZcAckAdditemToCart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0xc]),
        packet_id_raw: [0x12, 0xc],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckAdditemToCart {
    fn id(&self) -> &str {
       "0x012c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckAdditemToCart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOpenstore {
    pub fn packet_id() -> &'static str {
        "0x012d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOpenstore {
        let mut offset: usize = 0;
        PacketZcOpenstore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itemcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itemcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.itemcount).unwrap();
        self.itemcount_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itemcount_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itemcount(&mut self, value: i16) {
        self.itemcount = value;
    }
    pub fn set_itemcount_raw(&mut self, value: [u8; 2]) {
        self.itemcount_raw = value;
    }
    pub fn new() -> PacketZcOpenstore {
        PacketZcOpenstore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0xd]),
        packet_id_raw: [0x12, 0xd],
        itemcount: 0,
        itemcount_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcOpenstore {
    fn id(&self) -> &str {
       "0x012d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOpenstore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqClosestore {
    pub fn packet_id() -> &'static str {
        "0x012e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqClosestore {
        let mut offset: usize = 0;
        PacketCzReqClosestore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqClosestore {
        PacketCzReqClosestore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0xe]),
        packet_id_raw: [0x12, 0xe],
        }
    }
}

impl Packet for PacketCzReqClosestore {
    fn id(&self) -> &str {
       "0x012e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqClosestore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqOpenstore {
    pub fn packet_id() -> &'static str {
        "0x012f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqOpenstore {
        let mut offset: usize = 0;
        let vec_type_len = StoreItem::base_len(packetver);
        let iter_count = (&buffer.len() - 84) / vec_type_len;
        let mut vec_field: Vec<StoreItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 84 + (vec_type_len * (i - 1));
            let end_pos = 84 + vec_type_len * i;
            vec_field.push(StoreItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzReqOpenstore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            store_name: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            store_name_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            store_list: {
                let field = vec_field.clone();
                field
            },
            store_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.store_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.store_name_raw = wtr.try_into().unwrap();
        self.store_list_raw = {
            self.store_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.store_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.store_name_raw.to_vec());
        self.store_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 84;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_store_name(&mut self, value: [char; 80]) {
        self.store_name = value;
    }
    pub fn set_store_name_raw(&mut self, value: [u8; 80]) {
        self.store_name_raw = value;
    }
    pub fn set_store_list(&mut self, value: Vec<StoreItem>) {
        self.store_list = value;
    }
    pub fn set_store_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.store_list_raw = value;
    }
    pub fn new() -> PacketCzReqOpenstore {
        PacketCzReqOpenstore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x12, 0xf]),
        packet_id_raw: [0x12, 0xf],
        packet_length: 0,
        packet_length_raw: [0; 2],
        store_name: [0 as char; 80],
        store_name_raw: [0; 80],
        store_list: vec![],
        store_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqOpenstore {
    fn id(&self) -> &str {
       "0x012f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqOpenstore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqBuyFrommc {
    pub fn packet_id() -> &'static str {
        "0x0130"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqBuyFrommc {
        let mut offset: usize = 0;
        PacketCzReqBuyFrommc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqBuyFrommc {
        PacketCzReqBuyFrommc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x0]),
        packet_id_raw: [0x13, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqBuyFrommc {
    fn id(&self) -> &str {
       "0x0130"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqBuyFrommc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreEntry {
    pub fn packet_id() -> &'static str {
        "0x0131"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreEntry {
        let mut offset: usize = 0;
        PacketZcStoreEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            store_name: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            store_name_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.store_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.store_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        wtr.append(&mut self.store_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 86;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn set_store_name(&mut self, value: [char; 80]) {
        self.store_name = value;
    }
    pub fn set_store_name_raw(&mut self, value: [u8; 80]) {
        self.store_name_raw = value;
    }
    pub fn new() -> PacketZcStoreEntry {
        PacketZcStoreEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x1]),
        packet_id_raw: [0x13, 0x1],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        store_name: [0 as char; 80],
        store_name_raw: [0; 80],
        }
    }
}

impl Packet for PacketZcStoreEntry {
    fn id(&self) -> &str {
       "0x0131"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDisappearEntry {
    pub fn packet_id() -> &'static str {
        "0x0132"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDisappearEntry {
        let mut offset: usize = 0;
        PacketZcDisappearEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn new() -> PacketZcDisappearEntry {
        PacketZcDisappearEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x2]),
        packet_id_raw: [0x13, 0x2],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDisappearEntry {
    fn id(&self) -> &str {
       "0x0132"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDisappearEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcPurchaseItemlistFrommc {
    pub fn packet_id() -> &'static str {
        "0x0133"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcPurchaseItemlistFrommc {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseItemFrommc::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<PurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(PurchaseItemFrommc::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPcPurchaseItemlistFrommc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseItemFrommc>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcPcPurchaseItemlistFrommc {
        PacketZcPcPurchaseItemlistFrommc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x3]),
        packet_id_raw: [0x13, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPcPurchaseItemlistFrommc {
    fn id(&self) -> &str {
       "0x0133"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcPurchaseItemlistFrommc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPcPurchaseItemlistFrommc {
    pub fn packet_id() -> &'static str {
        "0x0134"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPcPurchaseItemlistFrommc {
        let mut offset: usize = 0;
        let vec_type_len = CzPurchaseItemFrommc::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<CzPurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(CzPurchaseItemFrommc::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzPcPurchaseItemlistFrommc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<CzPurchaseItemFrommc>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketCzPcPurchaseItemlistFrommc {
        PacketCzPcPurchaseItemlistFrommc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x4]),
        packet_id_raw: [0x13, 0x4],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzPcPurchaseItemlistFrommc {
    fn id(&self) -> &str {
       "0x0134"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPcPurchaseItemlistFrommc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcPurchaseResultFrommc {
    pub fn packet_id() -> &'static str {
        "0x0135"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcPurchaseResultFrommc {
        let mut offset: usize = 0;
        PacketZcPcPurchaseResultFrommc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            curcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            curcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.curcount).unwrap();
        self.curcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.curcount_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_curcount(&mut self, value: i16) {
        self.curcount = value;
    }
    pub fn set_curcount_raw(&mut self, value: [u8; 2]) {
        self.curcount_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcPcPurchaseResultFrommc {
        PacketZcPcPurchaseResultFrommc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x5]),
        packet_id_raw: [0x13, 0x5],
        index: 0,
        index_raw: [0; 2],
        curcount: 0,
        curcount_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcPcPurchaseResultFrommc {
    fn id(&self) -> &str {
       "0x0135"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcPurchaseResultFrommc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcPurchaseMyitemlist {
    pub fn packet_id() -> &'static str {
        "0x0136"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcPurchaseMyitemlist {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseMyitem::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<PurchaseMyitem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(PurchaseMyitem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPcPurchaseMyitemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseMyitem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcPcPurchaseMyitemlist {
        PacketZcPcPurchaseMyitemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x6]),
        packet_id_raw: [0x13, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPcPurchaseMyitemlist {
    fn id(&self) -> &str {
       "0x0136"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcPurchaseMyitemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteitemFromMcstore {
    pub fn packet_id() -> &'static str {
        "0x0137"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteitemFromMcstore {
        let mut offset: usize = 0;
        PacketZcDeleteitemFromMcstore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcDeleteitemFromMcstore {
        PacketZcDeleteitemFromMcstore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x7]),
        packet_id_raw: [0x13, 0x7],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcDeleteitemFromMcstore {
    fn id(&self) -> &str {
       "0x0137"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteitemFromMcstore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPkmodeChange {
    pub fn packet_id() -> &'static str {
        "0x0138"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPkmodeChange {
        let mut offset: usize = 0;
        PacketCzPkmodeChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_turn_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_turn_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_turn_on as u8).unwrap();
        self.is_turn_on_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.is_turn_on_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_is_turn_on(&mut self, value: bool) {
        self.is_turn_on = value;
    }
    pub fn set_is_turn_on_raw(&mut self, value: [u8; 1]) {
        self.is_turn_on_raw = value;
    }
    pub fn new() -> PacketCzPkmodeChange {
        PacketCzPkmodeChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x8]),
        packet_id_raw: [0x13, 0x8],
        is_turn_on: false,
        is_turn_on_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzPkmodeChange {
    fn id(&self) -> &str {
       "0x0138"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPkmodeChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAttackFailureForDistance {
    pub fn packet_id() -> &'static str {
        "0x0139"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAttackFailureForDistance {
        let mut offset: usize = 0;
        PacketZcAttackFailureForDistance {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_xpos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            target_xpos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_ypos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            target_ypos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            current_att_range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            current_att_range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_aid).unwrap();
        self.target_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.target_xpos).unwrap();
        self.target_xpos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.target_ypos).unwrap();
        self.target_ypos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.current_att_range).unwrap();
        self.current_att_range_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.target_aid_raw.to_vec());
        wtr.append(&mut self.target_xpos_raw.to_vec());
        wtr.append(&mut self.target_ypos_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.current_att_range_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_target_aid(&mut self, value: u32) {
        self.target_aid = value;
    }
    pub fn set_target_aid_raw(&mut self, value: [u8; 4]) {
        self.target_aid_raw = value;
    }
    pub fn set_target_xpos(&mut self, value: i16) {
        self.target_xpos = value;
    }
    pub fn set_target_xpos_raw(&mut self, value: [u8; 2]) {
        self.target_xpos_raw = value;
    }
    pub fn set_target_ypos(&mut self, value: i16) {
        self.target_ypos = value;
    }
    pub fn set_target_ypos_raw(&mut self, value: [u8; 2]) {
        self.target_ypos_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_current_att_range(&mut self, value: i16) {
        self.current_att_range = value;
    }
    pub fn set_current_att_range_raw(&mut self, value: [u8; 2]) {
        self.current_att_range_raw = value;
    }
    pub fn new() -> PacketZcAttackFailureForDistance {
        PacketZcAttackFailureForDistance {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0x9]),
        packet_id_raw: [0x13, 0x9],
        target_aid: 0,
        target_aid_raw: [0; 4],
        target_xpos: 0,
        target_xpos_raw: [0; 2],
        target_ypos: 0,
        target_ypos_raw: [0; 2],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        current_att_range: 0,
        current_att_range_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAttackFailureForDistance {
    fn id(&self) -> &str {
       "0x0139"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAttackFailureForDistance {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAttackRange {
    pub fn packet_id() -> &'static str {
        "0x3a01"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAttackRange {
        let mut offset: usize = 0;
        PacketZcAttackRange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            current_att_range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            current_att_range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.current_att_range).unwrap();
        self.current_att_range_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.current_att_range_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_current_att_range(&mut self, value: i16) {
        self.current_att_range = value;
    }
    pub fn set_current_att_range_raw(&mut self, value: [u8; 2]) {
        self.current_att_range_raw = value;
    }
    pub fn new() -> PacketZcAttackRange {
        PacketZcAttackRange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x3a, 0x01]),
        packet_id_raw: [0x3a, 0x01],
        current_att_range: 0,
        current_att_range_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAttackRange {
    fn id(&self) -> &str {
       "0x3a01"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAttackRange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcActionFailure {
    pub fn packet_id() -> &'static str {
        "0x013b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcActionFailure {
        let mut offset: usize = 0;
        PacketZcActionFailure {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketZcActionFailure {
        PacketZcActionFailure {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0xb]),
        packet_id_raw: [0x13, 0xb],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcActionFailure {
    fn id(&self) -> &str {
       "0x013b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcActionFailure {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEquipArrow {
    pub fn packet_id() -> &'static str {
        "0x013c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEquipArrow {
        let mut offset: usize = 0;
        PacketZcEquipArrow {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketZcEquipArrow {
        PacketZcEquipArrow {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0xc]),
        packet_id_raw: [0x13, 0xc],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcEquipArrow {
    fn id(&self) -> &str {
       "0x013c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEquipArrow {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRecovery {
    pub fn packet_id() -> &'static str {
        "0x013d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRecovery {
        let mut offset: usize = 0;
        PacketZcRecovery {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            var_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            amount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            amount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.var_id).unwrap();
        self.var_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.amount).unwrap();
        self.amount_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.var_id_raw.to_vec());
        wtr.append(&mut self.amount_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_var_id(&mut self, value: i16) {
        self.var_id = value;
    }
    pub fn set_var_id_raw(&mut self, value: [u8; 2]) {
        self.var_id_raw = value;
    }
    pub fn set_amount(&mut self, value: i16) {
        self.amount = value;
    }
    pub fn set_amount_raw(&mut self, value: [u8; 2]) {
        self.amount_raw = value;
    }
    pub fn new() -> PacketZcRecovery {
        PacketZcRecovery {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0xd]),
        packet_id_raw: [0x13, 0xd],
        var_id: 0,
        var_id_raw: [0; 2],
        amount: 0,
        amount_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcRecovery {
    fn id(&self) -> &str {
       "0x013d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRecovery {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUseskillAck {
    pub fn packet_id() -> &'static str {
        "0x013e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUseskillAck {
        let mut offset: usize = 0;
        PacketZcUseskillAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            property: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            property_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            delay_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delay_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.property).unwrap();
        self.property_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.delay_time).unwrap();
        self.delay_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.property_raw.to_vec());
        wtr.append(&mut self.delay_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 24;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_property(&mut self, value: u32) {
        self.property = value;
    }
    pub fn set_property_raw(&mut self, value: [u8; 4]) {
        self.property_raw = value;
    }
    pub fn set_delay_time(&mut self, value: u32) {
        self.delay_time = value;
    }
    pub fn set_delay_time_raw(&mut self, value: [u8; 4]) {
        self.delay_time_raw = value;
    }
    pub fn new() -> PacketZcUseskillAck {
        PacketZcUseskillAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x13, 0xe]),
        packet_id_raw: [0x13, 0xe],
        aid: 0,
        aid_raw: [0; 4],
        target_id: 0,
        target_id_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        property: 0,
        property_raw: [0; 4],
        delay_time: 0,
        delay_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcUseskillAck {
    fn id(&self) -> &str {
       "0x013e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUseskillAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzItemCreate {
    pub fn packet_id() -> &'static str {
        "0x013f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzItemCreate {
        let mut offset: usize = 0;
        PacketCzItemCreate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            item_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.item_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.item_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.item_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_item_name(&mut self, value: [char; 24]) {
        self.item_name = value;
    }
    pub fn set_item_name_raw(&mut self, value: [u8; 24]) {
        self.item_name_raw = value;
    }
    pub fn new() -> PacketCzItemCreate {
        PacketCzItemCreate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x3f]),
        packet_id_raw: [0x01, 0x3f],
        item_name: [0 as char; 24],
        item_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzItemCreate {
    fn id(&self) -> &str {
       "0x013f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzItemCreate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMovetoMap {
    pub fn packet_id() -> &'static str {
        "0x0140"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMovetoMap {
        let mut offset: usize = 0;
        PacketCzMovetoMap {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketCzMovetoMap {
        PacketCzMovetoMap {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x40]),
        packet_id_raw: [0x01, 0x40],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzMovetoMap {
    fn id(&self) -> &str {
       "0x0140"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMovetoMap {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStatusValues {
    pub fn packet_id() -> &'static str {
        "0x4101"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStatusValues {
        let mut offset: usize = 0;
        PacketZcStatusValues {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            status_type: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            status_type_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            default_status: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            default_status_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            plus_status: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            plus_status_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.status_type).unwrap();
        self.status_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.default_status).unwrap();
        self.default_status_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.plus_status).unwrap();
        self.plus_status_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.status_type_raw.to_vec());
        wtr.append(&mut self.default_status_raw.to_vec());
        wtr.append(&mut self.plus_status_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_status_type(&mut self, value: u32) {
        self.status_type = value;
    }
    pub fn set_status_type_raw(&mut self, value: [u8; 4]) {
        self.status_type_raw = value;
    }
    pub fn set_default_status(&mut self, value: i32) {
        self.default_status = value;
    }
    pub fn set_default_status_raw(&mut self, value: [u8; 4]) {
        self.default_status_raw = value;
    }
    pub fn set_plus_status(&mut self, value: i32) {
        self.plus_status = value;
    }
    pub fn set_plus_status_raw(&mut self, value: [u8; 4]) {
        self.plus_status_raw = value;
    }
    pub fn new() -> PacketZcStatusValues {
        PacketZcStatusValues {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x41, 0x01]),
        packet_id_raw: [0x41, 0x01],
        status_type: 0,
        status_type_raw: [0; 4],
        default_status: 0,
        default_status_raw: [0; 4],
        plus_status: 0,
        plus_status_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcStatusValues {
    fn id(&self) -> &str {
       "0x4101"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStatusValues {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOpenEditdlg {
    pub fn packet_id() -> &'static str {
        "0x4201"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOpenEditdlg {
        let mut offset: usize = 0;
        PacketZcOpenEditdlg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketZcOpenEditdlg {
        PacketZcOpenEditdlg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x42, 0x01]),
        packet_id_raw: [0x42, 0x01],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcOpenEditdlg {
    fn id(&self) -> &str {
       "0x4201"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOpenEditdlg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzInputEditdlg {
    pub fn packet_id() -> &'static str {
        "0x4301"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzInputEditdlg {
        let mut offset: usize = 0;
        PacketCzInputEditdlg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketCzInputEditdlg {
        PacketCzInputEditdlg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x43, 0x01]),
        packet_id_raw: [0x43, 0x01],
        naid: 0,
        naid_raw: [0; 4],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzInputEditdlg {
    fn id(&self) -> &str {
       "0x4301"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzInputEditdlg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCompass {
    pub fn packet_id() -> &'static str {
        "0x0144"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCompass {
        let mut offset: usize = 0;
        PacketZcCompass {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            y_pos: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            id_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            color: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            color_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.id).unwrap();
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.color).unwrap();
        self.color_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.color_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 23;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i32) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 4]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i32) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 4]) {
        self.y_pos_raw = value;
    }
    pub fn set_id(&mut self, value: u8) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 1]) {
        self.id_raw = value;
    }
    pub fn set_color(&mut self, value: u32) {
        self.color = value;
    }
    pub fn set_color_raw(&mut self, value: [u8; 4]) {
        self.color_raw = value;
    }
    pub fn new() -> PacketZcCompass {
        PacketZcCompass {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x44]),
        packet_id_raw: [0x01, 0x44],
        naid: 0,
        naid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 4],
        y_pos: 0,
        y_pos_raw: [0; 4],
        id: 0,
        id_raw: [0; 1],
        color: 0,
        color_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcCompass {
    fn id(&self) -> &str {
       "0x0144"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCompass {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcShowImage {
    pub fn packet_id() -> &'static str {
        "0x0145"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcShowImage {
        let mut offset: usize = 0;
        PacketZcShowImage {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            image_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            image_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.image_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.image_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.image_name_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_image_name(&mut self, value: [char; 16]) {
        self.image_name = value;
    }
    pub fn set_image_name_raw(&mut self, value: [u8; 16]) {
        self.image_name_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcShowImage {
        PacketZcShowImage {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x45]),
        packet_id_raw: [0x01, 0x45],
        image_name: [0 as char; 16],
        image_name_raw: [0; 16],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcShowImage {
    fn id(&self) -> &str {
       "0x0145"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcShowImage {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCloseDialog {
    pub fn packet_id() -> &'static str {
        "0x0146"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCloseDialog {
        let mut offset: usize = 0;
        PacketCzCloseDialog {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketCzCloseDialog {
        PacketCzCloseDialog {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x46]),
        packet_id_raw: [0x01, 0x46],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzCloseDialog {
    fn id(&self) -> &str {
       "0x0146"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCloseDialog {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAutorunSkill {
    pub fn packet_id() -> &'static str {
        "0x0147"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAutorunSkill {
        let mut offset: usize = 0;
        PacketZcAutorunSkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            data: {
                let field = SKILLINFO::from(&buffer[offset..offset + SKILLINFO::base_len(packetver)], packetver);
                field
            },
            data_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.data.fill_raw_with_packetver(packetver);
        self.data_raw = self.data.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_data(&mut self, value: SKILLINFO) {
        self.data = value;
    }
    pub fn set_data_raw(&mut self, value: Vec<u8>) {
        self.data_raw = value;
    }
    pub fn new() -> PacketZcAutorunSkill {
        PacketZcAutorunSkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x47]),
        packet_id_raw: [0x01, 0x47],
        data: SKILLINFO::new(),
        data_raw: vec![],
        }
    }
}

impl Packet for PacketZcAutorunSkill {
    fn id(&self) -> &str {
       "0x0147"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAutorunSkill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcResurrection {
    pub fn packet_id() -> &'static str {
        "0x0148"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcResurrection {
        let mut offset: usize = 0;
        PacketZcResurrection {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcResurrection {
        PacketZcResurrection {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x48]),
        packet_id_raw: [0x01, 0x48],
        aid: 0,
        aid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcResurrection {
    fn id(&self) -> &str {
       "0x0148"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcResurrection {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqGiveMannerPoint {
    pub fn packet_id() -> &'static str {
        "0x0149"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqGiveMannerPoint {
        let mut offset: usize = 0;
        PacketCzReqGiveMannerPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            other_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            other_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            point: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.other_aid).unwrap();
        self.other_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.other_aid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_other_aid(&mut self, value: u32) {
        self.other_aid = value;
    }
    pub fn set_other_aid_raw(&mut self, value: [u8; 4]) {
        self.other_aid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_point(&mut self, value: i16) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 2]) {
        self.point_raw = value;
    }
    pub fn new() -> PacketCzReqGiveMannerPoint {
        PacketCzReqGiveMannerPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x49]),
        packet_id_raw: [0x01, 0x49],
        other_aid: 0,
        other_aid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        point: 0,
        point_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqGiveMannerPoint {
    fn id(&self) -> &str {
       "0x0149"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqGiveMannerPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckGiveMannerPoint {
    pub fn packet_id() -> &'static str {
        "0x014a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckGiveMannerPoint {
        let mut offset: usize = 0;
        PacketZcAckGiveMannerPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckGiveMannerPoint {
        PacketZcAckGiveMannerPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x4a]),
        packet_id_raw: [0x01, 0x4a],
        result: 0,
        result_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAckGiveMannerPoint {
    fn id(&self) -> &str {
       "0x014a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckGiveMannerPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMannerPointGiven {
    pub fn packet_id() -> &'static str {
        "0x014b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMannerPointGiven {
        let mut offset: usize = 0;
        PacketZcNotifyMannerPointGiven {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            other_char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            other_char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.other_char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.other_char_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.other_char_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_other_char_name(&mut self, value: [char; 24]) {
        self.other_char_name = value;
    }
    pub fn set_other_char_name_raw(&mut self, value: [u8; 24]) {
        self.other_char_name_raw = value;
    }
    pub fn new() -> PacketZcNotifyMannerPointGiven {
        PacketZcNotifyMannerPointGiven {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x4b]),
        packet_id_raw: [0x01, 0x4b],
        atype: 0,
        atype_raw: [0; 1],
        other_char_name: [0 as char; 24],
        other_char_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcNotifyMannerPointGiven {
    fn id(&self) -> &str {
       "0x014b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMannerPointGiven {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMyguildBasicInfo {
    pub fn packet_id() -> &'static str {
        "0x014c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMyguildBasicInfo {
        let mut offset: usize = 0;
        let vec_type_len = RelatedGuild::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<RelatedGuild> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(RelatedGuild::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcMyguildBasicInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            related_guild_list: {
                let field = vec_field.clone();
                field
            },
            related_guild_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.related_guild_list_raw = {
            self.related_guild_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.related_guild_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.related_guild_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_related_guild_list(&mut self, value: Vec<RelatedGuild>) {
        self.related_guild_list = value;
    }
    pub fn set_related_guild_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.related_guild_list_raw = value;
    }
    pub fn new() -> PacketZcMyguildBasicInfo {
        PacketZcMyguildBasicInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x01, 0x4c]),
        packet_id_raw: [0x01, 0x4c],
        packet_length: 0,
        packet_length_raw: [0; 2],
        related_guild_list: vec![],
        related_guild_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcMyguildBasicInfo {
    fn id(&self) -> &str {
       "0x014c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMyguildBasicInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqGuildMenuinterface {
    pub fn packet_id() -> &'static str {
        "0x014d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqGuildMenuinterface {
        let mut offset: usize = 0;
        PacketCzReqGuildMenuinterface {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqGuildMenuinterface {
        PacketCzReqGuildMenuinterface {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x14, 0xd]),
        packet_id_raw: [0x14, 0xd],
        }
    }
}

impl Packet for PacketCzReqGuildMenuinterface {
    fn id(&self) -> &str {
       "0x014d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqGuildMenuinterface {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckGuildMenuinterface {
    pub fn packet_id() -> &'static str {
        "0x014e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckGuildMenuinterface {
        let mut offset: usize = 0;
        PacketZcAckGuildMenuinterface {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guild_memu_flag: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guild_memu_flag_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.guild_memu_flag).unwrap();
        self.guild_memu_flag_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.guild_memu_flag_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_guild_memu_flag(&mut self, value: i32) {
        self.guild_memu_flag = value;
    }
    pub fn set_guild_memu_flag_raw(&mut self, value: [u8; 4]) {
        self.guild_memu_flag_raw = value;
    }
    pub fn new() -> PacketZcAckGuildMenuinterface {
        PacketZcAckGuildMenuinterface {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x14, 0xe]),
        packet_id_raw: [0x14, 0xe],
        guild_memu_flag: 0,
        guild_memu_flag_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAckGuildMenuinterface {
    fn id(&self) -> &str {
       "0x014e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckGuildMenuinterface {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqGuildMenu {
    pub fn packet_id() -> &'static str {
        "0x014f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqGuildMenu {
        let mut offset: usize = 0;
        PacketCzReqGuildMenu {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzReqGuildMenu {
        PacketCzReqGuildMenu {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x14, 0xf]),
        packet_id_raw: [0x14, 0xf],
        atype: 0,
        atype_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqGuildMenu {
    fn id(&self) -> &str {
       "0x014f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqGuildMenu {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildInfo {
    pub fn packet_id() -> &'static str {
        "0x0150"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildInfo {
        let mut offset: usize = 0;
        PacketZcGuildInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_num: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_user_num: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_user_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_average_level: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_average_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            honor: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            emblem_version: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            emblem_version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guildname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guildname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            master_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            master_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            manage_land: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            manage_land_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.user_num).unwrap();
        self.user_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_user_num).unwrap();
        self.max_user_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.user_average_level).unwrap();
        self.user_average_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.exp).unwrap();
        self.exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_exp).unwrap();
        self.max_exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.emblem_version).unwrap();
        self.emblem_version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guildname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guildname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.master_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.master_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.manage_land {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.manage_land_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.user_num_raw.to_vec());
        wtr.append(&mut self.max_user_num_raw.to_vec());
        wtr.append(&mut self.user_average_level_raw.to_vec());
        wtr.append(&mut self.exp_raw.to_vec());
        wtr.append(&mut self.max_exp_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.emblem_version_raw.to_vec());
        wtr.append(&mut self.guildname_raw.to_vec());
        wtr.append(&mut self.master_name_raw.to_vec());
        wtr.append(&mut self.manage_land_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 110;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: i32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_level(&mut self, value: i32) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 4]) {
        self.level_raw = value;
    }
    pub fn set_user_num(&mut self, value: i32) {
        self.user_num = value;
    }
    pub fn set_user_num_raw(&mut self, value: [u8; 4]) {
        self.user_num_raw = value;
    }
    pub fn set_max_user_num(&mut self, value: i32) {
        self.max_user_num = value;
    }
    pub fn set_max_user_num_raw(&mut self, value: [u8; 4]) {
        self.max_user_num_raw = value;
    }
    pub fn set_user_average_level(&mut self, value: i32) {
        self.user_average_level = value;
    }
    pub fn set_user_average_level_raw(&mut self, value: [u8; 4]) {
        self.user_average_level_raw = value;
    }
    pub fn set_exp(&mut self, value: i32) {
        self.exp = value;
    }
    pub fn set_exp_raw(&mut self, value: [u8; 4]) {
        self.exp_raw = value;
    }
    pub fn set_max_exp(&mut self, value: i32) {
        self.max_exp = value;
    }
    pub fn set_max_exp_raw(&mut self, value: [u8; 4]) {
        self.max_exp_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn set_honor(&mut self, value: i32) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 4]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_emblem_version(&mut self, value: i32) {
        self.emblem_version = value;
    }
    pub fn set_emblem_version_raw(&mut self, value: [u8; 4]) {
        self.emblem_version_raw = value;
    }
    pub fn set_guildname(&mut self, value: [char; 24]) {
        self.guildname = value;
    }
    pub fn set_guildname_raw(&mut self, value: [u8; 24]) {
        self.guildname_raw = value;
    }
    pub fn set_master_name(&mut self, value: [char; 24]) {
        self.master_name = value;
    }
    pub fn set_master_name_raw(&mut self, value: [u8; 24]) {
        self.master_name_raw = value;
    }
    pub fn set_manage_land(&mut self, value: [char; 16]) {
        self.manage_land = value;
    }
    pub fn set_manage_land_raw(&mut self, value: [u8; 16]) {
        self.manage_land_raw = value;
    }
    pub fn new() -> PacketZcGuildInfo {
        PacketZcGuildInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x0]),
        packet_id_raw: [0x15, 0x0],
        gdid: 0,
        gdid_raw: [0; 4],
        level: 0,
        level_raw: [0; 4],
        user_num: 0,
        user_num_raw: [0; 4],
        max_user_num: 0,
        max_user_num_raw: [0; 4],
        user_average_level: 0,
        user_average_level_raw: [0; 4],
        exp: 0,
        exp_raw: [0; 4],
        max_exp: 0,
        max_exp_raw: [0; 4],
        point: 0,
        point_raw: [0; 4],
        honor: 0,
        honor_raw: [0; 4],
        virtue: 0,
        virtue_raw: [0; 4],
        emblem_version: 0,
        emblem_version_raw: [0; 4],
        guildname: [0 as char; 24],
        guildname_raw: [0; 24],
        master_name: [0 as char; 24],
        master_name_raw: [0; 24],
        manage_land: [0 as char; 16],
        manage_land_raw: [0; 16],
        }
    }
}

impl Packet for PacketZcGuildInfo {
    fn id(&self) -> &str {
       "0x0150"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqGuildEmblemImg {
    pub fn packet_id() -> &'static str {
        "0x0151"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqGuildEmblemImg {
        let mut offset: usize = 0;
        PacketCzReqGuildEmblemImg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: i32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn new() -> PacketCzReqGuildEmblemImg {
        PacketCzReqGuildEmblemImg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x1]),
        packet_id_raw: [0x15, 0x1],
        gdid: 0,
        gdid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqGuildEmblemImg {
    fn id(&self) -> &str {
       "0x0151"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqGuildEmblemImg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildEmblemImg {
    pub fn packet_id() -> &'static str {
        "0x0152"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildEmblemImg {
        let mut offset: usize = 0;
        PacketZcGuildEmblemImg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            emblem_version: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            emblem_version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            img: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            img_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.emblem_version).unwrap();
        self.emblem_version_raw = wtr.try_into().unwrap();
        self.img_raw = self.img.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.emblem_version_raw.to_vec());
        wtr.append(&mut self.img_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_gdid(&mut self, value: i32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_emblem_version(&mut self, value: i32) {
        self.emblem_version = value;
    }
    pub fn set_emblem_version_raw(&mut self, value: [u8; 4]) {
        self.emblem_version_raw = value;
    }
    pub fn set_img(&mut self, value: String) {
        self.img = value;
    }
    pub fn set_img_raw(&mut self, value: Vec<u8>) {
        self.img_raw = value;
    }
    pub fn new() -> PacketZcGuildEmblemImg {
        PacketZcGuildEmblemImg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x2]),
        packet_id_raw: [0x15, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        gdid: 0,
        gdid_raw: [0; 4],
        emblem_version: 0,
        emblem_version_raw: [0; 4],
        img: String::new(),
        img_raw: vec![],
        }
    }
}

impl Packet for PacketZcGuildEmblemImg {
    fn id(&self) -> &str {
       "0x0152"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildEmblemImg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRegisterGuildEmblemImg {
    pub fn packet_id() -> &'static str {
        "0x0153"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRegisterGuildEmblemImg {
        let mut offset: usize = 0;
        PacketCzRegisterGuildEmblemImg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            img: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            img_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.img_raw = self.img.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.img_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_img(&mut self, value: String) {
        self.img = value;
    }
    pub fn set_img_raw(&mut self, value: Vec<u8>) {
        self.img_raw = value;
    }
    pub fn new() -> PacketCzRegisterGuildEmblemImg {
        PacketCzRegisterGuildEmblemImg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x3]),
        packet_id_raw: [0x15, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        img: String::new(),
        img_raw: vec![],
        }
    }
}

impl Packet for PacketCzRegisterGuildEmblemImg {
    fn id(&self) -> &str {
       "0x0153"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRegisterGuildEmblemImg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMembermgrInfo {
    pub fn packet_id() -> &'static str {
        "0x0154"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMembermgrInfo {
        let mut offset: usize = 0;
        let vec_type_len = GuildMembermgrInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<GuildMembermgrInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(GuildMembermgrInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcMembermgrInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_info: {
                let field = vec_field.clone();
                field
            },
            member_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_info_raw = {
            self.member_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_info(&mut self, value: Vec<GuildMembermgrInfo>) {
        self.member_info = value;
    }
    pub fn set_member_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_info_raw = value;
    }
    pub fn new() -> PacketZcMembermgrInfo {
        PacketZcMembermgrInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x4]),
        packet_id_raw: [0x15, 0x4],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_info: vec![],
        member_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcMembermgrInfo {
    fn id(&self) -> &str {
       "0x0154"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMembermgrInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqChangeMemberpos {
    pub fn packet_id() -> &'static str {
        "0x0155"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqChangeMemberpos {
        let mut offset: usize = 0;
        let vec_type_len = MemberPositionInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<MemberPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(MemberPositionInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzReqChangeMemberpos {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_info: {
                let field = vec_field.clone();
                field
            },
            member_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_info_raw = {
            self.member_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_info(&mut self, value: Vec<MemberPositionInfo>) {
        self.member_info = value;
    }
    pub fn set_member_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_info_raw = value;
    }
    pub fn new() -> PacketCzReqChangeMemberpos {
        PacketCzReqChangeMemberpos {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x5]),
        packet_id_raw: [0x15, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_info: vec![],
        member_info_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqChangeMemberpos {
    fn id(&self) -> &str {
       "0x0155"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqChangeMemberpos {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqChangeMembers {
    pub fn packet_id() -> &'static str {
        "0x0156"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqChangeMembers {
        let mut offset: usize = 0;
        let vec_type_len = MemberPositionInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<MemberPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(MemberPositionInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAckReqChangeMembers {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_info: {
                let field = vec_field.clone();
                field
            },
            member_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_info_raw = {
            self.member_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_info(&mut self, value: Vec<MemberPositionInfo>) {
        self.member_info = value;
    }
    pub fn set_member_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_info_raw = value;
    }
    pub fn new() -> PacketZcAckReqChangeMembers {
        PacketZcAckReqChangeMembers {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x6]),
        packet_id_raw: [0x15, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_info: vec![],
        member_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcAckReqChangeMembers {
    fn id(&self) -> &str {
       "0x0156"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqChangeMembers {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqOpenMemberInfo {
    pub fn packet_id() -> &'static str {
        "0x0157"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqOpenMemberInfo {
        let mut offset: usize = 0;
        PacketCzReqOpenMemberInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqOpenMemberInfo {
        PacketCzReqOpenMemberInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x7]),
        packet_id_raw: [0x15, 0x7],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqOpenMemberInfo {
    fn id(&self) -> &str {
       "0x0157"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqOpenMemberInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckOpenMemberInfo {
    pub fn packet_id() -> &'static str {
        "0x0158"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckOpenMemberInfo {
        let mut offset: usize = 0;
        PacketZcAckOpenMemberInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcAckOpenMemberInfo {
        PacketZcAckOpenMemberInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x8]),
        packet_id_raw: [0x15, 0x8],
        }
    }
}

impl Packet for PacketZcAckOpenMemberInfo {
    fn id(&self) -> &str {
       "0x0158"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckOpenMemberInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqLeaveGuild {
    pub fn packet_id() -> &'static str {
        "0x0159"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqLeaveGuild {
        let mut offset: usize = 0;
        PacketCzReqLeaveGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            reason_desc: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_desc_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason_desc {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_desc_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.reason_desc_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 54;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_reason_desc(&mut self, value: [char; 40]) {
        self.reason_desc = value;
    }
    pub fn set_reason_desc_raw(&mut self, value: [u8; 40]) {
        self.reason_desc_raw = value;
    }
    pub fn new() -> PacketCzReqLeaveGuild {
        PacketCzReqLeaveGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x9]),
        packet_id_raw: [0x15, 0x9],
        gdid: 0,
        gdid_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        reason_desc: [0 as char; 40],
        reason_desc_raw: [0; 40],
        }
    }
}

impl Packet for PacketCzReqLeaveGuild {
    fn id(&self) -> &str {
       "0x0159"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqLeaveGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckLeaveGuild {
    pub fn packet_id() -> &'static str {
        "0x015a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckLeaveGuild {
        let mut offset: usize = 0;
        PacketZcAckLeaveGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            reason_desc: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_desc_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason_desc {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_desc_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        wtr.append(&mut self.reason_desc_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 66;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn set_reason_desc(&mut self, value: [char; 40]) {
        self.reason_desc = value;
    }
    pub fn set_reason_desc_raw(&mut self, value: [u8; 40]) {
        self.reason_desc_raw = value;
    }
    pub fn new() -> PacketZcAckLeaveGuild {
        PacketZcAckLeaveGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0xa]),
        packet_id_raw: [0x15, 0xa],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        reason_desc: [0 as char; 40],
        reason_desc_raw: [0; 40],
        }
    }
}

impl Packet for PacketZcAckLeaveGuild {
    fn id(&self) -> &str {
       "0x015a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckLeaveGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqBanGuild {
    pub fn packet_id() -> &'static str {
        "0x015b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqBanGuild {
        let mut offset: usize = 0;
        PacketCzReqBanGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            reason_desc: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_desc_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason_desc {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_desc_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.reason_desc_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 54;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_reason_desc(&mut self, value: [char; 40]) {
        self.reason_desc = value;
    }
    pub fn set_reason_desc_raw(&mut self, value: [u8; 40]) {
        self.reason_desc_raw = value;
    }
    pub fn new() -> PacketCzReqBanGuild {
        PacketCzReqBanGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0xb]),
        packet_id_raw: [0x15, 0xb],
        gdid: 0,
        gdid_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        reason_desc: [0 as char; 40],
        reason_desc_raw: [0; 40],
        }
    }
}

impl Packet for PacketCzReqBanGuild {
    fn id(&self) -> &str {
       "0x015b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqBanGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckBanGuild {
    pub fn packet_id() -> &'static str {
        "0x015c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckBanGuild {
        let mut offset: usize = 0;
        PacketZcAckBanGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            reason_desc: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_desc_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            account: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            account_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason_desc {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_desc_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.account {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.account_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        wtr.append(&mut self.reason_desc_raw.to_vec());
        wtr.append(&mut self.account_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 90;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn set_reason_desc(&mut self, value: [char; 40]) {
        self.reason_desc = value;
    }
    pub fn set_reason_desc_raw(&mut self, value: [u8; 40]) {
        self.reason_desc_raw = value;
    }
    pub fn set_account(&mut self, value: [char; 24]) {
        self.account = value;
    }
    pub fn set_account_raw(&mut self, value: [u8; 24]) {
        self.account_raw = value;
    }
    pub fn new() -> PacketZcAckBanGuild {
        PacketZcAckBanGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0xc]),
        packet_id_raw: [0x15, 0xc],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        reason_desc: [0 as char; 40],
        reason_desc_raw: [0; 40],
        account: [0 as char; 24],
        account_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcAckBanGuild {
    fn id(&self) -> &str {
       "0x015c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckBanGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqDisorganizeGuild {
    pub fn packet_id() -> &'static str {
        "0x015d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqDisorganizeGuild {
        let mut offset: usize = 0;
        PacketCzReqDisorganizeGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            key: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            key_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.key {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.key_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.key_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 42;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_key(&mut self, value: [char; 40]) {
        self.key = value;
    }
    pub fn set_key_raw(&mut self, value: [u8; 40]) {
        self.key_raw = value;
    }
    pub fn new() -> PacketCzReqDisorganizeGuild {
        PacketCzReqDisorganizeGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0xd]),
        packet_id_raw: [0x15, 0xd],
        key: [0 as char; 40],
        key_raw: [0; 40],
        }
    }
}

impl Packet for PacketCzReqDisorganizeGuild {
    fn id(&self) -> &str {
       "0x015d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqDisorganizeGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckDisorganizeGuildResult {
    pub fn packet_id() -> &'static str {
        "0x015e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckDisorganizeGuildResult {
        let mut offset: usize = 0;
        PacketZcAckDisorganizeGuildResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            reason: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            reason_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.reason).unwrap();
        self.reason_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.reason_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_reason(&mut self, value: i32) {
        self.reason = value;
    }
    pub fn set_reason_raw(&mut self, value: [u8; 4]) {
        self.reason_raw = value;
    }
    pub fn new() -> PacketZcAckDisorganizeGuildResult {
        PacketZcAckDisorganizeGuildResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0xe]),
        packet_id_raw: [0x15, 0xe],
        reason: 0,
        reason_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAckDisorganizeGuildResult {
    fn id(&self) -> &str {
       "0x015e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckDisorganizeGuildResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckDisorganizeGuild {
    pub fn packet_id() -> &'static str {
        "0x015f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckDisorganizeGuild {
        let mut offset: usize = 0;
        PacketZcAckDisorganizeGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            reason_desc: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_desc_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason_desc {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_desc_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.reason_desc_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 42;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_reason_desc(&mut self, value: [char; 40]) {
        self.reason_desc = value;
    }
    pub fn set_reason_desc_raw(&mut self, value: [u8; 40]) {
        self.reason_desc_raw = value;
    }
    pub fn new() -> PacketZcAckDisorganizeGuild {
        PacketZcAckDisorganizeGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0xf]),
        packet_id_raw: [0x15, 0xf],
        reason_desc: [0 as char; 40],
        reason_desc_raw: [0; 40],
        }
    }
}

impl Packet for PacketZcAckDisorganizeGuild {
    fn id(&self) -> &str {
       "0x015f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckDisorganizeGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPositionInfo {
    pub fn packet_id() -> &'static str {
        "0x0160"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPositionInfo {
        let mut offset: usize = 0;
        let vec_type_len = GuildMemberPositionInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<GuildMemberPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(GuildMemberPositionInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPositionInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_info: {
                let field = vec_field.clone();
                field
            },
            member_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_info_raw = {
            self.member_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_info(&mut self, value: Vec<GuildMemberPositionInfo>) {
        self.member_info = value;
    }
    pub fn set_member_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_info_raw = value;
    }
    pub fn new() -> PacketZcPositionInfo {
        PacketZcPositionInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x0]),
        packet_id_raw: [0x16, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_info: vec![],
        member_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcPositionInfo {
    fn id(&self) -> &str {
       "0x0160"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPositionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRegChangeGuildPositioninfo {
    pub fn packet_id() -> &'static str {
        "0x0161"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRegChangeGuildPositioninfo {
        let mut offset: usize = 0;
        let vec_type_len = GuildRegPositionInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<GuildRegPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(GuildRegPositionInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzRegChangeGuildPositioninfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_list: {
                let field = vec_field.clone();
                field
            },
            member_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_list_raw = {
            self.member_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_list(&mut self, value: Vec<GuildRegPositionInfo>) {
        self.member_list = value;
    }
    pub fn set_member_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_list_raw = value;
    }
    pub fn new() -> PacketCzRegChangeGuildPositioninfo {
        PacketCzRegChangeGuildPositioninfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x1]),
        packet_id_raw: [0x16, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_list: vec![],
        member_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzRegChangeGuildPositioninfo {
    fn id(&self) -> &str {
       "0x0161"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRegChangeGuildPositioninfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildSkillinfo {
    pub fn packet_id() -> &'static str {
        "0x0162"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildSkillinfo {
        let mut offset: usize = 0;
        let vec_type_len = SKILLINFO::base_len(packetver);
        let iter_count = (&buffer.len() - 6) / vec_type_len;
        let mut vec_field: Vec<SKILLINFO> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 6 + (vec_type_len * (i - 1));
            let end_pos = 6 + vec_type_len * i;
            vec_field.push(SKILLINFO::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcGuildSkillinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skill_point: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skill_point_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skill_list: {
                let field = vec_field.clone();
                field
            },
            skill_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.skill_point).unwrap();
        self.skill_point_raw = wtr.try_into().unwrap();
        self.skill_list_raw = {
            self.skill_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.skill_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.skill_point_raw.to_vec());
        self.skill_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_skill_point(&mut self, value: i16) {
        self.skill_point = value;
    }
    pub fn set_skill_point_raw(&mut self, value: [u8; 2]) {
        self.skill_point_raw = value;
    }
    pub fn set_skill_list(&mut self, value: Vec<SKILLINFO>) {
        self.skill_list = value;
    }
    pub fn set_skill_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.skill_list_raw = value;
    }
    pub fn new() -> PacketZcGuildSkillinfo {
        PacketZcGuildSkillinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x2]),
        packet_id_raw: [0x16, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        skill_point: 0,
        skill_point_raw: [0; 2],
        skill_list: vec![],
        skill_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcGuildSkillinfo {
    fn id(&self) -> &str {
       "0x0162"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildSkillinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBanList {
    pub fn packet_id() -> &'static str {
        "0x0163"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBanList {
        let mut offset: usize = 0;
        let vec_type_len = GuildBanInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<GuildBanInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(GuildBanInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcBanList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            ban_list: {
                let field = vec_field.clone();
                field
            },
            ban_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.ban_list_raw = {
            self.ban_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.ban_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.ban_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_ban_list(&mut self, value: Vec<GuildBanInfo>) {
        self.ban_list = value;
    }
    pub fn set_ban_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.ban_list_raw = value;
    }
    pub fn new() -> PacketZcBanList {
        PacketZcBanList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x3]),
        packet_id_raw: [0x16, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        ban_list: vec![],
        ban_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcBanList {
    fn id(&self) -> &str {
       "0x0163"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBanList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOtherGuildList {
    pub fn packet_id() -> &'static str {
        "0x0164"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOtherGuildList {
        let mut offset: usize = 0;
        let vec_type_len = OtherGuildInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<OtherGuildInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(OtherGuildInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcOtherGuildList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guild_list: {
                let field = vec_field.clone();
                field
            },
            guild_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.guild_list_raw = {
            self.guild_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.guild_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.guild_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_guild_list(&mut self, value: Vec<OtherGuildInfo>) {
        self.guild_list = value;
    }
    pub fn set_guild_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.guild_list_raw = value;
    }
    pub fn new() -> PacketZcOtherGuildList {
        PacketZcOtherGuildList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x4]),
        packet_id_raw: [0x16, 0x4],
        packet_length: 0,
        packet_length_raw: [0; 2],
        guild_list: vec![],
        guild_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcOtherGuildList {
    fn id(&self) -> &str {
       "0x0164"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOtherGuildList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqMakeGuild {
    pub fn packet_id() -> &'static str {
        "0x0165"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqMakeGuild {
        let mut offset: usize = 0;
        PacketCzReqMakeGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            gname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.gname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.gname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.gname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_gname(&mut self, value: [char; 24]) {
        self.gname = value;
    }
    pub fn set_gname_raw(&mut self, value: [u8; 24]) {
        self.gname_raw = value;
    }
    pub fn new() -> PacketCzReqMakeGuild {
        PacketCzReqMakeGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x5]),
        packet_id_raw: [0x16, 0x5],
        gid: 0,
        gid_raw: [0; 4],
        gname: [0 as char; 24],
        gname_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqMakeGuild {
    fn id(&self) -> &str {
       "0x0165"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqMakeGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPositionIdNameInfo {
    pub fn packet_id() -> &'static str {
        "0x0166"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPositionIdNameInfo {
        let mut offset: usize = 0;
        let vec_type_len = MemberPositionIdNameInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<MemberPositionIdNameInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(MemberPositionIdNameInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPositionIdNameInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_list: {
                let field = vec_field.clone();
                field
            },
            member_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_list_raw = {
            self.member_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_list(&mut self, value: Vec<MemberPositionIdNameInfo>) {
        self.member_list = value;
    }
    pub fn set_member_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_list_raw = value;
    }
    pub fn new() -> PacketZcPositionIdNameInfo {
        PacketZcPositionIdNameInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x6]),
        packet_id_raw: [0x16, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_list: vec![],
        member_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPositionIdNameInfo {
    fn id(&self) -> &str {
       "0x0166"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPositionIdNameInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcResultMakeGuild {
    pub fn packet_id() -> &'static str {
        "0x0167"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcResultMakeGuild {
        let mut offset: usize = 0;
        PacketZcResultMakeGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcResultMakeGuild {
        PacketZcResultMakeGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x7]),
        packet_id_raw: [0x16, 0x7],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcResultMakeGuild {
    fn id(&self) -> &str {
       "0x0167"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcResultMakeGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqJoinGuild {
    pub fn packet_id() -> &'static str {
        "0x0168"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqJoinGuild {
        let mut offset: usize = 0;
        PacketCzReqJoinGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            my_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            my_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            my_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            my_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.my_aid).unwrap();
        self.my_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.my_gid).unwrap();
        self.my_gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.my_aid_raw.to_vec());
        wtr.append(&mut self.my_gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_my_aid(&mut self, value: u32) {
        self.my_aid = value;
    }
    pub fn set_my_aid_raw(&mut self, value: [u8; 4]) {
        self.my_aid_raw = value;
    }
    pub fn set_my_gid(&mut self, value: u32) {
        self.my_gid = value;
    }
    pub fn set_my_gid_raw(&mut self, value: [u8; 4]) {
        self.my_gid_raw = value;
    }
    pub fn new() -> PacketCzReqJoinGuild {
        PacketCzReqJoinGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x8]),
        packet_id_raw: [0x16, 0x8],
        aid: 0,
        aid_raw: [0; 4],
        my_aid: 0,
        my_aid_raw: [0; 4],
        my_gid: 0,
        my_gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqJoinGuild {
    fn id(&self) -> &str {
       "0x0168"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqJoinGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqJoinGuild {
    pub fn packet_id() -> &'static str {
        "0x0169"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqJoinGuild {
        let mut offset: usize = 0;
        PacketZcAckReqJoinGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            answer: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_answer(&mut self, value: u8) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 1]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketZcAckReqJoinGuild {
        PacketZcAckReqJoinGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0x9]),
        packet_id_raw: [0x16, 0x9],
        answer: 0,
        answer_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckReqJoinGuild {
    fn id(&self) -> &str {
       "0x0169"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqJoinGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqJoinGuild {
    pub fn packet_id() -> &'static str {
        "0x016a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqJoinGuild {
        let mut offset: usize = 0;
        PacketZcReqJoinGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guild_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guild_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guild_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guild_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.guild_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_guild_name(&mut self, value: [char; 24]) {
        self.guild_name = value;
    }
    pub fn set_guild_name_raw(&mut self, value: [u8; 24]) {
        self.guild_name_raw = value;
    }
    pub fn new() -> PacketZcReqJoinGuild {
        PacketZcReqJoinGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0xa]),
        packet_id_raw: [0x16, 0xa],
        gdid: 0,
        gdid_raw: [0; 4],
        guild_name: [0 as char; 24],
        guild_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqJoinGuild {
    fn id(&self) -> &str {
       "0x016a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqJoinGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzJoinGuild {
    pub fn packet_id() -> &'static str {
        "0x016b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzJoinGuild {
        let mut offset: usize = 0;
        PacketCzJoinGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            answer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_answer(&mut self, value: i32) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 4]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketCzJoinGuild {
        PacketCzJoinGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0xb]),
        packet_id_raw: [0x16, 0xb],
        gdid: 0,
        gdid_raw: [0; 4],
        answer: 0,
        answer_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzJoinGuild {
    fn id(&self) -> &str {
       "0x016b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzJoinGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUpdateGdid {
    pub fn packet_id() -> &'static str {
        "0x016c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUpdateGdid {
        let mut offset: usize = 0;
        PacketZcUpdateGdid {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            emblem_version: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            emblem_version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            right: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            right_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_master: {
                let field = buffer[offset] == 1;
                field
            },
            is_master_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            inter_sid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            inter_sid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            gname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.emblem_version).unwrap();
        self.emblem_version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.right).unwrap();
        self.right_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_master as u8).unwrap();
        self.is_master_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.inter_sid).unwrap();
        self.inter_sid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.gname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.gname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.emblem_version_raw.to_vec());
        wtr.append(&mut self.right_raw.to_vec());
        wtr.append(&mut self.is_master_raw.to_vec());
        wtr.append(&mut self.inter_sid_raw.to_vec());
        wtr.append(&mut self.gname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 43;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_emblem_version(&mut self, value: i32) {
        self.emblem_version = value;
    }
    pub fn set_emblem_version_raw(&mut self, value: [u8; 4]) {
        self.emblem_version_raw = value;
    }
    pub fn set_right(&mut self, value: i32) {
        self.right = value;
    }
    pub fn set_right_raw(&mut self, value: [u8; 4]) {
        self.right_raw = value;
    }
    pub fn set_is_master(&mut self, value: bool) {
        self.is_master = value;
    }
    pub fn set_is_master_raw(&mut self, value: [u8; 1]) {
        self.is_master_raw = value;
    }
    pub fn set_inter_sid(&mut self, value: i32) {
        self.inter_sid = value;
    }
    pub fn set_inter_sid_raw(&mut self, value: [u8; 4]) {
        self.inter_sid_raw = value;
    }
    pub fn set_gname(&mut self, value: [char; 24]) {
        self.gname = value;
    }
    pub fn set_gname_raw(&mut self, value: [u8; 24]) {
        self.gname_raw = value;
    }
    pub fn new() -> PacketZcUpdateGdid {
        PacketZcUpdateGdid {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0xc]),
        packet_id_raw: [0x16, 0xc],
        gdid: 0,
        gdid_raw: [0; 4],
        emblem_version: 0,
        emblem_version_raw: [0; 4],
        right: 0,
        right_raw: [0; 4],
        is_master: false,
        is_master_raw: [0; 1],
        inter_sid: 0,
        inter_sid_raw: [0; 4],
        gname: [0 as char; 24],
        gname_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcUpdateGdid {
    fn id(&self) -> &str {
       "0x016c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUpdateGdid {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUpdateCharstat {
    pub fn packet_id() -> &'static str {
        "0x016d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUpdateCharstat {
        let mut offset: usize = 0;
        PacketZcUpdateCharstat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            status: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            status_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.status).unwrap();
        self.status_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.status_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_status(&mut self, value: i32) {
        self.status = value;
    }
    pub fn set_status_raw(&mut self, value: [u8; 4]) {
        self.status_raw = value;
    }
    pub fn new() -> PacketZcUpdateCharstat {
        PacketZcUpdateCharstat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0xd]),
        packet_id_raw: [0x16, 0xd],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        status: 0,
        status_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcUpdateCharstat {
    fn id(&self) -> &str {
       "0x016d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUpdateCharstat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzGuildNotice {
    pub fn packet_id() -> &'static str {
        "0x016e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzGuildNotice {
        let mut offset: usize = 0;
        PacketCzGuildNotice {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            subject: {
                let field =  {
                let mut dst: [char; 60] = [0 as char; 60];
                for (index, byte) in buffer[offset..offset + 60].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            subject_raw: {
                let mut dst: [u8; 60] = [0u8; 60];
                dst.clone_from_slice(&buffer[offset..offset + 60]);
                offset += 60;
                dst
            },
            notice: {
                let field =  {
                let mut dst: [char; 120] = [0 as char; 120];
                for (index, byte) in buffer[offset..offset + 120].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            notice_raw: {
                let mut dst: [u8; 120] = [0u8; 120];
                dst.clone_from_slice(&buffer[offset..offset + 120]);
                offset += 120;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.subject {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.subject_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.notice {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.notice_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.subject_raw.to_vec());
        wtr.append(&mut self.notice_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 186;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_subject(&mut self, value: [char; 60]) {
        self.subject = value;
    }
    pub fn set_subject_raw(&mut self, value: [u8; 60]) {
        self.subject_raw = value;
    }
    pub fn set_notice(&mut self, value: [char; 120]) {
        self.notice = value;
    }
    pub fn set_notice_raw(&mut self, value: [u8; 120]) {
        self.notice_raw = value;
    }
    pub fn new() -> PacketCzGuildNotice {
        PacketCzGuildNotice {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0xe]),
        packet_id_raw: [0x16, 0xe],
        gdid: 0,
        gdid_raw: [0; 4],
        subject: [0 as char; 60],
        subject_raw: [0; 60],
        notice: [0 as char; 120],
        notice_raw: [0; 120],
        }
    }
}

impl Packet for PacketCzGuildNotice {
    fn id(&self) -> &str {
       "0x016e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzGuildNotice {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildNotice {
    pub fn packet_id() -> &'static str {
        "0x016f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildNotice {
        let mut offset: usize = 0;
        PacketZcGuildNotice {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            subject: {
                let field =  {
                let mut dst: [char; 60] = [0 as char; 60];
                for (index, byte) in buffer[offset..offset + 60].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            subject_raw: {
                let mut dst: [u8; 60] = [0u8; 60];
                dst.clone_from_slice(&buffer[offset..offset + 60]);
                offset += 60;
                dst
            },
            notice: {
                let field =  {
                let mut dst: [char; 120] = [0 as char; 120];
                for (index, byte) in buffer[offset..offset + 120].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            notice_raw: {
                let mut dst: [u8; 120] = [0u8; 120];
                dst.clone_from_slice(&buffer[offset..offset + 120]);
                offset += 120;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.subject {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.subject_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.notice {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.notice_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.subject_raw.to_vec());
        wtr.append(&mut self.notice_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 182;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_subject(&mut self, value: [char; 60]) {
        self.subject = value;
    }
    pub fn set_subject_raw(&mut self, value: [u8; 60]) {
        self.subject_raw = value;
    }
    pub fn set_notice(&mut self, value: [char; 120]) {
        self.notice = value;
    }
    pub fn set_notice_raw(&mut self, value: [u8; 120]) {
        self.notice_raw = value;
    }
    pub fn new() -> PacketZcGuildNotice {
        PacketZcGuildNotice {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x16, 0xf]),
        packet_id_raw: [0x16, 0xf],
        subject: [0 as char; 60],
        subject_raw: [0; 60],
        notice: [0 as char; 120],
        notice_raw: [0; 120],
        }
    }
}

impl Packet for PacketZcGuildNotice {
    fn id(&self) -> &str {
       "0x016f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildNotice {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqAllyGuild {
    pub fn packet_id() -> &'static str {
        "0x0170"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqAllyGuild {
        let mut offset: usize = 0;
        PacketCzReqAllyGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            my_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            my_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            my_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            my_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.my_aid).unwrap();
        self.my_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.my_gid).unwrap();
        self.my_gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.my_aid_raw.to_vec());
        wtr.append(&mut self.my_gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_my_aid(&mut self, value: u32) {
        self.my_aid = value;
    }
    pub fn set_my_aid_raw(&mut self, value: [u8; 4]) {
        self.my_aid_raw = value;
    }
    pub fn set_my_gid(&mut self, value: u32) {
        self.my_gid = value;
    }
    pub fn set_my_gid_raw(&mut self, value: [u8; 4]) {
        self.my_gid_raw = value;
    }
    pub fn new() -> PacketCzReqAllyGuild {
        PacketCzReqAllyGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x0]),
        packet_id_raw: [0x17, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        my_aid: 0,
        my_aid_raw: [0; 4],
        my_gid: 0,
        my_gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqAllyGuild {
    fn id(&self) -> &str {
       "0x0170"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqAllyGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqAllyGuild {
    pub fn packet_id() -> &'static str {
        "0x0171"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqAllyGuild {
        let mut offset: usize = 0;
        PacketZcReqAllyGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            other_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            other_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guild_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guild_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.other_aid).unwrap();
        self.other_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guild_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guild_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.other_aid_raw.to_vec());
        wtr.append(&mut self.guild_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_other_aid(&mut self, value: u32) {
        self.other_aid = value;
    }
    pub fn set_other_aid_raw(&mut self, value: [u8; 4]) {
        self.other_aid_raw = value;
    }
    pub fn set_guild_name(&mut self, value: [char; 24]) {
        self.guild_name = value;
    }
    pub fn set_guild_name_raw(&mut self, value: [u8; 24]) {
        self.guild_name_raw = value;
    }
    pub fn new() -> PacketZcReqAllyGuild {
        PacketZcReqAllyGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x1]),
        packet_id_raw: [0x17, 0x1],
        other_aid: 0,
        other_aid_raw: [0; 4],
        guild_name: [0 as char; 24],
        guild_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqAllyGuild {
    fn id(&self) -> &str {
       "0x0171"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqAllyGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAllyGuild {
    pub fn packet_id() -> &'static str {
        "0x0172"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAllyGuild {
        let mut offset: usize = 0;
        PacketCzAllyGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            other_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            other_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            answer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.other_aid).unwrap();
        self.other_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.other_aid_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_other_aid(&mut self, value: u32) {
        self.other_aid = value;
    }
    pub fn set_other_aid_raw(&mut self, value: [u8; 4]) {
        self.other_aid_raw = value;
    }
    pub fn set_answer(&mut self, value: i32) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 4]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketCzAllyGuild {
        PacketCzAllyGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x2]),
        packet_id_raw: [0x17, 0x2],
        other_aid: 0,
        other_aid_raw: [0; 4],
        answer: 0,
        answer_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAllyGuild {
    fn id(&self) -> &str {
       "0x0172"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAllyGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqAllyGuild {
    pub fn packet_id() -> &'static str {
        "0x0173"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqAllyGuild {
        let mut offset: usize = 0;
        PacketZcAckReqAllyGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            answer: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_answer(&mut self, value: u8) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 1]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketZcAckReqAllyGuild {
        PacketZcAckReqAllyGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x3]),
        packet_id_raw: [0x17, 0x3],
        answer: 0,
        answer_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckReqAllyGuild {
    fn id(&self) -> &str {
       "0x0173"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqAllyGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckChangeGuildPositioninfo {
    pub fn packet_id() -> &'static str {
        "0x0174"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckChangeGuildPositioninfo {
        let mut offset: usize = 0;
        let vec_type_len = GuildRegPositionInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<GuildRegPositionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(GuildRegPositionInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAckChangeGuildPositioninfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_list: {
                let field = vec_field.clone();
                field
            },
            member_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.member_list_raw = {
            self.member_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.member_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.member_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_member_list(&mut self, value: Vec<GuildRegPositionInfo>) {
        self.member_list = value;
    }
    pub fn set_member_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.member_list_raw = value;
    }
    pub fn new() -> PacketZcAckChangeGuildPositioninfo {
        PacketZcAckChangeGuildPositioninfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x4]),
        packet_id_raw: [0x17, 0x4],
        packet_length: 0,
        packet_length_raw: [0; 2],
        member_list: vec![],
        member_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcAckChangeGuildPositioninfo {
    fn id(&self) -> &str {
       "0x0174"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckChangeGuildPositioninfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqGuildMemberInfo {
    pub fn packet_id() -> &'static str {
        "0x0175"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqGuildMemberInfo {
        let mut offset: usize = 0;
        PacketCzReqGuildMemberInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketCzReqGuildMemberInfo {
        PacketCzReqGuildMemberInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x5]),
        packet_id_raw: [0x17, 0x5],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqGuildMemberInfo {
    fn id(&self) -> &str {
       "0x0175"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqGuildMemberInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckGuildMemberInfo {
    pub fn packet_id() -> &'static str {
        "0x0176"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckGuildMemberInfo {
        let mut offset: usize = 0;
        PacketZcAckGuildMemberInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = GuildMemberInfo::from(&buffer[offset..offset + GuildMemberInfo::base_len(packetver)], packetver);
                field
            },
            info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.info.fill_raw_with_packetver(packetver);
        self.info_raw = self.info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: GuildMemberInfo) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<u8>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcAckGuildMemberInfo {
        PacketZcAckGuildMemberInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x6]),
        packet_id_raw: [0x17, 0x6],
        info: GuildMemberInfo::new(),
        info_raw: vec![],
        }
    }
}

impl Packet for PacketZcAckGuildMemberInfo {
    fn id(&self) -> &str {
       "0x0176"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckGuildMemberInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemidentifyList {
    pub fn packet_id() -> &'static str {
        "0x0177"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemidentifyList {
        let mut offset: usize = 0;
        PacketZcItemidentifyList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itidlist: {
                let field =  {
                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();
                dst
            };
                field
            },
            itidlist_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.itidlist_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_itidlist(&mut self, value: Vec<u8>) {
        self.itidlist = value;
    }
    pub fn set_itidlist_raw(&mut self, value: Vec<u8>) {
        self.itidlist_raw = value;
    }
    pub fn new() -> PacketZcItemidentifyList {
        PacketZcItemidentifyList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x7]),
        packet_id_raw: [0x17, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        itidlist: vec![],
        itidlist_raw: vec![],
        }
    }
}

impl Packet for PacketZcItemidentifyList {
    fn id(&self) -> &str {
       "0x0177"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemidentifyList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqItemidentify {
    pub fn packet_id() -> &'static str {
        "0x0178"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqItemidentify {
        let mut offset: usize = 0;
        PacketCzReqItemidentify {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketCzReqItemidentify {
        PacketCzReqItemidentify {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x8]),
        packet_id_raw: [0x17, 0x8],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqItemidentify {
    fn id(&self) -> &str {
       "0x0178"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqItemidentify {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckItemidentify {
    pub fn packet_id() -> &'static str {
        "0x0179"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckItemidentify {
        let mut offset: usize = 0;
        PacketZcAckItemidentify {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckItemidentify {
        PacketZcAckItemidentify {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0x9]),
        packet_id_raw: [0x17, 0x9],
        index: 0,
        index_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckItemidentify {
    fn id(&self) -> &str {
       "0x0179"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckItemidentify {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqItemcompositionList {
    pub fn packet_id() -> &'static str {
        "0x017a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqItemcompositionList {
        let mut offset: usize = 0;
        PacketCzReqItemcompositionList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card_index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card_index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.card_index).unwrap();
        self.card_index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.card_index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_card_index(&mut self, value: i16) {
        self.card_index = value;
    }
    pub fn set_card_index_raw(&mut self, value: [u8; 2]) {
        self.card_index_raw = value;
    }
    pub fn new() -> PacketCzReqItemcompositionList {
        PacketCzReqItemcompositionList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0xa]),
        packet_id_raw: [0x17, 0xa],
        card_index: 0,
        card_index_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqItemcompositionList {
    fn id(&self) -> &str {
       "0x017a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqItemcompositionList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemcompositionList {
    pub fn packet_id() -> &'static str {
        "0x017b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemcompositionList {
        let mut offset: usize = 0;
        PacketZcItemcompositionList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itidlist: {
                let field =  {
                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();
                dst
            };
                field
            },
            itidlist_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.itidlist_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_itidlist(&mut self, value: Vec<u8>) {
        self.itidlist = value;
    }
    pub fn set_itidlist_raw(&mut self, value: Vec<u8>) {
        self.itidlist_raw = value;
    }
    pub fn new() -> PacketZcItemcompositionList {
        PacketZcItemcompositionList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0xb]),
        packet_id_raw: [0x17, 0xb],
        packet_length: 0,
        packet_length_raw: [0; 2],
        itidlist: vec![],
        itidlist_raw: vec![],
        }
    }
}

impl Packet for PacketZcItemcompositionList {
    fn id(&self) -> &str {
       "0x017b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemcompositionList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqItemcomposition {
    pub fn packet_id() -> &'static str {
        "0x017c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqItemcomposition {
        let mut offset: usize = 0;
        PacketCzReqItemcomposition {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card_index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card_index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            equip_index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            equip_index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.card_index).unwrap();
        self.card_index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.equip_index).unwrap();
        self.equip_index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.card_index_raw.to_vec());
        wtr.append(&mut self.equip_index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_card_index(&mut self, value: i16) {
        self.card_index = value;
    }
    pub fn set_card_index_raw(&mut self, value: [u8; 2]) {
        self.card_index_raw = value;
    }
    pub fn set_equip_index(&mut self, value: i16) {
        self.equip_index = value;
    }
    pub fn set_equip_index_raw(&mut self, value: [u8; 2]) {
        self.equip_index_raw = value;
    }
    pub fn new() -> PacketCzReqItemcomposition {
        PacketCzReqItemcomposition {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0xc]),
        packet_id_raw: [0x17, 0xc],
        card_index: 0,
        card_index_raw: [0; 2],
        equip_index: 0,
        equip_index_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqItemcomposition {
    fn id(&self) -> &str {
       "0x017c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqItemcomposition {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckItemcomposition {
    pub fn packet_id() -> &'static str {
        "0x017d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckItemcomposition {
        let mut offset: usize = 0;
        PacketZcAckItemcomposition {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            equip_index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            equip_index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card_index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card_index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.equip_index).unwrap();
        self.equip_index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.card_index).unwrap();
        self.card_index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.equip_index_raw.to_vec());
        wtr.append(&mut self.card_index_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_equip_index(&mut self, value: i16) {
        self.equip_index = value;
    }
    pub fn set_equip_index_raw(&mut self, value: [u8; 2]) {
        self.equip_index_raw = value;
    }
    pub fn set_card_index(&mut self, value: i16) {
        self.card_index = value;
    }
    pub fn set_card_index_raw(&mut self, value: [u8; 2]) {
        self.card_index_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckItemcomposition {
        PacketZcAckItemcomposition {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0xd]),
        packet_id_raw: [0x17, 0xd],
        equip_index: 0,
        equip_index_raw: [0; 2],
        card_index: 0,
        card_index_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckItemcomposition {
    fn id(&self) -> &str {
       "0x017d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckItemcomposition {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzGuildChat {
    pub fn packet_id() -> &'static str {
        "0x017e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzGuildChat {
        let mut offset: usize = 0;
        PacketCzGuildChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzGuildChat {
        PacketCzGuildChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0xe]),
        packet_id_raw: [0x17, 0xe],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzGuildChat {
    fn id(&self) -> &str {
       "0x017e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzGuildChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildChat {
    pub fn packet_id() -> &'static str {
        "0x017f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildChat {
        let mut offset: usize = 0;
        PacketZcGuildChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcGuildChat {
        PacketZcGuildChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x17, 0xf]),
        packet_id_raw: [0x17, 0xf],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcGuildChat {
    fn id(&self) -> &str {
       "0x017f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqHostileGuild {
    pub fn packet_id() -> &'static str {
        "0x0180"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqHostileGuild {
        let mut offset: usize = 0;
        PacketCzReqHostileGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqHostileGuild {
        PacketCzReqHostileGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x0]),
        packet_id_raw: [0x18, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqHostileGuild {
    fn id(&self) -> &str {
       "0x0180"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqHostileGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqHostileGuild {
    pub fn packet_id() -> &'static str {
        "0x0181"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqHostileGuild {
        let mut offset: usize = 0;
        PacketZcAckReqHostileGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckReqHostileGuild {
        PacketZcAckReqHostileGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x1]),
        packet_id_raw: [0x18, 0x1],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckReqHostileGuild {
    fn id(&self) -> &str {
       "0x0181"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqHostileGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemberAdd {
    pub fn packet_id() -> &'static str {
        "0x0182"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemberAdd {
        let mut offset: usize = 0;
        PacketZcMemberAdd {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = GuildMemberInfo::from(&buffer[offset..offset + GuildMemberInfo::base_len(packetver)], packetver);
                field
            },
            info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.info.fill_raw_with_packetver(packetver);
        self.info_raw = self.info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: GuildMemberInfo) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<u8>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcMemberAdd {
        PacketZcMemberAdd {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x2]),
        packet_id_raw: [0x18, 0x2],
        info: GuildMemberInfo::new(),
        info_raw: vec![],
        }
    }
}

impl Packet for PacketZcMemberAdd {
    fn id(&self) -> &str {
       "0x0182"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemberAdd {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqDeleteRelatedGuild {
    pub fn packet_id() -> &'static str {
        "0x0183"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqDeleteRelatedGuild {
        let mut offset: usize = 0;
        PacketCzReqDeleteRelatedGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            opponent_gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            opponent_gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            relation: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            relation_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.opponent_gdid).unwrap();
        self.opponent_gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.relation).unwrap();
        self.relation_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.opponent_gdid_raw.to_vec());
        wtr.append(&mut self.relation_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_opponent_gdid(&mut self, value: u32) {
        self.opponent_gdid = value;
    }
    pub fn set_opponent_gdid_raw(&mut self, value: [u8; 4]) {
        self.opponent_gdid_raw = value;
    }
    pub fn set_relation(&mut self, value: i32) {
        self.relation = value;
    }
    pub fn set_relation_raw(&mut self, value: [u8; 4]) {
        self.relation_raw = value;
    }
    pub fn new() -> PacketCzReqDeleteRelatedGuild {
        PacketCzReqDeleteRelatedGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x3]),
        packet_id_raw: [0x18, 0x3],
        opponent_gdid: 0,
        opponent_gdid_raw: [0; 4],
        relation: 0,
        relation_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqDeleteRelatedGuild {
    fn id(&self) -> &str {
       "0x0183"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqDeleteRelatedGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteRelatedGuild {
    pub fn packet_id() -> &'static str {
        "0x0184"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteRelatedGuild {
        let mut offset: usize = 0;
        PacketZcDeleteRelatedGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            opponent_gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            opponent_gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            relation: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            relation_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.opponent_gdid).unwrap();
        self.opponent_gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.relation).unwrap();
        self.relation_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.opponent_gdid_raw.to_vec());
        wtr.append(&mut self.relation_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_opponent_gdid(&mut self, value: u32) {
        self.opponent_gdid = value;
    }
    pub fn set_opponent_gdid_raw(&mut self, value: [u8; 4]) {
        self.opponent_gdid_raw = value;
    }
    pub fn set_relation(&mut self, value: i32) {
        self.relation = value;
    }
    pub fn set_relation_raw(&mut self, value: [u8; 4]) {
        self.relation_raw = value;
    }
    pub fn new() -> PacketZcDeleteRelatedGuild {
        PacketZcDeleteRelatedGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x4]),
        packet_id_raw: [0x18, 0x4],
        opponent_gdid: 0,
        opponent_gdid_raw: [0; 4],
        relation: 0,
        relation_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDeleteRelatedGuild {
    fn id(&self) -> &str {
       "0x0184"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteRelatedGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddRelatedGuild {
    pub fn packet_id() -> &'static str {
        "0x0185"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddRelatedGuild {
        let mut offset: usize = 0;
        PacketZcAddRelatedGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = RelatedGuildInfo::from(&buffer[offset..offset + RelatedGuildInfo::base_len(packetver)], packetver);
                field
            },
            info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.info.fill_raw_with_packetver(packetver);
        self.info_raw = self.info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: RelatedGuildInfo) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<u8>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcAddRelatedGuild {
        PacketZcAddRelatedGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x5]),
        packet_id_raw: [0x18, 0x5],
        info: RelatedGuildInfo::new(),
        info_raw: vec![],
        }
    }
}

impl Packet for PacketZcAddRelatedGuild {
    fn id(&self) -> &str {
       "0x0185"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddRelatedGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCollectordead {
    pub fn packet_id() -> &'static str {
        "0x0186"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCollectordead {
        let mut offset: usize = 0;
        PacketCollectordead {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            server_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            server_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.server_id).unwrap();
        self.server_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.server_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_server_id(&mut self, value: u32) {
        self.server_id = value;
    }
    pub fn set_server_id_raw(&mut self, value: [u8; 4]) {
        self.server_id_raw = value;
    }
    pub fn new() -> PacketCollectordead {
        PacketCollectordead {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x6]),
        packet_id_raw: [0x18, 0x6],
        server_id: 0,
        server_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCollectordead {
    fn id(&self) -> &str {
       "0x0186"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCollectordead {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketPing {
    pub fn packet_id() -> &'static str {
        "0x0187"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketPing {
        let mut offset: usize = 0;
        PacketPing {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketPing {
        PacketPing {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x7]),
        packet_id_raw: [0x18, 0x7],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketPing {
    fn id(&self) -> &str {
       "0x0187"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketPing {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckItemrefining {
    pub fn packet_id() -> &'static str {
        "0x0188"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckItemrefining {
        let mut offset: usize = 0;
        PacketZcAckItemrefining {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            item_index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            refining_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.item_index).unwrap();
        self.item_index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.item_index_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_item_index(&mut self, value: i16) {
        self.item_index = value;
    }
    pub fn set_item_index_raw(&mut self, value: [u8; 2]) {
        self.item_index_raw = value;
    }
    pub fn set_refining_level(&mut self, value: i16) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 2]) {
        self.refining_level_raw = value;
    }
    pub fn new() -> PacketZcAckItemrefining {
        PacketZcAckItemrefining {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x8]),
        packet_id_raw: [0x18, 0x8],
        result: 0,
        result_raw: [0; 2],
        item_index: 0,
        item_index_raw: [0; 2],
        refining_level: 0,
        refining_level_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckItemrefining {
    fn id(&self) -> &str {
       "0x0188"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckItemrefining {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMapinfo {
    pub fn packet_id() -> &'static str {
        "0x0189"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMapinfo {
        let mut offset: usize = 0;
        PacketZcNotifyMapinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcNotifyMapinfo {
        PacketZcNotifyMapinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x9]),
        packet_id_raw: [0x18, 0x9],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMapinfo {
    fn id(&self) -> &str {
       "0x0189"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMapinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqDisconnect {
    pub fn packet_id() -> &'static str {
        "0x018a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqDisconnect {
        let mut offset: usize = 0;
        PacketCzReqDisconnect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzReqDisconnect {
        PacketCzReqDisconnect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0xa]),
        packet_id_raw: [0x18, 0xa],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqDisconnect {
    fn id(&self) -> &str {
       "0x018a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqDisconnect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqDisconnect {
    pub fn packet_id() -> &'static str {
        "0x018b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqDisconnect {
        let mut offset: usize = 0;
        PacketZcAckReqDisconnect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckReqDisconnect {
        PacketZcAckReqDisconnect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0xb]),
        packet_id_raw: [0x18, 0xb],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckReqDisconnect {
    fn id(&self) -> &str {
       "0x018b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqDisconnect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMonsterInfo {
    pub fn packet_id() -> &'static str {
        "0x018c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMonsterInfo {
        let mut offset: usize = 0;
        PacketZcMonsterInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            size: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            size_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            def: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            def_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            race_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            race_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            property: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            property_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            property_table: {
                let field = MonsterInfoElement::from(&buffer[offset..offset + MonsterInfoElement::base_len(packetver)], packetver);
                field
            },
            property_table_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.size).unwrap();
        self.size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.def).unwrap();
        self.def_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.race_type).unwrap();
        self.race_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef_power).unwrap();
        self.mdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.property).unwrap();
        self.property_raw = wtr.try_into().unwrap();
        self.property_table.fill_raw_with_packetver(packetver);
        self.property_table_raw = self.property_table.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.size_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.def_raw.to_vec());
        wtr.append(&mut self.race_type_raw.to_vec());
        wtr.append(&mut self.mdef_power_raw.to_vec());
        wtr.append(&mut self.property_raw.to_vec());
        wtr.append(&mut self.property_table_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_size(&mut self, value: i16) {
        self.size = value;
    }
    pub fn set_size_raw(&mut self, value: [u8; 2]) {
        self.size_raw = value;
    }
    pub fn set_hp(&mut self, value: i32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_def(&mut self, value: i16) {
        self.def = value;
    }
    pub fn set_def_raw(&mut self, value: [u8; 2]) {
        self.def_raw = value;
    }
    pub fn set_race_type(&mut self, value: i16) {
        self.race_type = value;
    }
    pub fn set_race_type_raw(&mut self, value: [u8; 2]) {
        self.race_type_raw = value;
    }
    pub fn set_mdef_power(&mut self, value: i16) {
        self.mdef_power = value;
    }
    pub fn set_mdef_power_raw(&mut self, value: [u8; 2]) {
        self.mdef_power_raw = value;
    }
    pub fn set_property(&mut self, value: i16) {
        self.property = value;
    }
    pub fn set_property_raw(&mut self, value: [u8; 2]) {
        self.property_raw = value;
    }
    pub fn set_property_table(&mut self, value: MonsterInfoElement) {
        self.property_table = value;
    }
    pub fn set_property_table_raw(&mut self, value: Vec<u8>) {
        self.property_table_raw = value;
    }
    pub fn new() -> PacketZcMonsterInfo {
        PacketZcMonsterInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0xc]),
        packet_id_raw: [0x18, 0xc],
        job: 0,
        job_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        size: 0,
        size_raw: [0; 2],
        hp: 0,
        hp_raw: [0; 4],
        def: 0,
        def_raw: [0; 2],
        race_type: 0,
        race_type_raw: [0; 2],
        mdef_power: 0,
        mdef_power_raw: [0; 2],
        property: 0,
        property_raw: [0; 2],
        property_table: MonsterInfoElement::new(),
        property_table_raw: vec![],
        }
    }
}

impl Packet for PacketZcMonsterInfo {
    fn id(&self) -> &str {
       "0x018c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMonsterInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMakableitemlist {
    pub fn packet_id() -> &'static str {
        "0x018d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMakableitemlist {
        let mut offset: usize = 0;
        PacketZcMakableitemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = MakableitemInfo::from(&buffer[offset..offset + MakableitemInfo::base_len(packetver)], packetver);
                field
            },
            info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.info.fill_raw_with_packetver(packetver);
        self.info_raw = self.info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_info(&mut self, value: MakableitemInfo) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<u8>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcMakableitemlist {
        PacketZcMakableitemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0xd]),
        packet_id_raw: [0x18, 0xd],
        packet_length: 0,
        packet_length_raw: [0; 2],
        info: MakableitemInfo::new(),
        info_raw: vec![],
        }
    }
}

impl Packet for PacketZcMakableitemlist {
    fn id(&self) -> &str {
       "0x018d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMakableitemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqmakingitem {
    pub fn packet_id() -> &'static str {
        "0x018e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqmakingitem {
        let mut offset: usize = 0;
        PacketCzReqmakingitem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = MakableitemInfo::from(&buffer[offset..offset + MakableitemInfo::base_len(packetver)], packetver);
                field
            },
            info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.info.fill_raw_with_packetver(packetver);
        self.info_raw = self.info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: MakableitemInfo) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<u8>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketCzReqmakingitem {
        PacketCzReqmakingitem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0xe]),
        packet_id_raw: [0x18, 0xe],
        info: MakableitemInfo::new(),
        info_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqmakingitem {
    fn id(&self) -> &str {
       "0x018e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqmakingitem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqmakingitem {
    pub fn packet_id() -> &'static str {
        "0x018f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqmakingitem {
        let mut offset: usize = 0;
        PacketZcAckReqmakingitem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketZcAckReqmakingitem {
        PacketZcAckReqmakingitem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0xf]),
        packet_id_raw: [0x18, 0xf],
        result: 0,
        result_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckReqmakingitem {
    fn id(&self) -> &str {
       "0x018f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqmakingitem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUseSkillTogroundWithtalkbox {
    pub fn packet_id() -> &'static str {
        "0x0190"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUseSkillTogroundWithtalkbox {
        let mut offset: usize = 0;
        PacketCzUseSkillTogroundWithtalkbox {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            selected_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            selected_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            contents: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            contents_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.selected_level).unwrap();
        self.selected_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.contents {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.contents_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.selected_level_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.contents_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 90;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_selected_level(&mut self, value: i16) {
        self.selected_level = value;
    }
    pub fn set_selected_level_raw(&mut self, value: [u8; 2]) {
        self.selected_level_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_contents(&mut self, value: [char; 80]) {
        self.contents = value;
    }
    pub fn set_contents_raw(&mut self, value: [u8; 80]) {
        self.contents_raw = value;
    }
    pub fn new() -> PacketCzUseSkillTogroundWithtalkbox {
        PacketCzUseSkillTogroundWithtalkbox {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x0]),
        packet_id_raw: [0x19, 0x0],
        selected_level: 0,
        selected_level_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        contents: [0 as char; 80],
        contents_raw: [0; 80],
        }
    }
}

impl Packet for PacketCzUseSkillTogroundWithtalkbox {
    fn id(&self) -> &str {
       "0x0190"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUseSkillTogroundWithtalkbox {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcTalkboxChatcontents {
    pub fn packet_id() -> &'static str {
        "0x0191"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcTalkboxChatcontents {
        let mut offset: usize = 0;
        PacketZcTalkboxChatcontents {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            contents: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            contents_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.contents {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.contents_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.contents_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 86;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_contents(&mut self, value: [char; 80]) {
        self.contents = value;
    }
    pub fn set_contents_raw(&mut self, value: [u8; 80]) {
        self.contents_raw = value;
    }
    pub fn new() -> PacketZcTalkboxChatcontents {
        PacketZcTalkboxChatcontents {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x1]),
        packet_id_raw: [0x19, 0x1],
        aid: 0,
        aid_raw: [0; 4],
        contents: [0 as char; 80],
        contents_raw: [0; 80],
        }
    }
}

impl Packet for PacketZcTalkboxChatcontents {
    fn id(&self) -> &str {
       "0x0191"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcTalkboxChatcontents {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUpdateMapinfo {
    pub fn packet_id() -> &'static str {
        "0x0192"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUpdateMapinfo {
        let mut offset: usize = 0;
        PacketZcUpdateMapinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 24;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn new() -> PacketZcUpdateMapinfo {
        PacketZcUpdateMapinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x2]),
        packet_id_raw: [0x19, 0x2],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 2],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        }
    }
}

impl Packet for PacketZcUpdateMapinfo {
    fn id(&self) -> &str {
       "0x0192"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUpdateMapinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqnameBygid {
    pub fn packet_id() -> &'static str {
        "0x0193"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqnameBygid {
        let mut offset: usize = 0;
        PacketCzReqnameBygid {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketCzReqnameBygid {
        PacketCzReqnameBygid {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x3]),
        packet_id_raw: [0x19, 0x3],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqnameBygid {
    fn id(&self) -> &str {
       "0x0193"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqnameBygid {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqnameBygid {
    pub fn packet_id() -> &'static str {
        "0x0194"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqnameBygid {
        let mut offset: usize = 0;
        PacketZcAckReqnameBygid {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            cname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            cname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.cname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.cname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.cname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_cname(&mut self, value: [char; 24]) {
        self.cname = value;
    }
    pub fn set_cname_raw(&mut self, value: [u8; 24]) {
        self.cname_raw = value;
    }
    pub fn new() -> PacketZcAckReqnameBygid {
        PacketZcAckReqnameBygid {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x4]),
        packet_id_raw: [0x19, 0x4],
        gid: 0,
        gid_raw: [0; 4],
        cname: [0 as char; 24],
        cname_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcAckReqnameBygid {
    fn id(&self) -> &str {
       "0x0194"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqnameBygid {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqnameall {
    pub fn packet_id() -> &'static str {
        "0x0195"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqnameall {
        let mut offset: usize = 0;
        PacketZcAckReqnameall {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            cname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            cname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            pname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            pname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            gname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            gname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            rname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            rname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.cname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.cname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.pname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.gname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.gname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.rname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.rname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.cname_raw.to_vec());
        wtr.append(&mut self.pname_raw.to_vec());
        wtr.append(&mut self.gname_raw.to_vec());
        wtr.append(&mut self.rname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 102;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_cname(&mut self, value: [char; 24]) {
        self.cname = value;
    }
    pub fn set_cname_raw(&mut self, value: [u8; 24]) {
        self.cname_raw = value;
    }
    pub fn set_pname(&mut self, value: [char; 24]) {
        self.pname = value;
    }
    pub fn set_pname_raw(&mut self, value: [u8; 24]) {
        self.pname_raw = value;
    }
    pub fn set_gname(&mut self, value: [char; 24]) {
        self.gname = value;
    }
    pub fn set_gname_raw(&mut self, value: [u8; 24]) {
        self.gname_raw = value;
    }
    pub fn set_rname(&mut self, value: [char; 24]) {
        self.rname = value;
    }
    pub fn set_rname_raw(&mut self, value: [u8; 24]) {
        self.rname_raw = value;
    }
    pub fn new() -> PacketZcAckReqnameall {
        PacketZcAckReqnameall {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x5]),
        packet_id_raw: [0x19, 0x5],
        aid: 0,
        aid_raw: [0; 4],
        cname: [0 as char; 24],
        cname_raw: [0; 24],
        pname: [0 as char; 24],
        pname_raw: [0; 24],
        gname: [0 as char; 24],
        gname_raw: [0; 24],
        rname: [0 as char; 24],
        rname_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcAckReqnameall {
    fn id(&self) -> &str {
       "0x0195"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqnameall {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMsgStateChange {
    pub fn packet_id() -> &'static str {
        "0x0196"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMsgStateChange {
        let mut offset: usize = 0;
        PacketZcMsgStateChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            state: {
                let field = buffer[offset] == 1;
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state as u8).unwrap();
        self.state_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_state(&mut self, value: bool) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn new() -> PacketZcMsgStateChange {
        PacketZcMsgStateChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x6]),
        packet_id_raw: [0x19, 0x6],
        index: 0,
        index_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        state: false,
        state_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcMsgStateChange {
    fn id(&self) -> &str {
       "0x0196"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMsgStateChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReset {
    pub fn packet_id() -> &'static str {
        "0x0197"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReset {
        let mut offset: usize = 0;
        PacketCzReset {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzReset {
        PacketCzReset {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x7]),
        packet_id_raw: [0x19, 0x7],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReset {
    fn id(&self) -> &str {
       "0x0197"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReset {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChangeMaptype {
    pub fn packet_id() -> &'static str {
        "0x0198"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChangeMaptype {
        let mut offset: usize = 0;
        PacketCzChangeMaptype {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzChangeMaptype {
        PacketCzChangeMaptype {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x8]),
        packet_id_raw: [0x19, 0x8],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzChangeMaptype {
    fn id(&self) -> &str {
       "0x0198"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChangeMaptype {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMapproperty {
    pub fn packet_id() -> &'static str {
        "0x0199"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMapproperty {
        let mut offset: usize = 0;
        PacketZcNotifyMapproperty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcNotifyMapproperty {
        PacketZcNotifyMapproperty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0x9]),
        packet_id_raw: [0x19, 0x9],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMapproperty {
    fn id(&self) -> &str {
       "0x0199"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMapproperty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyRanking {
    pub fn packet_id() -> &'static str {
        "0x019a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyRanking {
        let mut offset: usize = 0;
        PacketZcNotifyRanking {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            ranking: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ranking_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            total: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            total_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.ranking).unwrap();
        self.ranking_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.total).unwrap();
        self.total_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.ranking_raw.to_vec());
        wtr.append(&mut self.total_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_ranking(&mut self, value: i32) {
        self.ranking = value;
    }
    pub fn set_ranking_raw(&mut self, value: [u8; 4]) {
        self.ranking_raw = value;
    }
    pub fn set_total(&mut self, value: i32) {
        self.total = value;
    }
    pub fn set_total_raw(&mut self, value: [u8; 4]) {
        self.total_raw = value;
    }
    pub fn new() -> PacketZcNotifyRanking {
        PacketZcNotifyRanking {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0xa]),
        packet_id_raw: [0x19, 0xa],
        aid: 0,
        aid_raw: [0; 4],
        ranking: 0,
        ranking_raw: [0; 4],
        total: 0,
        total_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyRanking {
    fn id(&self) -> &str {
       "0x019a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyRanking {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyEffect {
    pub fn packet_id() -> &'static str {
        "0x019b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyEffect {
        let mut offset: usize = 0;
        PacketZcNotifyEffect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            effect_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_id).unwrap();
        self.effect_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.effect_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_effect_id(&mut self, value: i32) {
        self.effect_id = value;
    }
    pub fn set_effect_id_raw(&mut self, value: [u8; 4]) {
        self.effect_id_raw = value;
    }
    pub fn new() -> PacketZcNotifyEffect {
        PacketZcNotifyEffect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0xb]),
        packet_id_raw: [0x19, 0xb],
        aid: 0,
        aid_raw: [0; 4],
        effect_id: 0,
        effect_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyEffect {
    fn id(&self) -> &str {
       "0x019b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyEffect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChangeEffectstate {
    pub fn packet_id() -> &'static str {
        "0x019d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChangeEffectstate {
        let mut offset: usize = 0;
        PacketCzChangeEffectstate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn new() -> PacketCzChangeEffectstate {
        PacketCzChangeEffectstate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0xd]),
        packet_id_raw: [0x19, 0xd],
        effect_state: 0,
        effect_state_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzChangeEffectstate {
    fn id(&self) -> &str {
       "0x019d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChangeEffectstate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStartCapture {
    pub fn packet_id() -> &'static str {
        "0x019e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStartCapture {
        let mut offset: usize = 0;
        PacketZcStartCapture {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcStartCapture {
        PacketZcStartCapture {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0xe]),
        packet_id_raw: [0x19, 0xe],
        }
    }
}

impl Packet for PacketZcStartCapture {
    fn id(&self) -> &str {
       "0x019e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStartCapture {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzTrycaptureMonster {
    pub fn packet_id() -> &'static str {
        "0x019f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzTrycaptureMonster {
        let mut offset: usize = 0;
        PacketCzTrycaptureMonster {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_aid).unwrap();
        self.target_aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.target_aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_target_aid(&mut self, value: u32) {
        self.target_aid = value;
    }
    pub fn set_target_aid_raw(&mut self, value: [u8; 4]) {
        self.target_aid_raw = value;
    }
    pub fn new() -> PacketCzTrycaptureMonster {
        PacketCzTrycaptureMonster {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x19, 0xf]),
        packet_id_raw: [0x19, 0xf],
        target_aid: 0,
        target_aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzTrycaptureMonster {
    fn id(&self) -> &str {
       "0x019f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzTrycaptureMonster {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcTrycaptureMonster {
    pub fn packet_id() -> &'static str {
        "0x01a0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcTrycaptureMonster {
        let mut offset: usize = 0;
        PacketZcTrycaptureMonster {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcTrycaptureMonster {
        PacketZcTrycaptureMonster {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x0]),
        packet_id_raw: [0x1a, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcTrycaptureMonster {
    fn id(&self) -> &str {
       "0x01a0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcTrycaptureMonster {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCommandPet {
    pub fn packet_id() -> &'static str {
        "0x01a1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCommandPet {
        let mut offset: usize = 0;
        PacketCzCommandPet {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            c_sub: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            c_sub_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.c_sub).unwrap();
        self.c_sub_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.c_sub_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_c_sub(&mut self, value: i8) {
        self.c_sub = value;
    }
    pub fn set_c_sub_raw(&mut self, value: [u8; 1]) {
        self.c_sub_raw = value;
    }
    pub fn new() -> PacketCzCommandPet {
        PacketCzCommandPet {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x1]),
        packet_id_raw: [0x1a, 0x1],
        c_sub: 0,
        c_sub_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzCommandPet {
    fn id(&self) -> &str {
       "0x01a1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCommandPet {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPropertyPet {
    pub fn packet_id() -> &'static str {
        "0x01a2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPropertyPet {
        let mut offset: usize = 0;
        PacketZcPropertyPet {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sz_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            b_modified: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            b_modified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            n_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            n_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            n_fullness: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            n_fullness_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            n_relationship: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            n_relationship_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.b_modified).unwrap();
        self.b_modified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.n_level).unwrap();
        self.n_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.n_fullness).unwrap();
        self.n_fullness_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.n_relationship).unwrap();
        self.n_relationship_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.sz_name_raw.to_vec());
        wtr.append(&mut self.b_modified_raw.to_vec());
        wtr.append(&mut self.n_level_raw.to_vec());
        wtr.append(&mut self.n_fullness_raw.to_vec());
        wtr.append(&mut self.n_relationship_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 37;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_sz_name(&mut self, value: [char; 24]) {
        self.sz_name = value;
    }
    pub fn set_sz_name_raw(&mut self, value: [u8; 24]) {
        self.sz_name_raw = value;
    }
    pub fn set_b_modified(&mut self, value: u8) {
        self.b_modified = value;
    }
    pub fn set_b_modified_raw(&mut self, value: [u8; 1]) {
        self.b_modified_raw = value;
    }
    pub fn set_n_level(&mut self, value: i16) {
        self.n_level = value;
    }
    pub fn set_n_level_raw(&mut self, value: [u8; 2]) {
        self.n_level_raw = value;
    }
    pub fn set_n_fullness(&mut self, value: i16) {
        self.n_fullness = value;
    }
    pub fn set_n_fullness_raw(&mut self, value: [u8; 2]) {
        self.n_fullness_raw = value;
    }
    pub fn set_n_relationship(&mut self, value: i16) {
        self.n_relationship = value;
    }
    pub fn set_n_relationship_raw(&mut self, value: [u8; 2]) {
        self.n_relationship_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn new() -> PacketZcPropertyPet {
        PacketZcPropertyPet {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x2]),
        packet_id_raw: [0x1a, 0x2],
        sz_name: [0 as char; 24],
        sz_name_raw: [0; 24],
        b_modified: 0,
        b_modified_raw: [0; 1],
        n_level: 0,
        n_level_raw: [0; 2],
        n_fullness: 0,
        n_fullness_raw: [0; 2],
        n_relationship: 0,
        n_relationship_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcPropertyPet {
    fn id(&self) -> &str {
       "0x01a2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPropertyPet {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFeedPet {
    pub fn packet_id() -> &'static str {
        "0x01a3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFeedPet {
        let mut offset: usize = 0;
        PacketZcFeedPet {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            c_ret: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            c_ret_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.c_ret).unwrap();
        self.c_ret_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.c_ret_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_c_ret(&mut self, value: i8) {
        self.c_ret = value;
    }
    pub fn set_c_ret_raw(&mut self, value: [u8; 1]) {
        self.c_ret_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketZcFeedPet {
        PacketZcFeedPet {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x3]),
        packet_id_raw: [0x1a, 0x3],
        c_ret: 0,
        c_ret_raw: [0; 1],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcFeedPet {
    fn id(&self) -> &str {
       "0x01a3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFeedPet {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcChangestatePet {
    pub fn packet_id() -> &'static str {
        "0x01a4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcChangestatePet {
        let mut offset: usize = 0;
        PacketZcChangestatePet {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            data: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.data).unwrap();
        self.data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_data(&mut self, value: i32) {
        self.data = value;
    }
    pub fn set_data_raw(&mut self, value: [u8; 4]) {
        self.data_raw = value;
    }
    pub fn new() -> PacketZcChangestatePet {
        PacketZcChangestatePet {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x4]),
        packet_id_raw: [0x1a, 0x4],
        atype: 0,
        atype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        data: 0,
        data_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcChangestatePet {
    fn id(&self) -> &str {
       "0x01a4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcChangestatePet {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRenamePet {
    pub fn packet_id() -> &'static str {
        "0x01a5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRenamePet {
        let mut offset: usize = 0;
        PacketCzRenamePet {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sz_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.sz_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_sz_name(&mut self, value: [char; 24]) {
        self.sz_name = value;
    }
    pub fn set_sz_name_raw(&mut self, value: [u8; 24]) {
        self.sz_name_raw = value;
    }
    pub fn new() -> PacketCzRenamePet {
        PacketCzRenamePet {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x5]),
        packet_id_raw: [0x1a, 0x5],
        sz_name: [0 as char; 24],
        sz_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzRenamePet {
    fn id(&self) -> &str {
       "0x01a5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRenamePet {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPeteggList {
    pub fn packet_id() -> &'static str {
        "0x01a6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPeteggList {
        let mut offset: usize = 0;
        let vec_type_len = PeteggitemInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<PeteggitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(PeteggitemInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPeteggList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            egg_list: {
                let field = vec_field.clone();
                field
            },
            egg_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.egg_list_raw = {
            self.egg_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.egg_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.egg_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_egg_list(&mut self, value: Vec<PeteggitemInfo>) {
        self.egg_list = value;
    }
    pub fn set_egg_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.egg_list_raw = value;
    }
    pub fn new() -> PacketZcPeteggList {
        PacketZcPeteggList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x6]),
        packet_id_raw: [0x1a, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        egg_list: vec![],
        egg_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPeteggList {
    fn id(&self) -> &str {
       "0x01a6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPeteggList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSelectPetegg {
    pub fn packet_id() -> &'static str {
        "0x01a7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSelectPetegg {
        let mut offset: usize = 0;
        PacketCzSelectPetegg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketCzSelectPetegg {
        PacketCzSelectPetegg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x7]),
        packet_id_raw: [0x1a, 0x7],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzSelectPetegg {
    fn id(&self) -> &str {
       "0x01a7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSelectPetegg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPeteggInfo {
    pub fn packet_id() -> &'static str {
        "0x01a8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPeteggInfo {
        let mut offset: usize = 0;
        PacketCzPeteggInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketCzPeteggInfo {
        PacketCzPeteggInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x8]),
        packet_id_raw: [0x1a, 0x8],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzPeteggInfo {
    fn id(&self) -> &str {
       "0x01a8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPeteggInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPetAct {
    pub fn packet_id() -> &'static str {
        "0x01a9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPetAct {
        let mut offset: usize = 0;
        PacketCzPetAct {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            data: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.data).unwrap();
        self.data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_data(&mut self, value: i32) {
        self.data = value;
    }
    pub fn set_data_raw(&mut self, value: [u8; 4]) {
        self.data_raw = value;
    }
    pub fn new() -> PacketCzPetAct {
        PacketCzPetAct {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0x9]),
        packet_id_raw: [0x1a, 0x9],
        data: 0,
        data_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzPetAct {
    fn id(&self) -> &str {
       "0x01a9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPetAct {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPetAct {
    pub fn packet_id() -> &'static str {
        "0x01aa"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPetAct {
        let mut offset: usize = 0;
        PacketZcPetAct {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            data: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.data).unwrap();
        self.data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_data(&mut self, value: i32) {
        self.data = value;
    }
    pub fn set_data_raw(&mut self, value: [u8; 4]) {
        self.data_raw = value;
    }
    pub fn new() -> PacketZcPetAct {
        PacketZcPetAct {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0xa]),
        packet_id_raw: [0x1a, 0xa],
        gid: 0,
        gid_raw: [0; 4],
        data: 0,
        data_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcPetAct {
    fn id(&self) -> &str {
       "0x01aa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPetAct {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcParChangeUser {
    pub fn packet_id() -> &'static str {
        "0x01ab"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcParChangeUser {
        let mut offset: usize = 0;
        PacketZcParChangeUser {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            var_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var_id).unwrap();
        self.var_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.var_id_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_var_id(&mut self, value: u16) {
        self.var_id = value;
    }
    pub fn set_var_id_raw(&mut self, value: [u8; 2]) {
        self.var_id_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcParChangeUser {
        PacketZcParChangeUser {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0xb]),
        packet_id_raw: [0x1a, 0xb],
        aid: 0,
        aid_raw: [0; 4],
        var_id: 0,
        var_id_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcParChangeUser {
    fn id(&self) -> &str {
       "0x01ab"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcParChangeUser {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillUpdate {
    pub fn packet_id() -> &'static str {
        "0x01ac"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillUpdate {
        let mut offset: usize = 0;
        PacketZcSkillUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcSkillUpdate {
        PacketZcSkillUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0xc]),
        packet_id_raw: [0x1a, 0xc],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSkillUpdate {
    fn id(&self) -> &str {
       "0x01ac"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMakingarrowList {
    pub fn packet_id() -> &'static str {
        "0x01ad"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMakingarrowList {
        let mut offset: usize = 0;
        let vec_type_len = ArrowitemInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<ArrowitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(ArrowitemInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcMakingarrowList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            arrow_list: {
                let field = vec_field.clone();
                field
            },
            arrow_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.arrow_list_raw = {
            self.arrow_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.arrow_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.arrow_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_arrow_list(&mut self, value: Vec<ArrowitemInfo>) {
        self.arrow_list = value;
    }
    pub fn set_arrow_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.arrow_list_raw = value;
    }
    pub fn new() -> PacketZcMakingarrowList {
        PacketZcMakingarrowList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0xd]),
        packet_id_raw: [0x1a, 0xd],
        packet_length: 0,
        packet_length_raw: [0; 2],
        arrow_list: vec![],
        arrow_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcMakingarrowList {
    fn id(&self) -> &str {
       "0x01ad"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMakingarrowList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqMakingarrow {
    pub fn packet_id() -> &'static str {
        "0x01ae"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqMakingarrow {
        let mut offset: usize = 0;
        PacketCzReqMakingarrow {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.id).unwrap();
        self.id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_id(&mut self, value: u16) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 2]) {
        self.id_raw = value;
    }
    pub fn new() -> PacketCzReqMakingarrow {
        PacketCzReqMakingarrow {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0xe]),
        packet_id_raw: [0x1a, 0xe],
        id: 0,
        id_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqMakingarrow {
    fn id(&self) -> &str {
       "0x01ae"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqMakingarrow {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqChangecart {
    pub fn packet_id() -> &'static str {
        "0x01af"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqChangecart {
        let mut offset: usize = 0;
        PacketCzReqChangecart {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            num: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            num_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.num).unwrap();
        self.num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_num(&mut self, value: i16) {
        self.num = value;
    }
    pub fn set_num_raw(&mut self, value: [u8; 2]) {
        self.num_raw = value;
    }
    pub fn new() -> PacketCzReqChangecart {
        PacketCzReqChangecart {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1a, 0xf]),
        packet_id_raw: [0x1a, 0xf],
        num: 0,
        num_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqChangecart {
    fn id(&self) -> &str {
       "0x01af"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqChangecart {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNpcspriteChange {
    pub fn packet_id() -> &'static str {
        "0x01b0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNpcspriteChange {
        let mut offset: usize = 0;
        PacketZcNpcspriteChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            value: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_value(&mut self, value: u32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcNpcspriteChange {
        PacketZcNpcspriteChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x0]),
        packet_id_raw: [0x1b, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNpcspriteChange {
    fn id(&self) -> &str {
       "0x01b0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNpcspriteChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcShowdigit {
    pub fn packet_id() -> &'static str {
        "0x01b1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcShowdigit {
        let mut offset: usize = 0;
        PacketZcShowdigit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcShowdigit {
        PacketZcShowdigit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x1]),
        packet_id_raw: [0x1b, 0x1],
        atype: 0,
        atype_raw: [0; 1],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcShowdigit {
    fn id(&self) -> &str {
       "0x01b1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcShowdigit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqOpenstore2 {
    pub fn packet_id() -> &'static str {
        "0x01b2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqOpenstore2 {
        let mut offset: usize = 0;
        let vec_type_len = StoreItem::base_len(packetver);
        let iter_count = (&buffer.len() - 85) / vec_type_len;
        let mut vec_field: Vec<StoreItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 85 + (vec_type_len * (i - 1));
            let end_pos = 85 + vec_type_len * i;
            vec_field.push(StoreItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzReqOpenstore2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            store_name: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            store_name_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            store_list: {
                let field = vec_field.clone();
                field
            },
            store_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.store_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.store_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        self.store_list_raw = {
            self.store_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.store_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.store_name_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.store_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 85;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_store_name(&mut self, value: [char; 80]) {
        self.store_name = value;
    }
    pub fn set_store_name_raw(&mut self, value: [u8; 80]) {
        self.store_name_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_store_list(&mut self, value: Vec<StoreItem>) {
        self.store_list = value;
    }
    pub fn set_store_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.store_list_raw = value;
    }
    pub fn new() -> PacketCzReqOpenstore2 {
        PacketCzReqOpenstore2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x2]),
        packet_id_raw: [0x1b, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        store_name: [0 as char; 80],
        store_name_raw: [0; 80],
        result: false,
        result_raw: [0; 1],
        store_list: vec![],
        store_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqOpenstore2 {
    fn id(&self) -> &str {
       "0x01b2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqOpenstore2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcShowImage2 {
    pub fn packet_id() -> &'static str {
        "0xb301"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcShowImage2 {
        let mut offset: usize = 0;
        PacketZcShowImage2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            image_name: {
                let field =  {
                let mut dst: [char; 64] = [0 as char; 64];
                for (index, byte) in buffer[offset..offset + 64].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            image_name_raw: {
                let mut dst: [u8; 64] = [0u8; 64];
                dst.clone_from_slice(&buffer[offset..offset + 64]);
                offset += 64;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.image_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.image_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.image_name_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 67;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_image_name(&mut self, value: [char; 64]) {
        self.image_name = value;
    }
    pub fn set_image_name_raw(&mut self, value: [u8; 64]) {
        self.image_name_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcShowImage2 {
        PacketZcShowImage2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb3, 0x01]),
        packet_id_raw: [0xb3, 0x01],
        image_name: [0 as char; 64],
        image_name_raw: [0; 64],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcShowImage2 {
    fn id(&self) -> &str {
       "0xb301"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcShowImage2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcChangeGuild {
    pub fn packet_id() -> &'static str {
        "0x01b4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcChangeGuild {
        let mut offset: usize = 0;
        PacketZcChangeGuild {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            emblem_version: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            emblem_version_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.emblem_version).unwrap();
        self.emblem_version_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.emblem_version_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_emblem_version(&mut self, value: i16) {
        self.emblem_version = value;
    }
    pub fn set_emblem_version_raw(&mut self, value: [u8; 2]) {
        self.emblem_version_raw = value;
    }
    pub fn new() -> PacketZcChangeGuild {
        PacketZcChangeGuild {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x4]),
        packet_id_raw: [0x1b, 0x4],
        aid: 0,
        aid_raw: [0; 4],
        gdid: 0,
        gdid_raw: [0; 4],
        emblem_version: 0,
        emblem_version_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcChangeGuild {
    fn id(&self) -> &str {
       "0x01b4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcChangeGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketScBillingInfo {
    pub fn packet_id() -> &'static str {
        "0x01b5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketScBillingInfo {
        let mut offset: usize = 0;
        PacketScBillingInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_amount_remain: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_amount_remain_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_quantity_remain: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_quantity_remain_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_reserved1: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_reserved1_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_reserved2: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_reserved2_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_amount_remain).unwrap();
        self.dw_amount_remain_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_quantity_remain).unwrap();
        self.dw_quantity_remain_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_reserved1).unwrap();
        self.dw_reserved1_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_reserved2).unwrap();
        self.dw_reserved2_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.dw_amount_remain_raw.to_vec());
        wtr.append(&mut self.dw_quantity_remain_raw.to_vec());
        wtr.append(&mut self.dw_reserved1_raw.to_vec());
        wtr.append(&mut self.dw_reserved2_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_dw_amount_remain(&mut self, value: u32) {
        self.dw_amount_remain = value;
    }
    pub fn set_dw_amount_remain_raw(&mut self, value: [u8; 4]) {
        self.dw_amount_remain_raw = value;
    }
    pub fn set_dw_quantity_remain(&mut self, value: u32) {
        self.dw_quantity_remain = value;
    }
    pub fn set_dw_quantity_remain_raw(&mut self, value: [u8; 4]) {
        self.dw_quantity_remain_raw = value;
    }
    pub fn set_dw_reserved1(&mut self, value: u32) {
        self.dw_reserved1 = value;
    }
    pub fn set_dw_reserved1_raw(&mut self, value: [u8; 4]) {
        self.dw_reserved1_raw = value;
    }
    pub fn set_dw_reserved2(&mut self, value: u32) {
        self.dw_reserved2 = value;
    }
    pub fn set_dw_reserved2_raw(&mut self, value: [u8; 4]) {
        self.dw_reserved2_raw = value;
    }
    pub fn new() -> PacketScBillingInfo {
        PacketScBillingInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x5]),
        packet_id_raw: [0x1b, 0x5],
        dw_amount_remain: 0,
        dw_amount_remain_raw: [0; 4],
        dw_quantity_remain: 0,
        dw_quantity_remain_raw: [0; 4],
        dw_reserved1: 0,
        dw_reserved1_raw: [0; 4],
        dw_reserved2: 0,
        dw_reserved2_raw: [0; 4],
        }
    }
}

impl Packet for PacketScBillingInfo {
    fn id(&self) -> &str {
       "0x01b5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketScBillingInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildInfo2 {
    pub fn packet_id() -> &'static str {
        "0x01b6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildInfo2 {
        let mut offset: usize = 0;
        PacketZcGuildInfo2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_num: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_user_num: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_user_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_average_level: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_average_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            honor: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            emblem_version: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            emblem_version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guildname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guildname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            master_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            master_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            manage_land: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            manage_land_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            zeny: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.user_num).unwrap();
        self.user_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_user_num).unwrap();
        self.max_user_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.user_average_level).unwrap();
        self.user_average_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.exp).unwrap();
        self.exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_exp).unwrap();
        self.max_exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.emblem_version).unwrap();
        self.emblem_version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guildname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guildname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.master_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.master_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.manage_land {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.manage_land_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.zeny).unwrap();
        self.zeny_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.user_num_raw.to_vec());
        wtr.append(&mut self.max_user_num_raw.to_vec());
        wtr.append(&mut self.user_average_level_raw.to_vec());
        wtr.append(&mut self.exp_raw.to_vec());
        wtr.append(&mut self.max_exp_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.emblem_version_raw.to_vec());
        wtr.append(&mut self.guildname_raw.to_vec());
        wtr.append(&mut self.master_name_raw.to_vec());
        wtr.append(&mut self.manage_land_raw.to_vec());
        wtr.append(&mut self.zeny_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 114;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: i32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_level(&mut self, value: i32) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 4]) {
        self.level_raw = value;
    }
    pub fn set_user_num(&mut self, value: i32) {
        self.user_num = value;
    }
    pub fn set_user_num_raw(&mut self, value: [u8; 4]) {
        self.user_num_raw = value;
    }
    pub fn set_max_user_num(&mut self, value: i32) {
        self.max_user_num = value;
    }
    pub fn set_max_user_num_raw(&mut self, value: [u8; 4]) {
        self.max_user_num_raw = value;
    }
    pub fn set_user_average_level(&mut self, value: i32) {
        self.user_average_level = value;
    }
    pub fn set_user_average_level_raw(&mut self, value: [u8; 4]) {
        self.user_average_level_raw = value;
    }
    pub fn set_exp(&mut self, value: i32) {
        self.exp = value;
    }
    pub fn set_exp_raw(&mut self, value: [u8; 4]) {
        self.exp_raw = value;
    }
    pub fn set_max_exp(&mut self, value: i32) {
        self.max_exp = value;
    }
    pub fn set_max_exp_raw(&mut self, value: [u8; 4]) {
        self.max_exp_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn set_honor(&mut self, value: i32) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 4]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_emblem_version(&mut self, value: i32) {
        self.emblem_version = value;
    }
    pub fn set_emblem_version_raw(&mut self, value: [u8; 4]) {
        self.emblem_version_raw = value;
    }
    pub fn set_guildname(&mut self, value: [char; 24]) {
        self.guildname = value;
    }
    pub fn set_guildname_raw(&mut self, value: [u8; 24]) {
        self.guildname_raw = value;
    }
    pub fn set_master_name(&mut self, value: [char; 24]) {
        self.master_name = value;
    }
    pub fn set_master_name_raw(&mut self, value: [u8; 24]) {
        self.master_name_raw = value;
    }
    pub fn set_manage_land(&mut self, value: [char; 16]) {
        self.manage_land = value;
    }
    pub fn set_manage_land_raw(&mut self, value: [u8; 16]) {
        self.manage_land_raw = value;
    }
    pub fn set_zeny(&mut self, value: i32) {
        self.zeny = value;
    }
    pub fn set_zeny_raw(&mut self, value: [u8; 4]) {
        self.zeny_raw = value;
    }
    pub fn new() -> PacketZcGuildInfo2 {
        PacketZcGuildInfo2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x6]),
        packet_id_raw: [0x1b, 0x6],
        gdid: 0,
        gdid_raw: [0; 4],
        level: 0,
        level_raw: [0; 4],
        user_num: 0,
        user_num_raw: [0; 4],
        max_user_num: 0,
        max_user_num_raw: [0; 4],
        user_average_level: 0,
        user_average_level_raw: [0; 4],
        exp: 0,
        exp_raw: [0; 4],
        max_exp: 0,
        max_exp_raw: [0; 4],
        point: 0,
        point_raw: [0; 4],
        honor: 0,
        honor_raw: [0; 4],
        virtue: 0,
        virtue_raw: [0; 4],
        emblem_version: 0,
        emblem_version_raw: [0; 4],
        guildname: [0 as char; 24],
        guildname_raw: [0; 24],
        master_name: [0 as char; 24],
        master_name_raw: [0; 24],
        manage_land: [0 as char; 16],
        manage_land_raw: [0; 16],
        zeny: 0,
        zeny_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcGuildInfo2 {
    fn id(&self) -> &str {
       "0x01b6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildInfo2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzGuildZeny {
    pub fn packet_id() -> &'static str {
        "0x01b7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzGuildZeny {
        let mut offset: usize = 0;
        PacketCzGuildZeny {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            zeny: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.zeny).unwrap();
        self.zeny_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.zeny_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_zeny(&mut self, value: i32) {
        self.zeny = value;
    }
    pub fn set_zeny_raw(&mut self, value: [u8; 4]) {
        self.zeny_raw = value;
    }
    pub fn new() -> PacketCzGuildZeny {
        PacketCzGuildZeny {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x7]),
        packet_id_raw: [0x1b, 0x7],
        zeny: 0,
        zeny_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzGuildZeny {
    fn id(&self) -> &str {
       "0x01b7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzGuildZeny {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildZenyAck {
    pub fn packet_id() -> &'static str {
        "0x01b8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildZenyAck {
        let mut offset: usize = 0;
        PacketZcGuildZenyAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            ret: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            ret_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.ret).unwrap();
        self.ret_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.ret_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_ret(&mut self, value: u8) {
        self.ret = value;
    }
    pub fn set_ret_raw(&mut self, value: [u8; 1]) {
        self.ret_raw = value;
    }
    pub fn new() -> PacketZcGuildZenyAck {
        PacketZcGuildZenyAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x8]),
        packet_id_raw: [0x1b, 0x8],
        ret: 0,
        ret_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcGuildZenyAck {
    fn id(&self) -> &str {
       "0x01b8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildZenyAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDispel {
    pub fn packet_id() -> &'static str {
        "0x01b9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDispel {
        let mut offset: usize = 0;
        PacketZcDispel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcDispel {
        PacketZcDispel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0x9]),
        packet_id_raw: [0x1b, 0x9],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDispel {
    fn id(&self) -> &str {
       "0x01b9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDispel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRemoveAid {
    pub fn packet_id() -> &'static str {
        "0x01ba"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRemoveAid {
        let mut offset: usize = 0;
        PacketCzRemoveAid {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            account_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.account_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.account_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.account_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_account_name(&mut self, value: [char; 24]) {
        self.account_name = value;
    }
    pub fn set_account_name_raw(&mut self, value: [u8; 24]) {
        self.account_name_raw = value;
    }
    pub fn new() -> PacketCzRemoveAid {
        PacketCzRemoveAid {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0xa]),
        packet_id_raw: [0x1b, 0xa],
        account_name: [0 as char; 24],
        account_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzRemoveAid {
    fn id(&self) -> &str {
       "0x01ba"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRemoveAid {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzShift {
    pub fn packet_id() -> &'static str {
        "0x01bb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzShift {
        let mut offset: usize = 0;
        PacketCzShift {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn new() -> PacketCzShift {
        PacketCzShift {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0xb]),
        packet_id_raw: [0x1b, 0xb],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzShift {
    fn id(&self) -> &str {
       "0x01bb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzShift {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRecall {
    pub fn packet_id() -> &'static str {
        "0x01bc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRecall {
        let mut offset: usize = 0;
        PacketCzRecall {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            account_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.account_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.account_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.account_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_account_name(&mut self, value: [char; 24]) {
        self.account_name = value;
    }
    pub fn set_account_name_raw(&mut self, value: [u8; 24]) {
        self.account_name_raw = value;
    }
    pub fn new() -> PacketCzRecall {
        PacketCzRecall {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0xc]),
        packet_id_raw: [0x1b, 0xc],
        account_name: [0 as char; 24],
        account_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzRecall {
    fn id(&self) -> &str {
       "0x01bc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRecall {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRecallGid {
    pub fn packet_id() -> &'static str {
        "0x01bd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRecallGid {
        let mut offset: usize = 0;
        PacketCzRecallGid {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn new() -> PacketCzRecallGid {
        PacketCzRecallGid {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0xd]),
        packet_id_raw: [0x1b, 0xd],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzRecallGid {
    fn id(&self) -> &str {
       "0x01bd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRecallGid {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAskPngameroom {
    pub fn packet_id() -> &'static str {
        "0x01be"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAskPngameroom {
        let mut offset: usize = 0;
        PacketAcAskPngameroom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketAcAskPngameroom {
        PacketAcAskPngameroom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0xe]),
        packet_id_raw: [0x1b, 0xe],
        }
    }
}

impl Packet for PacketAcAskPngameroom {
    fn id(&self) -> &str {
       "0x01be"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAskPngameroom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaReplyPngameroom {
    pub fn packet_id() -> &'static str {
        "0x01bf"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaReplyPngameroom {
        let mut offset: usize = 0;
        PacketCaReplyPngameroom {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            permission: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            permission_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.permission).unwrap();
        self.permission_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.permission_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_permission(&mut self, value: u8) {
        self.permission = value;
    }
    pub fn set_permission_raw(&mut self, value: [u8; 1]) {
        self.permission_raw = value;
    }
    pub fn new() -> PacketCaReplyPngameroom {
        PacketCaReplyPngameroom {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1b, 0xf]),
        packet_id_raw: [0x1b, 0xf],
        permission: 0,
        permission_raw: [0; 1],
        }
    }
}

impl Packet for PacketCaReplyPngameroom {
    fn id(&self) -> &str {
       "0x01bf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaReplyPngameroom {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqRemaintime {
    pub fn packet_id() -> &'static str {
        "0x01c0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqRemaintime {
        let mut offset: usize = 0;
        PacketCzReqRemaintime {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqRemaintime {
        PacketCzReqRemaintime {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x0]),
        packet_id_raw: [0x1c, 0x0],
        }
    }
}

impl Packet for PacketCzReqRemaintime {
    fn id(&self) -> &str {
       "0x01c0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqRemaintime {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReplyRemaintime {
    pub fn packet_id() -> &'static str {
        "0x01c1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReplyRemaintime {
        let mut offset: usize = 0;
        PacketZcReplyRemaintime {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            expiration_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            expiration_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            remain_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            remain_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.expiration_date).unwrap();
        self.expiration_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.remain_time).unwrap();
        self.remain_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.expiration_date_raw.to_vec());
        wtr.append(&mut self.remain_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn set_expiration_date(&mut self, value: i32) {
        self.expiration_date = value;
    }
    pub fn set_expiration_date_raw(&mut self, value: [u8; 4]) {
        self.expiration_date_raw = value;
    }
    pub fn set_remain_time(&mut self, value: i32) {
        self.remain_time = value;
    }
    pub fn set_remain_time_raw(&mut self, value: [u8; 4]) {
        self.remain_time_raw = value;
    }
    pub fn new() -> PacketZcReplyRemaintime {
        PacketZcReplyRemaintime {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x1]),
        packet_id_raw: [0x1c, 0x1],
        result: 0,
        result_raw: [0; 4],
        expiration_date: 0,
        expiration_date_raw: [0; 4],
        remain_time: 0,
        remain_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcReplyRemaintime {
    fn id(&self) -> &str {
       "0x01c1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReplyRemaintime {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcInfoRemaintime {
    pub fn packet_id() -> &'static str {
        "0x01c2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcInfoRemaintime {
        let mut offset: usize = 0;
        PacketZcInfoRemaintime {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            remain_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            remain_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.remain_time).unwrap();
        self.remain_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.remain_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_remain_time(&mut self, value: i32) {
        self.remain_time = value;
    }
    pub fn set_remain_time_raw(&mut self, value: [u8; 4]) {
        self.remain_time_raw = value;
    }
    pub fn new() -> PacketZcInfoRemaintime {
        PacketZcInfoRemaintime {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x2]),
        packet_id_raw: [0x1c, 0x2],
        atype: 0,
        atype_raw: [0; 4],
        remain_time: 0,
        remain_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcInfoRemaintime {
    fn id(&self) -> &str {
       "0x01c2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcInfoRemaintime {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBroadcast2 {
    pub fn packet_id() -> &'static str {
        "0x01c3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBroadcast2 {
        let mut offset: usize = 0;
        PacketZcBroadcast2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font_color: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            font_color_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            font_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font_size: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_size_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font_align: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_align_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font_y: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_y_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.font_color).unwrap();
        self.font_color_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font_type).unwrap();
        self.font_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font_size).unwrap();
        self.font_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font_align).unwrap();
        self.font_align_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font_y).unwrap();
        self.font_y_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.font_color_raw.to_vec());
        wtr.append(&mut self.font_type_raw.to_vec());
        wtr.append(&mut self.font_size_raw.to_vec());
        wtr.append(&mut self.font_align_raw.to_vec());
        wtr.append(&mut self.font_y_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 15;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_font_color(&mut self, value: u32) {
        self.font_color = value;
    }
    pub fn set_font_color_raw(&mut self, value: [u8; 4]) {
        self.font_color_raw = value;
    }
    pub fn set_font_type(&mut self, value: i16) {
        self.font_type = value;
    }
    pub fn set_font_type_raw(&mut self, value: [u8; 2]) {
        self.font_type_raw = value;
    }
    pub fn set_font_size(&mut self, value: i16) {
        self.font_size = value;
    }
    pub fn set_font_size_raw(&mut self, value: [u8; 2]) {
        self.font_size_raw = value;
    }
    pub fn set_font_align(&mut self, value: i16) {
        self.font_align = value;
    }
    pub fn set_font_align_raw(&mut self, value: [u8; 2]) {
        self.font_align_raw = value;
    }
    pub fn set_font_y(&mut self, value: i16) {
        self.font_y = value;
    }
    pub fn set_font_y_raw(&mut self, value: [u8; 2]) {
        self.font_y_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcBroadcast2 {
        PacketZcBroadcast2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x3]),
        packet_id_raw: [0x1c, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        font_color: 0,
        font_color_raw: [0; 4],
        font_type: 0,
        font_type_raw: [0; 2],
        font_size: 0,
        font_size_raw: [0; 2],
        font_align: 0,
        font_align_raw: [0; 2],
        font_y: 0,
        font_y_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcBroadcast2 {
    fn id(&self) -> &str {
       "0x01c3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBroadcast2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddItemToStore2 {
    pub fn packet_id() -> &'static str {
        "0x01c4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddItemToStore2 {
        let mut offset: usize = 0;
        PacketZcAddItemToStore2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PacketZcAddItemToStore2 {
        PacketZcAddItemToStore2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x4]),
        packet_id_raw: [0x1c, 0x4],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Packet for PacketZcAddItemToStore2 {
    fn id(&self) -> &str {
       "0x01c4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddItemToStore2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddItemToCart2 {
    pub fn packet_id() -> &'static str {
        "0x01c5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddItemToCart2 {
        let mut offset: usize = 0;
        PacketZcAddItemToCart2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PacketZcAddItemToCart2 {
        PacketZcAddItemToCart2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x5]),
        packet_id_raw: [0x1c, 0x5],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Packet for PacketZcAddItemToCart2 {
    fn id(&self) -> &str {
       "0x01c5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddItemToCart2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCsReqEncryption {
    pub fn packet_id() -> &'static str {
        "0x01c6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCsReqEncryption {
        let mut offset: usize = 0;
        PacketCsReqEncryption {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            enc_count: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            enc_count_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dec_count: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            dec_count_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.enc_count).unwrap();
        self.enc_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.dec_count).unwrap();
        self.dec_count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.enc_count_raw.to_vec());
        wtr.append(&mut self.dec_count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_enc_count(&mut self, value: i8) {
        self.enc_count = value;
    }
    pub fn set_enc_count_raw(&mut self, value: [u8; 1]) {
        self.enc_count_raw = value;
    }
    pub fn set_dec_count(&mut self, value: i8) {
        self.dec_count = value;
    }
    pub fn set_dec_count_raw(&mut self, value: [u8; 1]) {
        self.dec_count_raw = value;
    }
    pub fn new() -> PacketCsReqEncryption {
        PacketCsReqEncryption {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x6]),
        packet_id_raw: [0x1c, 0x6],
        enc_count: 0,
        enc_count_raw: [0; 1],
        dec_count: 0,
        dec_count_raw: [0; 1],
        }
    }
}

impl Packet for PacketCsReqEncryption {
    fn id(&self) -> &str {
       "0x01c6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCsReqEncryption {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketScAckEncryption {
    pub fn packet_id() -> &'static str {
        "0x01c7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketScAckEncryption {
        let mut offset: usize = 0;
        PacketScAckEncryption {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketScAckEncryption {
        PacketScAckEncryption {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x7]),
        packet_id_raw: [0x1c, 0x7],
        }
    }
}

impl Packet for PacketScAckEncryption {
    fn id(&self) -> &str {
       "0x01c7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketScAckEncryption {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUseItemAck2 {
    pub fn packet_id() -> &'static str {
        "0x01c8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUseItemAck2 {
        let mut offset: usize = 0;
        PacketZcUseItemAck2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.id).unwrap();
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 13;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_id(&mut self, value: u16) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 2]) {
        self.id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcUseItemAck2 {
        PacketZcUseItemAck2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x8]),
        packet_id_raw: [0x1c, 0x8],
        index: 0,
        index_raw: [0; 2],
        id: 0,
        id_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        result: false,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcUseItemAck2 {
    fn id(&self) -> &str {
       "0x01c8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUseItemAck2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillEntry2 {
    pub fn packet_id() -> &'static str {
        "0x01c9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillEntry2 {
        let mut offset: usize = 0;
        PacketZcSkillEntry2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            creator_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            creator_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_visible: {
                let field = buffer[offset] == 1;
                field
            },
            is_visible_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_contens: {
                let field = buffer[offset] == 1;
                field
            },
            is_contens_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            msg: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            msg_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.creator_aid).unwrap();
        self.creator_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_visible as u8).unwrap();
        self.is_visible_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_contens as u8).unwrap();
        self.is_contens_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.msg {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.msg_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.creator_aid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.is_visible_raw.to_vec());
        wtr.append(&mut self.is_contens_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 97;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_creator_aid(&mut self, value: u32) {
        self.creator_aid = value;
    }
    pub fn set_creator_aid_raw(&mut self, value: [u8; 4]) {
        self.creator_aid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_job(&mut self, value: u8) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 1]) {
        self.job_raw = value;
    }
    pub fn set_is_visible(&mut self, value: bool) {
        self.is_visible = value;
    }
    pub fn set_is_visible_raw(&mut self, value: [u8; 1]) {
        self.is_visible_raw = value;
    }
    pub fn set_is_contens(&mut self, value: bool) {
        self.is_contens = value;
    }
    pub fn set_is_contens_raw(&mut self, value: [u8; 1]) {
        self.is_contens_raw = value;
    }
    pub fn set_msg(&mut self, value: [char; 80]) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: [u8; 80]) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcSkillEntry2 {
        PacketZcSkillEntry2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0x9]),
        packet_id_raw: [0x1c, 0x9],
        aid: 0,
        aid_raw: [0; 4],
        creator_aid: 0,
        creator_aid_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        job: 0,
        job_raw: [0; 1],
        is_visible: false,
        is_visible_raw: [0; 1],
        is_contens: false,
        is_contens_raw: [0; 1],
        msg: [0 as char; 80],
        msg_raw: [0; 80],
        }
    }
}

impl Packet for PacketZcSkillEntry2 {
    fn id(&self) -> &str {
       "0x01c9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillEntry2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqmakinghomun {
    pub fn packet_id() -> &'static str {
        "0x01ca"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqmakinghomun {
        let mut offset: usize = 0;
        PacketCzReqmakinghomun {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = buffer[offset] == 1;
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result as u8).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: bool) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketCzReqmakinghomun {
        PacketCzReqmakinghomun {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0xa]),
        packet_id_raw: [0x1c, 0xa],
        result: false,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzReqmakinghomun {
    fn id(&self) -> &str {
       "0x01ca"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqmakinghomun {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMonsterTalk {
    pub fn packet_id() -> &'static str {
        "0x01cb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMonsterTalk {
        let mut offset: usize = 0;
        PacketCzMonsterTalk {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            state_id: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_id_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            skill_id: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            skill_id_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            arg1: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            arg1_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state_id).unwrap();
        self.state_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.skill_id).unwrap();
        self.skill_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.arg1).unwrap();
        self.arg1_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.state_id_raw.to_vec());
        wtr.append(&mut self.skill_id_raw.to_vec());
        wtr.append(&mut self.arg1_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_state_id(&mut self, value: u8) {
        self.state_id = value;
    }
    pub fn set_state_id_raw(&mut self, value: [u8; 1]) {
        self.state_id_raw = value;
    }
    pub fn set_skill_id(&mut self, value: u8) {
        self.skill_id = value;
    }
    pub fn set_skill_id_raw(&mut self, value: [u8; 1]) {
        self.skill_id_raw = value;
    }
    pub fn set_arg1(&mut self, value: u8) {
        self.arg1 = value;
    }
    pub fn set_arg1_raw(&mut self, value: [u8; 1]) {
        self.arg1_raw = value;
    }
    pub fn new() -> PacketCzMonsterTalk {
        PacketCzMonsterTalk {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0xb]),
        packet_id_raw: [0x1c, 0xb],
        gid: 0,
        gid_raw: [0; 4],
        state_id: 0,
        state_id_raw: [0; 1],
        skill_id: 0,
        skill_id_raw: [0; 1],
        arg1: 0,
        arg1_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzMonsterTalk {
    fn id(&self) -> &str {
       "0x01cb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMonsterTalk {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMonsterTalk {
    pub fn packet_id() -> &'static str {
        "0x01cc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMonsterTalk {
        let mut offset: usize = 0;
        PacketZcMonsterTalk {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            state_id: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_id_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            skill_id: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            skill_id_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            arg1: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            arg1_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state_id).unwrap();
        self.state_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.skill_id).unwrap();
        self.skill_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.arg1).unwrap();
        self.arg1_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.state_id_raw.to_vec());
        wtr.append(&mut self.skill_id_raw.to_vec());
        wtr.append(&mut self.arg1_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_state_id(&mut self, value: u8) {
        self.state_id = value;
    }
    pub fn set_state_id_raw(&mut self, value: [u8; 1]) {
        self.state_id_raw = value;
    }
    pub fn set_skill_id(&mut self, value: u8) {
        self.skill_id = value;
    }
    pub fn set_skill_id_raw(&mut self, value: [u8; 1]) {
        self.skill_id_raw = value;
    }
    pub fn set_arg1(&mut self, value: u8) {
        self.arg1 = value;
    }
    pub fn set_arg1_raw(&mut self, value: [u8; 1]) {
        self.arg1_raw = value;
    }
    pub fn new() -> PacketZcMonsterTalk {
        PacketZcMonsterTalk {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0xc]),
        packet_id_raw: [0x1c, 0xc],
        gid: 0,
        gid_raw: [0; 4],
        state_id: 0,
        state_id_raw: [0; 1],
        skill_id: 0,
        skill_id_raw: [0; 1],
        arg1: 0,
        arg1_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcMonsterTalk {
    fn id(&self) -> &str {
       "0x01cc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMonsterTalk {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAutospelllist {
    pub fn packet_id() -> &'static str {
        "0x01cd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAutospelllist {
        let mut offset: usize = 0;
        PacketZcAutospelllist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field =  {
                let mut dst: [i32; 7] = [0_i32; 7];
                for (index, byte) in buffer[offset..offset + 7].iter().enumerate() {
                    dst[index] = *byte as i32;
                }
                dst
            };
                field
            },
            skid_raw: {
                let mut dst: [u8; 7] = [0u8; 7];
                dst.clone_from_slice(&buffer[offset..offset + 7]);
                offset += 7;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.skid {
            wtr.write_i32::<LittleEndian>(item).unwrap();
        }
        self.skid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: [i32; 7]) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 7]) {
        self.skid_raw = value;
    }
    pub fn new() -> PacketZcAutospelllist {
        PacketZcAutospelllist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0xd]),
        packet_id_raw: [0x1c, 0xd],
        skid: [0; 7],
        skid_raw: [0; 7],
        }
    }
}

impl Packet for PacketZcAutospelllist {
    fn id(&self) -> &str {
       "0x01cd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAutospelllist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSelectautospell {
    pub fn packet_id() -> &'static str {
        "0x01ce"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSelectautospell {
        let mut offset: usize = 0;
        PacketCzSelectautospell {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: i32) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 4]) {
        self.skid_raw = value;
    }
    pub fn new() -> PacketCzSelectautospell {
        PacketCzSelectautospell {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0xe]),
        packet_id_raw: [0x1c, 0xe],
        skid: 0,
        skid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzSelectautospell {
    fn id(&self) -> &str {
       "0x01ce"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSelectautospell {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDevotionlist {
    pub fn packet_id() -> &'static str {
        "0x01cf"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDevotionlist {
        let mut offset: usize = 0;
        PacketZcDevotionlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            my_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            my_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field =  {
                let mut dst: [u32; 5] = [0_u32; 5];
                for (index, byte) in buffer[offset..offset + 5].iter().enumerate() {
                    dst[index] = *byte as u32;
                }
                dst
            };
                field
            },
            aid_raw: {
                let mut dst: [u8; 5] = [0u8; 5];
                dst.clone_from_slice(&buffer[offset..offset + 5]);
                offset += 5;
                dst
            },
            range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.my_aid).unwrap();
        self.my_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.aid {
            wtr.write_u32::<LittleEndian>(item).unwrap();
        }
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.range).unwrap();
        self.range_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.my_aid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.range_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 13;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_my_aid(&mut self, value: u32) {
        self.my_aid = value;
    }
    pub fn set_my_aid_raw(&mut self, value: [u8; 4]) {
        self.my_aid_raw = value;
    }
    pub fn set_aid(&mut self, value: [u32; 5]) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 5]) {
        self.aid_raw = value;
    }
    pub fn set_range(&mut self, value: i16) {
        self.range = value;
    }
    pub fn set_range_raw(&mut self, value: [u8; 2]) {
        self.range_raw = value;
    }
    pub fn new() -> PacketZcDevotionlist {
        PacketZcDevotionlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1c, 0xf]),
        packet_id_raw: [0x1c, 0xf],
        my_aid: 0,
        my_aid_raw: [0; 4],
        aid: [0; 5],
        aid_raw: [0; 5],
        range: 0,
        range_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcDevotionlist {
    fn id(&self) -> &str {
       "0x01cf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDevotionlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSpirits {
    pub fn packet_id() -> &'static str {
        "0x01d0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSpirits {
        let mut offset: usize = 0;
        PacketZcSpirits {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            num: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            num_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.num).unwrap();
        self.num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_num(&mut self, value: i16) {
        self.num = value;
    }
    pub fn set_num_raw(&mut self, value: [u8; 2]) {
        self.num_raw = value;
    }
    pub fn new() -> PacketZcSpirits {
        PacketZcSpirits {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x0]),
        packet_id_raw: [0x1d, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        num: 0,
        num_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcSpirits {
    fn id(&self) -> &str {
       "0x01d0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSpirits {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBladestop {
    pub fn packet_id() -> &'static str {
        "0x01d1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBladestop {
        let mut offset: usize = 0;
        PacketZcBladestop {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            src_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            src_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dest_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dest_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            flag: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            flag_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.src_aid).unwrap();
        self.src_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dest_aid).unwrap();
        self.dest_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.flag).unwrap();
        self.flag_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.src_aid_raw.to_vec());
        wtr.append(&mut self.dest_aid_raw.to_vec());
        wtr.append(&mut self.flag_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_src_aid(&mut self, value: u32) {
        self.src_aid = value;
    }
    pub fn set_src_aid_raw(&mut self, value: [u8; 4]) {
        self.src_aid_raw = value;
    }
    pub fn set_dest_aid(&mut self, value: u32) {
        self.dest_aid = value;
    }
    pub fn set_dest_aid_raw(&mut self, value: [u8; 4]) {
        self.dest_aid_raw = value;
    }
    pub fn set_flag(&mut self, value: i32) {
        self.flag = value;
    }
    pub fn set_flag_raw(&mut self, value: [u8; 4]) {
        self.flag_raw = value;
    }
    pub fn new() -> PacketZcBladestop {
        PacketZcBladestop {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x1]),
        packet_id_raw: [0x1d, 0x1],
        src_aid: 0,
        src_aid_raw: [0; 4],
        dest_aid: 0,
        dest_aid_raw: [0; 4],
        flag: 0,
        flag_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcBladestop {
    fn id(&self) -> &str {
       "0x01d1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBladestop {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCombodelay {
    pub fn packet_id() -> &'static str {
        "0x01d2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCombodelay {
        let mut offset: usize = 0;
        PacketZcCombodelay {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            delay_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delay_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.delay_time).unwrap();
        self.delay_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.delay_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_delay_time(&mut self, value: u32) {
        self.delay_time = value;
    }
    pub fn set_delay_time_raw(&mut self, value: [u8; 4]) {
        self.delay_time_raw = value;
    }
    pub fn new() -> PacketZcCombodelay {
        PacketZcCombodelay {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x2]),
        packet_id_raw: [0x1d, 0x2],
        aid: 0,
        aid_raw: [0; 4],
        delay_time: 0,
        delay_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcCombodelay {
    fn id(&self) -> &str {
       "0x01d2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCombodelay {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSound {
    pub fn packet_id() -> &'static str {
        "0x01d3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSound {
        let mut offset: usize = 0;
        PacketZcSound {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            file_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            file_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            act: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            act_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            term: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            term_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.file_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.file_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.act).unwrap();
        self.act_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.term).unwrap();
        self.term_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.file_name_raw.to_vec());
        wtr.append(&mut self.act_raw.to_vec());
        wtr.append(&mut self.term_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 35;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_file_name(&mut self, value: [char; 24]) {
        self.file_name = value;
    }
    pub fn set_file_name_raw(&mut self, value: [u8; 24]) {
        self.file_name_raw = value;
    }
    pub fn set_act(&mut self, value: u8) {
        self.act = value;
    }
    pub fn set_act_raw(&mut self, value: [u8; 1]) {
        self.act_raw = value;
    }
    pub fn set_term(&mut self, value: u32) {
        self.term = value;
    }
    pub fn set_term_raw(&mut self, value: [u8; 4]) {
        self.term_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketZcSound {
        PacketZcSound {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x3]),
        packet_id_raw: [0x1d, 0x3],
        file_name: [0 as char; 24],
        file_name_raw: [0; 24],
        act: 0,
        act_raw: [0; 1],
        term: 0,
        term_raw: [0; 4],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSound {
    fn id(&self) -> &str {
       "0x01d3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSound {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOpenEditdlgstr {
    pub fn packet_id() -> &'static str {
        "0xd401"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOpenEditdlgstr {
        let mut offset: usize = 0;
        PacketZcOpenEditdlgstr {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn new() -> PacketZcOpenEditdlgstr {
        PacketZcOpenEditdlgstr {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd4, 0x01]),
        packet_id_raw: [0xd4, 0x01],
        naid: 0,
        naid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcOpenEditdlgstr {
    fn id(&self) -> &str {
       "0xd401"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOpenEditdlgstr {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzInputEditdlgstr {
    pub fn packet_id() -> &'static str {
        "0xd501"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzInputEditdlgstr {
        let mut offset: usize = 0;
        PacketCzInputEditdlgstr {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            naid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            naid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.naid).unwrap();
        self.naid_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.naid_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_naid(&mut self, value: u32) {
        self.naid = value;
    }
    pub fn set_naid_raw(&mut self, value: [u8; 4]) {
        self.naid_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzInputEditdlgstr {
        PacketCzInputEditdlgstr {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd5, 0x01]),
        packet_id_raw: [0xd5, 0x01],
        packet_length: 0,
        packet_length_raw: [0; 2],
        naid: 0,
        naid_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzInputEditdlgstr {
    fn id(&self) -> &str {
       "0xd501"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzInputEditdlgstr {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMaptypeproperty2 {
    pub fn packet_id() -> &'static str {
        "0x01d6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMaptypeproperty2 {
        let mut offset: usize = 0;
        PacketZcNotifyMaptypeproperty2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcNotifyMaptypeproperty2 {
        PacketZcNotifyMaptypeproperty2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x6]),
        packet_id_raw: [0x1d, 0x6],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMaptypeproperty2 {
    fn id(&self) -> &str {
       "0x01d6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMaptypeproperty2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSpriteChange2 {
    pub fn packet_id() -> &'static str {
        "0xd701"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSpriteChange2 {
        let mut offset: usize = 0;
        PacketZcSpriteChange2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcSpriteChange2 {
        PacketZcSpriteChange2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd7, 0x01]),
        packet_id_raw: [0xd7, 0x01],
        gid: 0,
        gid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSpriteChange2 {
    fn id(&self) -> &str {
       "0xd701"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSpriteChange2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry2 {
    pub fn packet_id() -> &'static str {
        "0x01d8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry2 {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 54;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry2 {
        PacketZcNotifyStandentry2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x8]),
        packet_id_raw: [0x1d, 0x8],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyStandentry2 {
    fn id(&self) -> &str {
       "0x01d8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyNewentry2 {
    pub fn packet_id() -> &'static str {
        "0x01d9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyNewentry2 {
        let mut offset: usize = 0;
        PacketZcNotifyNewentry2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 53;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyNewentry2 {
        PacketZcNotifyNewentry2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0x9]),
        packet_id_raw: [0x1d, 0x9],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyNewentry2 {
    fn id(&self) -> &str {
       "0x01d9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyNewentry2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMoveentry2 {
    pub fn packet_id() -> &'static str {
        "0x01da"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMoveentry2 {
        let mut offset: usize = 0;
        PacketZcNotifyMoveentry2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u16; 6] = [0_u16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 60;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i16) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 2]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i16) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 2]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u16; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyMoveentry2 {
        PacketZcNotifyMoveentry2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0xa]),
        packet_id_raw: [0x1d, 0xa],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 2],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMoveentry2 {
    fn id(&self) -> &str {
       "0x01da"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMoveentry2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaReqHash {
    pub fn packet_id() -> &'static str {
        "0x01db"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaReqHash {
        let mut offset: usize = 0;
        PacketCaReqHash {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCaReqHash {
        PacketCaReqHash {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0xb]),
        packet_id_raw: [0x1d, 0xb],
        }
    }
}

impl Packet for PacketCaReqHash {
    fn id(&self) -> &str {
       "0x01db"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaReqHash {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckHash {
    pub fn packet_id() -> &'static str {
        "0x01dc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckHash {
        let mut offset: usize = 0;
        PacketAcAckHash {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            secret: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            secret_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.secret_raw = self.secret.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.secret_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_secret(&mut self, value: String) {
        self.secret = value;
    }
    pub fn set_secret_raw(&mut self, value: Vec<u8>) {
        self.secret_raw = value;
    }
    pub fn new() -> PacketAcAckHash {
        PacketAcAckHash {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0xc]),
        packet_id_raw: [0x1d, 0xc],
        packet_length: 0,
        packet_length_raw: [0; 2],
        secret: String::new(),
        secret_raw: vec![],
        }
    }
}

impl Packet for PacketAcAckHash {
    fn id(&self) -> &str {
       "0x01dc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckHash {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaLogin2 {
    pub fn packet_id() -> &'static str {
        "0x01dd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaLogin2 {
        let mut offset: usize = 0;
        PacketCaLogin2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd_md5: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_md5_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd_md5 {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_md5_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_md5_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 47;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd_md5(&mut self, value: [char; 16]) {
        self.passwd_md5 = value;
    }
    pub fn set_passwd_md5_raw(&mut self, value: [u8; 16]) {
        self.passwd_md5_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn new() -> PacketCaLogin2 {
        PacketCaLogin2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0xd]),
        packet_id_raw: [0x1d, 0xd],
        version: 0,
        version_raw: [0; 4],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd_md5: [0 as char; 16],
        passwd_md5_raw: [0; 16],
        clienttype: 0,
        clienttype_raw: [0; 1],
        }
    }
}

impl Packet for PacketCaLogin2 {
    fn id(&self) -> &str {
       "0x01dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaLogin2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifySkill2 {
    pub fn packet_id() -> &'static str {
        "0x01de"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifySkill2 {
        let mut offset: usize = 0;
        PacketZcNotifySkill2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attack_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attack_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attacked_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attacked_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            damage: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attack_mt).unwrap();
        self.attack_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attacked_mt).unwrap();
        self.attacked_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.attack_mt_raw.to_vec());
        wtr.append(&mut self.attacked_mt_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 33;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_attack_mt(&mut self, value: i32) {
        self.attack_mt = value;
    }
    pub fn set_attack_mt_raw(&mut self, value: [u8; 4]) {
        self.attack_mt_raw = value;
    }
    pub fn set_attacked_mt(&mut self, value: i32) {
        self.attacked_mt = value;
    }
    pub fn set_attacked_mt_raw(&mut self, value: [u8; 4]) {
        self.attacked_mt_raw = value;
    }
    pub fn set_damage(&mut self, value: i32) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 4]) {
        self.damage_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketZcNotifySkill2 {
        PacketZcNotifySkill2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0xe]),
        packet_id_raw: [0x1d, 0xe],
        skid: 0,
        skid_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        target_id: 0,
        target_id_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        attack_mt: 0,
        attack_mt_raw: [0; 4],
        attacked_mt: 0,
        attacked_mt_raw: [0; 4],
        damage: 0,
        damage_raw: [0; 4],
        level: 0,
        level_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcNotifySkill2 {
    fn id(&self) -> &str {
       "0x01de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifySkill2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqAccountname {
    pub fn packet_id() -> &'static str {
        "0x01df"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqAccountname {
        let mut offset: usize = 0;
        PacketCzReqAccountname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqAccountname {
        PacketCzReqAccountname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1d, 0xf]),
        packet_id_raw: [0x1d, 0xf],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqAccountname {
    fn id(&self) -> &str {
       "0x01df"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqAccountname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckAccountname {
    pub fn packet_id() -> &'static str {
        "0x01e0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckAccountname {
        let mut offset: usize = 0;
        PacketZcAckAccountname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcAckAccountname {
        PacketZcAckAccountname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x0]),
        packet_id_raw: [0x1e, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcAckAccountname {
    fn id(&self) -> &str {
       "0x01e0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckAccountname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSpirits2 {
    pub fn packet_id() -> &'static str {
        "0x01e1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSpirits2 {
        let mut offset: usize = 0;
        PacketZcSpirits2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            num: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            num_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.num).unwrap();
        self.num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_num(&mut self, value: i16) {
        self.num = value;
    }
    pub fn set_num_raw(&mut self, value: [u8; 2]) {
        self.num_raw = value;
    }
    pub fn new() -> PacketZcSpirits2 {
        PacketZcSpirits2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x1]),
        packet_id_raw: [0x1e, 0x1],
        aid: 0,
        aid_raw: [0; 4],
        num: 0,
        num_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcSpirits2 {
    fn id(&self) -> &str {
       "0x01e1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSpirits2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqCouple {
    pub fn packet_id() -> &'static str {
        "0x01e2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqCouple {
        let mut offset: usize = 0;
        PacketZcReqCouple {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcReqCouple {
        PacketZcReqCouple {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x2]),
        packet_id_raw: [0x1e, 0x2],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqCouple {
    fn id(&self) -> &str {
       "0x01e2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqCouple {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzJoinCouple {
    pub fn packet_id() -> &'static str {
        "0x01e3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzJoinCouple {
        let mut offset: usize = 0;
        PacketCzJoinCouple {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            answer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_answer(&mut self, value: i32) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 4]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketCzJoinCouple {
        PacketCzJoinCouple {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x3]),
        packet_id_raw: [0x1e, 0x3],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        answer: 0,
        answer_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzJoinCouple {
    fn id(&self) -> &str {
       "0x01e3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzJoinCouple {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStartCouple {
    pub fn packet_id() -> &'static str {
        "0x01e4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStartCouple {
        let mut offset: usize = 0;
        PacketZcStartCouple {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcStartCouple {
        PacketZcStartCouple {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x4]),
        packet_id_raw: [0x1e, 0x4],
        }
    }
}

impl Packet for PacketZcStartCouple {
    fn id(&self) -> &str {
       "0x01e4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStartCouple {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqJoinCouple {
    pub fn packet_id() -> &'static str {
        "0x01e5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqJoinCouple {
        let mut offset: usize = 0;
        PacketCzReqJoinCouple {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqJoinCouple {
        PacketCzReqJoinCouple {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x5]),
        packet_id_raw: [0x1e, 0x5],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqJoinCouple {
    fn id(&self) -> &str {
       "0x01e5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqJoinCouple {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCouplename {
    pub fn packet_id() -> &'static str {
        "0x01e6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCouplename {
        let mut offset: usize = 0;
        PacketZcCouplename {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            couple_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            couple_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.couple_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.couple_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.couple_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_couple_name(&mut self, value: [char; 24]) {
        self.couple_name = value;
    }
    pub fn set_couple_name_raw(&mut self, value: [u8; 24]) {
        self.couple_name_raw = value;
    }
    pub fn new() -> PacketZcCouplename {
        PacketZcCouplename {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x6]),
        packet_id_raw: [0x1e, 0x6],
        couple_name: [0 as char; 24],
        couple_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcCouplename {
    fn id(&self) -> &str {
       "0x01e6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCouplename {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzDoridori {
    pub fn packet_id() -> &'static str {
        "0x01e7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzDoridori {
        let mut offset: usize = 0;
        PacketCzDoridori {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzDoridori {
        PacketCzDoridori {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x7]),
        packet_id_raw: [0x1e, 0x7],
        }
    }
}

impl Packet for PacketCzDoridori {
    fn id(&self) -> &str {
       "0x01e7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzDoridori {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMakeGroup2 {
    pub fn packet_id() -> &'static str {
        "0x01e8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMakeGroup2 {
        let mut offset: usize = 0;
        PacketCzMakeGroup2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            item_pickup_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_pickup_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            item_division_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_division_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_pickup_rule).unwrap();
        self.item_pickup_rule_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_division_rule).unwrap();
        self.item_division_rule_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        wtr.append(&mut self.item_pickup_rule_raw.to_vec());
        wtr.append(&mut self.item_division_rule_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn set_item_pickup_rule(&mut self, value: u8) {
        self.item_pickup_rule = value;
    }
    pub fn set_item_pickup_rule_raw(&mut self, value: [u8; 1]) {
        self.item_pickup_rule_raw = value;
    }
    pub fn set_item_division_rule(&mut self, value: u8) {
        self.item_division_rule = value;
    }
    pub fn set_item_division_rule_raw(&mut self, value: [u8; 1]) {
        self.item_division_rule_raw = value;
    }
    pub fn new() -> PacketCzMakeGroup2 {
        PacketCzMakeGroup2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x8]),
        packet_id_raw: [0x1e, 0x8],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        item_pickup_rule: 0,
        item_pickup_rule_raw: [0; 1],
        item_division_rule: 0,
        item_division_rule_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzMakeGroup2 {
    fn id(&self) -> &str {
       "0x01e8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMakeGroup2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddMemberToGroup2 {
    pub fn packet_id() -> &'static str {
        "0x01e9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddMemberToGroup2 {
        let mut offset: usize = 0;
        PacketZcAddMemberToGroup2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            role: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            role_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            item_pickup_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_pickup_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            item_division_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_division_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.role).unwrap();
        self.role_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_pickup_rule).unwrap();
        self.item_pickup_rule_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_division_rule).unwrap();
        self.item_division_rule_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.role_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.item_pickup_rule_raw.to_vec());
        wtr.append(&mut self.item_division_rule_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 81;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_role(&mut self, value: u32) {
        self.role = value;
    }
    pub fn set_role_raw(&mut self, value: [u8; 4]) {
        self.role_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_item_pickup_rule(&mut self, value: u8) {
        self.item_pickup_rule = value;
    }
    pub fn set_item_pickup_rule_raw(&mut self, value: [u8; 1]) {
        self.item_pickup_rule_raw = value;
    }
    pub fn set_item_division_rule(&mut self, value: u8) {
        self.item_division_rule = value;
    }
    pub fn set_item_division_rule_raw(&mut self, value: [u8; 1]) {
        self.item_division_rule_raw = value;
    }
    pub fn new() -> PacketZcAddMemberToGroup2 {
        PacketZcAddMemberToGroup2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0x9]),
        packet_id_raw: [0x1e, 0x9],
        aid: 0,
        aid_raw: [0; 4],
        role: 0,
        role_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        state: 0,
        state_raw: [0; 1],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        item_pickup_rule: 0,
        item_pickup_rule_raw: [0; 1],
        item_division_rule: 0,
        item_division_rule_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAddMemberToGroup2 {
    fn id(&self) -> &str {
       "0x01e9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddMemberToGroup2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCongratulation {
    pub fn packet_id() -> &'static str {
        "0x01ea"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCongratulation {
        let mut offset: usize = 0;
        PacketZcCongratulation {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcCongratulation {
        PacketZcCongratulation {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0xa]),
        packet_id_raw: [0x1e, 0xa],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcCongratulation {
    fn id(&self) -> &str {
       "0x01ea"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCongratulation {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPositionToGuildm {
    pub fn packet_id() -> &'static str {
        "0x01eb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPositionToGuildm {
        let mut offset: usize = 0;
        PacketZcNotifyPositionToGuildm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketZcNotifyPositionToGuildm {
        PacketZcNotifyPositionToGuildm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0xb]),
        packet_id_raw: [0x1e, 0xb],
        aid: 0,
        aid_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyPositionToGuildm {
    fn id(&self) -> &str {
       "0x01eb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPositionToGuildm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGuildMemberMapChange {
    pub fn packet_id() -> &'static str {
        "0x01ec"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGuildMemberMapChange {
        let mut offset: usize = 0;
        PacketZcGuildMemberMapChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gdid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gdid(&mut self, value: u32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn new() -> PacketZcGuildMemberMapChange {
        PacketZcGuildMemberMapChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0xc]),
        packet_id_raw: [0x1e, 0xc],
        gdid: 0,
        gdid_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        }
    }
}

impl Packet for PacketZcGuildMemberMapChange {
    fn id(&self) -> &str {
       "0x01ec"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGuildMemberMapChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChopokgi {
    pub fn packet_id() -> &'static str {
        "0x01ed"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChopokgi {
        let mut offset: usize = 0;
        PacketCzChopokgi {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzChopokgi {
        PacketCzChopokgi {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0xd]),
        packet_id_raw: [0x1e, 0xd],
        }
    }
}

impl Packet for PacketCzChopokgi {
    fn id(&self) -> &str {
       "0x01ed"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChopokgi {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNormalItemlist2 {
    pub fn packet_id() -> &'static str {
        "0x01ee"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNormalItemlist2 {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo2::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcNormalItemlist2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo2>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcNormalItemlist2 {
        PacketZcNormalItemlist2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0xe]),
        packet_id_raw: [0x1e, 0xe],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcNormalItemlist2 {
    fn id(&self) -> &str {
       "0x01ee"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNormalItemlist2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartNormalItemlist2 {
    pub fn packet_id() -> &'static str {
        "0x01ef"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartNormalItemlist2 {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo2::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcCartNormalItemlist2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo2>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcCartNormalItemlist2 {
        PacketZcCartNormalItemlist2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1e, 0xf]),
        packet_id_raw: [0x1e, 0xf],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcCartNormalItemlist2 {
    fn id(&self) -> &str {
       "0x01ef"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartNormalItemlist2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreNormalItemlist2 {
    pub fn packet_id() -> &'static str {
        "0x01f0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreNormalItemlist2 {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo2::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcStoreNormalItemlist2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo2>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcStoreNormalItemlist2 {
        PacketZcStoreNormalItemlist2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x0]),
        packet_id_raw: [0x1f, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcStoreNormalItemlist2 {
    fn id(&self) -> &str {
       "0x01f0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreNormalItemlist2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcNotifyError {
    pub fn packet_id() -> &'static str {
        "0x01f1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcNotifyError {
        let mut offset: usize = 0;
        PacketAcNotifyError {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketAcNotifyError {
        PacketAcNotifyError {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x1]),
        packet_id_raw: [0x1f, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketAcNotifyError {
    fn id(&self) -> &str {
       "0x01f1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcNotifyError {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUpdateCharstat2 {
    pub fn packet_id() -> &'static str {
        "0x01f2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUpdateCharstat2 {
        let mut offset: usize = 0;
        PacketZcUpdateCharstat2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            status: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            status_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sex: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_palette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_palette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.status).unwrap();
        self.status_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_palette).unwrap();
        self.head_palette_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.status_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.head_palette_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 20;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_status(&mut self, value: i32) {
        self.status = value;
    }
    pub fn set_status_raw(&mut self, value: [u8; 4]) {
        self.status_raw = value;
    }
    pub fn set_sex(&mut self, value: i16) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 2]) {
        self.sex_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_head_palette(&mut self, value: i16) {
        self.head_palette = value;
    }
    pub fn set_head_palette_raw(&mut self, value: [u8; 2]) {
        self.head_palette_raw = value;
    }
    pub fn new() -> PacketZcUpdateCharstat2 {
        PacketZcUpdateCharstat2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x2]),
        packet_id_raw: [0x1f, 0x2],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        status: 0,
        status_raw: [0; 4],
        sex: 0,
        sex_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        head_palette: 0,
        head_palette_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcUpdateCharstat2 {
    fn id(&self) -> &str {
       "0x01f2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUpdateCharstat2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyEffect2 {
    pub fn packet_id() -> &'static str {
        "0x01f3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyEffect2 {
        let mut offset: usize = 0;
        PacketZcNotifyEffect2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            effect_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_id).unwrap();
        self.effect_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.effect_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_effect_id(&mut self, value: i32) {
        self.effect_id = value;
    }
    pub fn set_effect_id_raw(&mut self, value: [u8; 4]) {
        self.effect_id_raw = value;
    }
    pub fn new() -> PacketZcNotifyEffect2 {
        PacketZcNotifyEffect2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x3]),
        packet_id_raw: [0x1f, 0x3],
        aid: 0,
        aid_raw: [0; 4],
        effect_id: 0,
        effect_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyEffect2 {
    fn id(&self) -> &str {
       "0x01f3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyEffect2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqExchangeItem2 {
    pub fn packet_id() -> &'static str {
        "0x01f4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqExchangeItem2 {
        let mut offset: usize = 0;
        PacketZcReqExchangeItem2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn new() -> PacketZcReqExchangeItem2 {
        PacketZcReqExchangeItem2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x4]),
        packet_id_raw: [0x1f, 0x4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        gid: 0,
        gid_raw: [0; 4],
        level: 0,
        level_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcReqExchangeItem2 {
    fn id(&self) -> &str {
       "0x01f4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqExchangeItem2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckExchangeItem2 {
    pub fn packet_id() -> &'static str {
        "0x01f5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckExchangeItem2 {
        let mut offset: usize = 0;
        PacketZcAckExchangeItem2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn new() -> PacketZcAckExchangeItem2 {
        PacketZcAckExchangeItem2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x5]),
        packet_id_raw: [0x1f, 0x5],
        result: 0,
        result_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        level: 0,
        level_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckExchangeItem2 {
    fn id(&self) -> &str {
       "0x01f5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckExchangeItem2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqBaby {
    pub fn packet_id() -> &'static str {
        "0x01f6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqBaby {
        let mut offset: usize = 0;
        PacketZcReqBaby {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcReqBaby {
        PacketZcReqBaby {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x6]),
        packet_id_raw: [0x1f, 0x6],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqBaby {
    fn id(&self) -> &str {
       "0x01f6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqBaby {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzJoinBaby {
    pub fn packet_id() -> &'static str {
        "0x01f7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzJoinBaby {
        let mut offset: usize = 0;
        PacketCzJoinBaby {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            answer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_answer(&mut self, value: i32) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 4]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketCzJoinBaby {
        PacketCzJoinBaby {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x7]),
        packet_id_raw: [0x1f, 0x7],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        answer: 0,
        answer_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzJoinBaby {
    fn id(&self) -> &str {
       "0x01f7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzJoinBaby {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStartBaby {
    pub fn packet_id() -> &'static str {
        "0x01f8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStartBaby {
        let mut offset: usize = 0;
        PacketZcStartBaby {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcStartBaby {
        PacketZcStartBaby {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x8]),
        packet_id_raw: [0x1f, 0x8],
        }
    }
}

impl Packet for PacketZcStartBaby {
    fn id(&self) -> &str {
       "0x01f8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStartBaby {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqJoinBaby {
    pub fn packet_id() -> &'static str {
        "0x01f9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqJoinBaby {
        let mut offset: usize = 0;
        PacketCzReqJoinBaby {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzReqJoinBaby {
        PacketCzReqJoinBaby {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0x9]),
        packet_id_raw: [0x1f, 0x9],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqJoinBaby {
    fn id(&self) -> &str {
       "0x01f9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqJoinBaby {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaLogin3 {
    pub fn packet_id() -> &'static str {
        "0x01fa"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaLogin3 {
        let mut offset: usize = 0;
        PacketCaLogin3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd_md5: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_md5_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            client_info: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            client_info_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd_md5 {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_md5_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.client_info).unwrap();
        self.client_info_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_md5_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        wtr.append(&mut self.client_info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 48;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd_md5(&mut self, value: [char; 16]) {
        self.passwd_md5 = value;
    }
    pub fn set_passwd_md5_raw(&mut self, value: [u8; 16]) {
        self.passwd_md5_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn set_client_info(&mut self, value: u8) {
        self.client_info = value;
    }
    pub fn set_client_info_raw(&mut self, value: [u8; 1]) {
        self.client_info_raw = value;
    }
    pub fn new() -> PacketCaLogin3 {
        PacketCaLogin3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0xa]),
        packet_id_raw: [0x1f, 0xa],
        version: 0,
        version_raw: [0; 4],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd_md5: [0 as char; 16],
        passwd_md5_raw: [0; 16],
        clienttype: 0,
        clienttype_raw: [0; 1],
        client_info: 0,
        client_info_raw: [0; 1],
        }
    }
}

impl Packet for PacketCaLogin3 {
    fn id(&self) -> &str {
       "0x01fa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaLogin3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChDeleteChar2 {
    pub fn packet_id() -> &'static str {
        "0x01fb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChDeleteChar2 {
        let mut offset: usize = 0;
        PacketChDeleteChar2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            key: {
                let field =  {
                let mut dst: [char; 50] = [0 as char; 50];
                for (index, byte) in buffer[offset..offset + 50].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            key_raw: {
                let mut dst: [u8; 50] = [0u8; 50];
                dst.clone_from_slice(&buffer[offset..offset + 50]);
                offset += 50;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.key {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.key_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.key_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 56;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_key(&mut self, value: [char; 50]) {
        self.key = value;
    }
    pub fn set_key_raw(&mut self, value: [u8; 50]) {
        self.key_raw = value;
    }
    pub fn new() -> PacketChDeleteChar2 {
        PacketChDeleteChar2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0xb]),
        packet_id_raw: [0x1f, 0xb],
        gid: 0,
        gid_raw: [0; 4],
        key: [0 as char; 50],
        key_raw: [0; 50],
        }
    }
}

impl Packet for PacketChDeleteChar2 {
    fn id(&self) -> &str {
       "0x01fb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChDeleteChar2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcRepairitemlist {
    pub fn packet_id() -> &'static str {
        "0x01fc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcRepairitemlist {
        let mut offset: usize = 0;
        let vec_type_len = RepairitemInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<RepairitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(RepairitemInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcRepairitemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<RepairitemInfo>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcRepairitemlist {
        PacketZcRepairitemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0xc]),
        packet_id_raw: [0x1f, 0xc],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcRepairitemlist {
    fn id(&self) -> &str {
       "0x01fc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcRepairitemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqItemrepair {
    pub fn packet_id() -> &'static str {
        "0x01fd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqItemrepair {
        let mut offset: usize = 0;
        PacketCzReqItemrepair {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_item_info: {
                let field = RepairitemInfo::from(&buffer[offset..offset + RepairitemInfo::base_len(packetver)], packetver);
                field
            },
            target_item_info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.target_item_info.fill_raw_with_packetver(packetver);
        self.target_item_info_raw = self.target_item_info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.target_item_info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_target_item_info(&mut self, value: RepairitemInfo) {
        self.target_item_info = value;
    }
    pub fn set_target_item_info_raw(&mut self, value: Vec<u8>) {
        self.target_item_info_raw = value;
    }
    pub fn new() -> PacketCzReqItemrepair {
        PacketCzReqItemrepair {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0xd]),
        packet_id_raw: [0x1f, 0xd],
        target_item_info: RepairitemInfo::new(),
        target_item_info_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqItemrepair {
    fn id(&self) -> &str {
       "0x01fd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqItemrepair {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckItemrepair {
    pub fn packet_id() -> &'static str {
        "0x01fe"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckItemrepair {
        let mut offset: usize = 0;
        PacketZcAckItemrepair {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckItemrepair {
        PacketZcAckItemrepair {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0xe]),
        packet_id_raw: [0x1f, 0xe],
        index: 0,
        index_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckItemrepair {
    fn id(&self) -> &str {
       "0x01fe"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckItemrepair {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcHighjump {
    pub fn packet_id() -> &'static str {
        "0x01ff"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcHighjump {
        let mut offset: usize = 0;
        PacketZcHighjump {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn new() -> PacketZcHighjump {
        PacketZcHighjump {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1f, 0xf]),
        packet_id_raw: [0x1f, 0xf],
        aid: 0,
        aid_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcHighjump {
    fn id(&self) -> &str {
       "0x01ff"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcHighjump {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaConnectInfoChanged {
    pub fn packet_id() -> &'static str {
        "0x0200"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaConnectInfoChanged {
        let mut offset: usize = 0;
        PacketCaConnectInfoChanged {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn new() -> PacketCaConnectInfoChanged {
        PacketCaConnectInfoChanged {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x0]),
        packet_id_raw: [0x20, 0x0],
        id: [0 as char; 24],
        id_raw: [0; 24],
        }
    }
}

impl Packet for PacketCaConnectInfoChanged {
    fn id(&self) -> &str {
       "0x0200"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaConnectInfoChanged {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFriendsList {
    pub fn packet_id() -> &'static str {
        "0x0201"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFriendsList {
        let mut offset: usize = 0;
        let vec_type_len = FRIEND::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<FRIEND> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(FRIEND::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcFriendsList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            friend_list: {
                let field = vec_field.clone();
                field
            },
            friend_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.friend_list_raw = {
            self.friend_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.friend_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.friend_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_friend_list(&mut self, value: Vec<FRIEND>) {
        self.friend_list = value;
    }
    pub fn set_friend_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.friend_list_raw = value;
    }
    pub fn new() -> PacketZcFriendsList {
        PacketZcFriendsList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x1]),
        packet_id_raw: [0x20, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        friend_list: vec![],
        friend_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcFriendsList {
    fn id(&self) -> &str {
       "0x0201"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFriendsList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAddFriends {
    pub fn packet_id() -> &'static str {
        "0x0202"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAddFriends {
        let mut offset: usize = 0;
        PacketCzAddFriends {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketCzAddFriends {
        PacketCzAddFriends {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x2]),
        packet_id_raw: [0x20, 0x2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzAddFriends {
    fn id(&self) -> &str {
       "0x0202"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAddFriends {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzDeleteFriends {
    pub fn packet_id() -> &'static str {
        "0x0203"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzDeleteFriends {
        let mut offset: usize = 0;
        PacketCzDeleteFriends {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketCzDeleteFriends {
        PacketCzDeleteFriends {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x3]),
        packet_id_raw: [0x20, 0x3],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzDeleteFriends {
    fn id(&self) -> &str {
       "0x0203"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzDeleteFriends {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaExeHashcheck {
    pub fn packet_id() -> &'static str {
        "0x0204"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaExeHashcheck {
        let mut offset: usize = 0;
        PacketCaExeHashcheck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hash_value: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            hash_value_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.hash_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.hash_value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.hash_value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_hash_value(&mut self, value: [char; 16]) {
        self.hash_value = value;
    }
    pub fn set_hash_value_raw(&mut self, value: [u8; 16]) {
        self.hash_value_raw = value;
    }
    pub fn new() -> PacketCaExeHashcheck {
        PacketCaExeHashcheck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x4]),
        packet_id_raw: [0x20, 0x4],
        hash_value: [0 as char; 16],
        hash_value_raw: [0; 16],
        }
    }
}

impl Packet for PacketCaExeHashcheck {
    fn id(&self) -> &str {
       "0x0204"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaExeHashcheck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDivorce {
    pub fn packet_id() -> &'static str {
        "0x0205"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDivorce {
        let mut offset: usize = 0;
        PacketZcDivorce {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcDivorce {
        PacketZcDivorce {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x5]),
        packet_id_raw: [0x20, 0x5],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcDivorce {
    fn id(&self) -> &str {
       "0x0205"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDivorce {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFriendsState {
    pub fn packet_id() -> &'static str {
        "0x0206"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFriendsState {
        let mut offset: usize = 0;
        PacketZcFriendsState {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            state: {
                let field = buffer[offset] == 1;
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state as u8).unwrap();
        self.state_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_state(&mut self, value: bool) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn new() -> PacketZcFriendsState {
        PacketZcFriendsState {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x6]),
        packet_id_raw: [0x20, 0x6],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        state: false,
        state_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcFriendsState {
    fn id(&self) -> &str {
       "0x0206"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFriendsState {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqAddFriends {
    pub fn packet_id() -> &'static str {
        "0x0207"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqAddFriends {
        let mut offset: usize = 0;
        PacketZcReqAddFriends {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            req_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            req_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            req_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            req_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.req_aid).unwrap();
        self.req_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.req_gid).unwrap();
        self.req_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.req_aid_raw.to_vec());
        wtr.append(&mut self.req_gid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_req_aid(&mut self, value: u32) {
        self.req_aid = value;
    }
    pub fn set_req_aid_raw(&mut self, value: [u8; 4]) {
        self.req_aid_raw = value;
    }
    pub fn set_req_gid(&mut self, value: u32) {
        self.req_gid = value;
    }
    pub fn set_req_gid_raw(&mut self, value: [u8; 4]) {
        self.req_gid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcReqAddFriends {
        PacketZcReqAddFriends {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x7]),
        packet_id_raw: [0x20, 0x7],
        req_aid: 0,
        req_aid_raw: [0; 4],
        req_gid: 0,
        req_gid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcReqAddFriends {
    fn id(&self) -> &str {
       "0x0207"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqAddFriends {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAckReqAddFriends {
    pub fn packet_id() -> &'static str {
        "0x0208"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAckReqAddFriends {
        let mut offset: usize = 0;
        PacketCzAckReqAddFriends {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            req_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            req_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            req_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            req_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.req_aid).unwrap();
        self.req_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.req_gid).unwrap();
        self.req_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.req_aid_raw.to_vec());
        wtr.append(&mut self.req_gid_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_req_aid(&mut self, value: u32) {
        self.req_aid = value;
    }
    pub fn set_req_aid_raw(&mut self, value: [u8; 4]) {
        self.req_aid_raw = value;
    }
    pub fn set_req_gid(&mut self, value: u32) {
        self.req_gid = value;
    }
    pub fn set_req_gid_raw(&mut self, value: [u8; 4]) {
        self.req_gid_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketCzAckReqAddFriends {
        PacketCzAckReqAddFriends {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x8]),
        packet_id_raw: [0x20, 0x8],
        req_aid: 0,
        req_aid_raw: [0; 4],
        req_gid: 0,
        req_gid_raw: [0; 4],
        result: 0,
        result_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAckReqAddFriends {
    fn id(&self) -> &str {
       "0x0208"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAckReqAddFriends {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddFriendsList {
    pub fn packet_id() -> &'static str {
        "0x0209"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddFriendsList {
        let mut offset: usize = 0;
        PacketZcAddFriendsList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 36;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcAddFriendsList {
        PacketZcAddFriendsList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0x9]),
        packet_id_raw: [0x20, 0x9],
        result: 0,
        result_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcAddFriendsList {
    fn id(&self) -> &str {
       "0x0209"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddFriendsList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteFriends {
    pub fn packet_id() -> &'static str {
        "0x020a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteFriends {
        let mut offset: usize = 0;
        PacketZcDeleteFriends {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketZcDeleteFriends {
        PacketZcDeleteFriends {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0xa]),
        packet_id_raw: [0x20, 0xa],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDeleteFriends {
    fn id(&self) -> &str {
       "0x020a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteFriends {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcRefuseLoginR3 {
    pub fn packet_id() -> &'static str {
        "0x020b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcRefuseLoginR3 {
        let mut offset: usize = 0;
        PacketAcRefuseLoginR3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            block_date: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            block_date_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.block_date {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.block_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        wtr.append(&mut self.block_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u32) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 4]) {
        self.error_code_raw = value;
    }
    pub fn set_block_date(&mut self, value: [char; 20]) {
        self.block_date = value;
    }
    pub fn set_block_date_raw(&mut self, value: [u8; 20]) {
        self.block_date_raw = value;
    }
    pub fn new() -> PacketAcRefuseLoginR3 {
        PacketAcRefuseLoginR3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x02, 0x0b]),
        packet_id_raw: [0x02, 0x0b],
        error_code: 0,
        error_code_raw: [0; 4],
        block_date: [0 as char; 20],
        block_date_raw: [0; 20],
        }
    }
}

impl Packet for PacketAcRefuseLoginR3 {
    fn id(&self) -> &str {
       "0x020b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcRefuseLoginR3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzExeHashcheck {
    pub fn packet_id() -> &'static str {
        "0x020c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzExeHashcheck {
        let mut offset: usize = 0;
        PacketCzExeHashcheck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            client_type: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            client_type_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            hash_value: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            hash_value_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.client_type).unwrap();
        self.client_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.hash_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.hash_value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.client_type_raw.to_vec());
        wtr.append(&mut self.hash_value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_client_type(&mut self, value: u8) {
        self.client_type = value;
    }
    pub fn set_client_type_raw(&mut self, value: [u8; 1]) {
        self.client_type_raw = value;
    }
    pub fn set_hash_value(&mut self, value: [char; 16]) {
        self.hash_value = value;
    }
    pub fn set_hash_value_raw(&mut self, value: [u8; 16]) {
        self.hash_value_raw = value;
    }
    pub fn new() -> PacketCzExeHashcheck {
        PacketCzExeHashcheck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0xc]),
        packet_id_raw: [0x20, 0xc],
        client_type: 0,
        client_type_raw: [0; 1],
        hash_value: [0 as char; 16],
        hash_value_raw: [0; 16],
        }
    }
}

impl Packet for PacketCzExeHashcheck {
    fn id(&self) -> &str {
       "0x020c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzExeHashcheck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcBlockCharacter {
    pub fn packet_id() -> &'static str {
        "0x020d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcBlockCharacter {
        let mut offset: usize = 0;
        let vec_type_len = TagCharacterBlockInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<TagCharacterBlockInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(TagCharacterBlockInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketHcBlockCharacter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_list: {
                let field = vec_field.clone();
                field
            },
            character_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.character_list_raw = {
            self.character_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.character_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.character_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_character_list(&mut self, value: Vec<TagCharacterBlockInfo>) {
        self.character_list = value;
    }
    pub fn set_character_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.character_list_raw = value;
    }
    pub fn new() -> PacketHcBlockCharacter {
        PacketHcBlockCharacter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0xd]),
        packet_id_raw: [0x20, 0xd],
        packet_length: 0,
        packet_length_raw: [0; 2],
        character_list: vec![],
        character_list_raw: vec![],
        }
    }
}

impl Packet for PacketHcBlockCharacter {
    fn id(&self) -> &str {
       "0x020d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcBlockCharacter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStarskill {
    pub fn packet_id() -> &'static str {
        "0x020e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStarskill {
        let mut offset: usize = 0;
        PacketZcStarskill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            monster_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            monster_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            star: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            star_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.monster_id).unwrap();
        self.monster_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.star).unwrap();
        self.star_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.monster_id_raw.to_vec());
        wtr.append(&mut self.star_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 24]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 24]) {
        self.map_name_raw = value;
    }
    pub fn set_monster_id(&mut self, value: i32) {
        self.monster_id = value;
    }
    pub fn set_monster_id_raw(&mut self, value: [u8; 4]) {
        self.monster_id_raw = value;
    }
    pub fn set_star(&mut self, value: u8) {
        self.star = value;
    }
    pub fn set_star_raw(&mut self, value: [u8; 1]) {
        self.star_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcStarskill {
        PacketZcStarskill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0xe]),
        packet_id_raw: [0x20, 0xe],
        map_name: [0 as char; 24],
        map_name_raw: [0; 24],
        monster_id: 0,
        monster_id_raw: [0; 4],
        star: 0,
        star_raw: [0; 1],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcStarskill {
    fn id(&self) -> &str {
       "0x020e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStarskill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqPvppoint {
    pub fn packet_id() -> &'static str {
        "0x020f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqPvppoint {
        let mut offset: usize = 0;
        PacketCzReqPvppoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketCzReqPvppoint {
        PacketCzReqPvppoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x20, 0xf]),
        packet_id_raw: [0x20, 0xf],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqPvppoint {
    fn id(&self) -> &str {
       "0x020f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqPvppoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckPvppoint {
    pub fn packet_id() -> &'static str {
        "0x0210"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckPvppoint {
        let mut offset: usize = 0;
        PacketZcAckPvppoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pvp: {
                let field = PVPINFO::from(&buffer[offset..offset + PVPINFO::base_len(packetver)], packetver);
                field
            },
            pvp_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        self.pvp.fill_raw_with_packetver(packetver);
        self.pvp_raw = self.pvp.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.pvp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_pvp(&mut self, value: PVPINFO) {
        self.pvp = value;
    }
    pub fn set_pvp_raw(&mut self, value: Vec<u8>) {
        self.pvp_raw = value;
    }
    pub fn new() -> PacketZcAckPvppoint {
        PacketZcAckPvppoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x0]),
        packet_id_raw: [0x21, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        pvp: PVPINFO::new(),
        pvp_raw: vec![],
        }
    }
}

impl Packet for PacketZcAckPvppoint {
    fn id(&self) -> &str {
       "0x0210"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckPvppoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZhMovePvpworld {
    pub fn packet_id() -> &'static str {
        "0x0211"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZhMovePvpworld {
        let mut offset: usize = 0;
        PacketZhMovePvpworld {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketZhMovePvpworld {
        PacketZhMovePvpworld {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x1]),
        packet_id_raw: [0x21, 0x1],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZhMovePvpworld {
    fn id(&self) -> &str {
       "0x0211"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZhMovePvpworld {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqGiveMannerByname {
    pub fn packet_id() -> &'static str {
        "0x0212"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqGiveMannerByname {
        let mut offset: usize = 0;
        PacketCzReqGiveMannerByname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn new() -> PacketCzReqGiveMannerByname {
        PacketCzReqGiveMannerByname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x2]),
        packet_id_raw: [0x21, 0x2],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqGiveMannerByname {
    fn id(&self) -> &str {
       "0x0212"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqGiveMannerByname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqStatusGm {
    pub fn packet_id() -> &'static str {
        "0x0213"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqStatusGm {
        let mut offset: usize = 0;
        PacketCzReqStatusGm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn new() -> PacketCzReqStatusGm {
        PacketCzReqStatusGm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x3]),
        packet_id_raw: [0x21, 0x3],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqStatusGm {
    fn id(&self) -> &str {
       "0x0213"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqStatusGm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckStatusGm {
    pub fn packet_id() -> &'static str {
        "0x0214"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckStatusGm {
        let mut offset: usize = 0;
        PacketZcAckStatusGm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            standard_luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            standard_luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            att_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            att_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            refining_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            refining_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_matt_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_matt_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            min_matt_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            min_matt_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itemdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itemdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plusdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plusdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plusmdef_power: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plusmdef_power_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hit_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hit_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            avoid_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            avoid_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plus_avoid_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plus_avoid_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            critical_success_value: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            critical_success_value_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            plus_aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            plus_aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.str).unwrap();
        self.str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_str).unwrap();
        self.standard_str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.agi).unwrap();
        self.agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_agi).unwrap();
        self.standard_agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.vit).unwrap();
        self.vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_vit).unwrap();
        self.standard_vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.int).unwrap();
        self.int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_int).unwrap();
        self.standard_int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dex).unwrap();
        self.dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_dex).unwrap();
        self.standard_dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.luk).unwrap();
        self.luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.standard_luk).unwrap();
        self.standard_luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.att_power).unwrap();
        self.att_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.refining_power).unwrap();
        self.refining_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_matt_power).unwrap();
        self.max_matt_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.min_matt_power).unwrap();
        self.min_matt_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.itemdef_power).unwrap();
        self.itemdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plusdef_power).unwrap();
        self.plusdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef_power).unwrap();
        self.mdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plusmdef_power).unwrap();
        self.plusmdef_power_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hit_success_value).unwrap();
        self.hit_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.avoid_success_value).unwrap();
        self.avoid_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plus_avoid_success_value).unwrap();
        self.plus_avoid_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.critical_success_value).unwrap();
        self.critical_success_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.aspd).unwrap();
        self.aspd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.plus_aspd).unwrap();
        self.plus_aspd_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.str_raw.to_vec());
        wtr.append(&mut self.standard_str_raw.to_vec());
        wtr.append(&mut self.agi_raw.to_vec());
        wtr.append(&mut self.standard_agi_raw.to_vec());
        wtr.append(&mut self.vit_raw.to_vec());
        wtr.append(&mut self.standard_vit_raw.to_vec());
        wtr.append(&mut self.int_raw.to_vec());
        wtr.append(&mut self.standard_int_raw.to_vec());
        wtr.append(&mut self.dex_raw.to_vec());
        wtr.append(&mut self.standard_dex_raw.to_vec());
        wtr.append(&mut self.luk_raw.to_vec());
        wtr.append(&mut self.standard_luk_raw.to_vec());
        wtr.append(&mut self.att_power_raw.to_vec());
        wtr.append(&mut self.refining_power_raw.to_vec());
        wtr.append(&mut self.max_matt_power_raw.to_vec());
        wtr.append(&mut self.min_matt_power_raw.to_vec());
        wtr.append(&mut self.itemdef_power_raw.to_vec());
        wtr.append(&mut self.plusdef_power_raw.to_vec());
        wtr.append(&mut self.mdef_power_raw.to_vec());
        wtr.append(&mut self.plusmdef_power_raw.to_vec());
        wtr.append(&mut self.hit_success_value_raw.to_vec());
        wtr.append(&mut self.avoid_success_value_raw.to_vec());
        wtr.append(&mut self.plus_avoid_success_value_raw.to_vec());
        wtr.append(&mut self.critical_success_value_raw.to_vec());
        wtr.append(&mut self.aspd_raw.to_vec());
        wtr.append(&mut self.plus_aspd_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 42;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_str(&mut self, value: u8) {
        self.str = value;
    }
    pub fn set_str_raw(&mut self, value: [u8; 1]) {
        self.str_raw = value;
    }
    pub fn set_standard_str(&mut self, value: u8) {
        self.standard_str = value;
    }
    pub fn set_standard_str_raw(&mut self, value: [u8; 1]) {
        self.standard_str_raw = value;
    }
    pub fn set_agi(&mut self, value: u8) {
        self.agi = value;
    }
    pub fn set_agi_raw(&mut self, value: [u8; 1]) {
        self.agi_raw = value;
    }
    pub fn set_standard_agi(&mut self, value: u8) {
        self.standard_agi = value;
    }
    pub fn set_standard_agi_raw(&mut self, value: [u8; 1]) {
        self.standard_agi_raw = value;
    }
    pub fn set_vit(&mut self, value: u8) {
        self.vit = value;
    }
    pub fn set_vit_raw(&mut self, value: [u8; 1]) {
        self.vit_raw = value;
    }
    pub fn set_standard_vit(&mut self, value: u8) {
        self.standard_vit = value;
    }
    pub fn set_standard_vit_raw(&mut self, value: [u8; 1]) {
        self.standard_vit_raw = value;
    }
    pub fn set_int(&mut self, value: u8) {
        self.int = value;
    }
    pub fn set_int_raw(&mut self, value: [u8; 1]) {
        self.int_raw = value;
    }
    pub fn set_standard_int(&mut self, value: u8) {
        self.standard_int = value;
    }
    pub fn set_standard_int_raw(&mut self, value: [u8; 1]) {
        self.standard_int_raw = value;
    }
    pub fn set_dex(&mut self, value: u8) {
        self.dex = value;
    }
    pub fn set_dex_raw(&mut self, value: [u8; 1]) {
        self.dex_raw = value;
    }
    pub fn set_standard_dex(&mut self, value: u8) {
        self.standard_dex = value;
    }
    pub fn set_standard_dex_raw(&mut self, value: [u8; 1]) {
        self.standard_dex_raw = value;
    }
    pub fn set_luk(&mut self, value: u8) {
        self.luk = value;
    }
    pub fn set_luk_raw(&mut self, value: [u8; 1]) {
        self.luk_raw = value;
    }
    pub fn set_standard_luk(&mut self, value: u8) {
        self.standard_luk = value;
    }
    pub fn set_standard_luk_raw(&mut self, value: [u8; 1]) {
        self.standard_luk_raw = value;
    }
    pub fn set_att_power(&mut self, value: i16) {
        self.att_power = value;
    }
    pub fn set_att_power_raw(&mut self, value: [u8; 2]) {
        self.att_power_raw = value;
    }
    pub fn set_refining_power(&mut self, value: i16) {
        self.refining_power = value;
    }
    pub fn set_refining_power_raw(&mut self, value: [u8; 2]) {
        self.refining_power_raw = value;
    }
    pub fn set_max_matt_power(&mut self, value: i16) {
        self.max_matt_power = value;
    }
    pub fn set_max_matt_power_raw(&mut self, value: [u8; 2]) {
        self.max_matt_power_raw = value;
    }
    pub fn set_min_matt_power(&mut self, value: i16) {
        self.min_matt_power = value;
    }
    pub fn set_min_matt_power_raw(&mut self, value: [u8; 2]) {
        self.min_matt_power_raw = value;
    }
    pub fn set_itemdef_power(&mut self, value: i16) {
        self.itemdef_power = value;
    }
    pub fn set_itemdef_power_raw(&mut self, value: [u8; 2]) {
        self.itemdef_power_raw = value;
    }
    pub fn set_plusdef_power(&mut self, value: i16) {
        self.plusdef_power = value;
    }
    pub fn set_plusdef_power_raw(&mut self, value: [u8; 2]) {
        self.plusdef_power_raw = value;
    }
    pub fn set_mdef_power(&mut self, value: i16) {
        self.mdef_power = value;
    }
    pub fn set_mdef_power_raw(&mut self, value: [u8; 2]) {
        self.mdef_power_raw = value;
    }
    pub fn set_plusmdef_power(&mut self, value: i16) {
        self.plusmdef_power = value;
    }
    pub fn set_plusmdef_power_raw(&mut self, value: [u8; 2]) {
        self.plusmdef_power_raw = value;
    }
    pub fn set_hit_success_value(&mut self, value: i16) {
        self.hit_success_value = value;
    }
    pub fn set_hit_success_value_raw(&mut self, value: [u8; 2]) {
        self.hit_success_value_raw = value;
    }
    pub fn set_avoid_success_value(&mut self, value: i16) {
        self.avoid_success_value = value;
    }
    pub fn set_avoid_success_value_raw(&mut self, value: [u8; 2]) {
        self.avoid_success_value_raw = value;
    }
    pub fn set_plus_avoid_success_value(&mut self, value: i16) {
        self.plus_avoid_success_value = value;
    }
    pub fn set_plus_avoid_success_value_raw(&mut self, value: [u8; 2]) {
        self.plus_avoid_success_value_raw = value;
    }
    pub fn set_critical_success_value(&mut self, value: i16) {
        self.critical_success_value = value;
    }
    pub fn set_critical_success_value_raw(&mut self, value: [u8; 2]) {
        self.critical_success_value_raw = value;
    }
    pub fn set_aspd(&mut self, value: i16) {
        self.aspd = value;
    }
    pub fn set_aspd_raw(&mut self, value: [u8; 2]) {
        self.aspd_raw = value;
    }
    pub fn set_plus_aspd(&mut self, value: i16) {
        self.plus_aspd = value;
    }
    pub fn set_plus_aspd_raw(&mut self, value: [u8; 2]) {
        self.plus_aspd_raw = value;
    }
    pub fn new() -> PacketZcAckStatusGm {
        PacketZcAckStatusGm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x4]),
        packet_id_raw: [0x21, 0x4],
        str: 0,
        str_raw: [0; 1],
        standard_str: 0,
        standard_str_raw: [0; 1],
        agi: 0,
        agi_raw: [0; 1],
        standard_agi: 0,
        standard_agi_raw: [0; 1],
        vit: 0,
        vit_raw: [0; 1],
        standard_vit: 0,
        standard_vit_raw: [0; 1],
        int: 0,
        int_raw: [0; 1],
        standard_int: 0,
        standard_int_raw: [0; 1],
        dex: 0,
        dex_raw: [0; 1],
        standard_dex: 0,
        standard_dex_raw: [0; 1],
        luk: 0,
        luk_raw: [0; 1],
        standard_luk: 0,
        standard_luk_raw: [0; 1],
        att_power: 0,
        att_power_raw: [0; 2],
        refining_power: 0,
        refining_power_raw: [0; 2],
        max_matt_power: 0,
        max_matt_power_raw: [0; 2],
        min_matt_power: 0,
        min_matt_power_raw: [0; 2],
        itemdef_power: 0,
        itemdef_power_raw: [0; 2],
        plusdef_power: 0,
        plusdef_power_raw: [0; 2],
        mdef_power: 0,
        mdef_power_raw: [0; 2],
        plusmdef_power: 0,
        plusmdef_power_raw: [0; 2],
        hit_success_value: 0,
        hit_success_value_raw: [0; 2],
        avoid_success_value: 0,
        avoid_success_value_raw: [0; 2],
        plus_avoid_success_value: 0,
        plus_avoid_success_value_raw: [0; 2],
        critical_success_value: 0,
        critical_success_value_raw: [0; 2],
        aspd: 0,
        aspd_raw: [0; 2],
        plus_aspd: 0,
        plus_aspd_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckStatusGm {
    fn id(&self) -> &str {
       "0x0214"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckStatusGm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillmsg {
    pub fn packet_id() -> &'static str {
        "0x0215"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillmsg {
        let mut offset: usize = 0;
        PacketZcSkillmsg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg_no: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            msg_no_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.msg_no).unwrap();
        self.msg_no_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.msg_no_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_msg_no(&mut self, value: i32) {
        self.msg_no = value;
    }
    pub fn set_msg_no_raw(&mut self, value: [u8; 4]) {
        self.msg_no_raw = value;
    }
    pub fn new() -> PacketZcSkillmsg {
        PacketZcSkillmsg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x5]),
        packet_id_raw: [0x21, 0x5],
        msg_no: 0,
        msg_no_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSkillmsg {
    fn id(&self) -> &str {
       "0x0215"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillmsg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBabymsg {
    pub fn packet_id() -> &'static str {
        "0x0216"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBabymsg {
        let mut offset: usize = 0;
        PacketZcBabymsg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg_no: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            msg_no_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.msg_no).unwrap();
        self.msg_no_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.msg_no_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_msg_no(&mut self, value: i32) {
        self.msg_no = value;
    }
    pub fn set_msg_no_raw(&mut self, value: [u8; 4]) {
        self.msg_no_raw = value;
    }
    pub fn new() -> PacketZcBabymsg {
        PacketZcBabymsg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x6]),
        packet_id_raw: [0x21, 0x6],
        msg_no: 0,
        msg_no_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcBabymsg {
    fn id(&self) -> &str {
       "0x0216"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBabymsg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzBlacksmithRank {
    pub fn packet_id() -> &'static str {
        "0x0217"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzBlacksmithRank {
        let mut offset: usize = 0;
        PacketCzBlacksmithRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzBlacksmithRank {
        PacketCzBlacksmithRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x7]),
        packet_id_raw: [0x21, 0x7],
        }
    }
}

impl Packet for PacketCzBlacksmithRank {
    fn id(&self) -> &str {
       "0x0217"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzBlacksmithRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAlchemistRank {
    pub fn packet_id() -> &'static str {
        "0x0218"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAlchemistRank {
        let mut offset: usize = 0;
        PacketCzAlchemistRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzAlchemistRank {
        PacketCzAlchemistRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x8]),
        packet_id_raw: [0x21, 0x8],
        }
    }
}

impl Packet for PacketCzAlchemistRank {
    fn id(&self) -> &str {
       "0x0218"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAlchemistRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBlacksmithRank {
    pub fn packet_id() -> &'static str {
        "0x0219"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBlacksmithRank {
        let mut offset: usize = 0;
        PacketZcBlacksmithRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 10] = [0 as char; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            point: {
                let field =  {
                let mut dst: [i32; 10] = [0_i32; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as i32;
                }
                dst
            };
                field
            },
            point_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.point {
            wtr.write_i32::<LittleEndian>(item).unwrap();
        }
        self.point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 10]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 10]) {
        self.name_raw = value;
    }
    pub fn set_point(&mut self, value: [i32; 10]) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 10]) {
        self.point_raw = value;
    }
    pub fn new() -> PacketZcBlacksmithRank {
        PacketZcBlacksmithRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0x9]),
        packet_id_raw: [0x21, 0x9],
        name: [0 as char; 10],
        name_raw: [0; 10],
        point: [0; 10],
        point_raw: [0; 10],
        }
    }
}

impl Packet for PacketZcBlacksmithRank {
    fn id(&self) -> &str {
       "0x0219"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBlacksmithRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAlchemistRank {
    pub fn packet_id() -> &'static str {
        "0x021a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAlchemistRank {
        let mut offset: usize = 0;
        PacketZcAlchemistRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 10] = [0 as char; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            point: {
                let field =  {
                let mut dst: [i32; 10] = [0_i32; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as i32;
                }
                dst
            };
                field
            },
            point_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.point {
            wtr.write_i32::<LittleEndian>(item).unwrap();
        }
        self.point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 10]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 10]) {
        self.name_raw = value;
    }
    pub fn set_point(&mut self, value: [i32; 10]) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 10]) {
        self.point_raw = value;
    }
    pub fn new() -> PacketZcAlchemistRank {
        PacketZcAlchemistRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0xa]),
        packet_id_raw: [0x21, 0xa],
        name: [0 as char; 10],
        name_raw: [0; 10],
        point: [0; 10],
        point_raw: [0; 10],
        }
    }
}

impl Packet for PacketZcAlchemistRank {
    fn id(&self) -> &str {
       "0x021a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAlchemistRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBlacksmithPoint {
    pub fn packet_id() -> &'static str {
        "0x021b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBlacksmithPoint {
        let mut offset: usize = 0;
        PacketZcBlacksmithPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            total_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            total_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.total_point).unwrap();
        self.total_point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.total_point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn set_total_point(&mut self, value: i32) {
        self.total_point = value;
    }
    pub fn set_total_point_raw(&mut self, value: [u8; 4]) {
        self.total_point_raw = value;
    }
    pub fn new() -> PacketZcBlacksmithPoint {
        PacketZcBlacksmithPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0xb]),
        packet_id_raw: [0x21, 0xb],
        point: 0,
        point_raw: [0; 4],
        total_point: 0,
        total_point_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcBlacksmithPoint {
    fn id(&self) -> &str {
       "0x021b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBlacksmithPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAlchemistPoint {
    pub fn packet_id() -> &'static str {
        "0x021c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAlchemistPoint {
        let mut offset: usize = 0;
        PacketZcAlchemistPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            total_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            total_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.total_point).unwrap();
        self.total_point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.total_point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn set_total_point(&mut self, value: i32) {
        self.total_point = value;
    }
    pub fn set_total_point_raw(&mut self, value: [u8; 4]) {
        self.total_point_raw = value;
    }
    pub fn new() -> PacketZcAlchemistPoint {
        PacketZcAlchemistPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0xc]),
        packet_id_raw: [0x21, 0xc],
        point: 0,
        point_raw: [0; 4],
        total_point: 0,
        total_point_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAlchemistPoint {
    fn id(&self) -> &str {
       "0x021c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAlchemistPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzLesseffect {
    pub fn packet_id() -> &'static str {
        "0x021d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzLesseffect {
        let mut offset: usize = 0;
        PacketCzLesseffect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_less: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            is_less_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.is_less).unwrap();
        self.is_less_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.is_less_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_is_less(&mut self, value: i32) {
        self.is_less = value;
    }
    pub fn set_is_less_raw(&mut self, value: [u8; 4]) {
        self.is_less_raw = value;
    }
    pub fn new() -> PacketCzLesseffect {
        PacketCzLesseffect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0xd]),
        packet_id_raw: [0x21, 0xd],
        is_less: 0,
        is_less_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzLesseffect {
    fn id(&self) -> &str {
       "0x021d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzLesseffect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcLesseffect {
    pub fn packet_id() -> &'static str {
        "0x021e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcLesseffect {
        let mut offset: usize = 0;
        PacketZcLesseffect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_less: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            is_less_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.is_less).unwrap();
        self.is_less_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.is_less_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_is_less(&mut self, value: i32) {
        self.is_less = value;
    }
    pub fn set_is_less_raw(&mut self, value: [u8; 4]) {
        self.is_less_raw = value;
    }
    pub fn new() -> PacketZcLesseffect {
        PacketZcLesseffect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0xe]),
        packet_id_raw: [0x21, 0xe],
        is_less: 0,
        is_less_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcLesseffect {
    fn id(&self) -> &str {
       "0x021e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcLesseffect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPkinfo {
    pub fn packet_id() -> &'static str {
        "0x021f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPkinfo {
        let mut offset: usize = 0;
        PacketZcNotifyPkinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            win_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            win_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            lose_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            lose_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            kill_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            kill_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            killed_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            killed_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            expire_time: {
                let field = Filetime::from(&buffer[offset..offset + Filetime::base_len(packetver)], packetver);
                field
            },
            expire_time_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.win_point).unwrap();
        self.win_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.lose_point).unwrap();
        self.lose_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.kill_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.kill_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.killed_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.killed_name_raw = wtr.try_into().unwrap();
        self.expire_time.fill_raw_with_packetver(packetver);
        self.expire_time_raw = self.expire_time.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.win_point_raw.to_vec());
        wtr.append(&mut self.lose_point_raw.to_vec());
        wtr.append(&mut self.kill_name_raw.to_vec());
        wtr.append(&mut self.killed_name_raw.to_vec());
        wtr.append(&mut self.expire_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 57;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_win_point(&mut self, value: i32) {
        self.win_point = value;
    }
    pub fn set_win_point_raw(&mut self, value: [u8; 4]) {
        self.win_point_raw = value;
    }
    pub fn set_lose_point(&mut self, value: i32) {
        self.lose_point = value;
    }
    pub fn set_lose_point_raw(&mut self, value: [u8; 4]) {
        self.lose_point_raw = value;
    }
    pub fn set_kill_name(&mut self, value: [char; 24]) {
        self.kill_name = value;
    }
    pub fn set_kill_name_raw(&mut self, value: [u8; 24]) {
        self.kill_name_raw = value;
    }
    pub fn set_killed_name(&mut self, value: [char; 24]) {
        self.killed_name = value;
    }
    pub fn set_killed_name_raw(&mut self, value: [u8; 24]) {
        self.killed_name_raw = value;
    }
    pub fn set_expire_time(&mut self, value: Filetime) {
        self.expire_time = value;
    }
    pub fn set_expire_time_raw(&mut self, value: Vec<u8>) {
        self.expire_time_raw = value;
    }
    pub fn new() -> PacketZcNotifyPkinfo {
        PacketZcNotifyPkinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x21, 0xf]),
        packet_id_raw: [0x21, 0xf],
        win_point: 0,
        win_point_raw: [0; 4],
        lose_point: 0,
        lose_point_raw: [0; 4],
        kill_name: [0 as char; 24],
        kill_name_raw: [0; 24],
        killed_name: [0 as char; 24],
        killed_name_raw: [0; 24],
        expire_time: Filetime::new(),
        expire_time_raw: vec![],
        }
    }
}

impl Packet for PacketZcNotifyPkinfo {
    fn id(&self) -> &str {
       "0x021f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPkinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyCrazykiller {
    pub fn packet_id() -> &'static str {
        "0x0220"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyCrazykiller {
        let mut offset: usize = 0;
        PacketZcNotifyCrazykiller {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_crazy_killer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            is_crazy_killer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.is_crazy_killer).unwrap();
        self.is_crazy_killer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.is_crazy_killer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_is_crazy_killer(&mut self, value: i32) {
        self.is_crazy_killer = value;
    }
    pub fn set_is_crazy_killer_raw(&mut self, value: [u8; 4]) {
        self.is_crazy_killer_raw = value;
    }
    pub fn new() -> PacketZcNotifyCrazykiller {
        PacketZcNotifyCrazykiller {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x0]),
        packet_id_raw: [0x22, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        is_crazy_killer: 0,
        is_crazy_killer_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyCrazykiller {
    fn id(&self) -> &str {
       "0x0220"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyCrazykiller {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyWeaponitemlist {
    pub fn packet_id() -> &'static str {
        "0x0221"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyWeaponitemlist {
        let mut offset: usize = 0;
        let vec_type_len = RepairitemInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<RepairitemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(RepairitemInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcNotifyWeaponitemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<RepairitemInfo>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcNotifyWeaponitemlist {
        PacketZcNotifyWeaponitemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x1]),
        packet_id_raw: [0x22, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcNotifyWeaponitemlist {
    fn id(&self) -> &str {
       "0x0221"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyWeaponitemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqWeaponrefine {
    pub fn packet_id() -> &'static str {
        "0x0222"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqWeaponrefine {
        let mut offset: usize = 0;
        PacketCzReqWeaponrefine {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i32) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 4]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketCzReqWeaponrefine {
        PacketCzReqWeaponrefine {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x2]),
        packet_id_raw: [0x22, 0x2],
        index: 0,
        index_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqWeaponrefine {
    fn id(&self) -> &str {
       "0x0222"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqWeaponrefine {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckWeaponrefine {
    pub fn packet_id() -> &'static str {
        "0x0223"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckWeaponrefine {
        let mut offset: usize = 0;
        PacketZcAckWeaponrefine {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            msg_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.msg).unwrap();
        self.msg_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_msg(&mut self, value: i32) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: [u8; 4]) {
        self.msg_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketZcAckWeaponrefine {
        PacketZcAckWeaponrefine {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x3]),
        packet_id_raw: [0x22, 0x3],
        msg: 0,
        msg_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckWeaponrefine {
    fn id(&self) -> &str {
       "0x0223"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckWeaponrefine {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcTaekwonPoint {
    pub fn packet_id() -> &'static str {
        "0x0224"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcTaekwonPoint {
        let mut offset: usize = 0;
        PacketZcTaekwonPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            total_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            total_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.total_point).unwrap();
        self.total_point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.total_point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn set_total_point(&mut self, value: i32) {
        self.total_point = value;
    }
    pub fn set_total_point_raw(&mut self, value: [u8; 4]) {
        self.total_point_raw = value;
    }
    pub fn new() -> PacketZcTaekwonPoint {
        PacketZcTaekwonPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x4]),
        packet_id_raw: [0x22, 0x4],
        point: 0,
        point_raw: [0; 4],
        total_point: 0,
        total_point_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcTaekwonPoint {
    fn id(&self) -> &str {
       "0x0224"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcTaekwonPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzTaekwonRank {
    pub fn packet_id() -> &'static str {
        "0x0225"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzTaekwonRank {
        let mut offset: usize = 0;
        PacketCzTaekwonRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzTaekwonRank {
        PacketCzTaekwonRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x5]),
        packet_id_raw: [0x22, 0x5],
        }
    }
}

impl Packet for PacketCzTaekwonRank {
    fn id(&self) -> &str {
       "0x0225"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzTaekwonRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcTaekwonRank {
    pub fn packet_id() -> &'static str {
        "0x0226"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcTaekwonRank {
        let mut offset: usize = 0;
        PacketZcTaekwonRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 10] = [0 as char; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            point: {
                let field =  {
                let mut dst: [i32; 10] = [0_i32; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as i32;
                }
                dst
            };
                field
            },
            point_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.point {
            wtr.write_i32::<LittleEndian>(item).unwrap();
        }
        self.point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 10]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 10]) {
        self.name_raw = value;
    }
    pub fn set_point(&mut self, value: [i32; 10]) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 10]) {
        self.point_raw = value;
    }
    pub fn new() -> PacketZcTaekwonRank {
        PacketZcTaekwonRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x6]),
        packet_id_raw: [0x22, 0x6],
        name: [0 as char; 10],
        name_raw: [0; 10],
        point: [0; 10],
        point_raw: [0; 10],
        }
    }
}

impl Packet for PacketZcTaekwonRank {
    fn id(&self) -> &str {
       "0x0226"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcTaekwonRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGameGuard {
    pub fn packet_id() -> &'static str {
        "0x0227"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGameGuard {
        let mut offset: usize = 0;
        PacketZcGameGuard {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_data: {
                let field =  {
                let mut dst: [u32; 4] = [0_u32; 4];
                for (index, byte) in buffer[offset..offset + 4].iter().enumerate() {
                    dst[index] = *byte as u32;
                }
                dst
            };
                field
            },
            auth_data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.auth_data {
            wtr.write_u32::<LittleEndian>(item).unwrap();
        }
        self.auth_data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auth_data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auth_data(&mut self, value: [u32; 4]) {
        self.auth_data = value;
    }
    pub fn set_auth_data_raw(&mut self, value: [u8; 4]) {
        self.auth_data_raw = value;
    }
    pub fn new() -> PacketZcGameGuard {
        PacketZcGameGuard {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x7]),
        packet_id_raw: [0x22, 0x7],
        auth_data: [0; 4],
        auth_data_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcGameGuard {
    fn id(&self) -> &str {
       "0x0227"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGameGuard {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAckGameGuard {
    pub fn packet_id() -> &'static str {
        "0x0228"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAckGameGuard {
        let mut offset: usize = 0;
        PacketCzAckGameGuard {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_data: {
                let field =  {
                let mut dst: [u32; 4] = [0_u32; 4];
                for (index, byte) in buffer[offset..offset + 4].iter().enumerate() {
                    dst[index] = *byte as u32;
                }
                dst
            };
                field
            },
            auth_data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.auth_data {
            wtr.write_u32::<LittleEndian>(item).unwrap();
        }
        self.auth_data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auth_data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auth_data(&mut self, value: [u32; 4]) {
        self.auth_data = value;
    }
    pub fn set_auth_data_raw(&mut self, value: [u8; 4]) {
        self.auth_data_raw = value;
    }
    pub fn new() -> PacketCzAckGameGuard {
        PacketCzAckGameGuard {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x8]),
        packet_id_raw: [0x22, 0x8],
        auth_data: [0; 4],
        auth_data_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAckGameGuard {
    fn id(&self) -> &str {
       "0x0228"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAckGameGuard {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStateChange3 {
    pub fn packet_id() -> &'static str {
        "0x0229"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStateChange3 {
        let mut offset: usize = 0;
        PacketZcStateChange3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 15;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn new() -> PacketZcStateChange3 {
        PacketZcStateChange3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0x9]),
        packet_id_raw: [0x22, 0x9],
        aid: 0,
        aid_raw: [0; 4],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcStateChange3 {
    fn id(&self) -> &str {
       "0x0229"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStateChange3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry3 {
    pub fn packet_id() -> &'static str {
        "0x022a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry3 {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 58;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry3 {
        PacketZcNotifyStandentry3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0xa]),
        packet_id_raw: [0x22, 0xa],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyStandentry3 {
    fn id(&self) -> &str {
       "0x022a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyNewentry3 {
    pub fn packet_id() -> &'static str {
        "0x022b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyNewentry3 {
        let mut offset: usize = 0;
        PacketZcNotifyNewentry3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 57;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyNewentry3 {
        PacketZcNotifyNewentry3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0xb]),
        packet_id_raw: [0x22, 0xb],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyNewentry3 {
    fn id(&self) -> &str {
       "0x022b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyNewentry3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMoveentry3 {
    pub fn packet_id() -> &'static str {
        "0x022c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMoveentry3 {
        let mut offset: usize = 0;
        PacketZcNotifyMoveentry3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u16; 6] = [0_u16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 65;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u16; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn new() -> PacketZcNotifyMoveentry3 {
        PacketZcNotifyMoveentry3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0xc]),
        packet_id_raw: [0x22, 0xc],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMoveentry3 {
    fn id(&self) -> &str {
       "0x022c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMoveentry3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCommandMer {
    pub fn packet_id() -> &'static str {
        "0x022d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCommandMer {
        let mut offset: usize = 0;
        PacketCzCommandMer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            command: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            command_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.command).unwrap();
        self.command_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.command_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_command(&mut self, value: i8) {
        self.command = value;
    }
    pub fn set_command_raw(&mut self, value: [u8; 1]) {
        self.command_raw = value;
    }
    pub fn new() -> PacketCzCommandMer {
        PacketCzCommandMer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0xd]),
        packet_id_raw: [0x22, 0xd],
        atype: 0,
        atype_raw: [0; 2],
        command: 0,
        command_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzCommandMer {
    fn id(&self) -> &str {
       "0x022d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCommandMer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPropertyHomun {
    pub fn packet_id() -> &'static str {
        "0x022e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPropertyHomun {
        let mut offset: usize = 0;
        PacketZcPropertyHomun {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sz_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            b_modified: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            b_modified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            n_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            n_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            n_fullness: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            n_fullness_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            n_relationship: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            n_relationship_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            matk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            matk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hit: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hit_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            critical: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            critical_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            def: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            def_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            flee: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            flee_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_sp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            skpoint: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skpoint_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atkrange: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atkrange_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.b_modified).unwrap();
        self.b_modified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.n_level).unwrap();
        self.n_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.n_fullness).unwrap();
        self.n_fullness_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.n_relationship).unwrap();
        self.n_relationship_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atk).unwrap();
        self.atk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.matk).unwrap();
        self.matk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hit).unwrap();
        self.hit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.critical).unwrap();
        self.critical_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.def).unwrap();
        self.def_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef).unwrap();
        self.mdef_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.flee).unwrap();
        self.flee_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.aspd).unwrap();
        self.aspd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sp).unwrap();
        self.sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_sp).unwrap();
        self.max_sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.exp).unwrap();
        self.exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_exp).unwrap();
        self.max_exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.skpoint).unwrap();
        self.skpoint_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atkrange).unwrap();
        self.atkrange_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.sz_name_raw.to_vec());
        wtr.append(&mut self.b_modified_raw.to_vec());
        wtr.append(&mut self.n_level_raw.to_vec());
        wtr.append(&mut self.n_fullness_raw.to_vec());
        wtr.append(&mut self.n_relationship_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atk_raw.to_vec());
        wtr.append(&mut self.matk_raw.to_vec());
        wtr.append(&mut self.hit_raw.to_vec());
        wtr.append(&mut self.critical_raw.to_vec());
        wtr.append(&mut self.def_raw.to_vec());
        wtr.append(&mut self.mdef_raw.to_vec());
        wtr.append(&mut self.flee_raw.to_vec());
        wtr.append(&mut self.aspd_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.sp_raw.to_vec());
        wtr.append(&mut self.max_sp_raw.to_vec());
        wtr.append(&mut self.exp_raw.to_vec());
        wtr.append(&mut self.max_exp_raw.to_vec());
        wtr.append(&mut self.skpoint_raw.to_vec());
        wtr.append(&mut self.atkrange_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 71;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_sz_name(&mut self, value: [char; 24]) {
        self.sz_name = value;
    }
    pub fn set_sz_name_raw(&mut self, value: [u8; 24]) {
        self.sz_name_raw = value;
    }
    pub fn set_b_modified(&mut self, value: u8) {
        self.b_modified = value;
    }
    pub fn set_b_modified_raw(&mut self, value: [u8; 1]) {
        self.b_modified_raw = value;
    }
    pub fn set_n_level(&mut self, value: i16) {
        self.n_level = value;
    }
    pub fn set_n_level_raw(&mut self, value: [u8; 2]) {
        self.n_level_raw = value;
    }
    pub fn set_n_fullness(&mut self, value: i16) {
        self.n_fullness = value;
    }
    pub fn set_n_fullness_raw(&mut self, value: [u8; 2]) {
        self.n_fullness_raw = value;
    }
    pub fn set_n_relationship(&mut self, value: i16) {
        self.n_relationship = value;
    }
    pub fn set_n_relationship_raw(&mut self, value: [u8; 2]) {
        self.n_relationship_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atk(&mut self, value: i16) {
        self.atk = value;
    }
    pub fn set_atk_raw(&mut self, value: [u8; 2]) {
        self.atk_raw = value;
    }
    pub fn set_matk(&mut self, value: i16) {
        self.matk = value;
    }
    pub fn set_matk_raw(&mut self, value: [u8; 2]) {
        self.matk_raw = value;
    }
    pub fn set_hit(&mut self, value: i16) {
        self.hit = value;
    }
    pub fn set_hit_raw(&mut self, value: [u8; 2]) {
        self.hit_raw = value;
    }
    pub fn set_critical(&mut self, value: i16) {
        self.critical = value;
    }
    pub fn set_critical_raw(&mut self, value: [u8; 2]) {
        self.critical_raw = value;
    }
    pub fn set_def(&mut self, value: i16) {
        self.def = value;
    }
    pub fn set_def_raw(&mut self, value: [u8; 2]) {
        self.def_raw = value;
    }
    pub fn set_mdef(&mut self, value: i16) {
        self.mdef = value;
    }
    pub fn set_mdef_raw(&mut self, value: [u8; 2]) {
        self.mdef_raw = value;
    }
    pub fn set_flee(&mut self, value: i16) {
        self.flee = value;
    }
    pub fn set_flee_raw(&mut self, value: [u8; 2]) {
        self.flee_raw = value;
    }
    pub fn set_aspd(&mut self, value: i16) {
        self.aspd = value;
    }
    pub fn set_aspd_raw(&mut self, value: [u8; 2]) {
        self.aspd_raw = value;
    }
    pub fn set_hp(&mut self, value: i16) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 2]) {
        self.hp_raw = value;
    }
    pub fn set_max_hp(&mut self, value: i16) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 2]) {
        self.max_hp_raw = value;
    }
    pub fn set_sp(&mut self, value: i16) {
        self.sp = value;
    }
    pub fn set_sp_raw(&mut self, value: [u8; 2]) {
        self.sp_raw = value;
    }
    pub fn set_max_sp(&mut self, value: i16) {
        self.max_sp = value;
    }
    pub fn set_max_sp_raw(&mut self, value: [u8; 2]) {
        self.max_sp_raw = value;
    }
    pub fn set_exp(&mut self, value: i32) {
        self.exp = value;
    }
    pub fn set_exp_raw(&mut self, value: [u8; 4]) {
        self.exp_raw = value;
    }
    pub fn set_max_exp(&mut self, value: i32) {
        self.max_exp = value;
    }
    pub fn set_max_exp_raw(&mut self, value: [u8; 4]) {
        self.max_exp_raw = value;
    }
    pub fn set_skpoint(&mut self, value: i16) {
        self.skpoint = value;
    }
    pub fn set_skpoint_raw(&mut self, value: [u8; 2]) {
        self.skpoint_raw = value;
    }
    pub fn set_atkrange(&mut self, value: i16) {
        self.atkrange = value;
    }
    pub fn set_atkrange_raw(&mut self, value: [u8; 2]) {
        self.atkrange_raw = value;
    }
    pub fn new() -> PacketZcPropertyHomun {
        PacketZcPropertyHomun {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x22, 0xe]),
        packet_id_raw: [0x22, 0xe],
        sz_name: [0 as char; 24],
        sz_name_raw: [0; 24],
        b_modified: 0,
        b_modified_raw: [0; 1],
        n_level: 0,
        n_level_raw: [0; 2],
        n_fullness: 0,
        n_fullness_raw: [0; 2],
        n_relationship: 0,
        n_relationship_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atk: 0,
        atk_raw: [0; 2],
        matk: 0,
        matk_raw: [0; 2],
        hit: 0,
        hit_raw: [0; 2],
        critical: 0,
        critical_raw: [0; 2],
        def: 0,
        def_raw: [0; 2],
        mdef: 0,
        mdef_raw: [0; 2],
        flee: 0,
        flee_raw: [0; 2],
        aspd: 0,
        aspd_raw: [0; 2],
        hp: 0,
        hp_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 2],
        sp: 0,
        sp_raw: [0; 2],
        max_sp: 0,
        max_sp_raw: [0; 2],
        exp: 0,
        exp_raw: [0; 4],
        max_exp: 0,
        max_exp_raw: [0; 4],
        skpoint: 0,
        skpoint_raw: [0; 2],
        atkrange: 0,
        atkrange_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcPropertyHomun {
    fn id(&self) -> &str {
       "0x022e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPropertyHomun {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcChangestateMer {
    pub fn packet_id() -> &'static str {
        "0x0230"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcChangestateMer {
        let mut offset: usize = 0;
        PacketZcChangestateMer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            data: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.data).unwrap();
        self.data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_state(&mut self, value: i8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_data(&mut self, value: i32) {
        self.data = value;
    }
    pub fn set_data_raw(&mut self, value: [u8; 4]) {
        self.data_raw = value;
    }
    pub fn new() -> PacketZcChangestateMer {
        PacketZcChangestateMer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0x0]),
        packet_id_raw: [0x23, 0x0],
        atype: 0,
        atype_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        data: 0,
        data_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcChangestateMer {
    fn id(&self) -> &str {
       "0x0230"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcChangestateMer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRenameMer {
    pub fn packet_id() -> &'static str {
        "0x0231"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRenameMer {
        let mut offset: usize = 0;
        PacketCzRenameMer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketCzRenameMer {
        PacketCzRenameMer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0x1]),
        packet_id_raw: [0x23, 0x1],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzRenameMer {
    fn id(&self) -> &str {
       "0x0231"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRenameMer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestMovenpc {
    pub fn packet_id() -> &'static str {
        "0x0232"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestMovenpc {
        let mut offset: usize = 0;
        PacketCzRequestMovenpc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dest: {
                let field =  {
                let mut dst: [char; 3] = [0 as char; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            dest_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.dest {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.dest_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.dest_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_dest(&mut self, value: [char; 3]) {
        self.dest = value;
    }
    pub fn set_dest_raw(&mut self, value: [u8; 3]) {
        self.dest_raw = value;
    }
    pub fn new() -> PacketCzRequestMovenpc {
        PacketCzRequestMovenpc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0x2]),
        packet_id_raw: [0x23, 0x2],
        gid: 0,
        gid_raw: [0; 4],
        dest: [0 as char; 3],
        dest_raw: [0; 3],
        }
    }
}

impl Packet for PacketCzRequestMovenpc {
    fn id(&self) -> &str {
       "0x0232"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestMovenpc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestActnpc {
    pub fn packet_id() -> &'static str {
        "0x0233"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestActnpc {
        let mut offset: usize = 0;
        PacketCzRequestActnpc {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketCzRequestActnpc {
        PacketCzRequestActnpc {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0x3]),
        packet_id_raw: [0x23, 0x3],
        gid: 0,
        gid_raw: [0; 4],
        target_gid: 0,
        target_gid_raw: [0; 4],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzRequestActnpc {
    fn id(&self) -> &str {
       "0x0233"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestActnpc {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestMovetoowner {
    pub fn packet_id() -> &'static str {
        "0x0234"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestMovetoowner {
        let mut offset: usize = 0;
        PacketCzRequestMovetoowner {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketCzRequestMovetoowner {
        PacketCzRequestMovetoowner {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0x4]),
        packet_id_raw: [0x23, 0x4],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzRequestMovetoowner {
    fn id(&self) -> &str {
       "0x0234"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestMovetoowner {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqStorePassword {
    pub fn packet_id() -> &'static str {
        "0x023a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqStorePassword {
        let mut offset: usize = 0;
        PacketZcReqStorePassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            info_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.info).unwrap();
        self.info_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: i16) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: [u8; 2]) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcReqStorePassword {
        PacketZcReqStorePassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0xa]),
        packet_id_raw: [0x23, 0xa],
        info: 0,
        info_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcReqStorePassword {
    fn id(&self) -> &str {
       "0x023a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqStorePassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAckStorePassword {
    pub fn packet_id() -> &'static str {
        "0x023b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAckStorePassword {
        let mut offset: usize = 0;
        PacketCzAckStorePassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            password: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            password_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            new_password: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            new_password_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.password {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.password_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.new_password {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.new_password_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.password_raw.to_vec());
        wtr.append(&mut self.new_password_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 36;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_password(&mut self, value: [char; 16]) {
        self.password = value;
    }
    pub fn set_password_raw(&mut self, value: [u8; 16]) {
        self.password_raw = value;
    }
    pub fn set_new_password(&mut self, value: [char; 16]) {
        self.new_password = value;
    }
    pub fn set_new_password_raw(&mut self, value: [u8; 16]) {
        self.new_password_raw = value;
    }
    pub fn new() -> PacketCzAckStorePassword {
        PacketCzAckStorePassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0xb]),
        packet_id_raw: [0x23, 0xb],
        atype: 0,
        atype_raw: [0; 2],
        password: [0 as char; 16],
        password_raw: [0; 16],
        new_password: [0 as char; 16],
        new_password_raw: [0; 16],
        }
    }
}

impl Packet for PacketCzAckStorePassword {
    fn id(&self) -> &str {
       "0x023b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAckStorePassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcResultStorePassword {
    pub fn packet_id() -> &'static str {
        "0x023c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcResultStorePassword {
        let mut offset: usize = 0;
        PacketZcResultStorePassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_count).unwrap();
        self.error_count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.error_count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_error_count(&mut self, value: i16) {
        self.error_count = value;
    }
    pub fn set_error_count_raw(&mut self, value: [u8; 2]) {
        self.error_count_raw = value;
    }
    pub fn new() -> PacketZcResultStorePassword {
        PacketZcResultStorePassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0xc]),
        packet_id_raw: [0x23, 0xc],
        result: 0,
        result_raw: [0; 2],
        error_count: 0,
        error_count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcResultStorePassword {
    fn id(&self) -> &str {
       "0x023c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcResultStorePassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcEventResult {
    pub fn packet_id() -> &'static str {
        "0x023d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcEventResult {
        let mut offset: usize = 0;
        PacketAcEventResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            event_item_count: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            event_item_count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.event_item_count).unwrap();
        self.event_item_count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.event_item_count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_event_item_count(&mut self, value: u32) {
        self.event_item_count = value;
    }
    pub fn set_event_item_count_raw(&mut self, value: [u8; 4]) {
        self.event_item_count_raw = value;
    }
    pub fn new() -> PacketAcEventResult {
        PacketAcEventResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0xd]),
        packet_id_raw: [0x23, 0xd],
        event_item_count: 0,
        event_item_count_raw: [0; 4],
        }
    }
}

impl Packet for PacketAcEventResult {
    fn id(&self) -> &str {
       "0x023d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcEventResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcRequestCharacterPassword {
    pub fn packet_id() -> &'static str {
        "0x023e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcRequestCharacterPassword {
        let mut offset: usize = 0;
        PacketHcRequestCharacterPassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dummy_value: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dummy_value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dummy_value).unwrap();
        self.dummy_value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.dummy_value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_dummy_value(&mut self, value: u32) {
        self.dummy_value = value;
    }
    pub fn set_dummy_value_raw(&mut self, value: [u8; 4]) {
        self.dummy_value_raw = value;
    }
    pub fn new() -> PacketHcRequestCharacterPassword {
        PacketHcRequestCharacterPassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0xe]),
        packet_id_raw: [0x23, 0xe],
        result: 0,
        result_raw: [0; 2],
        dummy_value: 0,
        dummy_value_raw: [0; 4],
        }
    }
}

impl Packet for PacketHcRequestCharacterPassword {
    fn id(&self) -> &str {
       "0x023e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcRequestCharacterPassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailGetList {
    pub fn packet_id() -> &'static str {
        "0x023f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailGetList {
        let mut offset: usize = 0;
        PacketCzMailGetList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzMailGetList {
        PacketCzMailGetList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x23, 0xf]),
        packet_id_raw: [0x23, 0xf],
        }
    }
}

impl Packet for PacketCzMailGetList {
    fn id(&self) -> &str {
       "0x023f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailGetList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMailReqGetList {
    pub fn packet_id() -> &'static str {
        "0x0240"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMailReqGetList {
        let mut offset: usize = 0;
        let vec_type_len = MailList::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<MailList> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(MailList::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcMailReqGetList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_number: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_number_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            mail_list: {
                let field = vec_field.clone();
                field
            },
            mail_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_number).unwrap();
        self.mail_number_raw = wtr.try_into().unwrap();
        self.mail_list_raw = {
            self.mail_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.mail_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.mail_number_raw.to_vec());
        self.mail_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_mail_number(&mut self, value: i32) {
        self.mail_number = value;
    }
    pub fn set_mail_number_raw(&mut self, value: [u8; 4]) {
        self.mail_number_raw = value;
    }
    pub fn set_mail_list(&mut self, value: Vec<MailList>) {
        self.mail_list = value;
    }
    pub fn set_mail_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.mail_list_raw = value;
    }
    pub fn new() -> PacketZcMailReqGetList {
        PacketZcMailReqGetList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x0]),
        packet_id_raw: [0x24, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        mail_number: 0,
        mail_number_raw: [0; 4],
        mail_list: vec![],
        mail_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcMailReqGetList {
    fn id(&self) -> &str {
       "0x0240"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMailReqGetList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailOpen {
    pub fn packet_id() -> &'static str {
        "0x0241"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailOpen {
        let mut offset: usize = 0;
        PacketCzMailOpen {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn new() -> PacketCzMailOpen {
        PacketCzMailOpen {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x1]),
        packet_id_raw: [0x24, 0x1],
        mail_id: 0,
        mail_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMailOpen {
    fn id(&self) -> &str {
       "0x0241"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailOpen {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMailReqOpen {
    pub fn packet_id() -> &'static str {
        "0x0242"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMailReqOpen {
        let mut offset: usize = 0;
        PacketZcMailReqOpen {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            header: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            header_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            from_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            from_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            delete_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delete_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            money: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            money_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            msg_len: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            msg_len_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.header {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.header_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.from_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.from_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.delete_time).unwrap();
        self.delete_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.money).unwrap();
        self.money_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_u8(self.msg_len).unwrap();
        self.msg_len_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        wtr.append(&mut self.header_raw.to_vec());
        wtr.append(&mut self.from_name_raw.to_vec());
        wtr.append(&mut self.delete_time_raw.to_vec());
        wtr.append(&mut self.money_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.msg_len_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 99;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn set_header(&mut self, value: [char; 40]) {
        self.header = value;
    }
    pub fn set_header_raw(&mut self, value: [u8; 40]) {
        self.header_raw = value;
    }
    pub fn set_from_name(&mut self, value: [char; 24]) {
        self.from_name = value;
    }
    pub fn set_from_name_raw(&mut self, value: [u8; 24]) {
        self.from_name_raw = value;
    }
    pub fn set_delete_time(&mut self, value: i32) {
        self.delete_time = value;
    }
    pub fn set_delete_time_raw(&mut self, value: [u8; 4]) {
        self.delete_time_raw = value;
    }
    pub fn set_money(&mut self, value: u32) {
        self.money = value;
    }
    pub fn set_money_raw(&mut self, value: [u8; 4]) {
        self.money_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_msg_len(&mut self, value: u8) {
        self.msg_len = value;
    }
    pub fn set_msg_len_raw(&mut self, value: [u8; 1]) {
        self.msg_len_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcMailReqOpen {
        PacketZcMailReqOpen {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x2]),
        packet_id_raw: [0x24, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        mail_id: 0,
        mail_id_raw: [0; 4],
        header: [0 as char; 40],
        header_raw: [0; 40],
        from_name: [0 as char; 24],
        from_name_raw: [0; 24],
        delete_time: 0,
        delete_time_raw: [0; 4],
        money: 0,
        money_raw: [0; 4],
        count: 0,
        count_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        msg_len: 0,
        msg_len_raw: [0; 1],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcMailReqOpen {
    fn id(&self) -> &str {
       "0x0242"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMailReqOpen {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailDelete {
    pub fn packet_id() -> &'static str {
        "0x0243"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailDelete {
        let mut offset: usize = 0;
        PacketCzMailDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn new() -> PacketCzMailDelete {
        PacketCzMailDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x3]),
        packet_id_raw: [0x24, 0x3],
        mail_id: 0,
        mail_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMailDelete {
    fn id(&self) -> &str {
       "0x0243"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailGetItem {
    pub fn packet_id() -> &'static str {
        "0x0244"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailGetItem {
        let mut offset: usize = 0;
        PacketCzMailGetItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn new() -> PacketCzMailGetItem {
        PacketCzMailGetItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x4]),
        packet_id_raw: [0x24, 0x4],
        mail_id: 0,
        mail_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMailGetItem {
    fn id(&self) -> &str {
       "0x0244"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailGetItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMailReqGetItem {
    pub fn packet_id() -> &'static str {
        "0x0245"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMailReqGetItem {
        let mut offset: usize = 0;
        PacketZcMailReqGetItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcMailReqGetItem {
        PacketZcMailReqGetItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x5]),
        packet_id_raw: [0x24, 0x5],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcMailReqGetItem {
    fn id(&self) -> &str {
       "0x0245"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMailReqGetItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailResetItem {
    pub fn packet_id() -> &'static str {
        "0x0246"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailResetItem {
        let mut offset: usize = 0;
        PacketCzMailResetItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzMailResetItem {
        PacketCzMailResetItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x6]),
        packet_id_raw: [0x24, 0x6],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzMailResetItem {
    fn id(&self) -> &str {
       "0x0246"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailResetItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailAddItem {
    pub fn packet_id() -> &'static str {
        "0x0247"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailAddItem {
        let mut offset: usize = 0;
        PacketCzMailAddItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzMailAddItem {
        PacketCzMailAddItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x7]),
        packet_id_raw: [0x24, 0x7],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMailAddItem {
    fn id(&self) -> &str {
       "0x0247"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailAddItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMailSend {
    pub fn packet_id() -> &'static str {
        "0x0248"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMailSend {
        let mut offset: usize = 0;
        PacketCzMailSend {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            receive_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            receive_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            header: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            header_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            msg_len: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            msg_len_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.receive_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.receive_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.header {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.header_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.msg_len).unwrap();
        self.msg_len_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.receive_name_raw.to_vec());
        wtr.append(&mut self.header_raw.to_vec());
        wtr.append(&mut self.msg_len_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 71;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_receive_name(&mut self, value: [char; 24]) {
        self.receive_name = value;
    }
    pub fn set_receive_name_raw(&mut self, value: [u8; 24]) {
        self.receive_name_raw = value;
    }
    pub fn set_header(&mut self, value: [char; 40]) {
        self.header = value;
    }
    pub fn set_header_raw(&mut self, value: [u8; 40]) {
        self.header_raw = value;
    }
    pub fn set_msg_len(&mut self, value: u32) {
        self.msg_len = value;
    }
    pub fn set_msg_len_raw(&mut self, value: [u8; 4]) {
        self.msg_len_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzMailSend {
        PacketCzMailSend {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x8]),
        packet_id_raw: [0x24, 0x8],
        packet_length: 0,
        packet_length_raw: [0; 2],
        receive_name: [0 as char; 24],
        receive_name_raw: [0; 24],
        header: [0 as char; 40],
        header_raw: [0; 40],
        msg_len: 0,
        msg_len_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzMailSend {
    fn id(&self) -> &str {
       "0x0248"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMailSend {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMailReqSend {
    pub fn packet_id() -> &'static str {
        "0x0249"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMailReqSend {
        let mut offset: usize = 0;
        PacketZcMailReqSend {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcMailReqSend {
        PacketZcMailReqSend {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0x9]),
        packet_id_raw: [0x24, 0x9],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcMailReqSend {
    fn id(&self) -> &str {
       "0x0249"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMailReqSend {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMailReceive {
    pub fn packet_id() -> &'static str {
        "0x024a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMailReceive {
        let mut offset: usize = 0;
        PacketZcMailReceive {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            header: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            header_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            from_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            from_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.header {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.header_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.from_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.from_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        wtr.append(&mut self.header_raw.to_vec());
        wtr.append(&mut self.from_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 70;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: u32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn set_header(&mut self, value: [char; 40]) {
        self.header = value;
    }
    pub fn set_header_raw(&mut self, value: [u8; 40]) {
        self.header_raw = value;
    }
    pub fn set_from_name(&mut self, value: [char; 24]) {
        self.from_name = value;
    }
    pub fn set_from_name_raw(&mut self, value: [u8; 24]) {
        self.from_name_raw = value;
    }
    pub fn new() -> PacketZcMailReceive {
        PacketZcMailReceive {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0xa]),
        packet_id_raw: [0x24, 0xa],
        mail_id: 0,
        mail_id_raw: [0; 4],
        header: [0 as char; 40],
        header_raw: [0; 40],
        from_name: [0 as char; 24],
        from_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcMailReceive {
    fn id(&self) -> &str {
       "0x024a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMailReceive {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionCreate {
    pub fn packet_id() -> &'static str {
        "0x024b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionCreate {
        let mut offset: usize = 0;
        PacketCzAuctionCreate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzAuctionCreate {
        PacketCzAuctionCreate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0xb]),
        packet_id_raw: [0x24, 0xb],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzAuctionCreate {
    fn id(&self) -> &str {
       "0x024b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionCreate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionAddItem {
    pub fn packet_id() -> &'static str {
        "0x024c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionAddItem {
        let mut offset: usize = 0;
        PacketCzAuctionAddItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzAuctionAddItem {
        PacketCzAuctionAddItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0xc]),
        packet_id_raw: [0x24, 0xc],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAuctionAddItem {
    fn id(&self) -> &str {
       "0x024c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionAddItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionAdd {
    pub fn packet_id() -> &'static str {
        "0x024d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionAdd {
        let mut offset: usize = 0;
        PacketCzAuctionAdd {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            now_money: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            now_money_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_money: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_money_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            delete_hour: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            delete_hour_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.now_money).unwrap();
        self.now_money_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.max_money).unwrap();
        self.max_money_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.delete_hour).unwrap();
        self.delete_hour_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.now_money_raw.to_vec());
        wtr.append(&mut self.max_money_raw.to_vec());
        wtr.append(&mut self.delete_hour_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_now_money(&mut self, value: u32) {
        self.now_money = value;
    }
    pub fn set_now_money_raw(&mut self, value: [u8; 4]) {
        self.now_money_raw = value;
    }
    pub fn set_max_money(&mut self, value: u32) {
        self.max_money = value;
    }
    pub fn set_max_money_raw(&mut self, value: [u8; 4]) {
        self.max_money_raw = value;
    }
    pub fn set_delete_hour(&mut self, value: i16) {
        self.delete_hour = value;
    }
    pub fn set_delete_hour_raw(&mut self, value: [u8; 2]) {
        self.delete_hour_raw = value;
    }
    pub fn new() -> PacketCzAuctionAdd {
        PacketCzAuctionAdd {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0xd]),
        packet_id_raw: [0x24, 0xd],
        now_money: 0,
        now_money_raw: [0; 4],
        max_money: 0,
        max_money_raw: [0; 4],
        delete_hour: 0,
        delete_hour_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzAuctionAdd {
    fn id(&self) -> &str {
       "0x024d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionAdd {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionAddCancel {
    pub fn packet_id() -> &'static str {
        "0x024e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionAddCancel {
        let mut offset: usize = 0;
        PacketCzAuctionAddCancel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auction_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auction_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.auction_id).unwrap();
        self.auction_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auction_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auction_id(&mut self, value: u32) {
        self.auction_id = value;
    }
    pub fn set_auction_id_raw(&mut self, value: [u8; 4]) {
        self.auction_id_raw = value;
    }
    pub fn new() -> PacketCzAuctionAddCancel {
        PacketCzAuctionAddCancel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0xe]),
        packet_id_raw: [0x24, 0xe],
        auction_id: 0,
        auction_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAuctionAddCancel {
    fn id(&self) -> &str {
       "0x024e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionAddCancel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionBuy {
    pub fn packet_id() -> &'static str {
        "0x024f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionBuy {
        let mut offset: usize = 0;
        PacketCzAuctionBuy {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auction_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auction_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            money: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            money_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.auction_id).unwrap();
        self.auction_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.money).unwrap();
        self.money_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auction_id_raw.to_vec());
        wtr.append(&mut self.money_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auction_id(&mut self, value: u32) {
        self.auction_id = value;
    }
    pub fn set_auction_id_raw(&mut self, value: [u8; 4]) {
        self.auction_id_raw = value;
    }
    pub fn set_money(&mut self, value: u32) {
        self.money = value;
    }
    pub fn set_money_raw(&mut self, value: [u8; 4]) {
        self.money_raw = value;
    }
    pub fn new() -> PacketCzAuctionBuy {
        PacketCzAuctionBuy {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x24, 0xf]),
        packet_id_raw: [0x24, 0xf],
        auction_id: 0,
        auction_id_raw: [0; 4],
        money: 0,
        money_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAuctionBuy {
    fn id(&self) -> &str {
       "0x024f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionBuy {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAuctionResult {
    pub fn packet_id() -> &'static str {
        "0x0250"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAuctionResult {
        let mut offset: usize = 0;
        PacketZcAuctionResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAuctionResult {
        PacketZcAuctionResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x0]),
        packet_id_raw: [0x25, 0x0],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAuctionResult {
    fn id(&self) -> &str {
       "0x0250"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAuctionResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionItemSearch {
    pub fn packet_id() -> &'static str {
        "0x0251"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionItemSearch {
        let mut offset: usize = 0;
        PacketCzAuctionItemSearch {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auction_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auction_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            page: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            page_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.auction_id).unwrap();
        self.auction_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.page).unwrap();
        self.page_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.auction_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.page_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_auction_id(&mut self, value: u32) {
        self.auction_id = value;
    }
    pub fn set_auction_id_raw(&mut self, value: [u8; 4]) {
        self.auction_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_page(&mut self, value: u16) {
        self.page = value;
    }
    pub fn set_page_raw(&mut self, value: [u8; 2]) {
        self.page_raw = value;
    }
    pub fn new() -> PacketCzAuctionItemSearch {
        PacketCzAuctionItemSearch {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x1]),
        packet_id_raw: [0x25, 0x1],
        atype: 0,
        atype_raw: [0; 2],
        auction_id: 0,
        auction_id_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        page: 0,
        page_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzAuctionItemSearch {
    fn id(&self) -> &str {
       "0x0251"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionItemSearch {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAuctionItemReqSearch {
    pub fn packet_id() -> &'static str {
        "0x0252"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAuctionItemReqSearch {
        let mut offset: usize = 0;
        let vec_type_len = AuctionItemSearchInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 12) / vec_type_len;
        let mut vec_field: Vec<AuctionItemSearchInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 + (vec_type_len * (i - 1));
            let end_pos = 12 + vec_type_len * i;
            vec_field.push(AuctionItemSearchInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAuctionItemReqSearch {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_page: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_page_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            number: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            number_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            auction_item_list: {
                let field = vec_field.clone();
                field
            },
            auction_item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_page).unwrap();
        self.max_page_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.number).unwrap();
        self.number_raw = wtr.try_into().unwrap();
        self.auction_item_list_raw = {
            self.auction_item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.auction_item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.max_page_raw.to_vec());
        wtr.append(&mut self.number_raw.to_vec());
        self.auction_item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_max_page(&mut self, value: i32) {
        self.max_page = value;
    }
    pub fn set_max_page_raw(&mut self, value: [u8; 4]) {
        self.max_page_raw = value;
    }
    pub fn set_number(&mut self, value: i32) {
        self.number = value;
    }
    pub fn set_number_raw(&mut self, value: [u8; 4]) {
        self.number_raw = value;
    }
    pub fn set_auction_item_list(&mut self, value: Vec<AuctionItemSearchInfo>) {
        self.auction_item_list = value;
    }
    pub fn set_auction_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.auction_item_list_raw = value;
    }
    pub fn new() -> PacketZcAuctionItemReqSearch {
        PacketZcAuctionItemReqSearch {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x2]),
        packet_id_raw: [0x25, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        max_page: 0,
        max_page_raw: [0; 4],
        number: 0,
        number_raw: [0; 4],
        auction_item_list: vec![],
        auction_item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcAuctionItemReqSearch {
    fn id(&self) -> &str {
       "0x0252"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAuctionItemReqSearch {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStarplace {
    pub fn packet_id() -> &'static str {
        "0x0253"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStarplace {
        let mut offset: usize = 0;
        PacketZcStarplace {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            which: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            which_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.which).unwrap();
        self.which_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.which_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_which(&mut self, value: i8) {
        self.which = value;
    }
    pub fn set_which_raw(&mut self, value: [u8; 1]) {
        self.which_raw = value;
    }
    pub fn new() -> PacketZcStarplace {
        PacketZcStarplace {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x3]),
        packet_id_raw: [0x25, 0x3],
        which: 0,
        which_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcStarplace {
    fn id(&self) -> &str {
       "0x0253"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStarplace {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAgreeStarplace {
    pub fn packet_id() -> &'static str {
        "0x0254"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAgreeStarplace {
        let mut offset: usize = 0;
        PacketCzAgreeStarplace {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            which: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            which_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.which).unwrap();
        self.which_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.which_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_which(&mut self, value: i8) {
        self.which = value;
    }
    pub fn set_which_raw(&mut self, value: [u8; 1]) {
        self.which_raw = value;
    }
    pub fn new() -> PacketCzAgreeStarplace {
        PacketCzAgreeStarplace {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x4]),
        packet_id_raw: [0x25, 0x4],
        which: 0,
        which_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzAgreeStarplace {
    fn id(&self) -> &str {
       "0x0254"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAgreeStarplace {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckMailAddItem {
    pub fn packet_id() -> &'static str {
        "0x0255"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckMailAddItem {
        let mut offset: usize = 0;
        PacketZcAckMailAddItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckMailAddItem {
        PacketZcAckMailAddItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x5]),
        packet_id_raw: [0x25, 0x5],
        index: 0,
        index_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckMailAddItem {
    fn id(&self) -> &str {
       "0x0255"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckMailAddItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckAuctionAddItem {
    pub fn packet_id() -> &'static str {
        "0x0256"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckAuctionAddItem {
        let mut offset: usize = 0;
        PacketZcAckAuctionAddItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckAuctionAddItem {
        PacketZcAckAuctionAddItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x6]),
        packet_id_raw: [0x25, 0x6],
        index: 0,
        index_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcAckAuctionAddItem {
    fn id(&self) -> &str {
       "0x0256"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckAuctionAddItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckMailDelete {
    pub fn packet_id() -> &'static str {
        "0x0257"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckMailDelete {
        let mut offset: usize = 0;
        PacketZcAckMailDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn set_result(&mut self, value: u16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckMailDelete {
        PacketZcAckMailDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x7]),
        packet_id_raw: [0x25, 0x7],
        mail_id: 0,
        mail_id_raw: [0; 4],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckMailDelete {
    fn id(&self) -> &str {
       "0x0257"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckMailDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaReqGameGuardCheck {
    pub fn packet_id() -> &'static str {
        "0x0258"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaReqGameGuardCheck {
        let mut offset: usize = 0;
        PacketCaReqGameGuardCheck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCaReqGameGuardCheck {
        PacketCaReqGameGuardCheck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x8]),
        packet_id_raw: [0x25, 0x8],
        }
    }
}

impl Packet for PacketCaReqGameGuardCheck {
    fn id(&self) -> &str {
       "0x0258"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaReqGameGuardCheck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckGameGuard {
    pub fn packet_id() -> &'static str {
        "0x0259"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckGameGuard {
        let mut offset: usize = 0;
        PacketAcAckGameGuard {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            uc_answer: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            uc_answer_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.uc_answer).unwrap();
        self.uc_answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.uc_answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_uc_answer(&mut self, value: u8) {
        self.uc_answer = value;
    }
    pub fn set_uc_answer_raw(&mut self, value: [u8; 1]) {
        self.uc_answer_raw = value;
    }
    pub fn new() -> PacketAcAckGameGuard {
        PacketAcAckGameGuard {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0x9]),
        packet_id_raw: [0x25, 0x9],
        uc_answer: 0,
        uc_answer_raw: [0; 1],
        }
    }
}

impl Packet for PacketAcAckGameGuard {
    fn id(&self) -> &str {
       "0x0259"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckGameGuard {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMakingitemList {
    pub fn packet_id() -> &'static str {
        "0x025a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMakingitemList {
        let mut offset: usize = 0;
        PacketZcMakingitemList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            id_list: {
                let field =  {
                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();
                dst
            };
                field
            },
            id_list_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.id_list_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_id_list(&mut self, value: Vec<u8>) {
        self.id_list = value;
    }
    pub fn set_id_list_raw(&mut self, value: Vec<u8>) {
        self.id_list_raw = value;
    }
    pub fn new() -> PacketZcMakingitemList {
        PacketZcMakingitemList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0xa]),
        packet_id_raw: [0x25, 0xa],
        packet_length: 0,
        packet_length_raw: [0; 2],
        id_list: vec![],
        id_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcMakingitemList {
    fn id(&self) -> &str {
       "0x025a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMakingitemList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqMakingitem {
    pub fn packet_id() -> &'static str {
        "0x025b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqMakingitem {
        let mut offset: usize = 0;
        PacketCzReqMakingitem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mk_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mk_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mk_type).unwrap();
        self.mk_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.id).unwrap();
        self.id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mk_type_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mk_type(&mut self, value: i16) {
        self.mk_type = value;
    }
    pub fn set_mk_type_raw(&mut self, value: [u8; 2]) {
        self.mk_type_raw = value;
    }
    pub fn set_id(&mut self, value: u16) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 2]) {
        self.id_raw = value;
    }
    pub fn new() -> PacketCzReqMakingitem {
        PacketCzReqMakingitem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0xb]),
        packet_id_raw: [0x25, 0xb],
        mk_type: 0,
        mk_type_raw: [0; 2],
        id: 0,
        id_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqMakingitem {
    fn id(&self) -> &str {
       "0x025b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqMakingitem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionReqMyInfo {
    pub fn packet_id() -> &'static str {
        "0x025c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionReqMyInfo {
        let mut offset: usize = 0;
        PacketCzAuctionReqMyInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketCzAuctionReqMyInfo {
        PacketCzAuctionReqMyInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0xc]),
        packet_id_raw: [0x25, 0xc],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzAuctionReqMyInfo {
    fn id(&self) -> &str {
       "0x025c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionReqMyInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAuctionReqMySellStop {
    pub fn packet_id() -> &'static str {
        "0x025d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAuctionReqMySellStop {
        let mut offset: usize = 0;
        PacketCzAuctionReqMySellStop {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auction_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auction_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.auction_id).unwrap();
        self.auction_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auction_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auction_id(&mut self, value: u32) {
        self.auction_id = value;
    }
    pub fn set_auction_id_raw(&mut self, value: [u8; 4]) {
        self.auction_id_raw = value;
    }
    pub fn new() -> PacketCzAuctionReqMySellStop {
        PacketCzAuctionReqMySellStop {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0xd]),
        packet_id_raw: [0x25, 0xd],
        auction_id: 0,
        auction_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzAuctionReqMySellStop {
    fn id(&self) -> &str {
       "0x025d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAuctionReqMySellStop {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAuctionAckMySellStop {
    pub fn packet_id() -> &'static str {
        "0x025e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAuctionAckMySellStop {
        let mut offset: usize = 0;
        PacketZcAuctionAckMySellStop {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAuctionAckMySellStop {
        PacketZcAuctionAckMySellStop {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0xe]),
        packet_id_raw: [0x25, 0xe],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAuctionAckMySellStop {
    fn id(&self) -> &str {
       "0x025e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAuctionAckMySellStop {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAuctionWindows {
    pub fn packet_id() -> &'static str {
        "0x025f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAuctionWindows {
        let mut offset: usize = 0;
        PacketZcAuctionWindows {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcAuctionWindows {
        PacketZcAuctionWindows {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x25, 0xf]),
        packet_id_raw: [0x25, 0xf],
        atype: 0,
        atype_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAuctionWindows {
    fn id(&self) -> &str {
       "0x025f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAuctionWindows {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMailWindows {
    pub fn packet_id() -> &'static str {
        "0x0260"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMailWindows {
        let mut offset: usize = 0;
        PacketZcMailWindows {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcMailWindows {
        PacketZcMailWindows {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x0]),
        packet_id_raw: [0x26, 0x0],
        atype: 0,
        atype_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMailWindows {
    fn id(&self) -> &str {
       "0x0260"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMailWindows {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcReqLoginOldekey {
    pub fn packet_id() -> &'static str {
        "0x0261"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcReqLoginOldekey {
        let mut offset: usize = 0;
        PacketAcReqLoginOldekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            m_seed_value: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_seed_value_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_seed_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_seed_value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.m_seed_value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_m_seed_value(&mut self, value: [char; 9]) {
        self.m_seed_value = value;
    }
    pub fn set_m_seed_value_raw(&mut self, value: [u8; 9]) {
        self.m_seed_value_raw = value;
    }
    pub fn new() -> PacketAcReqLoginOldekey {
        PacketAcReqLoginOldekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x1]),
        packet_id_raw: [0x26, 0x1],
        m_seed_value: [0 as char; 9],
        m_seed_value_raw: [0; 9],
        }
    }
}

impl Packet for PacketAcReqLoginOldekey {
    fn id(&self) -> &str {
       "0x0261"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcReqLoginOldekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcReqLoginNewekey {
    pub fn packet_id() -> &'static str {
        "0x0262"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcReqLoginNewekey {
        let mut offset: usize = 0;
        PacketAcReqLoginNewekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            m_seed_value: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_seed_value_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_seed_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_seed_value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.m_seed_value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_m_seed_value(&mut self, value: [char; 9]) {
        self.m_seed_value = value;
    }
    pub fn set_m_seed_value_raw(&mut self, value: [u8; 9]) {
        self.m_seed_value_raw = value;
    }
    pub fn new() -> PacketAcReqLoginNewekey {
        PacketAcReqLoginNewekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x2]),
        packet_id_raw: [0x26, 0x2],
        m_seed_value: [0 as char; 9],
        m_seed_value_raw: [0; 9],
        }
    }
}

impl Packet for PacketAcReqLoginNewekey {
    fn id(&self) -> &str {
       "0x0262"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcReqLoginNewekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcReqLoginCardpass {
    pub fn packet_id() -> &'static str {
        "0x0263"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcReqLoginCardpass {
        let mut offset: usize = 0;
        PacketAcReqLoginCardpass {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            m_seed_value: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_seed_value_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_seed_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_seed_value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.m_seed_value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_m_seed_value(&mut self, value: [char; 9]) {
        self.m_seed_value = value;
    }
    pub fn set_m_seed_value_raw(&mut self, value: [u8; 9]) {
        self.m_seed_value_raw = value;
    }
    pub fn new() -> PacketAcReqLoginCardpass {
        PacketAcReqLoginCardpass {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x3]),
        packet_id_raw: [0x26, 0x3],
        m_seed_value: [0 as char; 9],
        m_seed_value_raw: [0; 9],
        }
    }
}

impl Packet for PacketAcReqLoginCardpass {
    fn id(&self) -> &str {
       "0x0263"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcReqLoginCardpass {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaAckLoginOldekey {
    pub fn packet_id() -> &'static str {
        "0x0264"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaAckLoginOldekey {
        let mut offset: usize = 0;
        PacketCaAckLoginOldekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            m_seed_value: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_seed_value_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            m_ekey: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_ekey_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_seed_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_seed_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_ekey {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_ekey_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.m_seed_value_raw.to_vec());
        wtr.append(&mut self.m_ekey_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 20;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_m_seed_value(&mut self, value: [char; 9]) {
        self.m_seed_value = value;
    }
    pub fn set_m_seed_value_raw(&mut self, value: [u8; 9]) {
        self.m_seed_value_raw = value;
    }
    pub fn set_m_ekey(&mut self, value: [char; 9]) {
        self.m_ekey = value;
    }
    pub fn set_m_ekey_raw(&mut self, value: [u8; 9]) {
        self.m_ekey_raw = value;
    }
    pub fn new() -> PacketCaAckLoginOldekey {
        PacketCaAckLoginOldekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x4]),
        packet_id_raw: [0x26, 0x4],
        m_seed_value: [0 as char; 9],
        m_seed_value_raw: [0; 9],
        m_ekey: [0 as char; 9],
        m_ekey_raw: [0; 9],
        }
    }
}

impl Packet for PacketCaAckLoginOldekey {
    fn id(&self) -> &str {
       "0x0264"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaAckLoginOldekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaAckLoginNewekey {
    pub fn packet_id() -> &'static str {
        "0x0265"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaAckLoginNewekey {
        let mut offset: usize = 0;
        PacketCaAckLoginNewekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            m_seed_value: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_seed_value_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            m_ekey: {
                let field =  {
                let mut dst: [char; 9] = [0 as char; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_ekey_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_seed_value {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_seed_value_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_ekey {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_ekey_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.m_seed_value_raw.to_vec());
        wtr.append(&mut self.m_ekey_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 20;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_m_seed_value(&mut self, value: [char; 9]) {
        self.m_seed_value = value;
    }
    pub fn set_m_seed_value_raw(&mut self, value: [u8; 9]) {
        self.m_seed_value_raw = value;
    }
    pub fn set_m_ekey(&mut self, value: [char; 9]) {
        self.m_ekey = value;
    }
    pub fn set_m_ekey_raw(&mut self, value: [u8; 9]) {
        self.m_ekey_raw = value;
    }
    pub fn new() -> PacketCaAckLoginNewekey {
        PacketCaAckLoginNewekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x5]),
        packet_id_raw: [0x26, 0x5],
        m_seed_value: [0 as char; 9],
        m_seed_value_raw: [0; 9],
        m_ekey: [0 as char; 9],
        m_ekey_raw: [0; 9],
        }
    }
}

impl Packet for PacketCaAckLoginNewekey {
    fn id(&self) -> &str {
       "0x0265"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaAckLoginNewekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaAckLoginCardpass {
    pub fn packet_id() -> &'static str {
        "0x0266"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaAckLoginCardpass {
        let mut offset: usize = 0;
        PacketCaAckLoginCardpass {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mcard_pass: {
                let field =  {
                let mut dst: [char; 28] = [0 as char; 28];
                for (index, byte) in buffer[offset..offset + 28].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mcard_pass_raw: {
                let mut dst: [u8; 28] = [0u8; 28];
                dst.clone_from_slice(&buffer[offset..offset + 28]);
                offset += 28;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mcard_pass {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mcard_pass_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mcard_pass_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mcard_pass(&mut self, value: [char; 28]) {
        self.mcard_pass = value;
    }
    pub fn set_mcard_pass_raw(&mut self, value: [u8; 28]) {
        self.mcard_pass_raw = value;
    }
    pub fn new() -> PacketCaAckLoginCardpass {
        PacketCaAckLoginCardpass {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x6]),
        packet_id_raw: [0x26, 0x6],
        mcard_pass: [0 as char; 28],
        mcard_pass_raw: [0; 28],
        }
    }
}

impl Packet for PacketCaAckLoginCardpass {
    fn id(&self) -> &str {
       "0x0266"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaAckLoginCardpass {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailNotexist {
    pub fn packet_id() -> &'static str {
        "0x0267"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailNotexist {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailNotexist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailNotexist {
        PacketAcAckEkeyFailNotexist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x7]),
        packet_id_raw: [0x26, 0x7],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotexist {
    fn id(&self) -> &str {
       "0x0267"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailNotexist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailNotusesekey {
    pub fn packet_id() -> &'static str {
        "0x0268"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailNotusesekey {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailNotusesekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailNotusesekey {
        PacketAcAckEkeyFailNotusesekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x8]),
        packet_id_raw: [0x26, 0x8],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotusesekey {
    fn id(&self) -> &str {
       "0x0268"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailNotusesekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailNotusedekey {
    pub fn packet_id() -> &'static str {
        "0x0269"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailNotusedekey {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailNotusedekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailNotusedekey {
        PacketAcAckEkeyFailNotusedekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0x9]),
        packet_id_raw: [0x26, 0x9],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotusedekey {
    fn id(&self) -> &str {
       "0x0269"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailNotusedekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailAuthrefuse {
    pub fn packet_id() -> &'static str {
        "0x026a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailAuthrefuse {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailAuthrefuse {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailAuthrefuse {
        PacketAcAckEkeyFailAuthrefuse {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0xa]),
        packet_id_raw: [0x26, 0xa],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailAuthrefuse {
    fn id(&self) -> &str {
       "0x026a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailAuthrefuse {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailInputekey {
    pub fn packet_id() -> &'static str {
        "0x026b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailInputekey {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailInputekey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailInputekey {
        PacketAcAckEkeyFailInputekey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0xb]),
        packet_id_raw: [0x26, 0xb],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailInputekey {
    fn id(&self) -> &str {
       "0x026b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailInputekey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailNotice {
    pub fn packet_id() -> &'static str {
        "0x026c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailNotice {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailNotice {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailNotice {
        PacketAcAckEkeyFailNotice {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0xc]),
        packet_id_raw: [0x26, 0xc],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailNotice {
    fn id(&self) -> &str {
       "0x026c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailNotice {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckEkeyFailNeedcardpass {
    pub fn packet_id() -> &'static str {
        "0x026d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckEkeyFailNeedcardpass {
        let mut offset: usize = 0;
        PacketAcAckEkeyFailNeedcardpass {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckEkeyFailNeedcardpass {
        PacketAcAckEkeyFailNeedcardpass {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0xd]),
        packet_id_raw: [0x26, 0xd],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckEkeyFailNeedcardpass {
    fn id(&self) -> &str {
       "0x026d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckEkeyFailNeedcardpass {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckAuthekeyFailNotmatchcardpass {
    pub fn packet_id() -> &'static str {
        "0x026e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckAuthekeyFailNotmatchcardpass {
        let mut offset: usize = 0;
        PacketAcAckAuthekeyFailNotmatchcardpass {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: i16) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 2]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketAcAckAuthekeyFailNotmatchcardpass {
        PacketAcAckAuthekeyFailNotmatchcardpass {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0xe]),
        packet_id_raw: [0x26, 0xe],
        error_code: 0,
        error_code_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcAckAuthekeyFailNotmatchcardpass {
    fn id(&self) -> &str {
       "0x026e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckAuthekeyFailNotmatchcardpass {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckFirstLogin {
    pub fn packet_id() -> &'static str {
        "0x026f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckFirstLogin {
        let mut offset: usize = 0;
        PacketAcAckFirstLogin {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketAcAckFirstLogin {
        PacketAcAckFirstLogin {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x26, 0xf]),
        packet_id_raw: [0x26, 0xf],
        }
    }
}

impl Packet for PacketAcAckFirstLogin {
    fn id(&self) -> &str {
       "0x026f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckFirstLogin {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcReqLoginAccountInfo {
    pub fn packet_id() -> &'static str {
        "0x0270"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcReqLoginAccountInfo {
        let mut offset: usize = 0;
        PacketAcReqLoginAccountInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketAcReqLoginAccountInfo {
        PacketAcReqLoginAccountInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x0]),
        packet_id_raw: [0x27, 0x0],
        }
    }
}

impl Packet for PacketAcReqLoginAccountInfo {
    fn id(&self) -> &str {
       "0x0270"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcReqLoginAccountInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaAckLoginAccountInfo {
    pub fn packet_id() -> &'static str {
        "0x0271"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaAckLoginAccountInfo {
        let mut offset: usize = 0;
        PacketCaAckLoginAccountInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sex: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            b_point: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            b_point_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            email: {
                let field =  {
                let mut dst: [char; 34] = [0 as char; 34];
                for (index, byte) in buffer[offset..offset + 34].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            email_raw: {
                let mut dst: [u8; 34] = [0u8; 34];
                dst.clone_from_slice(&buffer[offset..offset + 34]);
                offset += 34;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.b_point).unwrap();
        self.b_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.email {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.email_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.b_point_raw.to_vec());
        wtr.append(&mut self.email_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 40;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_sex(&mut self, value: i16) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 2]) {
        self.sex_raw = value;
    }
    pub fn set_b_point(&mut self, value: i16) {
        self.b_point = value;
    }
    pub fn set_b_point_raw(&mut self, value: [u8; 2]) {
        self.b_point_raw = value;
    }
    pub fn set_email(&mut self, value: [char; 34]) {
        self.email = value;
    }
    pub fn set_email_raw(&mut self, value: [u8; 34]) {
        self.email_raw = value;
    }
    pub fn new() -> PacketCaAckLoginAccountInfo {
        PacketCaAckLoginAccountInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x1]),
        packet_id_raw: [0x27, 0x1],
        sex: 0,
        sex_raw: [0; 2],
        b_point: 0,
        b_point_raw: [0; 2],
        email: [0 as char; 34],
        email_raw: [0; 34],
        }
    }
}

impl Packet for PacketCaAckLoginAccountInfo {
    fn id(&self) -> &str {
       "0x0271"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaAckLoginAccountInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcAckPtIdInfo {
    pub fn packet_id() -> &'static str {
        "0x0272"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcAckPtIdInfo {
        let mut offset: usize = 0;
        PacketAcAckPtIdInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sz_ptid: {
                let field =  {
                let mut dst: [char; 21] = [0 as char; 21];
                for (index, byte) in buffer[offset..offset + 21].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_ptid_raw: {
                let mut dst: [u8; 21] = [0u8; 21];
                dst.clone_from_slice(&buffer[offset..offset + 21]);
                offset += 21;
                dst
            },
            sz_ptnum_id: {
                let field =  {
                let mut dst: [char; 21] = [0 as char; 21];
                for (index, byte) in buffer[offset..offset + 21].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_ptnum_id_raw: {
                let mut dst: [u8; 21] = [0u8; 21];
                dst.clone_from_slice(&buffer[offset..offset + 21]);
                offset += 21;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_ptid {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_ptid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_ptnum_id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_ptnum_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.sz_ptid_raw.to_vec());
        wtr.append(&mut self.sz_ptnum_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 44;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_sz_ptid(&mut self, value: [char; 21]) {
        self.sz_ptid = value;
    }
    pub fn set_sz_ptid_raw(&mut self, value: [u8; 21]) {
        self.sz_ptid_raw = value;
    }
    pub fn set_sz_ptnum_id(&mut self, value: [char; 21]) {
        self.sz_ptnum_id = value;
    }
    pub fn set_sz_ptnum_id_raw(&mut self, value: [u8; 21]) {
        self.sz_ptnum_id_raw = value;
    }
    pub fn new() -> PacketAcAckPtIdInfo {
        PacketAcAckPtIdInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x2]),
        packet_id_raw: [0x27, 0x2],
        sz_ptid: [0 as char; 21],
        sz_ptid_raw: [0; 21],
        sz_ptnum_id: [0 as char; 21],
        sz_ptnum_id_raw: [0; 21],
        }
    }
}

impl Packet for PacketAcAckPtIdInfo {
    fn id(&self) -> &str {
       "0x0272"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcAckPtIdInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqMailReturn {
    pub fn packet_id() -> &'static str {
        "0x0273"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqMailReturn {
        let mut offset: usize = 0;
        PacketCzReqMailReturn {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            receive_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            receive_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.receive_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.receive_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        wtr.append(&mut self.receive_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn set_receive_name(&mut self, value: [char; 24]) {
        self.receive_name = value;
    }
    pub fn set_receive_name_raw(&mut self, value: [u8; 24]) {
        self.receive_name_raw = value;
    }
    pub fn new() -> PacketCzReqMailReturn {
        PacketCzReqMailReturn {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x3]),
        packet_id_raw: [0x27, 0x3],
        mail_id: 0,
        mail_id_raw: [0; 4],
        receive_name: [0 as char; 24],
        receive_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzReqMailReturn {
    fn id(&self) -> &str {
       "0x0273"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqMailReturn {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckMailReturn {
    pub fn packet_id() -> &'static str {
        "0x0274"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckMailReturn {
        let mut offset: usize = 0;
        PacketZcAckMailReturn {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mail_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.mail_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_mail_id(&mut self, value: i32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcAckMailReturn {
        PacketZcAckMailReturn {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x4]),
        packet_id_raw: [0x27, 0x4],
        mail_id: 0,
        mail_id_raw: [0; 4],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckMailReturn {
    fn id(&self) -> &str {
       "0x0274"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckMailReturn {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChEnter2 {
    pub fn packet_id() -> &'static str {
        "0x0275"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChEnter2 {
        let mut offset: usize = 0;
        PacketChEnter2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            client_type: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            client_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            mac_data: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mac_data_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            i_account_sid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            i_account_sid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.user_level).unwrap();
        self.user_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.client_type).unwrap();
        self.client_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mac_data {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mac_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.i_account_sid).unwrap();
        self.i_account_sid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.user_level_raw.to_vec());
        wtr.append(&mut self.client_type_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.mac_data_raw.to_vec());
        wtr.append(&mut self.i_account_sid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 37;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_user_level(&mut self, value: u32) {
        self.user_level = value;
    }
    pub fn set_user_level_raw(&mut self, value: [u8; 4]) {
        self.user_level_raw = value;
    }
    pub fn set_client_type(&mut self, value: u16) {
        self.client_type = value;
    }
    pub fn set_client_type_raw(&mut self, value: [u8; 2]) {
        self.client_type_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_mac_data(&mut self, value: [char; 16]) {
        self.mac_data = value;
    }
    pub fn set_mac_data_raw(&mut self, value: [u8; 16]) {
        self.mac_data_raw = value;
    }
    pub fn set_i_account_sid(&mut self, value: i32) {
        self.i_account_sid = value;
    }
    pub fn set_i_account_sid_raw(&mut self, value: [u8; 4]) {
        self.i_account_sid_raw = value;
    }
    pub fn new() -> PacketChEnter2 {
        PacketChEnter2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x5]),
        packet_id_raw: [0x27, 0x5],
        aid: 0,
        aid_raw: [0; 4],
        auth_code: 0,
        auth_code_raw: [0; 4],
        user_level: 0,
        user_level_raw: [0; 4],
        client_type: 0,
        client_type_raw: [0; 2],
        sex: 0,
        sex_raw: [0; 1],
        mac_data: [0 as char; 16],
        mac_data_raw: [0; 16],
        i_account_sid: 0,
        i_account_sid_raw: [0; 4],
        }
    }
}

impl Packet for PacketChEnter2 {
    fn id(&self) -> &str {
       "0x0275"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChEnter2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaAcceptLogin2 {
    pub fn packet_id() -> &'static str {
        "0x0276"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaAcceptLogin2 {
        let mut offset: usize = 0;
        PacketCaAcceptLogin2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            user_level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            user_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            last_login_ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            last_login_ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            last_login_time: {
                let field =  {
                let mut dst: [char; 26] = [0 as char; 26];
                for (index, byte) in buffer[offset..offset + 26].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            last_login_time_raw: {
                let mut dst: [u8; 26] = [0u8; 26];
                dst.clone_from_slice(&buffer[offset..offset + 26]);
                offset += 26;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            i_account_sid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            i_account_sid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.user_level).unwrap();
        self.user_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.last_login_ip).unwrap();
        self.last_login_ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.last_login_time {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.last_login_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.i_account_sid).unwrap();
        self.i_account_sid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.user_level_raw.to_vec());
        wtr.append(&mut self.last_login_ip_raw.to_vec());
        wtr.append(&mut self.last_login_time_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.i_account_sid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 51;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_user_level(&mut self, value: u32) {
        self.user_level = value;
    }
    pub fn set_user_level_raw(&mut self, value: [u8; 4]) {
        self.user_level_raw = value;
    }
    pub fn set_last_login_ip(&mut self, value: u32) {
        self.last_login_ip = value;
    }
    pub fn set_last_login_ip_raw(&mut self, value: [u8; 4]) {
        self.last_login_ip_raw = value;
    }
    pub fn set_last_login_time(&mut self, value: [char; 26]) {
        self.last_login_time = value;
    }
    pub fn set_last_login_time_raw(&mut self, value: [u8; 26]) {
        self.last_login_time_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_i_account_sid(&mut self, value: i32) {
        self.i_account_sid = value;
    }
    pub fn set_i_account_sid_raw(&mut self, value: [u8; 4]) {
        self.i_account_sid_raw = value;
    }
    pub fn new() -> PacketCaAcceptLogin2 {
        PacketCaAcceptLogin2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x6]),
        packet_id_raw: [0x27, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        auth_code: 0,
        auth_code_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        user_level: 0,
        user_level_raw: [0; 4],
        last_login_ip: 0,
        last_login_ip_raw: [0; 4],
        last_login_time: [0 as char; 26],
        last_login_time_raw: [0; 26],
        sex: 0,
        sex_raw: [0; 1],
        i_account_sid: 0,
        i_account_sid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCaAcceptLogin2 {
    fn id(&self) -> &str {
       "0x0276"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaAcceptLogin2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaLoginPcbang {
    pub fn packet_id() -> &'static str {
        "0x0277"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaLoginPcbang {
        let mut offset: usize = 0;
        PacketCaLoginPcbang {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            ip: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            ip_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            mac_adress: {
                let field =  {
                let mut dst: [char; 13] = [0 as char; 13];
                for (index, byte) in buffer[offset..offset + 13].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mac_adress_raw: {
                let mut dst: [u8; 13] = [0u8; 13];
                dst.clone_from_slice(&buffer[offset..offset + 13]);
                offset += 13;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.ip {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mac_adress {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mac_adress_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        wtr.append(&mut self.ip_raw.to_vec());
        wtr.append(&mut self.mac_adress_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 84;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 24]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 24]) {
        self.passwd_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn set_ip(&mut self, value: [char; 16]) {
        self.ip = value;
    }
    pub fn set_ip_raw(&mut self, value: [u8; 16]) {
        self.ip_raw = value;
    }
    pub fn set_mac_adress(&mut self, value: [char; 13]) {
        self.mac_adress = value;
    }
    pub fn set_mac_adress_raw(&mut self, value: [u8; 13]) {
        self.mac_adress_raw = value;
    }
    pub fn new() -> PacketCaLoginPcbang {
        PacketCaLoginPcbang {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x7]),
        packet_id_raw: [0x27, 0x7],
        version: 0,
        version_raw: [0; 4],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd: [0 as char; 24],
        passwd_raw: [0; 24],
        clienttype: 0,
        clienttype_raw: [0; 1],
        ip: [0 as char; 16],
        ip_raw: [0; 16],
        mac_adress: [0 as char; 13],
        mac_adress_raw: [0; 13],
        }
    }
}

impl Packet for PacketCaLoginPcbang {
    fn id(&self) -> &str {
       "0x0277"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaLoginPcbang {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPcbang {
    pub fn packet_id() -> &'static str {
        "0x0278"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPcbang {
        let mut offset: usize = 0;
        PacketZcNotifyPcbang {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcNotifyPcbang {
        PacketZcNotifyPcbang {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x8]),
        packet_id_raw: [0x27, 0x8],
        }
    }
}

impl Packet for PacketZcNotifyPcbang {
    fn id(&self) -> &str {
       "0x0278"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPcbang {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzHuntinglist {
    pub fn packet_id() -> &'static str {
        "0x0279"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzHuntinglist {
        let mut offset: usize = 0;
        PacketCzHuntinglist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzHuntinglist {
        PacketCzHuntinglist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x9]),
        packet_id_raw: [0x27, 0x9],
        }
    }
}

impl Packet for PacketCzHuntinglist {
    fn id(&self) -> &str {
       "0x0279"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzHuntinglist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcHuntinglist {
    pub fn packet_id() -> &'static str {
        "0x027a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcHuntinglist {
        let mut offset: usize = 0;
        let vec_type_len = PacketMobHunting::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<PacketMobHunting> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(PacketMobHunting::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcHuntinglist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hunting_list: {
                let field = vec_field.clone();
                field
            },
            hunting_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.hunting_list_raw = {
            self.hunting_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.hunting_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.hunting_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_hunting_list(&mut self, value: Vec<PacketMobHunting>) {
        self.hunting_list = value;
    }
    pub fn set_hunting_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.hunting_list_raw = value;
    }
    pub fn new() -> PacketZcHuntinglist {
        PacketZcHuntinglist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0xa]),
        packet_id_raw: [0x27, 0xa],
        packet_length: 0,
        packet_length_raw: [0; 2],
        hunting_list: vec![],
        hunting_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcHuntinglist {
    fn id(&self) -> &str {
       "0x027a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcHuntinglist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcbangEffect {
    pub fn packet_id() -> &'static str {
        "0x027b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcbangEffect {
        let mut offset: usize = 0;
        PacketZcPcbangEffect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp_factor: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_factor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            exp_factor2: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_factor2_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            drop_factor: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            drop_factor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.exp_factor).unwrap();
        self.exp_factor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.exp_factor2).unwrap();
        self.exp_factor2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.drop_factor).unwrap();
        self.drop_factor_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.exp_factor_raw.to_vec());
        wtr.append(&mut self.exp_factor2_raw.to_vec());
        wtr.append(&mut self.drop_factor_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_exp_factor(&mut self, value: i32) {
        self.exp_factor = value;
    }
    pub fn set_exp_factor_raw(&mut self, value: [u8; 4]) {
        self.exp_factor_raw = value;
    }
    pub fn set_exp_factor2(&mut self, value: i32) {
        self.exp_factor2 = value;
    }
    pub fn set_exp_factor2_raw(&mut self, value: [u8; 4]) {
        self.exp_factor2_raw = value;
    }
    pub fn set_drop_factor(&mut self, value: i32) {
        self.drop_factor = value;
    }
    pub fn set_drop_factor_raw(&mut self, value: [u8; 4]) {
        self.drop_factor_raw = value;
    }
    pub fn new() -> PacketZcPcbangEffect {
        PacketZcPcbangEffect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0xb]),
        packet_id_raw: [0x27, 0xb],
        exp_factor: 0,
        exp_factor_raw: [0; 4],
        exp_factor2: 0,
        exp_factor2_raw: [0; 4],
        drop_factor: 0,
        drop_factor_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcPcbangEffect {
    fn id(&self) -> &str {
       "0x027b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcbangEffect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaLogin4 {
    pub fn packet_id() -> &'static str {
        "0x027c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaLogin4 {
        let mut offset: usize = 0;
        PacketCaLogin4 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd_md5: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_md5_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            mac_data: {
                let field =  {
                let mut dst: [char; 13] = [0 as char; 13];
                for (index, byte) in buffer[offset..offset + 13].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mac_data_raw: {
                let mut dst: [u8; 13] = [0u8; 13];
                dst.clone_from_slice(&buffer[offset..offset + 13]);
                offset += 13;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd_md5 {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_md5_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mac_data {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mac_data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_md5_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        wtr.append(&mut self.mac_data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 60;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd_md5(&mut self, value: [char; 16]) {
        self.passwd_md5 = value;
    }
    pub fn set_passwd_md5_raw(&mut self, value: [u8; 16]) {
        self.passwd_md5_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn set_mac_data(&mut self, value: [char; 13]) {
        self.mac_data = value;
    }
    pub fn set_mac_data_raw(&mut self, value: [u8; 13]) {
        self.mac_data_raw = value;
    }
    pub fn new() -> PacketCaLogin4 {
        PacketCaLogin4 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0xc]),
        packet_id_raw: [0x27, 0xc],
        version: 0,
        version_raw: [0; 4],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd_md5: [0 as char; 16],
        passwd_md5_raw: [0; 16],
        clienttype: 0,
        clienttype_raw: [0; 1],
        mac_data: [0 as char; 13],
        mac_data_raw: [0; 13],
        }
    }
}

impl Packet for PacketCaLogin4 {
    fn id(&self) -> &str {
       "0x027c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaLogin4 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPropertyMerce {
    pub fn packet_id() -> &'static str {
        "0x027d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPropertyMerce {
        let mut offset: usize = 0;
        PacketZcPropertyMerce {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            faith: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            faith_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            summon_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            summon_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            matk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            matk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hit: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hit_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            critical: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            critical_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            def: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            def_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            flee: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            flee_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_sp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atkrange: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atkrange_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.faith).unwrap();
        self.faith_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.summon_count).unwrap();
        self.summon_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atk).unwrap();
        self.atk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.matk).unwrap();
        self.matk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hit).unwrap();
        self.hit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.critical).unwrap();
        self.critical_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.def).unwrap();
        self.def_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef).unwrap();
        self.mdef_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.flee).unwrap();
        self.flee_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.aspd).unwrap();
        self.aspd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sp).unwrap();
        self.sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_sp).unwrap();
        self.max_sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atkrange).unwrap();
        self.atkrange_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.exp).unwrap();
        self.exp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.faith_raw.to_vec());
        wtr.append(&mut self.summon_count_raw.to_vec());
        wtr.append(&mut self.atk_raw.to_vec());
        wtr.append(&mut self.matk_raw.to_vec());
        wtr.append(&mut self.hit_raw.to_vec());
        wtr.append(&mut self.critical_raw.to_vec());
        wtr.append(&mut self.def_raw.to_vec());
        wtr.append(&mut self.mdef_raw.to_vec());
        wtr.append(&mut self.flee_raw.to_vec());
        wtr.append(&mut self.aspd_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.sp_raw.to_vec());
        wtr.append(&mut self.max_sp_raw.to_vec());
        wtr.append(&mut self.atkrange_raw.to_vec());
        wtr.append(&mut self.exp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 62;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_faith(&mut self, value: i16) {
        self.faith = value;
    }
    pub fn set_faith_raw(&mut self, value: [u8; 2]) {
        self.faith_raw = value;
    }
    pub fn set_summon_count(&mut self, value: i16) {
        self.summon_count = value;
    }
    pub fn set_summon_count_raw(&mut self, value: [u8; 2]) {
        self.summon_count_raw = value;
    }
    pub fn set_atk(&mut self, value: i16) {
        self.atk = value;
    }
    pub fn set_atk_raw(&mut self, value: [u8; 2]) {
        self.atk_raw = value;
    }
    pub fn set_matk(&mut self, value: i16) {
        self.matk = value;
    }
    pub fn set_matk_raw(&mut self, value: [u8; 2]) {
        self.matk_raw = value;
    }
    pub fn set_hit(&mut self, value: i16) {
        self.hit = value;
    }
    pub fn set_hit_raw(&mut self, value: [u8; 2]) {
        self.hit_raw = value;
    }
    pub fn set_critical(&mut self, value: i16) {
        self.critical = value;
    }
    pub fn set_critical_raw(&mut self, value: [u8; 2]) {
        self.critical_raw = value;
    }
    pub fn set_def(&mut self, value: i16) {
        self.def = value;
    }
    pub fn set_def_raw(&mut self, value: [u8; 2]) {
        self.def_raw = value;
    }
    pub fn set_mdef(&mut self, value: i16) {
        self.mdef = value;
    }
    pub fn set_mdef_raw(&mut self, value: [u8; 2]) {
        self.mdef_raw = value;
    }
    pub fn set_flee(&mut self, value: i16) {
        self.flee = value;
    }
    pub fn set_flee_raw(&mut self, value: [u8; 2]) {
        self.flee_raw = value;
    }
    pub fn set_aspd(&mut self, value: i16) {
        self.aspd = value;
    }
    pub fn set_aspd_raw(&mut self, value: [u8; 2]) {
        self.aspd_raw = value;
    }
    pub fn set_hp(&mut self, value: i16) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 2]) {
        self.hp_raw = value;
    }
    pub fn set_max_hp(&mut self, value: i16) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 2]) {
        self.max_hp_raw = value;
    }
    pub fn set_sp(&mut self, value: i16) {
        self.sp = value;
    }
    pub fn set_sp_raw(&mut self, value: [u8; 2]) {
        self.sp_raw = value;
    }
    pub fn set_max_sp(&mut self, value: i16) {
        self.max_sp = value;
    }
    pub fn set_max_sp_raw(&mut self, value: [u8; 2]) {
        self.max_sp_raw = value;
    }
    pub fn set_atkrange(&mut self, value: i16) {
        self.atkrange = value;
    }
    pub fn set_atkrange_raw(&mut self, value: [u8; 2]) {
        self.atkrange_raw = value;
    }
    pub fn set_exp(&mut self, value: i32) {
        self.exp = value;
    }
    pub fn set_exp_raw(&mut self, value: [u8; 4]) {
        self.exp_raw = value;
    }
    pub fn new() -> PacketZcPropertyMerce {
        PacketZcPropertyMerce {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0xd]),
        packet_id_raw: [0x27, 0xd],
        name: [0 as char; 24],
        name_raw: [0; 24],
        level: 0,
        level_raw: [0; 2],
        faith: 0,
        faith_raw: [0; 2],
        summon_count: 0,
        summon_count_raw: [0; 2],
        atk: 0,
        atk_raw: [0; 2],
        matk: 0,
        matk_raw: [0; 2],
        hit: 0,
        hit_raw: [0; 2],
        critical: 0,
        critical_raw: [0; 2],
        def: 0,
        def_raw: [0; 2],
        mdef: 0,
        mdef_raw: [0; 2],
        flee: 0,
        flee_raw: [0; 2],
        aspd: 0,
        aspd_raw: [0; 2],
        hp: 0,
        hp_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 2],
        sp: 0,
        sp_raw: [0; 2],
        max_sp: 0,
        max_sp_raw: [0; 2],
        atkrange: 0,
        atkrange_raw: [0; 2],
        exp: 0,
        exp_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcPropertyMerce {
    fn id(&self) -> &str {
       "0x027d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPropertyMerce {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcShandaProtect {
    pub fn packet_id() -> &'static str {
        "0x027e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcShandaProtect {
        let mut offset: usize = 0;
        PacketZcShandaProtect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            code_len: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            code_len_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            code: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            code_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.code_len).unwrap();
        self.code_len_raw = wtr.try_into().unwrap();
        self.code_raw = self.code.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.code_len_raw.to_vec());
        wtr.append(&mut self.code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_code_len(&mut self, value: i16) {
        self.code_len = value;
    }
    pub fn set_code_len_raw(&mut self, value: [u8; 2]) {
        self.code_len_raw = value;
    }
    pub fn set_code(&mut self, value: String) {
        self.code = value;
    }
    pub fn set_code_raw(&mut self, value: Vec<u8>) {
        self.code_raw = value;
    }
    pub fn new() -> PacketZcShandaProtect {
        PacketZcShandaProtect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0xe]),
        packet_id_raw: [0x27, 0xe],
        packet_length: 0,
        packet_length_raw: [0; 2],
        code_len: 0,
        code_len_raw: [0; 2],
        code: String::new(),
        code_raw: vec![],
        }
    }
}

impl Packet for PacketZcShandaProtect {
    fn id(&self) -> &str {
       "0x027e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcShandaProtect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaClientType {
    pub fn packet_id() -> &'static str {
        "0x027f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaClientType {
        let mut offset: usize = 0;
        PacketCaClientType {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            client_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            client_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            n_ver: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            n_ver_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.client_type).unwrap();
        self.client_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.n_ver).unwrap();
        self.n_ver_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.client_type_raw.to_vec());
        wtr.append(&mut self.n_ver_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_client_type(&mut self, value: i16) {
        self.client_type = value;
    }
    pub fn set_client_type_raw(&mut self, value: [u8; 2]) {
        self.client_type_raw = value;
    }
    pub fn set_n_ver(&mut self, value: i32) {
        self.n_ver = value;
    }
    pub fn set_n_ver_raw(&mut self, value: [u8; 4]) {
        self.n_ver_raw = value;
    }
    pub fn new() -> PacketCaClientType {
        PacketCaClientType {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0xf]),
        packet_id_raw: [0x27, 0xf],
        client_type: 0,
        client_type_raw: [0; 2],
        n_ver: 0,
        n_ver_raw: [0; 4],
        }
    }
}

impl Packet for PacketCaClientType {
    fn id(&self) -> &str {
       "0x027f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaClientType {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGangsiPoint {
    pub fn packet_id() -> &'static str {
        "0x0280"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGangsiPoint {
        let mut offset: usize = 0;
        PacketZcGangsiPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            total_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            total_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            packet_switch: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_switch_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.total_point).unwrap();
        self.total_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_switch).unwrap();
        self.packet_switch_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.total_point_raw.to_vec());
        wtr.append(&mut self.packet_switch_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn set_total_point(&mut self, value: i32) {
        self.total_point = value;
    }
    pub fn set_total_point_raw(&mut self, value: [u8; 4]) {
        self.total_point_raw = value;
    }
    pub fn set_packet_switch(&mut self, value: i16) {
        self.packet_switch = value;
    }
    pub fn set_packet_switch_raw(&mut self, value: [u8; 2]) {
        self.packet_switch_raw = value;
    }
    pub fn new() -> PacketZcGangsiPoint {
        PacketZcGangsiPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x0]),
        packet_id_raw: [0x28, 0x0],
        point: 0,
        point_raw: [0; 4],
        total_point: 0,
        total_point_raw: [0; 4],
        packet_switch: 0,
        packet_switch_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcGangsiPoint {
    fn id(&self) -> &str {
       "0x0280"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGangsiPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzGangsiRank {
    pub fn packet_id() -> &'static str {
        "0x0281"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzGangsiRank {
        let mut offset: usize = 0;
        PacketCzGangsiRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_switch: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_switch_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_switch).unwrap();
        self.packet_switch_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_switch_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_switch(&mut self, value: i16) {
        self.packet_switch = value;
    }
    pub fn set_packet_switch_raw(&mut self, value: [u8; 2]) {
        self.packet_switch_raw = value;
    }
    pub fn new() -> PacketCzGangsiRank {
        PacketCzGangsiRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x1]),
        packet_id_raw: [0x28, 0x1],
        packet_switch: 0,
        packet_switch_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzGangsiRank {
    fn id(&self) -> &str {
       "0x0281"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzGangsiRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGangsiRank {
    pub fn packet_id() -> &'static str {
        "0x0282"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGangsiRank {
        let mut offset: usize = 0;
        PacketZcGangsiRank {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 10] = [0 as char; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            point: {
                let field =  {
                let mut dst: [i32; 10] = [0_i32; 10];
                for (index, byte) in buffer[offset..offset + 10].iter().enumerate() {
                    dst[index] = *byte as i32;
                }
                dst
            };
                field
            },
            point_raw: {
                let mut dst: [u8; 10] = [0u8; 10];
                dst.clone_from_slice(&buffer[offset..offset + 10]);
                offset += 10;
                dst
            },
            packet_switch: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_switch_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.point {
            wtr.write_i32::<LittleEndian>(item).unwrap();
        }
        self.point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_switch).unwrap();
        self.packet_switch_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        wtr.append(&mut self.packet_switch_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 24;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 10]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 10]) {
        self.name_raw = value;
    }
    pub fn set_point(&mut self, value: [i32; 10]) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 10]) {
        self.point_raw = value;
    }
    pub fn set_packet_switch(&mut self, value: i16) {
        self.packet_switch = value;
    }
    pub fn set_packet_switch_raw(&mut self, value: [u8; 2]) {
        self.packet_switch_raw = value;
    }
    pub fn new() -> PacketZcGangsiRank {
        PacketZcGangsiRank {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x2]),
        packet_id_raw: [0x28, 0x2],
        name: [0 as char; 10],
        name_raw: [0; 10],
        point: [0; 10],
        point_raw: [0; 10],
        packet_switch: 0,
        packet_switch_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcGangsiRank {
    fn id(&self) -> &str {
       "0x0282"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGangsiRank {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAid {
    pub fn packet_id() -> &'static str {
        "0x0283"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAid {
        let mut offset: usize = 0;
        PacketZcAid {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcAid {
        PacketZcAid {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x3]),
        packet_id_raw: [0x28, 0x3],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAid {
    fn id(&self) -> &str {
       "0x0283"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAid {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyEffect3 {
    pub fn packet_id() -> &'static str {
        "0x0284"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyEffect3 {
        let mut offset: usize = 0;
        PacketZcNotifyEffect3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            effect_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            numdata: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            numdata_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_id).unwrap();
        self.effect_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.numdata).unwrap();
        self.numdata_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.effect_id_raw.to_vec());
        wtr.append(&mut self.numdata_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_effect_id(&mut self, value: i32) {
        self.effect_id = value;
    }
    pub fn set_effect_id_raw(&mut self, value: [u8; 4]) {
        self.effect_id_raw = value;
    }
    pub fn set_numdata(&mut self, value: i32) {
        self.numdata = value;
    }
    pub fn set_numdata_raw(&mut self, value: [u8; 4]) {
        self.numdata_raw = value;
    }
    pub fn new() -> PacketZcNotifyEffect3 {
        PacketZcNotifyEffect3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x4]),
        packet_id_raw: [0x28, 0x4],
        aid: 0,
        aid_raw: [0; 4],
        effect_id: 0,
        effect_id_raw: [0; 4],
        numdata: 0,
        numdata_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyEffect3 {
    fn id(&self) -> &str {
       "0x0284"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyEffect3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeathQuestion {
    pub fn packet_id() -> &'static str {
        "0x0285"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeathQuestion {
        let mut offset: usize = 0;
        PacketZcDeathQuestion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            qcategory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            qcategory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            qnum: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            qnum_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.qcategory).unwrap();
        self.qcategory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.qnum).unwrap();
        self.qnum_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.qcategory_raw.to_vec());
        wtr.append(&mut self.qnum_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_qcategory(&mut self, value: i16) {
        self.qcategory = value;
    }
    pub fn set_qcategory_raw(&mut self, value: [u8; 2]) {
        self.qcategory_raw = value;
    }
    pub fn set_qnum(&mut self, value: i16) {
        self.qnum = value;
    }
    pub fn set_qnum_raw(&mut self, value: [u8; 2]) {
        self.qnum_raw = value;
    }
    pub fn new() -> PacketZcDeathQuestion {
        PacketZcDeathQuestion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x5]),
        packet_id_raw: [0x28, 0x5],
        qcategory: 0,
        qcategory_raw: [0; 2],
        qnum: 0,
        qnum_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcDeathQuestion {
    fn id(&self) -> &str {
       "0x0285"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeathQuestion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzDeathQuestion {
    pub fn packet_id() -> &'static str {
        "0x0286"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzDeathQuestion {
        let mut offset: usize = 0;
        PacketCzDeathQuestion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            qanswer: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            qanswer_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.qanswer).unwrap();
        self.qanswer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.qanswer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_qanswer(&mut self, value: i16) {
        self.qanswer = value;
    }
    pub fn set_qanswer_raw(&mut self, value: [u8; 2]) {
        self.qanswer_raw = value;
    }
    pub fn new() -> PacketCzDeathQuestion {
        PacketCzDeathQuestion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x6]),
        packet_id_raw: [0x28, 0x6],
        qanswer: 0,
        qanswer_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzDeathQuestion {
    fn id(&self) -> &str {
       "0x0286"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzDeathQuestion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcCashPointItemlist {
    pub fn packet_id() -> &'static str {
        "0x0287"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcCashPointItemlist {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseItem::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPcCashPointItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cash_point: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            cash_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.cash_point).unwrap();
        self.cash_point_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.cash_point_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_cash_point(&mut self, value: u32) {
        self.cash_point = value;
    }
    pub fn set_cash_point_raw(&mut self, value: [u8; 4]) {
        self.cash_point_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcPcCashPointItemlist {
        PacketZcPcCashPointItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x7]),
        packet_id_raw: [0x28, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        cash_point: 0,
        cash_point_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPcCashPointItemlist {
    fn id(&self) -> &str {
       "0x0287"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcCashPointItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPcBuyCashPointItem {
    pub fn packet_id() -> &'static str {
        "0x0288"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPcBuyCashPointItem {
        let mut offset: usize = 0;
        PacketCzPcBuyCashPointItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzPcBuyCashPointItem {
        PacketCzPcBuyCashPointItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x8]),
        packet_id_raw: [0x28, 0x8],
        itid: 0,
        itid_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzPcBuyCashPointItem {
    fn id(&self) -> &str {
       "0x0288"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPcBuyCashPointItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcCashPointUpdate {
    pub fn packet_id() -> &'static str {
        "0x0289"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcCashPointUpdate {
        let mut offset: usize = 0;
        PacketZcPcCashPointUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cash_point: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            cash_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            error: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.cash_point).unwrap();
        self.cash_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error).unwrap();
        self.error_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.cash_point_raw.to_vec());
        wtr.append(&mut self.error_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_cash_point(&mut self, value: u32) {
        self.cash_point = value;
    }
    pub fn set_cash_point_raw(&mut self, value: [u8; 4]) {
        self.cash_point_raw = value;
    }
    pub fn set_error(&mut self, value: i16) {
        self.error = value;
    }
    pub fn set_error_raw(&mut self, value: [u8; 2]) {
        self.error_raw = value;
    }
    pub fn new() -> PacketZcPcCashPointUpdate {
        PacketZcPcCashPointUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x9]),
        packet_id_raw: [0x28, 0x9],
        cash_point: 0,
        cash_point_raw: [0; 4],
        error: 0,
        error_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcPcCashPointUpdate {
    fn id(&self) -> &str {
       "0x0289"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcCashPointUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNpcShowefstUpdate {
    pub fn packet_id() -> &'static str {
        "0x028a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNpcShowefstUpdate {
        let mut offset: usize = 0;
        PacketZcNpcShowefstUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            clevel: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            show_efst: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            show_efst_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.show_efst).unwrap();
        self.show_efst_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.show_efst_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i32) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 4]) {
        self.clevel_raw = value;
    }
    pub fn set_show_efst(&mut self, value: i32) {
        self.show_efst = value;
    }
    pub fn set_show_efst_raw(&mut self, value: [u8; 4]) {
        self.show_efst_raw = value;
    }
    pub fn new() -> PacketZcNpcShowefstUpdate {
        PacketZcNpcShowefstUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0xa]),
        packet_id_raw: [0x28, 0xa],
        aid: 0,
        aid_raw: [0; 4],
        effect_state: 0,
        effect_state_raw: [0; 4],
        clevel: 0,
        clevel_raw: [0; 4],
        show_efst: 0,
        show_efst_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNpcShowefstUpdate {
    fn id(&self) -> &str {
       "0x028a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNpcShowefstUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChSelectCharGoingtobeused {
    pub fn packet_id() -> &'static str {
        "0x028c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChSelectCharGoingtobeused {
        let mut offset: usize = 0;
        PacketChSelectCharGoingtobeused {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            n_count_selected_char: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            n_count_selected_char_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            ardw_selected_gid: {
                let field =  {
                let mut dst: [u32; 9] = [0_u32; 9];
                for (index, byte) in buffer[offset..offset + 9].iter().enumerate() {
                    dst[index] = *byte as u32;
                }
                dst
            };
                field
            },
            ardw_selected_gid_raw: {
                let mut dst: [u8; 9] = [0u8; 9];
                dst.clone_from_slice(&buffer[offset..offset + 9]);
                offset += 9;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_aid).unwrap();
        self.dw_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.n_count_selected_char).unwrap();
        self.n_count_selected_char_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.ardw_selected_gid {
            wtr.write_u32::<LittleEndian>(item).unwrap();
        }
        self.ardw_selected_gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.dw_aid_raw.to_vec());
        wtr.append(&mut self.n_count_selected_char_raw.to_vec());
        wtr.append(&mut self.ardw_selected_gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_dw_aid(&mut self, value: u32) {
        self.dw_aid = value;
    }
    pub fn set_dw_aid_raw(&mut self, value: [u8; 4]) {
        self.dw_aid_raw = value;
    }
    pub fn set_n_count_selected_char(&mut self, value: i32) {
        self.n_count_selected_char = value;
    }
    pub fn set_n_count_selected_char_raw(&mut self, value: [u8; 4]) {
        self.n_count_selected_char_raw = value;
    }
    pub fn set_ardw_selected_gid(&mut self, value: [u32; 9]) {
        self.ardw_selected_gid = value;
    }
    pub fn set_ardw_selected_gid_raw(&mut self, value: [u8; 9]) {
        self.ardw_selected_gid_raw = value;
    }
    pub fn new() -> PacketChSelectCharGoingtobeused {
        PacketChSelectCharGoingtobeused {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0xc]),
        packet_id_raw: [0x28, 0xc],
        dw_aid: 0,
        dw_aid_raw: [0; 4],
        n_count_selected_char: 0,
        n_count_selected_char_raw: [0; 4],
        ardw_selected_gid: [0; 9],
        ardw_selected_gid_raw: [0; 9],
        }
    }
}

impl Packet for PacketChSelectCharGoingtobeused {
    fn id(&self) -> &str {
       "0x028c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChSelectCharGoingtobeused {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChReqIsValidCharname {
    pub fn packet_id() -> &'static str {
        "0x028d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChReqIsValidCharname {
        let mut offset: usize = 0;
        PacketChReqIsValidCharname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sz_char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_aid).unwrap();
        self.dw_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_gid).unwrap();
        self.dw_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_char_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.dw_aid_raw.to_vec());
        wtr.append(&mut self.dw_gid_raw.to_vec());
        wtr.append(&mut self.sz_char_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_dw_aid(&mut self, value: u32) {
        self.dw_aid = value;
    }
    pub fn set_dw_aid_raw(&mut self, value: [u8; 4]) {
        self.dw_aid_raw = value;
    }
    pub fn set_dw_gid(&mut self, value: u32) {
        self.dw_gid = value;
    }
    pub fn set_dw_gid_raw(&mut self, value: [u8; 4]) {
        self.dw_gid_raw = value;
    }
    pub fn set_sz_char_name(&mut self, value: [char; 24]) {
        self.sz_char_name = value;
    }
    pub fn set_sz_char_name_raw(&mut self, value: [u8; 24]) {
        self.sz_char_name_raw = value;
    }
    pub fn new() -> PacketChReqIsValidCharname {
        PacketChReqIsValidCharname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0xd]),
        packet_id_raw: [0x28, 0xd],
        dw_aid: 0,
        dw_aid_raw: [0; 4],
        dw_gid: 0,
        dw_gid_raw: [0; 4],
        sz_char_name: [0 as char; 24],
        sz_char_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketChReqIsValidCharname {
    fn id(&self) -> &str {
       "0x028d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChReqIsValidCharname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcAckIsValidCharname {
    pub fn packet_id() -> &'static str {
        "0x028e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcAckIsValidCharname {
        let mut offset: usize = 0;
        PacketHcAckIsValidCharname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            s_result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            s_result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.s_result).unwrap();
        self.s_result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.s_result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_s_result(&mut self, value: i16) {
        self.s_result = value;
    }
    pub fn set_s_result_raw(&mut self, value: [u8; 2]) {
        self.s_result_raw = value;
    }
    pub fn new() -> PacketHcAckIsValidCharname {
        PacketHcAckIsValidCharname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0xe]),
        packet_id_raw: [0x28, 0xe],
        s_result: 0,
        s_result_raw: [0; 2],
        }
    }
}

impl Packet for PacketHcAckIsValidCharname {
    fn id(&self) -> &str {
       "0x028e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcAckIsValidCharname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChReqChangeCharname {
    pub fn packet_id() -> &'static str {
        "0x028f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChReqChangeCharname {
        let mut offset: usize = 0;
        PacketChReqChangeCharname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_gid).unwrap();
        self.dw_gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.dw_gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_dw_gid(&mut self, value: u32) {
        self.dw_gid = value;
    }
    pub fn set_dw_gid_raw(&mut self, value: [u8; 4]) {
        self.dw_gid_raw = value;
    }
    pub fn new() -> PacketChReqChangeCharname {
        PacketChReqChangeCharname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0xf]),
        packet_id_raw: [0x28, 0xf],
        dw_gid: 0,
        dw_gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketChReqChangeCharname {
    fn id(&self) -> &str {
       "0x028f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChReqChangeCharname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcAckChangeCharname {
    pub fn packet_id() -> &'static str {
        "0x0290"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcAckChangeCharname {
        let mut offset: usize = 0;
        PacketHcAckChangeCharname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            s_result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            s_result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.s_result).unwrap();
        self.s_result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.s_result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_s_result(&mut self, value: i16) {
        self.s_result = value;
    }
    pub fn set_s_result_raw(&mut self, value: [u8; 2]) {
        self.s_result_raw = value;
    }
    pub fn new() -> PacketHcAckChangeCharname {
        PacketHcAckChangeCharname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x0]),
        packet_id_raw: [0x29, 0x0],
        s_result: 0,
        s_result_raw: [0; 2],
        }
    }
}

impl Packet for PacketHcAckChangeCharname {
    fn id(&self) -> &str {
       "0x0290"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcAckChangeCharname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMsg {
    pub fn packet_id() -> &'static str {
        "0x0291"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMsg {
        let mut offset: usize = 0;
        PacketZcMsg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            msg_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.msg).unwrap();
        self.msg_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_msg(&mut self, value: u16) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: [u8; 2]) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcMsg {
        PacketZcMsg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x1]),
        packet_id_raw: [0x29, 0x1],
        msg: 0,
        msg_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcMsg {
    fn id(&self) -> &str {
       "0x0291"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMsg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzStandingResurrection {
    pub fn packet_id() -> &'static str {
        "0x0292"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzStandingResurrection {
        let mut offset: usize = 0;
        PacketCzStandingResurrection {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzStandingResurrection {
        PacketCzStandingResurrection {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x2]),
        packet_id_raw: [0x29, 0x2],
        }
    }
}

impl Packet for PacketCzStandingResurrection {
    fn id(&self) -> &str {
       "0x0292"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzStandingResurrection {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBossInfo {
    pub fn packet_id() -> &'static str {
        "0x0293"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBossInfo {
        let mut offset: usize = 0;
        PacketZcBossInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info_type: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            info_type_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            x_pos: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            y_pos: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            min_hour: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            min_hour_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            min_minute: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            min_minute_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hour: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_hour_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_minute: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_minute_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 51] = [0 as char; 51];
                for (index, byte) in buffer[offset..offset + 51].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 51] = [0u8; 51];
                dst.clone_from_slice(&buffer[offset..offset + 51]);
                offset += 51;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.info_type).unwrap();
        self.info_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.min_hour).unwrap();
        self.min_hour_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.min_minute).unwrap();
        self.min_minute_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.max_hour).unwrap();
        self.max_hour_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.max_minute).unwrap();
        self.max_minute_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_type_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.min_hour_raw.to_vec());
        wtr.append(&mut self.min_minute_raw.to_vec());
        wtr.append(&mut self.max_hour_raw.to_vec());
        wtr.append(&mut self.max_minute_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 70;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info_type(&mut self, value: u8) {
        self.info_type = value;
    }
    pub fn set_info_type_raw(&mut self, value: [u8; 1]) {
        self.info_type_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i32) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 4]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i32) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 4]) {
        self.y_pos_raw = value;
    }
    pub fn set_min_hour(&mut self, value: u16) {
        self.min_hour = value;
    }
    pub fn set_min_hour_raw(&mut self, value: [u8; 2]) {
        self.min_hour_raw = value;
    }
    pub fn set_min_minute(&mut self, value: u16) {
        self.min_minute = value;
    }
    pub fn set_min_minute_raw(&mut self, value: [u8; 2]) {
        self.min_minute_raw = value;
    }
    pub fn set_max_hour(&mut self, value: u16) {
        self.max_hour = value;
    }
    pub fn set_max_hour_raw(&mut self, value: [u8; 2]) {
        self.max_hour_raw = value;
    }
    pub fn set_max_minute(&mut self, value: u16) {
        self.max_minute = value;
    }
    pub fn set_max_minute_raw(&mut self, value: [u8; 2]) {
        self.max_minute_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 51]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 51]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcBossInfo {
        PacketZcBossInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x3]),
        packet_id_raw: [0x29, 0x3],
        info_type: 0,
        info_type_raw: [0; 1],
        x_pos: 0,
        x_pos_raw: [0; 4],
        y_pos: 0,
        y_pos_raw: [0; 4],
        min_hour: 0,
        min_hour_raw: [0; 2],
        min_minute: 0,
        min_minute_raw: [0; 2],
        max_hour: 0,
        max_hour_raw: [0; 2],
        max_minute: 0,
        max_minute_raw: [0; 2],
        name: [0 as char; 51],
        name_raw: [0; 51],
        }
    }
}

impl Packet for PacketZcBossInfo {
    fn id(&self) -> &str {
       "0x0293"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBossInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReadBook {
    pub fn packet_id() -> &'static str {
        "0x0294"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReadBook {
        let mut offset: usize = 0;
        PacketZcReadBook {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            book_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            book_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            page: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            page_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.book_id).unwrap();
        self.book_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.page).unwrap();
        self.page_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.book_id_raw.to_vec());
        wtr.append(&mut self.page_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_book_id(&mut self, value: u32) {
        self.book_id = value;
    }
    pub fn set_book_id_raw(&mut self, value: [u8; 4]) {
        self.book_id_raw = value;
    }
    pub fn set_page(&mut self, value: u32) {
        self.page = value;
    }
    pub fn set_page_raw(&mut self, value: [u8; 4]) {
        self.page_raw = value;
    }
    pub fn new() -> PacketZcReadBook {
        PacketZcReadBook {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x4]),
        packet_id_raw: [0x29, 0x4],
        book_id: 0,
        book_id_raw: [0; 4],
        page: 0,
        page_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcReadBook {
    fn id(&self) -> &str {
       "0x0294"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReadBook {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEquipmentItemlist2 {
    pub fn packet_id() -> &'static str {
        "0x0295"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEquipmentItemlist2 {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo2::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcEquipmentItemlist2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo2>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcEquipmentItemlist2 {
        PacketZcEquipmentItemlist2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x5]),
        packet_id_raw: [0x29, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcEquipmentItemlist2 {
    fn id(&self) -> &str {
       "0x0295"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEquipmentItemlist2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreEquipmentItemlist2 {
    pub fn packet_id() -> &'static str {
        "0x0296"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreEquipmentItemlist2 {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo2::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcStoreEquipmentItemlist2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo2>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcStoreEquipmentItemlist2 {
        PacketZcStoreEquipmentItemlist2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x6]),
        packet_id_raw: [0x29, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcStoreEquipmentItemlist2 {
    fn id(&self) -> &str {
       "0x0296"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreEquipmentItemlist2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartEquipmentItemlist2 {
    pub fn packet_id() -> &'static str {
        "0x0297"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartEquipmentItemlist2 {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo2::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo2> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo2::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcCartEquipmentItemlist2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo2>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcCartEquipmentItemlist2 {
        PacketZcCartEquipmentItemlist2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x7]),
        packet_id_raw: [0x29, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcCartEquipmentItemlist2 {
    fn id(&self) -> &str {
       "0x0297"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartEquipmentItemlist2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCashTimeCounter {
    pub fn packet_id() -> &'static str {
        "0x0298"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCashTimeCounter {
        let mut offset: usize = 0;
        PacketZcCashTimeCounter {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            remain_second: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            remain_second_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.remain_second).unwrap();
        self.remain_second_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.remain_second_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_remain_second(&mut self, value: u32) {
        self.remain_second = value;
    }
    pub fn set_remain_second_raw(&mut self, value: [u8; 4]) {
        self.remain_second_raw = value;
    }
    pub fn new() -> PacketZcCashTimeCounter {
        PacketZcCashTimeCounter {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x8]),
        packet_id_raw: [0x29, 0x8],
        itid: 0,
        itid_raw: [0; 2],
        remain_second: 0,
        remain_second_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcCashTimeCounter {
    fn id(&self) -> &str {
       "0x0298"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCashTimeCounter {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCashItemDelete {
    pub fn packet_id() -> &'static str {
        "0x0299"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCashItemDelete {
        let mut offset: usize = 0;
        PacketZcCashItemDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketZcCashItemDelete {
        PacketZcCashItemDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0x9]),
        packet_id_raw: [0x29, 0x9],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcCashItemDelete {
    fn id(&self) -> &str {
       "0x0299"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCashItemDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemPickupAck2 {
    pub fn packet_id() -> &'static str {
        "0x029a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemPickupAck2 {
        let mut offset: usize = 0;
        PacketZcItemPickupAck2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            hire_expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hire_expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hire_expire_date).unwrap();
        self.hire_expire_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.hire_expire_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 27;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: u16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_hire_expire_date(&mut self, value: i32) {
        self.hire_expire_date = value;
    }
    pub fn set_hire_expire_date_raw(&mut self, value: [u8; 4]) {
        self.hire_expire_date_raw = value;
    }
    pub fn new() -> PacketZcItemPickupAck2 {
        PacketZcItemPickupAck2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0xa]),
        packet_id_raw: [0x29, 0xa],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        location: 0,
        location_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        result: 0,
        result_raw: [0; 1],
        hire_expire_date: 0,
        hire_expire_date_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcItemPickupAck2 {
    fn id(&self) -> &str {
       "0x029a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemPickupAck2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMerInit {
    pub fn packet_id() -> &'static str {
        "0x029b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMerInit {
        let mut offset: usize = 0;
        PacketZcMerInit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            matk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            matk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hit: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hit_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            critical: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            critical_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            def: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            def_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            flee: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            flee_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_hp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            sp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_sp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_sp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            faith: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            faith_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            toal_call_num: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            toal_call_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            approval_monster_kill_counter: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            approval_monster_kill_counter_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atkrange: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atkrange_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atk).unwrap();
        self.atk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.matk).unwrap();
        self.matk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hit).unwrap();
        self.hit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.critical).unwrap();
        self.critical_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.def).unwrap();
        self.def_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef).unwrap();
        self.mdef_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.flee).unwrap();
        self.flee_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.aspd).unwrap();
        self.aspd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.sp).unwrap();
        self.sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_sp).unwrap();
        self.max_sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.expire_date).unwrap();
        self.expire_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.faith).unwrap();
        self.faith_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.toal_call_num).unwrap();
        self.toal_call_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.approval_monster_kill_counter).unwrap();
        self.approval_monster_kill_counter_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atkrange).unwrap();
        self.atkrange_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.atk_raw.to_vec());
        wtr.append(&mut self.matk_raw.to_vec());
        wtr.append(&mut self.hit_raw.to_vec());
        wtr.append(&mut self.critical_raw.to_vec());
        wtr.append(&mut self.def_raw.to_vec());
        wtr.append(&mut self.mdef_raw.to_vec());
        wtr.append(&mut self.flee_raw.to_vec());
        wtr.append(&mut self.aspd_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.sp_raw.to_vec());
        wtr.append(&mut self.max_sp_raw.to_vec());
        wtr.append(&mut self.expire_date_raw.to_vec());
        wtr.append(&mut self.faith_raw.to_vec());
        wtr.append(&mut self.toal_call_num_raw.to_vec());
        wtr.append(&mut self.approval_monster_kill_counter_raw.to_vec());
        wtr.append(&mut self.atkrange_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 80;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_atk(&mut self, value: i16) {
        self.atk = value;
    }
    pub fn set_atk_raw(&mut self, value: [u8; 2]) {
        self.atk_raw = value;
    }
    pub fn set_matk(&mut self, value: i16) {
        self.matk = value;
    }
    pub fn set_matk_raw(&mut self, value: [u8; 2]) {
        self.matk_raw = value;
    }
    pub fn set_hit(&mut self, value: i16) {
        self.hit = value;
    }
    pub fn set_hit_raw(&mut self, value: [u8; 2]) {
        self.hit_raw = value;
    }
    pub fn set_critical(&mut self, value: i16) {
        self.critical = value;
    }
    pub fn set_critical_raw(&mut self, value: [u8; 2]) {
        self.critical_raw = value;
    }
    pub fn set_def(&mut self, value: i16) {
        self.def = value;
    }
    pub fn set_def_raw(&mut self, value: [u8; 2]) {
        self.def_raw = value;
    }
    pub fn set_mdef(&mut self, value: i16) {
        self.mdef = value;
    }
    pub fn set_mdef_raw(&mut self, value: [u8; 2]) {
        self.mdef_raw = value;
    }
    pub fn set_flee(&mut self, value: i16) {
        self.flee = value;
    }
    pub fn set_flee_raw(&mut self, value: [u8; 2]) {
        self.flee_raw = value;
    }
    pub fn set_aspd(&mut self, value: i16) {
        self.aspd = value;
    }
    pub fn set_aspd_raw(&mut self, value: [u8; 2]) {
        self.aspd_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_hp(&mut self, value: i32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_max_hp(&mut self, value: i32) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 4]) {
        self.max_hp_raw = value;
    }
    pub fn set_sp(&mut self, value: i32) {
        self.sp = value;
    }
    pub fn set_sp_raw(&mut self, value: [u8; 4]) {
        self.sp_raw = value;
    }
    pub fn set_max_sp(&mut self, value: i32) {
        self.max_sp = value;
    }
    pub fn set_max_sp_raw(&mut self, value: [u8; 4]) {
        self.max_sp_raw = value;
    }
    pub fn set_expire_date(&mut self, value: i32) {
        self.expire_date = value;
    }
    pub fn set_expire_date_raw(&mut self, value: [u8; 4]) {
        self.expire_date_raw = value;
    }
    pub fn set_faith(&mut self, value: i16) {
        self.faith = value;
    }
    pub fn set_faith_raw(&mut self, value: [u8; 2]) {
        self.faith_raw = value;
    }
    pub fn set_toal_call_num(&mut self, value: i32) {
        self.toal_call_num = value;
    }
    pub fn set_toal_call_num_raw(&mut self, value: [u8; 4]) {
        self.toal_call_num_raw = value;
    }
    pub fn set_approval_monster_kill_counter(&mut self, value: i32) {
        self.approval_monster_kill_counter = value;
    }
    pub fn set_approval_monster_kill_counter_raw(&mut self, value: [u8; 4]) {
        self.approval_monster_kill_counter_raw = value;
    }
    pub fn set_atkrange(&mut self, value: i16) {
        self.atkrange = value;
    }
    pub fn set_atkrange_raw(&mut self, value: [u8; 2]) {
        self.atkrange_raw = value;
    }
    pub fn new() -> PacketZcMerInit {
        PacketZcMerInit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0xb]),
        packet_id_raw: [0x29, 0xb],
        aid: 0,
        aid_raw: [0; 4],
        atk: 0,
        atk_raw: [0; 2],
        matk: 0,
        matk_raw: [0; 2],
        hit: 0,
        hit_raw: [0; 2],
        critical: 0,
        critical_raw: [0; 2],
        def: 0,
        def_raw: [0; 2],
        mdef: 0,
        mdef_raw: [0; 2],
        flee: 0,
        flee_raw: [0; 2],
        aspd: 0,
        aspd_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        level: 0,
        level_raw: [0; 2],
        hp: 0,
        hp_raw: [0; 4],
        max_hp: 0,
        max_hp_raw: [0; 4],
        sp: 0,
        sp_raw: [0; 4],
        max_sp: 0,
        max_sp_raw: [0; 4],
        expire_date: 0,
        expire_date_raw: [0; 4],
        faith: 0,
        faith_raw: [0; 2],
        toal_call_num: 0,
        toal_call_num_raw: [0; 4],
        approval_monster_kill_counter: 0,
        approval_monster_kill_counter_raw: [0; 4],
        atkrange: 0,
        atkrange_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcMerInit {
    fn id(&self) -> &str {
       "0x029b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMerInit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMerProperty {
    pub fn packet_id() -> &'static str {
        "0x029c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMerProperty {
        let mut offset: usize = 0;
        PacketZcMerProperty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            matk: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            matk_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hit: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hit_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            critical: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            critical_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            def: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            def_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mdef: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            mdef_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            flee: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            flee_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aspd: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            aspd_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_sp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            faith: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            faith_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            toal_call_num: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            toal_call_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            approval_monster_kill_counter: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            approval_monster_kill_counter_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atk).unwrap();
        self.atk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.matk).unwrap();
        self.matk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hit).unwrap();
        self.hit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.critical).unwrap();
        self.critical_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.def).unwrap();
        self.def_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.mdef).unwrap();
        self.mdef_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.flee).unwrap();
        self.flee_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.aspd).unwrap();
        self.aspd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sp).unwrap();
        self.sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_sp).unwrap();
        self.max_sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.expire_date).unwrap();
        self.expire_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.faith).unwrap();
        self.faith_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.toal_call_num).unwrap();
        self.toal_call_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.approval_monster_kill_counter).unwrap();
        self.approval_monster_kill_counter_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atk_raw.to_vec());
        wtr.append(&mut self.matk_raw.to_vec());
        wtr.append(&mut self.hit_raw.to_vec());
        wtr.append(&mut self.critical_raw.to_vec());
        wtr.append(&mut self.def_raw.to_vec());
        wtr.append(&mut self.mdef_raw.to_vec());
        wtr.append(&mut self.flee_raw.to_vec());
        wtr.append(&mut self.aspd_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.sp_raw.to_vec());
        wtr.append(&mut self.max_sp_raw.to_vec());
        wtr.append(&mut self.expire_date_raw.to_vec());
        wtr.append(&mut self.faith_raw.to_vec());
        wtr.append(&mut self.toal_call_num_raw.to_vec());
        wtr.append(&mut self.approval_monster_kill_counter_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 66;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atk(&mut self, value: i16) {
        self.atk = value;
    }
    pub fn set_atk_raw(&mut self, value: [u8; 2]) {
        self.atk_raw = value;
    }
    pub fn set_matk(&mut self, value: i16) {
        self.matk = value;
    }
    pub fn set_matk_raw(&mut self, value: [u8; 2]) {
        self.matk_raw = value;
    }
    pub fn set_hit(&mut self, value: i16) {
        self.hit = value;
    }
    pub fn set_hit_raw(&mut self, value: [u8; 2]) {
        self.hit_raw = value;
    }
    pub fn set_critical(&mut self, value: i16) {
        self.critical = value;
    }
    pub fn set_critical_raw(&mut self, value: [u8; 2]) {
        self.critical_raw = value;
    }
    pub fn set_def(&mut self, value: i16) {
        self.def = value;
    }
    pub fn set_def_raw(&mut self, value: [u8; 2]) {
        self.def_raw = value;
    }
    pub fn set_mdef(&mut self, value: i16) {
        self.mdef = value;
    }
    pub fn set_mdef_raw(&mut self, value: [u8; 2]) {
        self.mdef_raw = value;
    }
    pub fn set_flee(&mut self, value: i16) {
        self.flee = value;
    }
    pub fn set_flee_raw(&mut self, value: [u8; 2]) {
        self.flee_raw = value;
    }
    pub fn set_aspd(&mut self, value: i16) {
        self.aspd = value;
    }
    pub fn set_aspd_raw(&mut self, value: [u8; 2]) {
        self.aspd_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_hp(&mut self, value: i16) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 2]) {
        self.hp_raw = value;
    }
    pub fn set_max_hp(&mut self, value: i16) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 2]) {
        self.max_hp_raw = value;
    }
    pub fn set_sp(&mut self, value: i16) {
        self.sp = value;
    }
    pub fn set_sp_raw(&mut self, value: [u8; 2]) {
        self.sp_raw = value;
    }
    pub fn set_max_sp(&mut self, value: i16) {
        self.max_sp = value;
    }
    pub fn set_max_sp_raw(&mut self, value: [u8; 2]) {
        self.max_sp_raw = value;
    }
    pub fn set_expire_date(&mut self, value: i32) {
        self.expire_date = value;
    }
    pub fn set_expire_date_raw(&mut self, value: [u8; 4]) {
        self.expire_date_raw = value;
    }
    pub fn set_faith(&mut self, value: i16) {
        self.faith = value;
    }
    pub fn set_faith_raw(&mut self, value: [u8; 2]) {
        self.faith_raw = value;
    }
    pub fn set_toal_call_num(&mut self, value: i32) {
        self.toal_call_num = value;
    }
    pub fn set_toal_call_num_raw(&mut self, value: [u8; 4]) {
        self.toal_call_num_raw = value;
    }
    pub fn set_approval_monster_kill_counter(&mut self, value: i32) {
        self.approval_monster_kill_counter = value;
    }
    pub fn set_approval_monster_kill_counter_raw(&mut self, value: [u8; 4]) {
        self.approval_monster_kill_counter_raw = value;
    }
    pub fn new() -> PacketZcMerProperty {
        PacketZcMerProperty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0xc]),
        packet_id_raw: [0x29, 0xc],
        atk: 0,
        atk_raw: [0; 2],
        matk: 0,
        matk_raw: [0; 2],
        hit: 0,
        hit_raw: [0; 2],
        critical: 0,
        critical_raw: [0; 2],
        def: 0,
        def_raw: [0; 2],
        mdef: 0,
        mdef_raw: [0; 2],
        flee: 0,
        flee_raw: [0; 2],
        aspd: 0,
        aspd_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        level: 0,
        level_raw: [0; 2],
        hp: 0,
        hp_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 2],
        sp: 0,
        sp_raw: [0; 2],
        max_sp: 0,
        max_sp_raw: [0; 2],
        expire_date: 0,
        expire_date_raw: [0; 4],
        faith: 0,
        faith_raw: [0; 2],
        toal_call_num: 0,
        toal_call_num_raw: [0; 4],
        approval_monster_kill_counter: 0,
        approval_monster_kill_counter_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMerProperty {
    fn id(&self) -> &str {
       "0x029c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMerProperty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMerSkillinfoList {
    pub fn packet_id() -> &'static str {
        "0x029d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMerSkillinfoList {
        let mut offset: usize = 0;
        let vec_type_len = SKILLINFO::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<SKILLINFO> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(SKILLINFO::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcMerSkillinfoList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skill_list: {
                let field = vec_field.clone();
                field
            },
            skill_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.skill_list_raw = {
            self.skill_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.skill_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.skill_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_skill_list(&mut self, value: Vec<SKILLINFO>) {
        self.skill_list = value;
    }
    pub fn set_skill_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.skill_list_raw = value;
    }
    pub fn new() -> PacketZcMerSkillinfoList {
        PacketZcMerSkillinfoList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0xd]),
        packet_id_raw: [0x29, 0xd],
        packet_length: 0,
        packet_length_raw: [0; 2],
        skill_list: vec![],
        skill_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcMerSkillinfoList {
    fn id(&self) -> &str {
       "0x029d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMerSkillinfoList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMerSkillinfoUpdate {
    pub fn packet_id() -> &'static str {
        "0x029e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMerSkillinfoUpdate {
        let mut offset: usize = 0;
        PacketZcMerSkillinfoUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            spcost: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            spcost_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            attack_range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            attack_range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            upgradable: {
                let field = buffer[offset] == 1;
                field
            },
            upgradable_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.spcost).unwrap();
        self.spcost_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.attack_range).unwrap();
        self.attack_range_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.upgradable as u8).unwrap();
        self.upgradable_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.spcost_raw.to_vec());
        wtr.append(&mut self.attack_range_raw.to_vec());
        wtr.append(&mut self.upgradable_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_spcost(&mut self, value: i16) {
        self.spcost = value;
    }
    pub fn set_spcost_raw(&mut self, value: [u8; 2]) {
        self.spcost_raw = value;
    }
    pub fn set_attack_range(&mut self, value: i16) {
        self.attack_range = value;
    }
    pub fn set_attack_range_raw(&mut self, value: [u8; 2]) {
        self.attack_range_raw = value;
    }
    pub fn set_upgradable(&mut self, value: bool) {
        self.upgradable = value;
    }
    pub fn set_upgradable_raw(&mut self, value: [u8; 1]) {
        self.upgradable_raw = value;
    }
    pub fn new() -> PacketZcMerSkillinfoUpdate {
        PacketZcMerSkillinfoUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0xe]),
        packet_id_raw: [0x29, 0xe],
        skid: 0,
        skid_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        spcost: 0,
        spcost_raw: [0; 2],
        attack_range: 0,
        attack_range_raw: [0; 2],
        upgradable: false,
        upgradable_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcMerSkillinfoUpdate {
    fn id(&self) -> &str {
       "0x029e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMerSkillinfoUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMerCommand {
    pub fn packet_id() -> &'static str {
        "0x029f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMerCommand {
        let mut offset: usize = 0;
        PacketCzMerCommand {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            command: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            command_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.command).unwrap();
        self.command_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.command_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_command(&mut self, value: i8) {
        self.command = value;
    }
    pub fn set_command_raw(&mut self, value: [u8; 1]) {
        self.command_raw = value;
    }
    pub fn new() -> PacketCzMerCommand {
        PacketCzMerCommand {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x29, 0xf]),
        packet_id_raw: [0x29, 0xf],
        command: 0,
        command_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzMerCommand {
    fn id(&self) -> &str {
       "0x029f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMerCommand {
    fn default() -> Self {

       Self::new()
    }
}

impl UnusedPacketCzMerUseSkill {
    pub fn packet_id() -> &'static str {
        "0x02a0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> UnusedPacketCzMerUseSkill {
        let mut offset: usize = 0;
        UnusedPacketCzMerUseSkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            selected_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            selected_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.selected_level).unwrap();
        self.selected_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.selected_level_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_selected_level(&mut self, value: i16) {
        self.selected_level = value;
    }
    pub fn set_selected_level_raw(&mut self, value: [u8; 2]) {
        self.selected_level_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn new() -> UnusedPacketCzMerUseSkill {
        UnusedPacketCzMerUseSkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0x0]),
        packet_id_raw: [0x2a, 0x0],
        selected_level: 0,
        selected_level_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        target_id: 0,
        target_id_raw: [0; 4],
        }
    }
}

impl Packet for UnusedPacketCzMerUseSkill {
    fn id(&self) -> &str {
       "0x02a0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for UnusedPacketCzMerUseSkill {
    fn default() -> Self {

       Self::new()
    }
}

impl UnusedPacketCzMerUpgradeSkilllevel {
    pub fn packet_id() -> &'static str {
        "0x02a1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> UnusedPacketCzMerUpgradeSkilllevel {
        let mut offset: usize = 0;
        UnusedPacketCzMerUpgradeSkilllevel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn new() -> UnusedPacketCzMerUpgradeSkilllevel {
        UnusedPacketCzMerUpgradeSkilllevel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0x1]),
        packet_id_raw: [0x2a, 0x1],
        skid: 0,
        skid_raw: [0; 2],
        }
    }
}

impl Packet for UnusedPacketCzMerUpgradeSkilllevel {
    fn id(&self) -> &str {
       "0x02a1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for UnusedPacketCzMerUpgradeSkilllevel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMerParChange {
    pub fn packet_id() -> &'static str {
        "0x02a2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMerParChange {
        let mut offset: usize = 0;
        PacketZcMerParChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            var: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var).unwrap();
        self.var_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.var_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_var(&mut self, value: u16) {
        self.var = value;
    }
    pub fn set_var_raw(&mut self, value: [u8; 2]) {
        self.var_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcMerParChange {
        PacketZcMerParChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0x2]),
        packet_id_raw: [0x2a, 0x2],
        var: 0,
        var_raw: [0; 2],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMerParChange {
    fn id(&self) -> &str {
       "0x02a2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMerParChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcGameguardLingoKey {
    pub fn packet_id() -> &'static str {
        "0x02a3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcGameguardLingoKey {
        let mut offset: usize = 0;
        PacketZcGameguardLingoKey {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            lingo_key: {
                let field = PggLingoKeyTemp::from(&buffer[offset..offset + PggLingoKeyTemp::base_len(packetver)], packetver);
                field
            },
            lingo_key_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.lingo_key.fill_raw_with_packetver(packetver);
        self.lingo_key_raw = self.lingo_key.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.lingo_key_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_lingo_key(&mut self, value: PggLingoKeyTemp) {
        self.lingo_key = value;
    }
    pub fn set_lingo_key_raw(&mut self, value: Vec<u8>) {
        self.lingo_key_raw = value;
    }
    pub fn new() -> PacketZcGameguardLingoKey {
        PacketZcGameguardLingoKey {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0x3]),
        packet_id_raw: [0x2a, 0x3],
        lingo_key: PggLingoKeyTemp::new(),
        lingo_key_raw: vec![],
        }
    }
}

impl Packet for PacketZcGameguardLingoKey {
    fn id(&self) -> &str {
       "0x02a3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcGameguardLingoKey {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzKsyEvent {
    pub fn packet_id() -> &'static str {
        "0x02a5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzKsyEvent {
        let mut offset: usize = 0;
        PacketCzKsyEvent {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzKsyEvent {
        PacketCzKsyEvent {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0x5]),
        packet_id_raw: [0x2a, 0x5],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzKsyEvent {
    fn id(&self) -> &str {
       "0x02a5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzKsyEvent {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqCashPassword {
    pub fn packet_id() -> &'static str {
        "0x02aa"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqCashPassword {
        let mut offset: usize = 0;
        PacketZcReqCashPassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            info_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.info).unwrap();
        self.info_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: i16) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: [u8; 2]) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcReqCashPassword {
        PacketZcReqCashPassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0xa]),
        packet_id_raw: [0x2a, 0xa],
        info: 0,
        info_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcReqCashPassword {
    fn id(&self) -> &str {
       "0x02aa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqCashPassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzAckCashPassword {
    pub fn packet_id() -> &'static str {
        "0x02ab"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzAckCashPassword {
        let mut offset: usize = 0;
        PacketCzAckCashPassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            password: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            password_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            new_password: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            new_password_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.password {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.password_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.new_password {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.new_password_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.password_raw.to_vec());
        wtr.append(&mut self.new_password_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 36;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_password(&mut self, value: [char; 16]) {
        self.password = value;
    }
    pub fn set_password_raw(&mut self, value: [u8; 16]) {
        self.password_raw = value;
    }
    pub fn set_new_password(&mut self, value: [char; 16]) {
        self.new_password = value;
    }
    pub fn set_new_password_raw(&mut self, value: [u8; 16]) {
        self.new_password_raw = value;
    }
    pub fn new() -> PacketCzAckCashPassword {
        PacketCzAckCashPassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0xb]),
        packet_id_raw: [0x2a, 0xb],
        atype: 0,
        atype_raw: [0; 2],
        password: [0 as char; 16],
        password_raw: [0; 16],
        new_password: [0 as char; 16],
        new_password_raw: [0; 16],
        }
    }
}

impl Packet for PacketCzAckCashPassword {
    fn id(&self) -> &str {
       "0x02ab"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzAckCashPassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcResultCashPassword {
    pub fn packet_id() -> &'static str {
        "0x02ac"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcResultCashPassword {
        let mut offset: usize = 0;
        PacketZcResultCashPassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_count).unwrap();
        self.error_count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.error_count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_error_count(&mut self, value: i16) {
        self.error_count = value;
    }
    pub fn set_error_count_raw(&mut self, value: [u8; 2]) {
        self.error_count_raw = value;
    }
    pub fn new() -> PacketZcResultCashPassword {
        PacketZcResultCashPassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0xc]),
        packet_id_raw: [0x2a, 0xc],
        result: 0,
        result_raw: [0; 2],
        error_count: 0,
        error_count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcResultCashPassword {
    fn id(&self) -> &str {
       "0x02ac"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcResultCashPassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcRequestSecondPassword {
    pub fn packet_id() -> &'static str {
        "0x02ad"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcRequestSecondPassword {
        let mut offset: usize = 0;
        PacketAcRequestSecondPassword {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_seed: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_seed_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_seed).unwrap();
        self.dw_seed_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.dw_seed_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_dw_seed(&mut self, value: u32) {
        self.dw_seed = value;
    }
    pub fn set_dw_seed_raw(&mut self, value: [u8; 4]) {
        self.dw_seed_raw = value;
    }
    pub fn new() -> PacketAcRequestSecondPassword {
        PacketAcRequestSecondPassword {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2a, 0xd]),
        packet_id_raw: [0x2a, 0xd],
        result: 0,
        result_raw: [0; 2],
        dw_seed: 0,
        dw_seed_raw: [0; 4],
        }
    }
}

impl Packet for PacketAcRequestSecondPassword {
    fn id(&self) -> &str {
       "0x02ad"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcRequestSecondPassword {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaLoginHan {
    pub fn packet_id() -> &'static str {
        "0x02b0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaLoginHan {
        let mut offset: usize = 0;
        PacketCaLoginHan {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            m_sz_ip: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_sz_ip_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            m_sz_mac_addr: {
                let field =  {
                let mut dst: [char; 13] = [0 as char; 13];
                for (index, byte) in buffer[offset..offset + 13].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            m_sz_mac_addr_raw: {
                let mut dst: [u8; 13] = [0u8; 13];
                dst.clone_from_slice(&buffer[offset..offset + 13]);
                offset += 13;
                dst
            },
            is_han_game_user: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            is_han_game_user_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_sz_ip {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_sz_ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.m_sz_mac_addr {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.m_sz_mac_addr_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_han_game_user).unwrap();
        self.is_han_game_user_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        wtr.append(&mut self.m_sz_ip_raw.to_vec());
        wtr.append(&mut self.m_sz_mac_addr_raw.to_vec());
        wtr.append(&mut self.is_han_game_user_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 85;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 24]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 24]) {
        self.passwd_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn set_m_sz_ip(&mut self, value: [char; 16]) {
        self.m_sz_ip = value;
    }
    pub fn set_m_sz_ip_raw(&mut self, value: [u8; 16]) {
        self.m_sz_ip_raw = value;
    }
    pub fn set_m_sz_mac_addr(&mut self, value: [char; 13]) {
        self.m_sz_mac_addr = value;
    }
    pub fn set_m_sz_mac_addr_raw(&mut self, value: [u8; 13]) {
        self.m_sz_mac_addr_raw = value;
    }
    pub fn set_is_han_game_user(&mut self, value: u8) {
        self.is_han_game_user = value;
    }
    pub fn set_is_han_game_user_raw(&mut self, value: [u8; 1]) {
        self.is_han_game_user_raw = value;
    }
    pub fn new() -> PacketCaLoginHan {
        PacketCaLoginHan {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x0]),
        packet_id_raw: [0x2b, 0x0],
        version: 0,
        version_raw: [0; 4],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd: [0 as char; 24],
        passwd_raw: [0; 24],
        clienttype: 0,
        clienttype_raw: [0; 1],
        m_sz_ip: [0 as char; 16],
        m_sz_ip_raw: [0; 16],
        m_sz_mac_addr: [0 as char; 13],
        m_sz_mac_addr_raw: [0; 13],
        is_han_game_user: 0,
        is_han_game_user_raw: [0; 1],
        }
    }
}

impl Packet for PacketCaLoginHan {
    fn id(&self) -> &str {
       "0x02b0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaLoginHan {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAllQuestList {
    pub fn packet_id() -> &'static str {
        "0x02b1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAllQuestList {
        let mut offset: usize = 0;
        let vec_type_len = PacketZcQuestInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<PacketZcQuestInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(PacketZcQuestInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAllQuestList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            quest_count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            quest_list: {
                let field = vec_field.clone();
                field
            },
            quest_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.quest_count).unwrap();
        self.quest_count_raw = wtr.try_into().unwrap();
        self.quest_list_raw = {
            self.quest_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.quest_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.quest_count_raw.to_vec());
        self.quest_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_quest_count(&mut self, value: i32) {
        self.quest_count = value;
    }
    pub fn set_quest_count_raw(&mut self, value: [u8; 4]) {
        self.quest_count_raw = value;
    }
    pub fn set_quest_list(&mut self, value: Vec<PacketZcQuestInfo>) {
        self.quest_list = value;
    }
    pub fn set_quest_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.quest_list_raw = value;
    }
    pub fn new() -> PacketZcAllQuestList {
        PacketZcAllQuestList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x1]),
        packet_id_raw: [0x2b, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        quest_count: 0,
        quest_count_raw: [0; 4],
        quest_list: vec![],
        quest_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcAllQuestList {
    fn id(&self) -> &str {
       "0x02b1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAllQuestList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAllQuestMission {
    pub fn packet_id() -> &'static str {
        "0x02b2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAllQuestMission {
        let mut offset: usize = 0;
        let vec_type_len = PacketZcQuestMissionInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<PacketZcQuestMissionInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(PacketZcQuestMissionInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAllQuestMission {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            quest_mission_list: {
                let field = vec_field.clone();
                field
            },
            quest_mission_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        self.quest_mission_list_raw = {
            self.quest_mission_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.quest_mission_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.quest_mission_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_quest_mission_list(&mut self, value: Vec<PacketZcQuestMissionInfo>) {
        self.quest_mission_list = value;
    }
    pub fn set_quest_mission_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.quest_mission_list_raw = value;
    }
    pub fn new() -> PacketZcAllQuestMission {
        PacketZcAllQuestMission {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x2]),
        packet_id_raw: [0x2b, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        count: 0,
        count_raw: [0; 4],
        quest_mission_list: vec![],
        quest_mission_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcAllQuestMission {
    fn id(&self) -> &str {
       "0x02b2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAllQuestMission {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddQuest {
    pub fn packet_id() -> &'static str {
        "0x02b3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddQuest {
        let mut offset: usize = 0;
        let vec_type_len = PacketZcMissionHunt::base_len(packetver);
        let iter_count = (&buffer.len() - 17) / vec_type_len;
        let mut vec_field: Vec<PacketZcMissionHunt> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 17 + (vec_type_len * (i - 1));
            let end_pos = 17 + vec_type_len * i;
            vec_field.push(PacketZcMissionHunt::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAddQuest {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            active: {
                let field = buffer[offset] == 1;
                field
            },
            active_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            quest_svr_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_svr_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            quest_end_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_end_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hunt: {
                let field = vec_field.clone();
                field
            },
            hunt_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.active as u8).unwrap();
        self.active_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.quest_svr_time).unwrap();
        self.quest_svr_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.quest_end_time).unwrap();
        self.quest_end_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        self.hunt_raw = {
            self.hunt.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.hunt.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.quest_id_raw.to_vec());
        wtr.append(&mut self.active_raw.to_vec());
        wtr.append(&mut self.quest_svr_time_raw.to_vec());
        wtr.append(&mut self.quest_end_time_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.hunt.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 17;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn set_active(&mut self, value: bool) {
        self.active = value;
    }
    pub fn set_active_raw(&mut self, value: [u8; 1]) {
        self.active_raw = value;
    }
    pub fn set_quest_svr_time(&mut self, value: i32) {
        self.quest_svr_time = value;
    }
    pub fn set_quest_svr_time_raw(&mut self, value: [u8; 4]) {
        self.quest_svr_time_raw = value;
    }
    pub fn set_quest_end_time(&mut self, value: i32) {
        self.quest_end_time = value;
    }
    pub fn set_quest_end_time_raw(&mut self, value: [u8; 4]) {
        self.quest_end_time_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_hunt(&mut self, value: Vec<PacketZcMissionHunt>) {
        self.hunt = value;
    }
    pub fn set_hunt_raw(&mut self, value: Vec<Vec<u8>>) {
        self.hunt_raw = value;
    }
    pub fn new() -> PacketZcAddQuest {
        PacketZcAddQuest {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x3]),
        packet_id_raw: [0x2b, 0x3],
        quest_id: 0,
        quest_id_raw: [0; 4],
        active: false,
        active_raw: [0; 1],
        quest_svr_time: 0,
        quest_svr_time_raw: [0; 4],
        quest_end_time: 0,
        quest_end_time_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        hunt: vec![],
        hunt_raw: vec![],
        }
    }
}

impl Packet for PacketZcAddQuest {
    fn id(&self) -> &str {
       "0x02b3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddQuest {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDelQuest {
    pub fn packet_id() -> &'static str {
        "0x02b4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDelQuest {
        let mut offset: usize = 0;
        PacketZcDelQuest {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.quest_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn new() -> PacketZcDelQuest {
        PacketZcDelQuest {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x4]),
        packet_id_raw: [0x2b, 0x4],
        quest_id: 0,
        quest_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDelQuest {
    fn id(&self) -> &str {
       "0x02b4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDelQuest {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUpdateMissionHunt {
    pub fn packet_id() -> &'static str {
        "0x02b5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUpdateMissionHunt {
        let mut offset: usize = 0;
        let vec_type_len = PacketMobHunting::base_len(packetver);
        let iter_count = (&buffer.len() - 6) / vec_type_len;
        let mut vec_field: Vec<PacketMobHunting> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 6 + (vec_type_len * (i - 1));
            let end_pos = 6 + vec_type_len * i;
            vec_field.push(PacketMobHunting::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcUpdateMissionHunt {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mob_hunt_list: {
                let field = vec_field.clone();
                field
            },
            mob_hunt_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        self.mob_hunt_list_raw = {
            self.mob_hunt_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.mob_hunt_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.mob_hunt_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_mob_hunt_list(&mut self, value: Vec<PacketMobHunting>) {
        self.mob_hunt_list = value;
    }
    pub fn set_mob_hunt_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.mob_hunt_list_raw = value;
    }
    pub fn new() -> PacketZcUpdateMissionHunt {
        PacketZcUpdateMissionHunt {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x5]),
        packet_id_raw: [0x2b, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        mob_hunt_list: vec![],
        mob_hunt_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcUpdateMissionHunt {
    fn id(&self) -> &str {
       "0x02b5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUpdateMissionHunt {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzActiveQuest {
    pub fn packet_id() -> &'static str {
        "0x02b6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzActiveQuest {
        let mut offset: usize = 0;
        PacketCzActiveQuest {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            active: {
                let field = buffer[offset] == 1;
                field
            },
            active_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.active as u8).unwrap();
        self.active_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.quest_id_raw.to_vec());
        wtr.append(&mut self.active_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn set_active(&mut self, value: bool) {
        self.active = value;
    }
    pub fn set_active_raw(&mut self, value: [u8; 1]) {
        self.active_raw = value;
    }
    pub fn new() -> PacketCzActiveQuest {
        PacketCzActiveQuest {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x6]),
        packet_id_raw: [0x2b, 0x6],
        quest_id: 0,
        quest_id_raw: [0; 4],
        active: false,
        active_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzActiveQuest {
    fn id(&self) -> &str {
       "0x02b6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzActiveQuest {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcActiveQuest {
    pub fn packet_id() -> &'static str {
        "0x02b7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcActiveQuest {
        let mut offset: usize = 0;
        PacketZcActiveQuest {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            active: {
                let field = buffer[offset] == 1;
                field
            },
            active_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.active as u8).unwrap();
        self.active_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.quest_id_raw.to_vec());
        wtr.append(&mut self.active_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn set_active(&mut self, value: bool) {
        self.active = value;
    }
    pub fn set_active_raw(&mut self, value: [u8; 1]) {
        self.active_raw = value;
    }
    pub fn new() -> PacketZcActiveQuest {
        PacketZcActiveQuest {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x7]),
        packet_id_raw: [0x2b, 0x7],
        quest_id: 0,
        quest_id_raw: [0; 4],
        active: false,
        active_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcActiveQuest {
    fn id(&self) -> &str {
       "0x02b7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcActiveQuest {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemPickupParty {
    pub fn packet_id() -> &'static str {
        "0x02b8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemPickupParty {
        let mut offset: usize = 0;
        PacketZcItemPickupParty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcItemPickupParty {
        PacketZcItemPickupParty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x8]),
        packet_id_raw: [0x2b, 0x8],
        account_id: 0,
        account_id_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        location: 0,
        location_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcItemPickupParty {
    fn id(&self) -> &str {
       "0x02b8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemPickupParty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcShortcutKeyList {
    pub fn packet_id() -> &'static str {
        "0x02b9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcShortcutKeyList {
        let mut offset: usize = 0;
        let vec_type_len = ShortCutKey::base_len(packetver);
        let iter_count = (&buffer.len() - 2) / vec_type_len;
        let mut vec_field: Vec<ShortCutKey> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 2 + (vec_type_len * (i - 1));
            let end_pos = 2 + vec_type_len * i;
            vec_field.push(ShortCutKey::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcShortcutKeyList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            short_cut_key: {
                let field = vec_field.clone();
                field
            },
            short_cut_key_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.short_cut_key_raw = {
            self.short_cut_key.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.short_cut_key.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.short_cut_key.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_short_cut_key(&mut self, value: Vec<ShortCutKey>) {
        self.short_cut_key = value;
    }
    pub fn set_short_cut_key_raw(&mut self, value: Vec<Vec<u8>>) {
        self.short_cut_key_raw = value;
    }
    pub fn new() -> PacketZcShortcutKeyList {
        PacketZcShortcutKeyList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0x9]),
        packet_id_raw: [0x2b, 0x9],
        short_cut_key: vec![],
        short_cut_key_raw: vec![],
        }
    }
}

impl Packet for PacketZcShortcutKeyList {
    fn id(&self) -> &str {
       "0x02b9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcShortcutKeyList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzShortcutKeyChange {
    pub fn packet_id() -> &'static str {
        "0x02ba"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzShortcutKeyChange {
        let mut offset: usize = 0;
        PacketCzShortcutKeyChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            short_cut_key: {
                let field = ShortCutKey::from(&buffer[offset..offset + ShortCutKey::base_len(packetver)], packetver);
                field
            },
            short_cut_key_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        self.short_cut_key.fill_raw_with_packetver(packetver);
        self.short_cut_key_raw = self.short_cut_key.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.short_cut_key_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_short_cut_key(&mut self, value: ShortCutKey) {
        self.short_cut_key = value;
    }
    pub fn set_short_cut_key_raw(&mut self, value: Vec<u8>) {
        self.short_cut_key_raw = value;
    }
    pub fn new() -> PacketCzShortcutKeyChange {
        PacketCzShortcutKeyChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0xa]),
        packet_id_raw: [0x2b, 0xa],
        index: 0,
        index_raw: [0; 2],
        short_cut_key: ShortCutKey::new(),
        short_cut_key_raw: vec![],
        }
    }
}

impl Packet for PacketCzShortcutKeyChange {
    fn id(&self) -> &str {
       "0x02ba"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzShortcutKeyChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEquipitemDamaged {
    pub fn packet_id() -> &'static str {
        "0x02bb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEquipitemDamaged {
        let mut offset: usize = 0;
        PacketZcEquipitemDamaged {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_location).unwrap();
        self.wear_location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.wear_location_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_wear_location(&mut self, value: u16) {
        self.wear_location = value;
    }
    pub fn set_wear_location_raw(&mut self, value: [u8; 2]) {
        self.wear_location_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn new() -> PacketZcEquipitemDamaged {
        PacketZcEquipitemDamaged {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0xb]),
        packet_id_raw: [0x2b, 0xb],
        wear_location: 0,
        wear_location_raw: [0; 2],
        account_id: 0,
        account_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcEquipitemDamaged {
    fn id(&self) -> &str {
       "0x02bb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEquipitemDamaged {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyPcbangPlayingTime {
    pub fn packet_id() -> &'static str {
        "0x02bc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyPcbangPlayingTime {
        let mut offset: usize = 0;
        PacketZcNotifyPcbangPlayingTime {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            time_minute: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            time_minute_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.time_minute).unwrap();
        self.time_minute_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.time_minute_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_time_minute(&mut self, value: i32) {
        self.time_minute = value;
    }
    pub fn set_time_minute_raw(&mut self, value: [u8; 4]) {
        self.time_minute_raw = value;
    }
    pub fn new() -> PacketZcNotifyPcbangPlayingTime {
        PacketZcNotifyPcbangPlayingTime {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0xc]),
        packet_id_raw: [0x2b, 0xc],
        time_minute: 0,
        time_minute_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyPcbangPlayingTime {
    fn id(&self) -> &str {
       "0x02bc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyPcbangPlayingTime {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSrpacketr2Init {
    pub fn packet_id() -> &'static str {
        "0x02bf"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSrpacketr2Init {
        let mut offset: usize = 0;
        PacketZcSrpacketr2Init {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            protect_factor: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            protect_factor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            deform_seed_factor: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            deform_seed_factor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            deform_add_factor: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            deform_add_factor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.protect_factor).unwrap();
        self.protect_factor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.deform_seed_factor).unwrap();
        self.deform_seed_factor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.deform_add_factor).unwrap();
        self.deform_add_factor_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.protect_factor_raw.to_vec());
        wtr.append(&mut self.deform_seed_factor_raw.to_vec());
        wtr.append(&mut self.deform_add_factor_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_protect_factor(&mut self, value: u16) {
        self.protect_factor = value;
    }
    pub fn set_protect_factor_raw(&mut self, value: [u8; 2]) {
        self.protect_factor_raw = value;
    }
    pub fn set_deform_seed_factor(&mut self, value: u32) {
        self.deform_seed_factor = value;
    }
    pub fn set_deform_seed_factor_raw(&mut self, value: [u8; 4]) {
        self.deform_seed_factor_raw = value;
    }
    pub fn set_deform_add_factor(&mut self, value: u32) {
        self.deform_add_factor = value;
    }
    pub fn set_deform_add_factor_raw(&mut self, value: [u8; 4]) {
        self.deform_add_factor_raw = value;
    }
    pub fn new() -> PacketZcSrpacketr2Init {
        PacketZcSrpacketr2Init {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2b, 0xf]),
        packet_id_raw: [0x2b, 0xf],
        protect_factor: 0,
        protect_factor_raw: [0; 2],
        deform_seed_factor: 0,
        deform_seed_factor_raw: [0; 4],
        deform_add_factor: 0,
        deform_add_factor_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSrpacketr2Init {
    fn id(&self) -> &str {
       "0x02bf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSrpacketr2Init {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSrpacketr2Start {
    pub fn packet_id() -> &'static str {
        "0x02c0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSrpacketr2Start {
        let mut offset: usize = 0;
        PacketCzSrpacketr2Start {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            protect_factor: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            protect_factor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.protect_factor).unwrap();
        self.protect_factor_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.protect_factor_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_protect_factor(&mut self, value: u16) {
        self.protect_factor = value;
    }
    pub fn set_protect_factor_raw(&mut self, value: [u8; 2]) {
        self.protect_factor_raw = value;
    }
    pub fn new() -> PacketCzSrpacketr2Start {
        PacketCzSrpacketr2Start {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x0]),
        packet_id_raw: [0x2c, 0x0],
        protect_factor: 0,
        protect_factor_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzSrpacketr2Start {
    fn id(&self) -> &str {
       "0x02c0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSrpacketr2Start {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNpcChat {
    pub fn packet_id() -> &'static str {
        "0x02c1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNpcChat {
        let mut offset: usize = 0;
        PacketZcNpcChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            color: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            color_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.color).unwrap();
        self.color_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        wtr.append(&mut self.color_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn set_color(&mut self, value: u32) {
        self.color = value;
    }
    pub fn set_color_raw(&mut self, value: [u8; 4]) {
        self.color_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcNpcChat {
        PacketZcNpcChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x1]),
        packet_id_raw: [0x2c, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        account_id: 0,
        account_id_raw: [0; 4],
        color: 0,
        color_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcNpcChat {
    fn id(&self) -> &str {
       "0x02c1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNpcChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFormatstringMsg {
    pub fn packet_id() -> &'static str {
        "0x02c2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFormatstringMsg {
        let mut offset: usize = 0;
        PacketZcFormatstringMsg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            msg_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            value: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            value_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.msg).unwrap();
        self.msg_raw = wtr.try_into().unwrap();
        self.value_raw = self.value.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: u16) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: [u8; 2]) {
        self.msg_raw = value;
    }
    pub fn set_value(&mut self, value: String) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: Vec<u8>) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcFormatstringMsg {
        PacketZcFormatstringMsg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x2]),
        packet_id_raw: [0x2c, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: 0,
        msg_raw: [0; 2],
        value: String::new(),
        value_raw: vec![],
        }
    }
}

impl Packet for PacketZcFormatstringMsg {
    fn id(&self) -> &str {
       "0x02c2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFormatstringMsg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyJoinReq {
    pub fn packet_id() -> &'static str {
        "0x02c4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyJoinReq {
        let mut offset: usize = 0;
        PacketCzPartyJoinReq {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn new() -> PacketCzPartyJoinReq {
        PacketCzPartyJoinReq {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x4]),
        packet_id_raw: [0x2c, 0x4],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketCzPartyJoinReq {
    fn id(&self) -> &str {
       "0x02c4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyJoinReq {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyJoinReqAck {
    pub fn packet_id() -> &'static str {
        "0x02c5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyJoinReqAck {
        let mut offset: usize = 0;
        PacketZcPartyJoinReqAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            answer: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            answer_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.answer).unwrap();
        self.answer_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.answer_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_answer(&mut self, value: i32) {
        self.answer = value;
    }
    pub fn set_answer_raw(&mut self, value: [u8; 4]) {
        self.answer_raw = value;
    }
    pub fn new() -> PacketZcPartyJoinReqAck {
        PacketZcPartyJoinReqAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x5]),
        packet_id_raw: [0x2c, 0x5],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        answer: 0,
        answer_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcPartyJoinReqAck {
    fn id(&self) -> &str {
       "0x02c5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyJoinReqAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyJoinReq {
    pub fn packet_id() -> &'static str {
        "0x02c6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyJoinReq {
        let mut offset: usize = 0;
        PacketZcPartyJoinReq {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            grid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            grid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            group_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            group_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.grid).unwrap();
        self.grid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.group_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.group_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.grid_raw.to_vec());
        wtr.append(&mut self.group_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_grid(&mut self, value: u32) {
        self.grid = value;
    }
    pub fn set_grid_raw(&mut self, value: [u8; 4]) {
        self.grid_raw = value;
    }
    pub fn set_group_name(&mut self, value: [char; 24]) {
        self.group_name = value;
    }
    pub fn set_group_name_raw(&mut self, value: [u8; 24]) {
        self.group_name_raw = value;
    }
    pub fn new() -> PacketZcPartyJoinReq {
        PacketZcPartyJoinReq {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x6]),
        packet_id_raw: [0x2c, 0x6],
        grid: 0,
        grid_raw: [0; 4],
        group_name: [0 as char; 24],
        group_name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcPartyJoinReq {
    fn id(&self) -> &str {
       "0x02c6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyJoinReq {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyJoinReqAck {
    pub fn packet_id() -> &'static str {
        "0x02c7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyJoinReqAck {
        let mut offset: usize = 0;
        PacketCzPartyJoinReqAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            grid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            grid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            b_accept: {
                let field = buffer[offset] == 1;
                field
            },
            b_accept_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.grid).unwrap();
        self.grid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.b_accept as u8).unwrap();
        self.b_accept_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.grid_raw.to_vec());
        wtr.append(&mut self.b_accept_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_grid(&mut self, value: u32) {
        self.grid = value;
    }
    pub fn set_grid_raw(&mut self, value: [u8; 4]) {
        self.grid_raw = value;
    }
    pub fn set_b_accept(&mut self, value: bool) {
        self.b_accept = value;
    }
    pub fn set_b_accept_raw(&mut self, value: [u8; 1]) {
        self.b_accept_raw = value;
    }
    pub fn new() -> PacketCzPartyJoinReqAck {
        PacketCzPartyJoinReqAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x7]),
        packet_id_raw: [0x2c, 0x7],
        grid: 0,
        grid_raw: [0; 4],
        b_accept: false,
        b_accept_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzPartyJoinReqAck {
    fn id(&self) -> &str {
       "0x02c7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyJoinReqAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyConfig {
    pub fn packet_id() -> &'static str {
        "0x02c8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyConfig {
        let mut offset: usize = 0;
        PacketCzPartyConfig {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            b_refuse_join_msg: {
                let field = buffer[offset] == 1;
                field
            },
            b_refuse_join_msg_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.b_refuse_join_msg as u8).unwrap();
        self.b_refuse_join_msg_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.b_refuse_join_msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_b_refuse_join_msg(&mut self, value: bool) {
        self.b_refuse_join_msg = value;
    }
    pub fn set_b_refuse_join_msg_raw(&mut self, value: [u8; 1]) {
        self.b_refuse_join_msg_raw = value;
    }
    pub fn new() -> PacketCzPartyConfig {
        PacketCzPartyConfig {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x8]),
        packet_id_raw: [0x2c, 0x8],
        b_refuse_join_msg: false,
        b_refuse_join_msg_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzPartyConfig {
    fn id(&self) -> &str {
       "0x02c8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyConfig {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyConfig {
    pub fn packet_id() -> &'static str {
        "0x02c9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyConfig {
        let mut offset: usize = 0;
        PacketZcPartyConfig {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            b_refuse_join_msg: {
                let field = buffer[offset] == 1;
                field
            },
            b_refuse_join_msg_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.b_refuse_join_msg as u8).unwrap();
        self.b_refuse_join_msg_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.b_refuse_join_msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_b_refuse_join_msg(&mut self, value: bool) {
        self.b_refuse_join_msg = value;
    }
    pub fn set_b_refuse_join_msg_raw(&mut self, value: [u8; 1]) {
        self.b_refuse_join_msg_raw = value;
    }
    pub fn new() -> PacketZcPartyConfig {
        PacketZcPartyConfig {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0x9]),
        packet_id_raw: [0x2c, 0x9],
        b_refuse_join_msg: false,
        b_refuse_join_msg_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcPartyConfig {
    fn id(&self) -> &str {
       "0x02c9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyConfig {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcRefuseSelectchar {
    pub fn packet_id() -> &'static str {
        "0x02ca"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcRefuseSelectchar {
        let mut offset: usize = 0;
        PacketHcRefuseSelectchar {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u8) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 1]) {
        self.error_code_raw = value;
    }
    pub fn new() -> PacketHcRefuseSelectchar {
        PacketHcRefuseSelectchar {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0xa]),
        packet_id_raw: [0x2c, 0xa],
        error_code: 0,
        error_code_raw: [0; 1],
        }
    }
}

impl Packet for PacketHcRefuseSelectchar {
    fn id(&self) -> &str {
       "0x02ca"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcRefuseSelectchar {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemorialdungeonSubscriptionInfo {
    pub fn packet_id() -> &'static str {
        "0x02cb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemorialdungeonSubscriptionInfo {
        let mut offset: usize = 0;
        PacketZcMemorialdungeonSubscriptionInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            memorial_dungeon_name: {
                let field =  {
                let mut dst: [char; 61] = [0 as char; 61];
                for (index, byte) in buffer[offset..offset + 61].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            memorial_dungeon_name_raw: {
                let mut dst: [u8; 61] = [0u8; 61];
                dst.clone_from_slice(&buffer[offset..offset + 61]);
                offset += 61;
                dst
            },
            priority_order_num: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            priority_order_num_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.memorial_dungeon_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.memorial_dungeon_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.priority_order_num).unwrap();
        self.priority_order_num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.memorial_dungeon_name_raw.to_vec());
        wtr.append(&mut self.priority_order_num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 65;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_memorial_dungeon_name(&mut self, value: [char; 61]) {
        self.memorial_dungeon_name = value;
    }
    pub fn set_memorial_dungeon_name_raw(&mut self, value: [u8; 61]) {
        self.memorial_dungeon_name_raw = value;
    }
    pub fn set_priority_order_num(&mut self, value: i16) {
        self.priority_order_num = value;
    }
    pub fn set_priority_order_num_raw(&mut self, value: [u8; 2]) {
        self.priority_order_num_raw = value;
    }
    pub fn new() -> PacketZcMemorialdungeonSubscriptionInfo {
        PacketZcMemorialdungeonSubscriptionInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0xb]),
        packet_id_raw: [0x2c, 0xb],
        memorial_dungeon_name: [0 as char; 61],
        memorial_dungeon_name_raw: [0; 61],
        priority_order_num: 0,
        priority_order_num_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcMemorialdungeonSubscriptionInfo {
    fn id(&self) -> &str {
       "0x02cb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemorialdungeonSubscriptionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemorialdungeonSubscriptionNotify {
    pub fn packet_id() -> &'static str {
        "0x02cc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemorialdungeonSubscriptionNotify {
        let mut offset: usize = 0;
        PacketZcMemorialdungeonSubscriptionNotify {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            priority_order_num: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            priority_order_num_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.priority_order_num).unwrap();
        self.priority_order_num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.priority_order_num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_priority_order_num(&mut self, value: i16) {
        self.priority_order_num = value;
    }
    pub fn set_priority_order_num_raw(&mut self, value: [u8; 2]) {
        self.priority_order_num_raw = value;
    }
    pub fn new() -> PacketZcMemorialdungeonSubscriptionNotify {
        PacketZcMemorialdungeonSubscriptionNotify {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0xc]),
        packet_id_raw: [0x2c, 0xc],
        priority_order_num: 0,
        priority_order_num_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcMemorialdungeonSubscriptionNotify {
    fn id(&self) -> &str {
       "0x02cc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemorialdungeonSubscriptionNotify {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemorialdungeonInfo {
    pub fn packet_id() -> &'static str {
        "0x02cd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemorialdungeonInfo {
        let mut offset: usize = 0;
        PacketZcMemorialdungeonInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            memorial_dungeon_name: {
                let field =  {
                let mut dst: [char; 61] = [0 as char; 61];
                for (index, byte) in buffer[offset..offset + 61].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            memorial_dungeon_name_raw: {
                let mut dst: [u8; 61] = [0u8; 61];
                dst.clone_from_slice(&buffer[offset..offset + 61]);
                offset += 61;
                dst
            },
            destroy_date: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            destroy_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            enter_time_out_date: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            enter_time_out_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.memorial_dungeon_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.memorial_dungeon_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.destroy_date).unwrap();
        self.destroy_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.enter_time_out_date).unwrap();
        self.enter_time_out_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.memorial_dungeon_name_raw.to_vec());
        wtr.append(&mut self.destroy_date_raw.to_vec());
        wtr.append(&mut self.enter_time_out_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 71;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_memorial_dungeon_name(&mut self, value: [char; 61]) {
        self.memorial_dungeon_name = value;
    }
    pub fn set_memorial_dungeon_name_raw(&mut self, value: [u8; 61]) {
        self.memorial_dungeon_name_raw = value;
    }
    pub fn set_destroy_date(&mut self, value: u32) {
        self.destroy_date = value;
    }
    pub fn set_destroy_date_raw(&mut self, value: [u8; 4]) {
        self.destroy_date_raw = value;
    }
    pub fn set_enter_time_out_date(&mut self, value: u32) {
        self.enter_time_out_date = value;
    }
    pub fn set_enter_time_out_date_raw(&mut self, value: [u8; 4]) {
        self.enter_time_out_date_raw = value;
    }
    pub fn new() -> PacketZcMemorialdungeonInfo {
        PacketZcMemorialdungeonInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0xd]),
        packet_id_raw: [0x2c, 0xd],
        memorial_dungeon_name: [0 as char; 61],
        memorial_dungeon_name_raw: [0; 61],
        destroy_date: 0,
        destroy_date_raw: [0; 4],
        enter_time_out_date: 0,
        enter_time_out_date_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMemorialdungeonInfo {
    fn id(&self) -> &str {
       "0x02cd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemorialdungeonInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMemorialdungeonNotify {
    pub fn packet_id() -> &'static str {
        "0x02ce"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMemorialdungeonNotify {
        let mut offset: usize = 0;
        PacketZcMemorialdungeonNotify {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            enter_limit_date: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            enter_limit_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.enter_limit_date).unwrap();
        self.enter_limit_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.enter_limit_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_enter_limit_date(&mut self, value: u32) {
        self.enter_limit_date = value;
    }
    pub fn set_enter_limit_date_raw(&mut self, value: [u8; 4]) {
        self.enter_limit_date_raw = value;
    }
    pub fn new() -> PacketZcMemorialdungeonNotify {
        PacketZcMemorialdungeonNotify {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0xe]),
        packet_id_raw: [0x2c, 0xe],
        atype: 0,
        atype_raw: [0; 4],
        enter_limit_date: 0,
        enter_limit_date_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMemorialdungeonNotify {
    fn id(&self) -> &str {
       "0x02ce"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMemorialdungeonNotify {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzMemorialdungeonCommand {
    pub fn packet_id() -> &'static str {
        "0x02cf"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzMemorialdungeonCommand {
        let mut offset: usize = 0;
        PacketCzMemorialdungeonCommand {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            command: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            command_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.command).unwrap();
        self.command_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.command_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_command(&mut self, value: i32) {
        self.command = value;
    }
    pub fn set_command_raw(&mut self, value: [u8; 4]) {
        self.command_raw = value;
    }
    pub fn new() -> PacketCzMemorialdungeonCommand {
        PacketCzMemorialdungeonCommand {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2c, 0xf]),
        packet_id_raw: [0x2c, 0xf],
        command: 0,
        command_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzMemorialdungeonCommand {
    fn id(&self) -> &str {
       "0x02cf"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzMemorialdungeonCommand {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEquipmentItemlist3 {
    pub fn packet_id() -> &'static str {
        "0xd002"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEquipmentItemlist3 {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo301::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcEquipmentItemlist3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo301>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcEquipmentItemlist3 {
        PacketZcEquipmentItemlist3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd0, 0x02]),
        packet_id_raw: [0xd0, 0x02],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcEquipmentItemlist3 {
    fn id(&self) -> &str {
       "0xd002"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEquipmentItemlist3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreEquipmentItemlist3 {
    pub fn packet_id() -> &'static str {
        "0xd102"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreEquipmentItemlist3 {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo301::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcStoreEquipmentItemlist3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo301>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcStoreEquipmentItemlist3 {
        PacketZcStoreEquipmentItemlist3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd1, 0x02]),
        packet_id_raw: [0xd1, 0x02],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcStoreEquipmentItemlist3 {
    fn id(&self) -> &str {
       "0xd102"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreEquipmentItemlist3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartEquipmentItemlist3 {
    pub fn packet_id() -> &'static str {
        "0xd202"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartEquipmentItemlist3 {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo301::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcCartEquipmentItemlist3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo301>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcCartEquipmentItemlist3 {
        PacketZcCartEquipmentItemlist3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd2, 0x02]),
        packet_id_raw: [0xd2, 0x02],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcCartEquipmentItemlist3 {
    fn id(&self) -> &str {
       "0xd202"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartEquipmentItemlist3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyBindOnEquip {
    pub fn packet_id() -> &'static str {
        "0xd302"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyBindOnEquip {
        let mut offset: usize = 0;
        PacketZcNotifyBindOnEquip {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketZcNotifyBindOnEquip {
        PacketZcNotifyBindOnEquip {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd3, 0x02]),
        packet_id_raw: [0xd3, 0x02],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyBindOnEquip {
    fn id(&self) -> &str {
       "0xd302"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyBindOnEquip {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemPickupAck3 {
    pub fn packet_id() -> &'static str {
        "0xd402"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemPickupAck3 {
        let mut offset: usize = 0;
        PacketZcItemPickupAck3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            hire_expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hire_expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            bind_on_equip_type: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bind_on_equip_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hire_expire_date).unwrap();
        self.hire_expire_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.bind_on_equip_type).unwrap();
        self.bind_on_equip_type_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.hire_expire_date_raw.to_vec());
        wtr.append(&mut self.bind_on_equip_type_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 29;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: u16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_hire_expire_date(&mut self, value: i32) {
        self.hire_expire_date = value;
    }
    pub fn set_hire_expire_date_raw(&mut self, value: [u8; 4]) {
        self.hire_expire_date_raw = value;
    }
    pub fn set_bind_on_equip_type(&mut self, value: u16) {
        self.bind_on_equip_type = value;
    }
    pub fn set_bind_on_equip_type_raw(&mut self, value: [u8; 2]) {
        self.bind_on_equip_type_raw = value;
    }
    pub fn new() -> PacketZcItemPickupAck3 {
        PacketZcItemPickupAck3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xd4, 0x02]),
        packet_id_raw: [0xd4, 0x02],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        location: 0,
        location_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        result: 0,
        result_raw: [0; 1],
        hire_expire_date: 0,
        hire_expire_date_raw: [0; 4],
        bind_on_equip_type: 0,
        bind_on_equip_type_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcItemPickupAck3 {
    fn id(&self) -> &str {
       "0xd402"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemPickupAck3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcIsvrDisconnect {
    pub fn packet_id() -> &'static str {
        "0x02d5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcIsvrDisconnect {
        let mut offset: usize = 0;
        PacketZcIsvrDisconnect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcIsvrDisconnect {
        PacketZcIsvrDisconnect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0x5]),
        packet_id_raw: [0x2d, 0x5],
        }
    }
}

impl Packet for PacketZcIsvrDisconnect {
    fn id(&self) -> &str {
       "0x02d5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcIsvrDisconnect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzEquipwinMicroscope {
    pub fn packet_id() -> &'static str {
        "0x02d6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzEquipwinMicroscope {
        let mut offset: usize = 0;
        PacketCzEquipwinMicroscope {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzEquipwinMicroscope {
        PacketCzEquipwinMicroscope {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0x6]),
        packet_id_raw: [0x2d, 0x6],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzEquipwinMicroscope {
    fn id(&self) -> &str {
       "0x02d6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzEquipwinMicroscope {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEquipwinMicroscope {
    pub fn packet_id() -> &'static str {
        "0x02d7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEquipwinMicroscope {
        let mut offset: usize = 0;
        let vec_type_len = EquipmentitemExtrainfo301::base_len(packetver);
        let iter_count = (&buffer.len() - 43) / vec_type_len;
        let mut vec_field: Vec<EquipmentitemExtrainfo301> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 43 + (vec_type_len * (i - 1));
            let end_pos = 43 + vec_type_len * i;
            vec_field.push(EquipmentitemExtrainfo301::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcEquipwinMicroscope {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 43;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<EquipmentitemExtrainfo301>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcEquipwinMicroscope {
        PacketZcEquipwinMicroscope {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0x7]),
        packet_id_raw: [0x2d, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        sex: 0,
        sex_raw: [0; 1],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcEquipwinMicroscope {
    fn id(&self) -> &str {
       "0x02d7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEquipwinMicroscope {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzConfig {
    pub fn packet_id() -> &'static str {
        "0x02d8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzConfig {
        let mut offset: usize = 0;
        PacketCzConfig {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            config: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            config_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.config).unwrap();
        self.config_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.config_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_config(&mut self, value: i32) {
        self.config = value;
    }
    pub fn set_config_raw(&mut self, value: [u8; 4]) {
        self.config_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketCzConfig {
        PacketCzConfig {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0x8]),
        packet_id_raw: [0x2d, 0x8],
        config: 0,
        config_raw: [0; 4],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzConfig {
    fn id(&self) -> &str {
       "0x02d8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzConfig {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcConfig {
    pub fn packet_id() -> &'static str {
        "0x02d9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcConfig {
        let mut offset: usize = 0;
        PacketZcConfig {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            config: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            config_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.config).unwrap();
        self.config_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.config_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_config(&mut self, value: i32) {
        self.config = value;
    }
    pub fn set_config_raw(&mut self, value: [u8; 4]) {
        self.config_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcConfig {
        PacketZcConfig {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0x9]),
        packet_id_raw: [0x2d, 0x9],
        config: 0,
        config_raw: [0; 4],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcConfig {
    fn id(&self) -> &str {
       "0x02d9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcConfig {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcConfigNotify {
    pub fn packet_id() -> &'static str {
        "0x02da"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcConfigNotify {
        let mut offset: usize = 0;
        PacketZcConfigNotify {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            b_open_equipment_win: {
                let field = buffer[offset] == 1;
                field
            },
            b_open_equipment_win_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.b_open_equipment_win as u8).unwrap();
        self.b_open_equipment_win_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.b_open_equipment_win_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_b_open_equipment_win(&mut self, value: bool) {
        self.b_open_equipment_win = value;
    }
    pub fn set_b_open_equipment_win_raw(&mut self, value: [u8; 1]) {
        self.b_open_equipment_win_raw = value;
    }
    pub fn new() -> PacketZcConfigNotify {
        PacketZcConfigNotify {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0xa]),
        packet_id_raw: [0x2d, 0xa],
        b_open_equipment_win: false,
        b_open_equipment_win_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcConfigNotify {
    fn id(&self) -> &str {
       "0x02da"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcConfigNotify {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzBattlefieldChat {
    pub fn packet_id() -> &'static str {
        "0x02db"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzBattlefieldChat {
        let mut offset: usize = 0;
        PacketCzBattlefieldChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketCzBattlefieldChat {
        PacketCzBattlefieldChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0xb]),
        packet_id_raw: [0x2d, 0xb],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketCzBattlefieldChat {
    fn id(&self) -> &str {
       "0x02db"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzBattlefieldChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattlefieldChat {
    pub fn packet_id() -> &'static str {
        "0x02dc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattlefieldChat {
        let mut offset: usize = 0;
        PacketZcBattlefieldChat {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 31;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcBattlefieldChat {
        PacketZcBattlefieldChat {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0xc]),
        packet_id_raw: [0x2d, 0xc],
        packet_length: 0,
        packet_length_raw: [0; 2],
        account_id: 0,
        account_id_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcBattlefieldChat {
    fn id(&self) -> &str {
       "0x02dc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattlefieldChat {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattlefieldNotifyCampinfo {
    pub fn packet_id() -> &'static str {
        "0x02dd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattlefieldNotifyCampinfo {
        let mut offset: usize = 0;
        PacketZcBattlefieldNotifyCampinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            camp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            camp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.camp).unwrap();
        self.camp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.camp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_camp(&mut self, value: i16) {
        self.camp = value;
    }
    pub fn set_camp_raw(&mut self, value: [u8; 2]) {
        self.camp_raw = value;
    }
    pub fn new() -> PacketZcBattlefieldNotifyCampinfo {
        PacketZcBattlefieldNotifyCampinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0xd]),
        packet_id_raw: [0x2d, 0xd],
        account_id: 0,
        account_id_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        camp: 0,
        camp_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyCampinfo {
    fn id(&self) -> &str {
       "0x02dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattlefieldNotifyCampinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattlefieldNotifyPoint {
    pub fn packet_id() -> &'static str {
        "0x02de"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattlefieldNotifyPoint {
        let mut offset: usize = 0;
        PacketZcBattlefieldNotifyPoint {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point_camp_a: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            point_camp_a_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            point_camp_b: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            point_camp_b_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.point_camp_a).unwrap();
        self.point_camp_a_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.point_camp_b).unwrap();
        self.point_camp_b_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.point_camp_a_raw.to_vec());
        wtr.append(&mut self.point_camp_b_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_point_camp_a(&mut self, value: i16) {
        self.point_camp_a = value;
    }
    pub fn set_point_camp_a_raw(&mut self, value: [u8; 2]) {
        self.point_camp_a_raw = value;
    }
    pub fn set_point_camp_b(&mut self, value: i16) {
        self.point_camp_b = value;
    }
    pub fn set_point_camp_b_raw(&mut self, value: [u8; 2]) {
        self.point_camp_b_raw = value;
    }
    pub fn new() -> PacketZcBattlefieldNotifyPoint {
        PacketZcBattlefieldNotifyPoint {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0xe]),
        packet_id_raw: [0x2d, 0xe],
        point_camp_a: 0,
        point_camp_a_raw: [0; 2],
        point_camp_b: 0,
        point_camp_b_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyPoint {
    fn id(&self) -> &str {
       "0x02de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattlefieldNotifyPoint {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattlefieldNotifyPosition {
    pub fn packet_id() -> &'static str {
        "0x02df"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattlefieldNotifyPosition {
        let mut offset: usize = 0;
        PacketZcBattlefieldNotifyPosition {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            job: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x).unwrap();
        self.x_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y).unwrap();
        self.y_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.x_raw.to_vec());
        wtr.append(&mut self.y_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 36;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_job(&mut self, value: u16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_x(&mut self, value: i16) {
        self.x = value;
    }
    pub fn set_x_raw(&mut self, value: [u8; 2]) {
        self.x_raw = value;
    }
    pub fn set_y(&mut self, value: i16) {
        self.y = value;
    }
    pub fn set_y_raw(&mut self, value: [u8; 2]) {
        self.y_raw = value;
    }
    pub fn new() -> PacketZcBattlefieldNotifyPosition {
        PacketZcBattlefieldNotifyPosition {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0xf]),
        packet_id_raw: [0x2d, 0xf],
        account_id: 0,
        account_id_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        job: 0,
        job_raw: [0; 2],
        x: 0,
        x_raw: [0; 2],
        y: 0,
        y_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyPosition {
    fn id(&self) -> &str {
       "0x02df"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattlefieldNotifyPosition {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattlefieldNotifyHp {
    pub fn packet_id() -> &'static str {
        "0x02e0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattlefieldNotifyHp {
        let mut offset: usize = 0;
        PacketZcBattlefieldNotifyHp {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            account_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            account_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hp: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.account_id).unwrap();
        self.account_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.account_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_account_id(&mut self, value: u32) {
        self.account_id = value;
    }
    pub fn set_account_id_raw(&mut self, value: [u8; 4]) {
        self.account_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_hp(&mut self, value: i16) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 2]) {
        self.hp_raw = value;
    }
    pub fn set_max_hp(&mut self, value: i16) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 2]) {
        self.max_hp_raw = value;
    }
    pub fn new() -> PacketZcBattlefieldNotifyHp {
        PacketZcBattlefieldNotifyHp {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2e, 0x0]),
        packet_id_raw: [0x2e, 0x0],
        account_id: 0,
        account_id_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        hp: 0,
        hp_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcBattlefieldNotifyHp {
    fn id(&self) -> &str {
       "0x02e0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattlefieldNotifyHp {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyAct2 {
    pub fn packet_id() -> &'static str {
        "0x02e1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyAct2 {
        let mut offset: usize = 0;
        PacketZcNotifyAct2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attack_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attack_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attacked_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attacked_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            damage: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            left_damage: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            left_damage_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attack_mt).unwrap();
        self.attack_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attacked_mt).unwrap();
        self.attacked_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.left_damage).unwrap();
        self.left_damage_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.attack_mt_raw.to_vec());
        wtr.append(&mut self.attacked_mt_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        wtr.append(&mut self.left_damage_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 33;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_attack_mt(&mut self, value: i32) {
        self.attack_mt = value;
    }
    pub fn set_attack_mt_raw(&mut self, value: [u8; 4]) {
        self.attack_mt_raw = value;
    }
    pub fn set_attacked_mt(&mut self, value: i32) {
        self.attacked_mt = value;
    }
    pub fn set_attacked_mt_raw(&mut self, value: [u8; 4]) {
        self.attacked_mt_raw = value;
    }
    pub fn set_damage(&mut self, value: i32) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 4]) {
        self.damage_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn set_left_damage(&mut self, value: i32) {
        self.left_damage = value;
    }
    pub fn set_left_damage_raw(&mut self, value: [u8; 4]) {
        self.left_damage_raw = value;
    }
    pub fn new() -> PacketZcNotifyAct2 {
        PacketZcNotifyAct2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2e, 0x1]),
        packet_id_raw: [0x2e, 0x1],
        gid: 0,
        gid_raw: [0; 4],
        target_gid: 0,
        target_gid_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        attack_mt: 0,
        attack_mt_raw: [0; 4],
        attacked_mt: 0,
        attacked_mt_raw: [0; 4],
        damage: 0,
        damage_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        left_damage: 0,
        left_damage_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyAct2 {
    fn id(&self) -> &str {
       "0x02e1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyAct2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzBotCheck {
    pub fn packet_id() -> &'static str {
        "0x02e6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzBotCheck {
        let mut offset: usize = 0;
        PacketCzBotCheck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_bot: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            is_bot_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.is_bot).unwrap();
        self.is_bot_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.is_bot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_is_bot(&mut self, value: i32) {
        self.is_bot = value;
    }
    pub fn set_is_bot_raw(&mut self, value: [u8; 4]) {
        self.is_bot_raw = value;
    }
    pub fn new() -> PacketCzBotCheck {
        PacketCzBotCheck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2e, 0x6]),
        packet_id_raw: [0x2e, 0x6],
        is_bot: 0,
        is_bot_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzBotCheck {
    fn id(&self) -> &str {
       "0x02e6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzBotCheck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMapproperty {
    pub fn packet_id() -> &'static str {
        "0x02e7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMapproperty {
        let mut offset: usize = 0;
        PacketZcMapproperty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_info_table: {
                let field =  {
                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();
                dst
            };
                field
            },
            map_info_table_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.map_info_table_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_map_info_table(&mut self, value: Vec<u8>) {
        self.map_info_table = value;
    }
    pub fn set_map_info_table_raw(&mut self, value: Vec<u8>) {
        self.map_info_table_raw = value;
    }
    pub fn new() -> PacketZcMapproperty {
        PacketZcMapproperty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2e, 0x7]),
        packet_id_raw: [0x2e, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 2],
        map_info_table: vec![],
        map_info_table_raw: vec![],
        }
    }
}

impl Packet for PacketZcMapproperty {
    fn id(&self) -> &str {
       "0x02e7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMapproperty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNormalItemlist3 {
    pub fn packet_id() -> &'static str {
        "0xe802"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNormalItemlist3 {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo3::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo3> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo3::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcNormalItemlist3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo3>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcNormalItemlist3 {
        PacketZcNormalItemlist3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe8, 0x02]),
        packet_id_raw: [0xe8, 0x02],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcNormalItemlist3 {
    fn id(&self) -> &str {
       "0xe802"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNormalItemlist3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCartNormalItemlist3 {
    pub fn packet_id() -> &'static str {
        "0xe902"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCartNormalItemlist3 {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo3::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo3> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo3::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcCartNormalItemlist3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo3>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcCartNormalItemlist3 {
        PacketZcCartNormalItemlist3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xe9, 0x02]),
        packet_id_raw: [0xe9, 0x02],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcCartNormalItemlist3 {
    fn id(&self) -> &str {
       "0xe902"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCartNormalItemlist3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcStoreNormalItemlist3 {
    pub fn packet_id() -> &'static str {
        "0xea02"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcStoreNormalItemlist3 {
        let mut offset: usize = 0;
        let vec_type_len = NormalitemExtrainfo3::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<NormalitemExtrainfo3> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(NormalitemExtrainfo3::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcStoreNormalItemlist3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_info: {
                let field = vec_field.clone();
                field
            },
            item_info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.item_info_raw = {
            self.item_info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.item_info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_item_info(&mut self, value: Vec<NormalitemExtrainfo3>) {
        self.item_info = value;
    }
    pub fn set_item_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_info_raw = value;
    }
    pub fn new() -> PacketZcStoreNormalItemlist3 {
        PacketZcStoreNormalItemlist3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xea, 0x02]),
        packet_id_raw: [0xea, 0x02],
        packet_length: 0,
        packet_length_raw: [0; 2],
        item_info: vec![],
        item_info_raw: vec![],
        }
    }
}

impl Packet for PacketZcStoreNormalItemlist3 {
    fn id(&self) -> &str {
       "0xea02"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcStoreNormalItemlist3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAcceptEnter2 {
    pub fn packet_id() -> &'static str {
        "0xeb02"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAcceptEnter2 {
        let mut offset: usize = 0;
        PacketZcAcceptEnter2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 13;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn new() -> PacketZcAcceptEnter2 {
        PacketZcAcceptEnter2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xeb, 0x02]),
        packet_id_raw: [0xeb, 0x02],
        start_time: 0,
        start_time_raw: [0; 4],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        font: 0,
        font_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAcceptEnter2 {
    fn id(&self) -> &str {
       "0xeb02"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAcceptEnter2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMoveentry4 {
    pub fn packet_id() -> &'static str {
        "0x02ec"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMoveentry4 {
        let mut offset: usize = 0;
        PacketZcNotifyMoveentry4 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u16; 6] = [0_u16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 67;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u16; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn new() -> PacketZcNotifyMoveentry4 {
        PacketZcNotifyMoveentry4 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x02, 0xec]),
        packet_id_raw: [0x02, 0xec],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyMoveentry4 {
    fn id(&self) -> &str {
       "0x02ec"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMoveentry4 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyNewentry4 {
    pub fn packet_id() -> &'static str {
        "0x02ed"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyNewentry4 {
        let mut offset: usize = 0;
        PacketZcNotifyNewentry4 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 59;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn new() -> PacketZcNotifyNewentry4 {
        PacketZcNotifyNewentry4 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x02, 0xed]),
        packet_id_raw: [0x02, 0xed],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyNewentry4 {
    fn id(&self) -> &str {
       "0x02ed"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyNewentry4 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry4 {
    pub fn packet_id() -> &'static str {
        "0x02ee"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry4 {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry4 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 60;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry4 {
        PacketZcNotifyStandentry4 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x02, 0xee]),
        packet_id_raw: [0x02, 0xee],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyStandentry4 {
    fn id(&self) -> &str {
       "0x02ee"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry4 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyFont {
    pub fn packet_id() -> &'static str {
        "0x02ef"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyFont {
        let mut offset: usize = 0;
        PacketZcNotifyFont {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn new() -> PacketZcNotifyFont {
        PacketZcNotifyFont {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x02, 0xef]),
        packet_id_raw: [0x02, 0xef],
        aid: 0,
        aid_raw: [0; 4],
        font: 0,
        font_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyFont {
    fn id(&self) -> &str {
       "0x02ef"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyFont {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcProgress {
    pub fn packet_id() -> &'static str {
        "0x02f0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcProgress {
        let mut offset: usize = 0;
        PacketZcProgress {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            color: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            color_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.color).unwrap();
        self.color_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.time).unwrap();
        self.time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.color_raw.to_vec());
        wtr.append(&mut self.time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_color(&mut self, value: u32) {
        self.color = value;
    }
    pub fn set_color_raw(&mut self, value: [u8; 4]) {
        self.color_raw = value;
    }
    pub fn set_time(&mut self, value: u32) {
        self.time = value;
    }
    pub fn set_time_raw(&mut self, value: [u8; 4]) {
        self.time_raw = value;
    }
    pub fn new() -> PacketZcProgress {
        PacketZcProgress {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2f, 0x0]),
        packet_id_raw: [0x2f, 0x0],
        color: 0,
        color_raw: [0; 4],
        time: 0,
        time_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcProgress {
    fn id(&self) -> &str {
       "0x02f0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcProgress {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzProgress {
    pub fn packet_id() -> &'static str {
        "0x02f1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzProgress {
        let mut offset: usize = 0;
        PacketCzProgress {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzProgress {
        PacketCzProgress {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2f, 0x1]),
        packet_id_raw: [0x2f, 0x1],
        }
    }
}

impl Packet for PacketCzProgress {
    fn id(&self) -> &str {
       "0x02f1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzProgress {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcProgressCancel {
    pub fn packet_id() -> &'static str {
        "0x02f2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcProgressCancel {
        let mut offset: usize = 0;
        PacketZcProgressCancel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcProgressCancel {
        PacketZcProgressCancel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2f, 0x2]),
        packet_id_raw: [0x2f, 0x2],
        }
    }
}

impl Packet for PacketZcProgressCancel {
    fn id(&self) -> &str {
       "0x02f2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcProgressCancel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzOpenSimpleCashshopItemlist {
    pub fn packet_id() -> &'static str {
        "0x035c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzOpenSimpleCashshopItemlist {
        let mut offset: usize = 0;
        PacketCzOpenSimpleCashshopItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzOpenSimpleCashshopItemlist {
        PacketCzOpenSimpleCashshopItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x35, 0xc]),
        packet_id_raw: [0x35, 0xc],
        }
    }
}

impl Packet for PacketCzOpenSimpleCashshopItemlist {
    fn id(&self) -> &str {
       "0x035c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzOpenSimpleCashshopItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSimpleCashshopPointItemlist {
    pub fn packet_id() -> &'static str {
        "0x035d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSimpleCashshopPointItemlist {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseItem::base_len(packetver);
        let iter_count = (&buffer.len() - 16) / vec_type_len;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 16 + (vec_type_len * (i - 1));
            let end_pos = 16 + vec_type_len * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcSimpleCashshopPointItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cash_point: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            cash_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            md_itemcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            md_itemcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            md_item_size: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            md_item_size_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            best_itemcount: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            best_itemcount_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            best_itemsize: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            best_itemsize_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.cash_point).unwrap();
        self.cash_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.md_itemcount).unwrap();
        self.md_itemcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.md_item_size).unwrap();
        self.md_item_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.best_itemcount).unwrap();
        self.best_itemcount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.best_itemsize).unwrap();
        self.best_itemsize_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.cash_point_raw.to_vec());
        wtr.append(&mut self.md_itemcount_raw.to_vec());
        wtr.append(&mut self.md_item_size_raw.to_vec());
        wtr.append(&mut self.best_itemcount_raw.to_vec());
        wtr.append(&mut self.best_itemsize_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_cash_point(&mut self, value: u32) {
        self.cash_point = value;
    }
    pub fn set_cash_point_raw(&mut self, value: [u8; 4]) {
        self.cash_point_raw = value;
    }
    pub fn set_md_itemcount(&mut self, value: i16) {
        self.md_itemcount = value;
    }
    pub fn set_md_itemcount_raw(&mut self, value: [u8; 2]) {
        self.md_itemcount_raw = value;
    }
    pub fn set_md_item_size(&mut self, value: i16) {
        self.md_item_size = value;
    }
    pub fn set_md_item_size_raw(&mut self, value: [u8; 2]) {
        self.md_item_size_raw = value;
    }
    pub fn set_best_itemcount(&mut self, value: i16) {
        self.best_itemcount = value;
    }
    pub fn set_best_itemcount_raw(&mut self, value: [u8; 2]) {
        self.best_itemcount_raw = value;
    }
    pub fn set_best_itemsize(&mut self, value: i16) {
        self.best_itemsize = value;
    }
    pub fn set_best_itemsize_raw(&mut self, value: [u8; 2]) {
        self.best_itemsize_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcSimpleCashshopPointItemlist {
        PacketZcSimpleCashshopPointItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x35, 0xd]),
        packet_id_raw: [0x35, 0xd],
        packet_length: 0,
        packet_length_raw: [0; 2],
        cash_point: 0,
        cash_point_raw: [0; 4],
        md_itemcount: 0,
        md_itemcount_raw: [0; 2],
        md_item_size: 0,
        md_item_size_raw: [0; 2],
        best_itemcount: 0,
        best_itemcount_raw: [0; 2],
        best_itemsize: 0,
        best_itemsize_raw: [0; 2],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcSimpleCashshopPointItemlist {
    fn id(&self) -> &str {
       "0x035d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSimpleCashshopPointItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCloseWindow {
    pub fn packet_id() -> &'static str {
        "0x035e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCloseWindow {
        let mut offset: usize = 0;
        PacketCzCloseWindow {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzCloseWindow {
        PacketCzCloseWindow {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x35, 0xe]),
        packet_id_raw: [0x35, 0xe],
        }
    }
}

impl Packet for PacketCzCloseWindow {
    fn id(&self) -> &str {
       "0x035e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCloseWindow {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAhcGameGuard {
    pub fn packet_id() -> &'static str {
        "0x03dd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAhcGameGuard {
        let mut offset: usize = 0;
        PacketAhcGameGuard {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_data: {
                let field =  {
                let mut dst: [u32; 4] = [0_u32; 4];
                for (index, byte) in buffer[offset..offset + 4].iter().enumerate() {
                    dst[index] = *byte as u32;
                }
                dst
            };
                field
            },
            auth_data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.auth_data {
            wtr.write_u32::<LittleEndian>(item).unwrap();
        }
        self.auth_data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auth_data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auth_data(&mut self, value: [u32; 4]) {
        self.auth_data = value;
    }
    pub fn set_auth_data_raw(&mut self, value: [u8; 4]) {
        self.auth_data_raw = value;
    }
    pub fn new() -> PacketAhcGameGuard {
        PacketAhcGameGuard {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x3d, 0xd]),
        packet_id_raw: [0x3d, 0xd],
        auth_data: [0; 4],
        auth_data_raw: [0; 4],
        }
    }
}

impl Packet for PacketAhcGameGuard {
    fn id(&self) -> &str {
       "0x03dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAhcGameGuard {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCahAckGameGuard {
    pub fn packet_id() -> &'static str {
        "0x03de"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCahAckGameGuard {
        let mut offset: usize = 0;
        PacketCahAckGameGuard {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            auth_data: {
                let field =  {
                let mut dst: [u32; 4] = [0_u32; 4];
                for (index, byte) in buffer[offset..offset + 4].iter().enumerate() {
                    dst[index] = *byte as u32;
                }
                dst
            };
                field
            },
            auth_data_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.auth_data {
            wtr.write_u32::<LittleEndian>(item).unwrap();
        }
        self.auth_data_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.auth_data_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_auth_data(&mut self, value: [u32; 4]) {
        self.auth_data = value;
    }
    pub fn set_auth_data_raw(&mut self, value: [u8; 4]) {
        self.auth_data_raw = value;
    }
    pub fn new() -> PacketCahAckGameGuard {
        PacketCahAckGameGuard {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x3d, 0xe]),
        packet_id_raw: [0x3d, 0xe],
        auth_data: [0; 4],
        auth_data_raw: [0; 4],
        }
    }
}

impl Packet for PacketCahAckGameGuard {
    fn id(&self) -> &str {
       "0x03de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCahAckGameGuard {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzEnter2 {
    pub fn packet_id() -> &'static str {
        "0x3604"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzEnter2 {
        let mut offset: usize = 0;
        PacketCzEnter2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            auth_code: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auth_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            client_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            client_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.auth_code).unwrap();
        self.auth_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.client_time).unwrap();
        self.client_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.auth_code_raw.to_vec());
        wtr.append(&mut self.client_time_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 19;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_auth_code(&mut self, value: i32) {
        self.auth_code = value;
    }
    pub fn set_auth_code_raw(&mut self, value: [u8; 4]) {
        self.auth_code_raw = value;
    }
    pub fn set_client_time(&mut self, value: u32) {
        self.client_time = value;
    }
    pub fn set_client_time_raw(&mut self, value: [u8; 4]) {
        self.client_time_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn new() -> PacketCzEnter2 {
        PacketCzEnter2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x36, 0x04]),
        packet_id_raw: [0x36, 0x04],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        auth_code: 0,
        auth_code_raw: [0; 4],
        client_time: 0,
        client_time_raw: [0; 4],
        sex: 0,
        sex_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzEnter2 {
    fn id(&self) -> &str {
       "0x3604"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzEnter2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestAct2 {
    pub fn packet_id() -> &'static str {
        "0x3704"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestAct2 {
        let mut offset: usize = 0;
        PacketCzRequestAct2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn new() -> PacketCzRequestAct2 {
        PacketCzRequestAct2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x37, 0x04]),
        packet_id_raw: [0x37, 0x04],
        target_gid: 0,
        target_gid_raw: [0; 4],
        action: 0,
        action_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzRequestAct2 {
    fn id(&self) -> &str {
       "0x3704"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestAct2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUseSkill2 {
    pub fn packet_id() -> &'static str {
        "0x0438"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUseSkill2 {
        let mut offset: usize = 0;
        PacketCzUseSkill2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            selected_level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            selected_level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.selected_level).unwrap();
        self.selected_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.selected_level_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_selected_level(&mut self, value: i16) {
        self.selected_level = value;
    }
    pub fn set_selected_level_raw(&mut self, value: [u8; 2]) {
        self.selected_level_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn new() -> PacketCzUseSkill2 {
        PacketCzUseSkill2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x43, 0x8]),
        packet_id_raw: [0x43, 0x8],
        selected_level: 0,
        selected_level_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        target_id: 0,
        target_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzUseSkill2 {
    fn id(&self) -> &str {
       "0x0438"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUseSkill2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzUseItem2 {
    pub fn packet_id() -> &'static str {
        "0x0439"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzUseItem2 {
        let mut offset: usize = 0;
        PacketCzUseItem2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzUseItem2 {
        PacketCzUseItem2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x43, 0x9]),
        packet_id_raw: [0x43, 0x9],
        index: 0,
        index_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzUseItem2 {
    fn id(&self) -> &str {
       "0x0439"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzUseItem2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillPostdelay {
    pub fn packet_id() -> &'static str {
        "0x043d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillPostdelay {
        let mut offset: usize = 0;
        PacketZcSkillPostdelay {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            delay_tm: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delay_tm_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.delay_tm).unwrap();
        self.delay_tm_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.delay_tm_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_delay_tm(&mut self, value: u32) {
        self.delay_tm = value;
    }
    pub fn set_delay_tm_raw(&mut self, value: [u8; 4]) {
        self.delay_tm_raw = value;
    }
    pub fn new() -> PacketZcSkillPostdelay {
        PacketZcSkillPostdelay {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x43, 0xd]),
        packet_id_raw: [0x43, 0xd],
        skid: 0,
        skid_raw: [0; 2],
        delay_tm: 0,
        delay_tm_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSkillPostdelay {
    fn id(&self) -> &str {
       "0x043d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillPostdelay {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillPostdelayList {
    pub fn packet_id() -> &'static str {
        "0x043e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillPostdelayList {
        let mut offset: usize = 0;
        let vec_type_len = SkillPostdelay::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<SkillPostdelay> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(SkillPostdelay::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcSkillPostdelayList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            delay_list: {
                let field = vec_field.clone();
                field
            },
            delay_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.delay_list_raw = {
            self.delay_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.delay_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.delay_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_delay_list(&mut self, value: Vec<SkillPostdelay>) {
        self.delay_list = value;
    }
    pub fn set_delay_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.delay_list_raw = value;
    }
    pub fn new() -> PacketZcSkillPostdelayList {
        PacketZcSkillPostdelayList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x43, 0xe]),
        packet_id_raw: [0x43, 0xe],
        packet_length: 0,
        packet_length_raw: [0; 2],
        delay_list: vec![],
        delay_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcSkillPostdelayList {
    fn id(&self) -> &str {
       "0x043e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillPostdelayList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMsgStateChange2 {
    pub fn packet_id() -> &'static str {
        "0x043f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMsgStateChange2 {
        let mut offset: usize = 0;
        PacketZcMsgStateChange2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            state: {
                let field = buffer[offset] == 1;
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            remain_ms: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            remain_ms_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            val: {
                let field =  {
                let mut dst: [i32; 3] = [0_i32; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as i32;
                }
                dst
            };
                field
            },
            val_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state as u8).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.remain_ms).unwrap();
        self.remain_ms_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.val {
            wtr.write_i32::<LittleEndian>(item).unwrap();
        }
        self.val_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.remain_ms_raw.to_vec());
        wtr.append(&mut self.val_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_state(&mut self, value: bool) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_remain_ms(&mut self, value: u32) {
        self.remain_ms = value;
    }
    pub fn set_remain_ms_raw(&mut self, value: [u8; 4]) {
        self.remain_ms_raw = value;
    }
    pub fn set_val(&mut self, value: [i32; 3]) {
        self.val = value;
    }
    pub fn set_val_raw(&mut self, value: [u8; 3]) {
        self.val_raw = value;
    }
    pub fn new() -> PacketZcMsgStateChange2 {
        PacketZcMsgStateChange2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x43, 0xf]),
        packet_id_raw: [0x43, 0xf],
        index: 0,
        index_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        state: false,
        state_raw: [0; 1],
        remain_ms: 0,
        remain_ms_raw: [0; 4],
        val: [0; 3],
        val_raw: [0; 3],
        }
    }
}

impl Packet for PacketZcMsgStateChange2 {
    fn id(&self) -> &str {
       "0x043f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMsgStateChange2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMillenniumshield {
    pub fn packet_id() -> &'static str {
        "0x0440"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMillenniumshield {
        let mut offset: usize = 0;
        PacketZcMillenniumshield {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            num: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            num_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.num).unwrap();
        self.num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.num_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_num(&mut self, value: i16) {
        self.num = value;
    }
    pub fn set_num_raw(&mut self, value: [u8; 2]) {
        self.num_raw = value;
    }
    pub fn set_state(&mut self, value: i16) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 2]) {
        self.state_raw = value;
    }
    pub fn new() -> PacketZcMillenniumshield {
        PacketZcMillenniumshield {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x0]),
        packet_id_raw: [0x44, 0x0],
        aid: 0,
        aid_raw: [0; 4],
        num: 0,
        num_raw: [0; 2],
        state: 0,
        state_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcMillenniumshield {
    fn id(&self) -> &str {
       "0x0440"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMillenniumshield {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillinfoDelete {
    pub fn packet_id() -> &'static str {
        "0x0441"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillinfoDelete {
        let mut offset: usize = 0;
        PacketZcSkillinfoDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn new() -> PacketZcSkillinfoDelete {
        PacketZcSkillinfoDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x1]),
        packet_id_raw: [0x44, 0x1],
        skid: 0,
        skid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcSkillinfoDelete {
    fn id(&self) -> &str {
       "0x0441"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillinfoDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillSelectRequest {
    pub fn packet_id() -> &'static str {
        "0x0442"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillSelectRequest {
        let mut offset: usize = 0;
        PacketZcSkillSelectRequest {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            why: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            why_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            skidlist: {
                let field =  {
                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();
                dst
            };
                field
            },
            skidlist_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.why).unwrap();
        self.why_raw = wtr.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.why_raw.to_vec());
        wtr.append(&mut self.skidlist_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_why(&mut self, value: i32) {
        self.why = value;
    }
    pub fn set_why_raw(&mut self, value: [u8; 4]) {
        self.why_raw = value;
    }
    pub fn set_skidlist(&mut self, value: Vec<u8>) {
        self.skidlist = value;
    }
    pub fn set_skidlist_raw(&mut self, value: Vec<u8>) {
        self.skidlist_raw = value;
    }
    pub fn new() -> PacketZcSkillSelectRequest {
        PacketZcSkillSelectRequest {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x2]),
        packet_id_raw: [0x44, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        why: 0,
        why_raw: [0; 4],
        skidlist: vec![],
        skidlist_raw: vec![],
        }
    }
}

impl Packet for PacketZcSkillSelectRequest {
    fn id(&self) -> &str {
       "0x0442"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillSelectRequest {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSkillSelectResponse {
    pub fn packet_id() -> &'static str {
        "0x0443"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSkillSelectResponse {
        let mut offset: usize = 0;
        PacketCzSkillSelectResponse {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            why: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            why_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.why).unwrap();
        self.why_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.why_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_why(&mut self, value: i32) {
        self.why = value;
    }
    pub fn set_why_raw(&mut self, value: [u8; 4]) {
        self.why_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn new() -> PacketCzSkillSelectResponse {
        PacketCzSkillSelectResponse {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x3]),
        packet_id_raw: [0x44, 0x3],
        why: 0,
        why_raw: [0; 4],
        skid: 0,
        skid_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzSkillSelectResponse {
    fn id(&self) -> &str {
       "0x0443"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSkillSelectResponse {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSimpleCashPointItemlist {
    pub fn packet_id() -> &'static str {
        "0x0444"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSimpleCashPointItemlist {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseItem::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<PurchaseItem> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(PurchaseItem::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcSimpleCashPointItemlist {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            cash_point: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            cash_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.cash_point).unwrap();
        self.cash_point_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.cash_point_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_cash_point(&mut self, value: u32) {
        self.cash_point = value;
    }
    pub fn set_cash_point_raw(&mut self, value: [u8; 4]) {
        self.cash_point_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseItem>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcSimpleCashPointItemlist {
        PacketZcSimpleCashPointItemlist {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x4]),
        packet_id_raw: [0x44, 0x4],
        packet_length: 0,
        packet_length_raw: [0; 2],
        cash_point: 0,
        cash_point_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcSimpleCashPointItemlist {
    fn id(&self) -> &str {
       "0x0444"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSimpleCashPointItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSimpleBuyCashPointItem {
    pub fn packet_id() -> &'static str {
        "0x0445"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSimpleBuyCashPointItem {
        let mut offset: usize = 0;
        PacketCzSimpleBuyCashPointItem {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketCzSimpleBuyCashPointItem {
        PacketCzSimpleBuyCashPointItem {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x5]),
        packet_id_raw: [0x44, 0x5],
        itid: 0,
        itid_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzSimpleBuyCashPointItem {
    fn id(&self) -> &str {
       "0x0445"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSimpleBuyCashPointItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcQuestNotifyEffect {
    pub fn packet_id() -> &'static str {
        "0x0446"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcQuestNotifyEffect {
        let mut offset: usize = 0;
        PacketZcQuestNotifyEffect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            npc_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            npc_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            effect_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.npc_id).unwrap();
        self.npc_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.effect).unwrap();
        self.effect_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.npc_id_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.effect_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_npc_id(&mut self, value: u32) {
        self.npc_id = value;
    }
    pub fn set_npc_id_raw(&mut self, value: [u8; 4]) {
        self.npc_id_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_effect(&mut self, value: i16) {
        self.effect = value;
    }
    pub fn set_effect_raw(&mut self, value: [u8; 2]) {
        self.effect_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcQuestNotifyEffect {
        PacketZcQuestNotifyEffect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x6]),
        packet_id_raw: [0x44, 0x6],
        npc_id: 0,
        npc_id_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        effect: 0,
        effect_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcQuestNotifyEffect {
    fn id(&self) -> &str {
       "0x0446"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcQuestNotifyEffect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcCharacterList {
    pub fn packet_id() -> &'static str {
        "0x0448"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcCharacterList {
        let mut offset: usize = 0;
        let vec_type_len = CharacterList::base_len(packetver);
        let iter_count = (&buffer.len() - 4) / vec_type_len;
        let mut vec_field: Vec<CharacterList> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 4 + (vec_type_len * (i - 1));
            let end_pos = 4 + vec_type_len * i;
            vec_field.push(CharacterList::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketHcCharacterList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            character_list: {
                let field = vec_field.clone();
                field
            },
            character_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.character_list_raw = {
            self.character_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.character_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        self.character_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_character_list(&mut self, value: Vec<CharacterList>) {
        self.character_list = value;
    }
    pub fn set_character_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.character_list_raw = value;
    }
    pub fn new() -> PacketHcCharacterList {
        PacketHcCharacterList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x8]),
        packet_id_raw: [0x44, 0x8],
        packet_length: 0,
        packet_length_raw: [0; 2],
        character_list: vec![],
        character_list_raw: vec![],
        }
    }
}

impl Packet for PacketHcCharacterList {
    fn id(&self) -> &str {
       "0x0448"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcCharacterList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcHackshErrorMsg {
    pub fn packet_id() -> &'static str {
        "0x0449"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcHackshErrorMsg {
        let mut offset: usize = 0;
        PacketZcHackshErrorMsg {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            error_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.error_id).unwrap();
        self.error_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_id(&mut self, value: i16) {
        self.error_id = value;
    }
    pub fn set_error_id_raw(&mut self, value: [u8; 2]) {
        self.error_id_raw = value;
    }
    pub fn new() -> PacketZcHackshErrorMsg {
        PacketZcHackshErrorMsg {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0x9]),
        packet_id_raw: [0x44, 0x9],
        error_id: 0,
        error_id_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcHackshErrorMsg {
    fn id(&self) -> &str {
       "0x0449"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcHackshErrorMsg {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzClientVersion {
    pub fn packet_id() -> &'static str {
        "0x044a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzClientVersion {
        let mut offset: usize = 0;
        PacketCzClientVersion {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            client_ver: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            client_ver_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.client_ver).unwrap();
        self.client_ver_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.client_ver_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_client_ver(&mut self, value: i32) {
        self.client_ver = value;
    }
    pub fn set_client_ver_raw(&mut self, value: [u8; 4]) {
        self.client_ver_raw = value;
    }
    pub fn new() -> PacketCzClientVersion {
        PacketCzClientVersion {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0xa]),
        packet_id_raw: [0x44, 0xa],
        client_ver: 0,
        client_ver_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzClientVersion {
    fn id(&self) -> &str {
       "0x044a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzClientVersion {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCloseSimplecashShop {
    pub fn packet_id() -> &'static str {
        "0x044b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCloseSimplecashShop {
        let mut offset: usize = 0;
        PacketCzCloseSimplecashShop {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzCloseSimplecashShop {
        PacketCzCloseSimplecashShop {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x44, 0xb]),
        packet_id_raw: [0x44, 0xb],
        }
    }
}

impl Packet for PacketCzCloseSimplecashShop {
    fn id(&self) -> &str {
       "0x044b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCloseSimplecashShop {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEsResult {
    pub fn packet_id() -> &'static str {
        "0x07d0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEsResult {
        let mut offset: usize = 0;
        PacketZcEsResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_no: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_no_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_msg: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_msg_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_no).unwrap();
        self.es_no_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_msg).unwrap();
        self.es_msg_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.es_no_raw.to_vec());
        wtr.append(&mut self.es_msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_es_no(&mut self, value: i16) {
        self.es_no = value;
    }
    pub fn set_es_no_raw(&mut self, value: [u8; 2]) {
        self.es_no_raw = value;
    }
    pub fn set_es_msg(&mut self, value: i16) {
        self.es_msg = value;
    }
    pub fn set_es_msg_raw(&mut self, value: [u8; 2]) {
        self.es_msg_raw = value;
    }
    pub fn new() -> PacketZcEsResult {
        PacketZcEsResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x0]),
        packet_id_raw: [0x7d, 0x0],
        es_no: 0,
        es_no_raw: [0; 2],
        es_msg: 0,
        es_msg_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcEsResult {
    fn id(&self) -> &str {
       "0x07d0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEsResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzEsGetList {
    pub fn packet_id() -> &'static str {
        "0x07d1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzEsGetList {
        let mut offset: usize = 0;
        PacketCzEsGetList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzEsGetList {
        PacketCzEsGetList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x1]),
        packet_id_raw: [0x7d, 0x1],
        }
    }
}

impl Packet for PacketCzEsGetList {
    fn id(&self) -> &str {
       "0x07d1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzEsGetList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEsList {
    pub fn packet_id() -> &'static str {
        "0x07d2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEsList {
        let mut offset: usize = 0;
        PacketZcEsList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcEsList {
        PacketZcEsList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x2]),
        packet_id_raw: [0x7d, 0x2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcEsList {
    fn id(&self) -> &str {
       "0x07d2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEsList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzEsChoose {
    pub fn packet_id() -> &'static str {
        "0x07d3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzEsChoose {
        let mut offset: usize = 0;
        PacketCzEsChoose {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_no: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_no_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_no).unwrap();
        self.es_no_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.es_no_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_es_no(&mut self, value: i16) {
        self.es_no = value;
    }
    pub fn set_es_no_raw(&mut self, value: [u8; 2]) {
        self.es_no_raw = value;
    }
    pub fn new() -> PacketCzEsChoose {
        PacketCzEsChoose {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x3]),
        packet_id_raw: [0x7d, 0x3],
        es_no: 0,
        es_no_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzEsChoose {
    fn id(&self) -> &str {
       "0x07d3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzEsChoose {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzEsCancel {
    pub fn packet_id() -> &'static str {
        "0x07d4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzEsCancel {
        let mut offset: usize = 0;
        PacketCzEsCancel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_no: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_no_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_no).unwrap();
        self.es_no_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.es_no_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_es_no(&mut self, value: i16) {
        self.es_no = value;
    }
    pub fn set_es_no_raw(&mut self, value: [u8; 2]) {
        self.es_no_raw = value;
    }
    pub fn new() -> PacketCzEsCancel {
        PacketCzEsCancel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x4]),
        packet_id_raw: [0x7d, 0x4],
        es_no: 0,
        es_no_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzEsCancel {
    fn id(&self) -> &str {
       "0x07d4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzEsCancel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEsReady {
    pub fn packet_id() -> &'static str {
        "0x07d5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEsReady {
        let mut offset: usize = 0;
        PacketZcEsReady {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_no: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_no_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_no).unwrap();
        self.es_no_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.es_no_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_es_no(&mut self, value: i16) {
        self.es_no = value;
    }
    pub fn set_es_no_raw(&mut self, value: [u8; 2]) {
        self.es_no_raw = value;
    }
    pub fn new() -> PacketZcEsReady {
        PacketZcEsReady {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x5]),
        packet_id_raw: [0x7d, 0x5],
        es_no: 0,
        es_no_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcEsReady {
    fn id(&self) -> &str {
       "0x07d5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEsReady {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEsGoto {
    pub fn packet_id() -> &'static str {
        "0x07d6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEsGoto {
        let mut offset: usize = 0;
        PacketZcEsGoto {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_no: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_no_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_no).unwrap();
        self.es_no_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.es_no_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_es_no(&mut self, value: i16) {
        self.es_no = value;
    }
    pub fn set_es_no_raw(&mut self, value: [u8; 2]) {
        self.es_no_raw = value;
    }
    pub fn new() -> PacketZcEsGoto {
        PacketZcEsGoto {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x6]),
        packet_id_raw: [0x7d, 0x6],
        es_no: 0,
        es_no_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcEsGoto {
    fn id(&self) -> &str {
       "0x07d6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEsGoto {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzGroupinfoChangeV2 {
    pub fn packet_id() -> &'static str {
        "0x07d7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzGroupinfoChangeV2 {
        let mut offset: usize = 0;
        PacketCzGroupinfoChangeV2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp_option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_pickup_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_pickup_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            item_division_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_division_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.exp_option).unwrap();
        self.exp_option_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_pickup_rule).unwrap();
        self.item_pickup_rule_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_division_rule).unwrap();
        self.item_division_rule_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.exp_option_raw.to_vec());
        wtr.append(&mut self.item_pickup_rule_raw.to_vec());
        wtr.append(&mut self.item_division_rule_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_exp_option(&mut self, value: u32) {
        self.exp_option = value;
    }
    pub fn set_exp_option_raw(&mut self, value: [u8; 4]) {
        self.exp_option_raw = value;
    }
    pub fn set_item_pickup_rule(&mut self, value: u8) {
        self.item_pickup_rule = value;
    }
    pub fn set_item_pickup_rule_raw(&mut self, value: [u8; 1]) {
        self.item_pickup_rule_raw = value;
    }
    pub fn set_item_division_rule(&mut self, value: u8) {
        self.item_division_rule = value;
    }
    pub fn set_item_division_rule_raw(&mut self, value: [u8; 1]) {
        self.item_division_rule_raw = value;
    }
    pub fn new() -> PacketCzGroupinfoChangeV2 {
        PacketCzGroupinfoChangeV2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x7]),
        packet_id_raw: [0x7d, 0x7],
        exp_option: 0,
        exp_option_raw: [0; 4],
        item_pickup_rule: 0,
        item_pickup_rule_raw: [0; 1],
        item_division_rule: 0,
        item_division_rule_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzGroupinfoChangeV2 {
    fn id(&self) -> &str {
       "0x07d7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzGroupinfoChangeV2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqGroupinfoChangeV2 {
    pub fn packet_id() -> &'static str {
        "0x07d8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqGroupinfoChangeV2 {
        let mut offset: usize = 0;
        PacketZcReqGroupinfoChangeV2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp_option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            exp_option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_pickup_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_pickup_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            item_division_rule: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_division_rule_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.exp_option).unwrap();
        self.exp_option_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_pickup_rule).unwrap();
        self.item_pickup_rule_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_division_rule).unwrap();
        self.item_division_rule_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.exp_option_raw.to_vec());
        wtr.append(&mut self.item_pickup_rule_raw.to_vec());
        wtr.append(&mut self.item_division_rule_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_exp_option(&mut self, value: u32) {
        self.exp_option = value;
    }
    pub fn set_exp_option_raw(&mut self, value: [u8; 4]) {
        self.exp_option_raw = value;
    }
    pub fn set_item_pickup_rule(&mut self, value: u8) {
        self.item_pickup_rule = value;
    }
    pub fn set_item_pickup_rule_raw(&mut self, value: [u8; 1]) {
        self.item_pickup_rule_raw = value;
    }
    pub fn set_item_division_rule(&mut self, value: u8) {
        self.item_division_rule = value;
    }
    pub fn set_item_division_rule_raw(&mut self, value: [u8; 1]) {
        self.item_division_rule_raw = value;
    }
    pub fn new() -> PacketZcReqGroupinfoChangeV2 {
        PacketZcReqGroupinfoChangeV2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x8]),
        packet_id_raw: [0x7d, 0x8],
        exp_option: 0,
        exp_option_raw: [0; 4],
        item_pickup_rule: 0,
        item_pickup_rule_raw: [0; 1],
        item_division_rule: 0,
        item_division_rule_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcReqGroupinfoChangeV2 {
    fn id(&self) -> &str {
       "0x07d8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqGroupinfoChangeV2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcShortcutKeyListV2 {
    pub fn packet_id() -> &'static str {
        "0x07d9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcShortcutKeyListV2 {
        let mut offset: usize = 0;
        let vec_type_len = ShortCutKey::base_len(packetver);
        let iter_count = (&buffer.len() - 2) / vec_type_len;
        let mut vec_field: Vec<ShortCutKey> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 2 + (vec_type_len * (i - 1));
            let end_pos = 2 + vec_type_len * i;
            vec_field.push(ShortCutKey::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcShortcutKeyListV2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            short_cut_key: {
                let field = vec_field.clone();
                field
            },
            short_cut_key_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.short_cut_key_raw = {
            self.short_cut_key.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.short_cut_key.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.short_cut_key.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_short_cut_key(&mut self, value: Vec<ShortCutKey>) {
        self.short_cut_key = value;
    }
    pub fn set_short_cut_key_raw(&mut self, value: Vec<Vec<u8>>) {
        self.short_cut_key_raw = value;
    }
    pub fn new() -> PacketZcShortcutKeyListV2 {
        PacketZcShortcutKeyListV2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0x9]),
        packet_id_raw: [0x7d, 0x9],
        short_cut_key: vec![],
        short_cut_key_raw: vec![],
        }
    }
}

impl Packet for PacketZcShortcutKeyListV2 {
    fn id(&self) -> &str {
       "0x07d9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcShortcutKeyListV2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzChangeGroupMaster {
    pub fn packet_id() -> &'static str {
        "0x07da"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzChangeGroupMaster {
        let mut offset: usize = 0;
        PacketCzChangeGroupMaster {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzChangeGroupMaster {
        PacketCzChangeGroupMaster {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0xa]),
        packet_id_raw: [0x7d, 0xa],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzChangeGroupMaster {
    fn id(&self) -> &str {
       "0x07da"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzChangeGroupMaster {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcHoParChange {
    pub fn packet_id() -> &'static str {
        "0x07db"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcHoParChange {
        let mut offset: usize = 0;
        PacketZcHoParChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            var: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var).unwrap();
        self.var_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.var_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_var(&mut self, value: u16) {
        self.var = value;
    }
    pub fn set_var_raw(&mut self, value: [u8; 2]) {
        self.var_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcHoParChange {
        PacketZcHoParChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0xb]),
        packet_id_raw: [0x7d, 0xb],
        var: 0,
        var_raw: [0; 2],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcHoParChange {
    fn id(&self) -> &str {
       "0x07db"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcHoParChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSeekParty {
    pub fn packet_id() -> &'static str {
        "0x07dc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSeekParty {
        let mut offset: usize = 0;
        PacketCzSeekParty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.option).unwrap();
        self.option_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.option_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_option(&mut self, value: u32) {
        self.option = value;
    }
    pub fn set_option_raw(&mut self, value: [u8; 4]) {
        self.option_raw = value;
    }
    pub fn new() -> PacketCzSeekParty {
        PacketCzSeekParty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0xc]),
        packet_id_raw: [0x7d, 0xc],
        option: 0,
        option_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzSeekParty {
    fn id(&self) -> &str {
       "0x07dc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSeekParty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSeekParty {
    pub fn packet_id() -> &'static str {
        "0x07dd"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSeekParty {
        let mut offset: usize = 0;
        PacketZcSeekParty {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            job: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.option).unwrap();
        self.option_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.option_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 54;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_job(&mut self, value: u32) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 4]) {
        self.job_raw = value;
    }
    pub fn set_level(&mut self, value: u32) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 4]) {
        self.level_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_option(&mut self, value: u32) {
        self.option = value;
    }
    pub fn set_option_raw(&mut self, value: [u8; 4]) {
        self.option_raw = value;
    }
    pub fn new() -> PacketZcSeekParty {
        PacketZcSeekParty {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0xd]),
        packet_id_raw: [0x7d, 0xd],
        name: [0 as char; 24],
        name_raw: [0; 24],
        job: 0,
        job_raw: [0; 4],
        level: 0,
        level_raw: [0; 4],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        option: 0,
        option_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSeekParty {
    fn id(&self) -> &str {
       "0x07dd"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSeekParty {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSeekPartyMember {
    pub fn packet_id() -> &'static str {
        "0x07de"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSeekPartyMember {
        let mut offset: usize = 0;
        PacketCzSeekPartyMember {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.option).unwrap();
        self.option_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.option_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_job(&mut self, value: u32) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 4]) {
        self.job_raw = value;
    }
    pub fn set_level(&mut self, value: u32) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 4]) {
        self.level_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_option(&mut self, value: u32) {
        self.option = value;
    }
    pub fn set_option_raw(&mut self, value: [u8; 4]) {
        self.option_raw = value;
    }
    pub fn new() -> PacketCzSeekPartyMember {
        PacketCzSeekPartyMember {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0xe]),
        packet_id_raw: [0x7d, 0xe],
        job: 0,
        job_raw: [0; 4],
        level: 0,
        level_raw: [0; 4],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        option: 0,
        option_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzSeekPartyMember {
    fn id(&self) -> &str {
       "0x07de"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSeekPartyMember {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSeekPartyMember {
    pub fn packet_id() -> &'static str {
        "0x07df"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSeekPartyMember {
        let mut offset: usize = 0;
        PacketZcSeekPartyMember {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            job: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            option: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            option_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.option).unwrap();
        self.option_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.option_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 54;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_job(&mut self, value: u32) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 4]) {
        self.job_raw = value;
    }
    pub fn set_level(&mut self, value: u32) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 4]) {
        self.level_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_option(&mut self, value: u32) {
        self.option = value;
    }
    pub fn set_option_raw(&mut self, value: [u8; 4]) {
        self.option_raw = value;
    }
    pub fn new() -> PacketZcSeekPartyMember {
        PacketZcSeekPartyMember {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7d, 0xf]),
        packet_id_raw: [0x7d, 0xf],
        name: [0 as char; 24],
        name_raw: [0; 24],
        job: 0,
        job_raw: [0; 4],
        level: 0,
        level_raw: [0; 4],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        option: 0,
        option_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcSeekPartyMember {
    fn id(&self) -> &str {
       "0x07df"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSeekPartyMember {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcEsNotiMyinfo {
    pub fn packet_id() -> &'static str {
        "0x07e0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcEsNotiMyinfo {
        let mut offset: usize = 0;
        PacketZcEsNotiMyinfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            es_no: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            es_no_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            esname: {
                let field =  {
                let mut dst: [char; 54] = [0 as char; 54];
                for (index, byte) in buffer[offset..offset + 54].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            esname_raw: {
                let mut dst: [u8; 54] = [0u8; 54];
                dst.clone_from_slice(&buffer[offset..offset + 54]);
                offset += 54;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.es_no).unwrap();
        self.es_no_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.esname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.esname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.es_no_raw.to_vec());
        wtr.append(&mut self.esname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 58;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_es_no(&mut self, value: i16) {
        self.es_no = value;
    }
    pub fn set_es_no_raw(&mut self, value: [u8; 2]) {
        self.es_no_raw = value;
    }
    pub fn set_esname(&mut self, value: [char; 54]) {
        self.esname = value;
    }
    pub fn set_esname_raw(&mut self, value: [u8; 54]) {
        self.esname_raw = value;
    }
    pub fn new() -> PacketZcEsNotiMyinfo {
        PacketZcEsNotiMyinfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x0]),
        packet_id_raw: [0x7e, 0x0],
        es_no: 0,
        es_no_raw: [0; 2],
        esname: [0 as char; 54],
        esname_raw: [0; 54],
        }
    }
}

impl Packet for PacketZcEsNotiMyinfo {
    fn id(&self) -> &str {
       "0x07e0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcEsNotiMyinfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSkillinfoUpdate2 {
    pub fn packet_id() -> &'static str {
        "0x07e1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSkillinfoUpdate2 {
        let mut offset: usize = 0;
        PacketZcSkillinfoUpdate2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            spcost: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            spcost_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            attack_range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            attack_range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            upgradable: {
                let field = buffer[offset] == 1;
                field
            },
            upgradable_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.spcost).unwrap();
        self.spcost_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.attack_range).unwrap();
        self.attack_range_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.upgradable as u8).unwrap();
        self.upgradable_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.spcost_raw.to_vec());
        wtr.append(&mut self.attack_range_raw.to_vec());
        wtr.append(&mut self.upgradable_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 15;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_spcost(&mut self, value: i16) {
        self.spcost = value;
    }
    pub fn set_spcost_raw(&mut self, value: [u8; 2]) {
        self.spcost_raw = value;
    }
    pub fn set_attack_range(&mut self, value: i16) {
        self.attack_range = value;
    }
    pub fn set_attack_range_raw(&mut self, value: [u8; 2]) {
        self.attack_range_raw = value;
    }
    pub fn set_upgradable(&mut self, value: bool) {
        self.upgradable = value;
    }
    pub fn set_upgradable_raw(&mut self, value: [u8; 1]) {
        self.upgradable_raw = value;
    }
    pub fn new() -> PacketZcSkillinfoUpdate2 {
        PacketZcSkillinfoUpdate2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x1]),
        packet_id_raw: [0x7e, 0x1],
        skid: 0,
        skid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 4],
        level: 0,
        level_raw: [0; 2],
        spcost: 0,
        spcost_raw: [0; 2],
        attack_range: 0,
        attack_range_raw: [0; 2],
        upgradable: false,
        upgradable_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSkillinfoUpdate2 {
    fn id(&self) -> &str {
       "0x07e1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSkillinfoUpdate2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMsgValue {
    pub fn packet_id() -> &'static str {
        "0x07e2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMsgValue {
        let mut offset: usize = 0;
        PacketZcMsgValue {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            msg_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.msg).unwrap();
        self.msg_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_msg(&mut self, value: u16) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: [u8; 2]) {
        self.msg_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcMsgValue {
        PacketZcMsgValue {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x2]),
        packet_id_raw: [0x7e, 0x2],
        msg: 0,
        msg_raw: [0; 2],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMsgValue {
    fn id(&self) -> &str {
       "0x07e2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMsgValue {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemlistwinOpen {
    pub fn packet_id() -> &'static str {
        "0x07e3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemlistwinOpen {
        let mut offset: usize = 0;
        PacketZcItemlistwinOpen {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn new() -> PacketZcItemlistwinOpen {
        PacketZcItemlistwinOpen {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x3]),
        packet_id_raw: [0x7e, 0x3],
        atype: 0,
        atype_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcItemlistwinOpen {
    fn id(&self) -> &str {
       "0x07e3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemlistwinOpen {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzItemlistwinRes {
    pub fn packet_id() -> &'static str {
        "0x07e4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzItemlistwinRes {
        let mut offset: usize = 0;
        PacketCzItemlistwinRes {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            action: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            material_list: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            material_list_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.material_list).unwrap();
        self.material_list_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        wtr.append(&mut self.material_list_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_action(&mut self, value: i32) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 4]) {
        self.action_raw = value;
    }
    pub fn set_material_list(&mut self, value: u16) {
        self.material_list = value;
    }
    pub fn set_material_list_raw(&mut self, value: [u8; 2]) {
        self.material_list_raw = value;
    }
    pub fn new() -> PacketCzItemlistwinRes {
        PacketCzItemlistwinRes {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x4]),
        packet_id_raw: [0x7e, 0x4],
        packet_length: 0,
        packet_length_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 4],
        action: 0,
        action_raw: [0; 4],
        material_list: 0,
        material_list_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzItemlistwinRes {
    fn id(&self) -> &str {
       "0x07e4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzItemlistwinRes {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChEnterCheckbot {
    pub fn packet_id() -> &'static str {
        "0x07e5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChEnterCheckbot {
        let mut offset: usize = 0;
        PacketChEnterCheckbot {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sz_string_info: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            sz_string_info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_aid).unwrap();
        self.dw_aid_raw = wtr.try_into().unwrap();
        self.sz_string_info_raw = self.sz_string_info.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.dw_aid_raw.to_vec());
        wtr.append(&mut self.sz_string_info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_dw_aid(&mut self, value: u32) {
        self.dw_aid = value;
    }
    pub fn set_dw_aid_raw(&mut self, value: [u8; 4]) {
        self.dw_aid_raw = value;
    }
    pub fn set_sz_string_info(&mut self, value: String) {
        self.sz_string_info = value;
    }
    pub fn set_sz_string_info_raw(&mut self, value: Vec<u8>) {
        self.sz_string_info_raw = value;
    }
    pub fn new() -> PacketChEnterCheckbot {
        PacketChEnterCheckbot {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x5]),
        packet_id_raw: [0x7e, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        dw_aid: 0,
        dw_aid_raw: [0; 4],
        sz_string_info: String::new(),
        sz_string_info_raw: vec![],
        }
    }
}

impl Packet for PacketChEnterCheckbot {
    fn id(&self) -> &str {
       "0x07e5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChEnterCheckbot {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMsgSkill {
    pub fn packet_id() -> &'static str {
        "0x07e6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMsgSkill {
        let mut offset: usize = 0;
        PacketZcMsgSkill {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msgid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            msgid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.msgid).unwrap();
        self.msgid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.msgid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_msgid(&mut self, value: i32) {
        self.msgid = value;
    }
    pub fn set_msgid_raw(&mut self, value: [u8; 4]) {
        self.msgid_raw = value;
    }
    pub fn new() -> PacketZcMsgSkill {
        PacketZcMsgSkill {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x6]),
        packet_id_raw: [0x7e, 0x6],
        skid: 0,
        skid_raw: [0; 2],
        msgid: 0,
        msgid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMsgSkill {
    fn id(&self) -> &str {
       "0x07e6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMsgSkill {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChCheckbot {
    pub fn packet_id() -> &'static str {
        "0x07e7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChCheckbot {
        let mut offset: usize = 0;
        PacketChCheckbot {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dw_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sz_string_info: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_string_info_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_aid).unwrap();
        self.dw_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_string_info {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_string_info_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.dw_aid_raw.to_vec());
        wtr.append(&mut self.sz_string_info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_dw_aid(&mut self, value: u32) {
        self.dw_aid = value;
    }
    pub fn set_dw_aid_raw(&mut self, value: [u8; 4]) {
        self.dw_aid_raw = value;
    }
    pub fn set_sz_string_info(&mut self, value: [char; 24]) {
        self.sz_string_info = value;
    }
    pub fn set_sz_string_info_raw(&mut self, value: [u8; 24]) {
        self.sz_string_info_raw = value;
    }
    pub fn new() -> PacketChCheckbot {
        PacketChCheckbot {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x7]),
        packet_id_raw: [0x7e, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        dw_aid: 0,
        dw_aid_raw: [0; 4],
        sz_string_info: [0 as char; 24],
        sz_string_info_raw: [0; 24],
        }
    }
}

impl Packet for PacketChCheckbot {
    fn id(&self) -> &str {
       "0x07e7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChCheckbot {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcCheckbot {
    pub fn packet_id() -> &'static str {
        "0x07e8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcCheckbot {
        let mut offset: usize = 0;
        PacketHcCheckbot {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            img: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            img_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        self.img_raw = self.img.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.img_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_img(&mut self, value: String) {
        self.img = value;
    }
    pub fn set_img_raw(&mut self, value: Vec<u8>) {
        self.img_raw = value;
    }
    pub fn new() -> PacketHcCheckbot {
        PacketHcCheckbot {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x8]),
        packet_id_raw: [0x7e, 0x8],
        packet_length: 0,
        packet_length_raw: [0; 2],
        img: String::new(),
        img_raw: vec![],
        }
    }
}

impl Packet for PacketHcCheckbot {
    fn id(&self) -> &str {
       "0x07e8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcCheckbot {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcCheckbotResult {
    pub fn packet_id() -> &'static str {
        "0x07e9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcCheckbotResult {
        let mut offset: usize = 0;
        PacketHcCheckbotResult {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketHcCheckbotResult {
        PacketHcCheckbotResult {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0x9]),
        packet_id_raw: [0x7e, 0x9],
        packet_length: 0,
        packet_length_raw: [0; 2],
        result: 0,
        result_raw: [0; 1],
        }
    }
}

impl Packet for PacketHcCheckbotResult {
    fn id(&self) -> &str {
       "0x07e9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcCheckbotResult {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzBattleFieldList {
    pub fn packet_id() -> &'static str {
        "0x07ea"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzBattleFieldList {
        let mut offset: usize = 0;
        PacketCzBattleFieldList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzBattleFieldList {
        PacketCzBattleFieldList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0xa]),
        packet_id_raw: [0x7e, 0xa],
        }
    }
}

impl Packet for PacketCzBattleFieldList {
    fn id(&self) -> &str {
       "0x07ea"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzBattleFieldList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattleFieldList {
    pub fn packet_id() -> &'static str {
        "0x07eb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattleFieldList {
        let mut offset: usize = 0;
        let vec_type_len = BattleFieldInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 8) / vec_type_len;
        let mut vec_field: Vec<BattleFieldInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 8 + (vec_type_len * (i - 1));
            let end_pos = 8 + vec_type_len * i;
            vec_field.push(BattleFieldInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcBattleFieldList {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            ack_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            ack_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info_list: {
                let field = vec_field.clone();
                field
            },
            info_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.ack_type).unwrap();
        self.ack_type_raw = wtr.try_into().unwrap();
        self.info_list_raw = {
            self.info_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.info_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.ack_type_raw.to_vec());
        self.info_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_ack_type(&mut self, value: i16) {
        self.ack_type = value;
    }
    pub fn set_ack_type_raw(&mut self, value: [u8; 2]) {
        self.ack_type_raw = value;
    }
    pub fn set_info_list(&mut self, value: Vec<BattleFieldInfo>) {
        self.info_list = value;
    }
    pub fn set_info_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.info_list_raw = value;
    }
    pub fn new() -> PacketZcBattleFieldList {
        PacketZcBattleFieldList {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0xb]),
        packet_id_raw: [0x7e, 0xb],
        packet_length: 0,
        packet_length_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        ack_type: 0,
        ack_type_raw: [0; 2],
        info_list: vec![],
        info_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcBattleFieldList {
    fn id(&self) -> &str {
       "0x07eb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattleFieldList {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzJoinBattleField {
    pub fn packet_id() -> &'static str {
        "0x07ec"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzJoinBattleField {
        let mut offset: usize = 0;
        PacketCzJoinBattleField {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            join_team: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            join_team_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.join_team).unwrap();
        self.join_team_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.join_team_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_join_team(&mut self, value: i16) {
        self.join_team = value;
    }
    pub fn set_join_team_raw(&mut self, value: [u8; 2]) {
        self.join_team_raw = value;
    }
    pub fn new() -> PacketCzJoinBattleField {
        PacketCzJoinBattleField {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0xc]),
        packet_id_raw: [0x7e, 0xc],
        bfno: 0,
        bfno_raw: [0; 4],
        join_team: 0,
        join_team_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzJoinBattleField {
    fn id(&self) -> &str {
       "0x07ec"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzJoinBattleField {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcJoinBattleField {
    pub fn packet_id() -> &'static str {
        "0x07ed"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcJoinBattleField {
        let mut offset: usize = 0;
        PacketZcJoinBattleField {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            join_team: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            join_team_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.join_team).unwrap();
        self.join_team_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.join_team_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_join_team(&mut self, value: i16) {
        self.join_team = value;
    }
    pub fn set_join_team_raw(&mut self, value: [u8; 2]) {
        self.join_team_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcJoinBattleField {
        PacketZcJoinBattleField {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0xd]),
        packet_id_raw: [0x7e, 0xd],
        bfno: 0,
        bfno_raw: [0; 4],
        join_team: 0,
        join_team_raw: [0; 2],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcJoinBattleField {
    fn id(&self) -> &str {
       "0x07ed"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcJoinBattleField {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCancelBattleField {
    pub fn packet_id() -> &'static str {
        "0x07ee"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCancelBattleField {
        let mut offset: usize = 0;
        PacketCzCancelBattleField {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn new() -> PacketCzCancelBattleField {
        PacketCzCancelBattleField {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0xe]),
        packet_id_raw: [0x7e, 0xe],
        bfno: 0,
        bfno_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzCancelBattleField {
    fn id(&self) -> &str {
       "0x07ee"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCancelBattleField {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCancelBattleField {
    pub fn packet_id() -> &'static str {
        "0x07ef"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCancelBattleField {
        let mut offset: usize = 0;
        PacketZcCancelBattleField {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcCancelBattleField {
        PacketZcCancelBattleField {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7e, 0xf]),
        packet_id_raw: [0x7e, 0xf],
        bfno: 0,
        bfno_raw: [0; 4],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcCancelBattleField {
    fn id(&self) -> &str {
       "0x07ef"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCancelBattleField {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqBattleStateMonitor {
    pub fn packet_id() -> &'static str {
        "0x07f0"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqBattleStateMonitor {
        let mut offset: usize = 0;
        PacketCzReqBattleStateMonitor {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            power_switch: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            power_switch_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.power_switch).unwrap();
        self.power_switch_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.power_switch_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_power_switch(&mut self, value: i16) {
        self.power_switch = value;
    }
    pub fn set_power_switch_raw(&mut self, value: [u8; 2]) {
        self.power_switch_raw = value;
    }
    pub fn new() -> PacketCzReqBattleStateMonitor {
        PacketCzReqBattleStateMonitor {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x0]),
        packet_id_raw: [0x7f, 0x0],
        bfno: 0,
        bfno_raw: [0; 4],
        power_switch: 0,
        power_switch_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqBattleStateMonitor {
    fn id(&self) -> &str {
       "0x07f0"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqBattleStateMonitor {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckBattleStateMonitor {
    pub fn packet_id() -> &'static str {
        "0x07f1"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckBattleStateMonitor {
        let mut offset: usize = 0;
        PacketZcAckBattleStateMonitor {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            play_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            play_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            battle_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            battle_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            team_count_a: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            team_count_a_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            team_count_b: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            team_count_b_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            my_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            my_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            join_team: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            join_team_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.play_count).unwrap();
        self.play_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.battle_state).unwrap();
        self.battle_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.team_count_a).unwrap();
        self.team_count_a_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.team_count_b).unwrap();
        self.team_count_b_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.my_count).unwrap();
        self.my_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.join_team).unwrap();
        self.join_team_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.play_count_raw.to_vec());
        wtr.append(&mut self.battle_state_raw.to_vec());
        wtr.append(&mut self.team_count_a_raw.to_vec());
        wtr.append(&mut self.team_count_b_raw.to_vec());
        wtr.append(&mut self.my_count_raw.to_vec());
        wtr.append(&mut self.join_team_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_play_count(&mut self, value: i16) {
        self.play_count = value;
    }
    pub fn set_play_count_raw(&mut self, value: [u8; 2]) {
        self.play_count_raw = value;
    }
    pub fn set_battle_state(&mut self, value: i16) {
        self.battle_state = value;
    }
    pub fn set_battle_state_raw(&mut self, value: [u8; 2]) {
        self.battle_state_raw = value;
    }
    pub fn set_team_count_a(&mut self, value: i16) {
        self.team_count_a = value;
    }
    pub fn set_team_count_a_raw(&mut self, value: [u8; 2]) {
        self.team_count_a_raw = value;
    }
    pub fn set_team_count_b(&mut self, value: i16) {
        self.team_count_b = value;
    }
    pub fn set_team_count_b_raw(&mut self, value: [u8; 2]) {
        self.team_count_b_raw = value;
    }
    pub fn set_my_count(&mut self, value: i16) {
        self.my_count = value;
    }
    pub fn set_my_count_raw(&mut self, value: [u8; 2]) {
        self.my_count_raw = value;
    }
    pub fn set_join_team(&mut self, value: i16) {
        self.join_team = value;
    }
    pub fn set_join_team_raw(&mut self, value: [u8; 2]) {
        self.join_team_raw = value;
    }
    pub fn new() -> PacketZcAckBattleStateMonitor {
        PacketZcAckBattleStateMonitor {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x1]),
        packet_id_raw: [0x7f, 0x1],
        bfno: 0,
        bfno_raw: [0; 4],
        play_count: 0,
        play_count_raw: [0; 2],
        battle_state: 0,
        battle_state_raw: [0; 2],
        team_count_a: 0,
        team_count_a_raw: [0; 2],
        team_count_b: 0,
        team_count_b_raw: [0; 2],
        my_count: 0,
        my_count_raw: [0; 2],
        join_team: 0,
        join_team_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcAckBattleStateMonitor {
    fn id(&self) -> &str {
       "0x07f1"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckBattleStateMonitor {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattleNotiStartStep {
    pub fn packet_id() -> &'static str {
        "0x07f2"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattleNotiStartStep {
        let mut offset: usize = 0;
        PacketZcBattleNotiStartStep {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcBattleNotiStartStep {
        PacketZcBattleNotiStartStep {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x2]),
        packet_id_raw: [0x7f, 0x2],
        bfno: 0,
        bfno_raw: [0; 4],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcBattleNotiStartStep {
    fn id(&self) -> &str {
       "0x07f2"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattleNotiStartStep {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattleJoinNotiDefer {
    pub fn packet_id() -> &'static str {
        "0x07f3"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattleJoinNotiDefer {
        let mut offset: usize = 0;
        PacketZcBattleJoinNotiDefer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bfno_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn new() -> PacketZcBattleJoinNotiDefer {
        PacketZcBattleJoinNotiDefer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x3]),
        packet_id_raw: [0x7f, 0x3],
        bfno: 0,
        bfno_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcBattleJoinNotiDefer {
    fn id(&self) -> &str {
       "0x07f3"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattleJoinNotiDefer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBattleJoinDisableState {
    pub fn packet_id() -> &'static str {
        "0x07f4"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBattleJoinDisableState {
        let mut offset: usize = 0;
        PacketZcBattleJoinDisableState {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            enable: {
                let field = buffer[offset] == 1;
                field
            },
            enable_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.enable as u8).unwrap();
        self.enable_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.enable_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_enable(&mut self, value: bool) {
        self.enable = value;
    }
    pub fn set_enable_raw(&mut self, value: [u8; 1]) {
        self.enable_raw = value;
    }
    pub fn new() -> PacketZcBattleJoinDisableState {
        PacketZcBattleJoinDisableState {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x4]),
        packet_id_raw: [0x7f, 0x4],
        enable: false,
        enable_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcBattleJoinDisableState {
    fn id(&self) -> &str {
       "0x07f4"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBattleJoinDisableState {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzGmFullstrip {
    pub fn packet_id() -> &'static str {
        "0x07f5"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzGmFullstrip {
        let mut offset: usize = 0;
        PacketCzGmFullstrip {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            target_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_aid).unwrap();
        self.target_aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.target_aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_target_aid(&mut self, value: u32) {
        self.target_aid = value;
    }
    pub fn set_target_aid_raw(&mut self, value: [u8; 4]) {
        self.target_aid_raw = value;
    }
    pub fn new() -> PacketCzGmFullstrip {
        PacketCzGmFullstrip {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x5]),
        packet_id_raw: [0x7f, 0x5],
        target_aid: 0,
        target_aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzGmFullstrip {
    fn id(&self) -> &str {
       "0x07f5"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzGmFullstrip {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyExp {
    pub fn packet_id() -> &'static str {
        "0x07f6"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyExp {
        let mut offset: usize = 0;
        PacketZcNotifyExp {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            amount: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            amount_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            var_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            exp_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            exp_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.amount).unwrap();
        self.amount_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var_id).unwrap();
        self.var_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.exp_type).unwrap();
        self.exp_type_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.amount_raw.to_vec());
        wtr.append(&mut self.var_id_raw.to_vec());
        wtr.append(&mut self.exp_type_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_amount(&mut self, value: i32) {
        self.amount = value;
    }
    pub fn set_amount_raw(&mut self, value: [u8; 4]) {
        self.amount_raw = value;
    }
    pub fn set_var_id(&mut self, value: u16) {
        self.var_id = value;
    }
    pub fn set_var_id_raw(&mut self, value: [u8; 2]) {
        self.var_id_raw = value;
    }
    pub fn set_exp_type(&mut self, value: i16) {
        self.exp_type = value;
    }
    pub fn set_exp_type_raw(&mut self, value: [u8; 2]) {
        self.exp_type_raw = value;
    }
    pub fn new() -> PacketZcNotifyExp {
        PacketZcNotifyExp {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x6]),
        packet_id_raw: [0x7f, 0x6],
        aid: 0,
        aid_raw: [0; 4],
        amount: 0,
        amount_raw: [0; 4],
        var_id: 0,
        var_id_raw: [0; 2],
        exp_type: 0,
        exp_type_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyExp {
    fn id(&self) -> &str {
       "0x07f6"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyExp {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMoveentry7 {
    pub fn packet_id() -> &'static str {
        "0x07f7"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMoveentry7 {
        let mut offset: usize = 0;
        PacketZcNotifyMoveentry7 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            move_data: {
                let field =  {
                let mut dst: [u16; 6] = [0_u16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            move_data_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.move_data {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.move_data_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.move_data_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 93;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_move_data(&mut self, value: [u16; 6]) {
        self.move_data = value;
    }
    pub fn set_move_data_raw(&mut self, value: [u8; 6]) {
        self.move_data_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcNotifyMoveentry7 {
        PacketZcNotifyMoveentry7 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x7]),
        packet_id_raw: [0x7f, 0x7],
        packet_length: 0,
        packet_length_raw: [0; 2],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        move_data: [0; 6],
        move_data_raw: [0; 6],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcNotifyMoveentry7 {
    fn id(&self) -> &str {
       "0x07f7"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMoveentry7 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyNewentry5 {
    pub fn packet_id() -> &'static str {
        "0x07f8"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyNewentry5 {
        let mut offset: usize = 0;
        PacketZcNotifyNewentry5 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 86;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcNotifyNewentry5 {
        PacketZcNotifyNewentry5 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x8]),
        packet_id_raw: [0x7f, 0x8],
        packet_length: 0,
        packet_length_raw: [0; 2],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcNotifyNewentry5 {
    fn id(&self) -> &str {
       "0x07f8"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyNewentry5 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry5 {
    pub fn packet_id() -> &'static str {
        "0x07f9"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry5 {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry5 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 87;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: i32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: i16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_accessory2(&mut self, value: i16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: i16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: i16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: i16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: i16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry5 {
        PacketZcNotifyStandentry5 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0x9]),
        packet_id_raw: [0x7f, 0x9],
        packet_length: 0,
        packet_length_raw: [0; 2],
        objecttype: 0,
        objecttype_raw: [0; 1],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcNotifyStandentry5 {
    fn id(&self) -> &str {
       "0x07f9"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry5 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDeleteItemFromBody {
    pub fn packet_id() -> &'static str {
        "0x07fa"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDeleteItemFromBody {
        let mut offset: usize = 0;
        PacketZcDeleteItemFromBody {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            delete_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            delete_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.delete_type).unwrap();
        self.delete_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.delete_type_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_delete_type(&mut self, value: i16) {
        self.delete_type = value;
    }
    pub fn set_delete_type_raw(&mut self, value: [u8; 2]) {
        self.delete_type_raw = value;
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcDeleteItemFromBody {
        PacketZcDeleteItemFromBody {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0xa]),
        packet_id_raw: [0x7f, 0xa],
        delete_type: 0,
        delete_type_raw: [0; 2],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcDeleteItemFromBody {
    fn id(&self) -> &str {
       "0x07fa"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDeleteItemFromBody {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUseskillAck2 {
    pub fn packet_id() -> &'static str {
        "0x07fb"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUseskillAck2 {
        let mut offset: usize = 0;
        PacketZcUseskillAck2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            x_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y_pos: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_pos_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            property: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            property_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            delay_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delay_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_disposable: {
                let field = buffer[offset] == 1;
                field
            },
            is_disposable_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_id).unwrap();
        self.target_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x_pos).unwrap();
        self.x_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y_pos).unwrap();
        self.y_pos_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.property).unwrap();
        self.property_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.delay_time).unwrap();
        self.delay_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_disposable as u8).unwrap();
        self.is_disposable_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.target_id_raw.to_vec());
        wtr.append(&mut self.x_pos_raw.to_vec());
        wtr.append(&mut self.y_pos_raw.to_vec());
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.property_raw.to_vec());
        wtr.append(&mut self.delay_time_raw.to_vec());
        wtr.append(&mut self.is_disposable_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 25;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_target_id(&mut self, value: u32) {
        self.target_id = value;
    }
    pub fn set_target_id_raw(&mut self, value: [u8; 4]) {
        self.target_id_raw = value;
    }
    pub fn set_x_pos(&mut self, value: i16) {
        self.x_pos = value;
    }
    pub fn set_x_pos_raw(&mut self, value: [u8; 2]) {
        self.x_pos_raw = value;
    }
    pub fn set_y_pos(&mut self, value: i16) {
        self.y_pos = value;
    }
    pub fn set_y_pos_raw(&mut self, value: [u8; 2]) {
        self.y_pos_raw = value;
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_property(&mut self, value: u32) {
        self.property = value;
    }
    pub fn set_property_raw(&mut self, value: [u8; 4]) {
        self.property_raw = value;
    }
    pub fn set_delay_time(&mut self, value: u32) {
        self.delay_time = value;
    }
    pub fn set_delay_time_raw(&mut self, value: [u8; 4]) {
        self.delay_time_raw = value;
    }
    pub fn set_is_disposable(&mut self, value: bool) {
        self.is_disposable = value;
    }
    pub fn set_is_disposable_raw(&mut self, value: [u8; 1]) {
        self.is_disposable_raw = value;
    }
    pub fn new() -> PacketZcUseskillAck2 {
        PacketZcUseskillAck2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0xb]),
        packet_id_raw: [0x7f, 0xb],
        aid: 0,
        aid_raw: [0; 4],
        target_id: 0,
        target_id_raw: [0; 4],
        x_pos: 0,
        x_pos_raw: [0; 2],
        y_pos: 0,
        y_pos_raw: [0; 2],
        skid: 0,
        skid_raw: [0; 2],
        property: 0,
        property_raw: [0; 4],
        delay_time: 0,
        delay_time_raw: [0; 4],
        is_disposable: false,
        is_disposable_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcUseskillAck2 {
    fn id(&self) -> &str {
       "0x07fb"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUseskillAck2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcChangeGroupMaster {
    pub fn packet_id() -> &'static str {
        "0x07fc"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcChangeGroupMaster {
        let mut offset: usize = 0;
        PacketZcChangeGroupMaster {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            old_master_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            old_master_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            new_master_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            new_master_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.old_master_aid).unwrap();
        self.old_master_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.new_master_aid).unwrap();
        self.new_master_aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.old_master_aid_raw.to_vec());
        wtr.append(&mut self.new_master_aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_old_master_aid(&mut self, value: u32) {
        self.old_master_aid = value;
    }
    pub fn set_old_master_aid_raw(&mut self, value: [u8; 4]) {
        self.old_master_aid_raw = value;
    }
    pub fn set_new_master_aid(&mut self, value: u32) {
        self.new_master_aid = value;
    }
    pub fn set_new_master_aid_raw(&mut self, value: [u8; 4]) {
        self.new_master_aid_raw = value;
    }
    pub fn new() -> PacketZcChangeGroupMaster {
        PacketZcChangeGroupMaster {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0xc]),
        packet_id_raw: [0x7f, 0xc],
        old_master_aid: 0,
        old_master_aid_raw: [0; 4],
        new_master_aid: 0,
        new_master_aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcChangeGroupMaster {
    fn id(&self) -> &str {
       "0x07fc"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcChangeGroupMaster {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPlayNpcBgm {
    pub fn packet_id() -> &'static str {
        "0x07fe"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPlayNpcBgm {
        let mut offset: usize = 0;
        PacketZcPlayNpcBgm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bgm: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            bgm_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.bgm {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.bgm_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.bgm_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_bgm(&mut self, value: [char; 24]) {
        self.bgm = value;
    }
    pub fn set_bgm_raw(&mut self, value: [u8; 24]) {
        self.bgm_raw = value;
    }
    pub fn new() -> PacketZcPlayNpcBgm {
        PacketZcPlayNpcBgm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0xe]),
        packet_id_raw: [0x7f, 0xe],
        bgm: [0 as char; 24],
        bgm_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcPlayNpcBgm {
    fn id(&self) -> &str {
       "0x07fe"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPlayNpcBgm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDefineCheck {
    pub fn packet_id() -> &'static str {
        "0x07ff"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDefineCheck {
        let mut offset: usize = 0;
        PacketZcDefineCheck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcDefineCheck {
        PacketZcDefineCheck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x7f, 0xf]),
        packet_id_raw: [0x7f, 0xf],
        packet_length: 0,
        packet_length_raw: [0; 2],
        result: 0,
        result_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDefineCheck {
    fn id(&self) -> &str {
       "0x07ff"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDefineCheck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPcPurchaseItemlistFrommc2 {
    pub fn packet_id() -> &'static str {
        "0x0800"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPcPurchaseItemlistFrommc2 {
        let mut offset: usize = 0;
        let vec_type_len = PurchaseItemFrommc::base_len(packetver);
        let iter_count = (&buffer.len() - 12) / vec_type_len;
        let mut vec_field: Vec<PurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 + (vec_type_len * (i - 1));
            let end_pos = 12 + vec_type_len * i;
            vec_field.push(PurchaseItemFrommc::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPcPurchaseItemlistFrommc2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            unique_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            unique_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.unique_id).unwrap();
        self.unique_id_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.unique_id_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_unique_id(&mut self, value: u32) {
        self.unique_id = value;
    }
    pub fn set_unique_id_raw(&mut self, value: [u8; 4]) {
        self.unique_id_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<PurchaseItemFrommc>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcPcPurchaseItemlistFrommc2 {
        PacketZcPcPurchaseItemlistFrommc2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x0]),
        packet_id_raw: [0x80, 0x0],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        unique_id: 0,
        unique_id_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcPcPurchaseItemlistFrommc2 {
    fn id(&self) -> &str {
       "0x0800"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPcPurchaseItemlistFrommc2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPcPurchaseItemlistFrommc2 {
    pub fn packet_id() -> &'static str {
        "0x0801"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPcPurchaseItemlistFrommc2 {
        let mut offset: usize = 0;
        let vec_type_len = CzPurchaseItemFrommc::base_len(packetver);
        let iter_count = (&buffer.len() - 12) / vec_type_len;
        let mut vec_field: Vec<CzPurchaseItemFrommc> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 + (vec_type_len * (i - 1));
            let end_pos = 12 + vec_type_len * i;
            vec_field.push(CzPurchaseItemFrommc::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzPcPurchaseItemlistFrommc2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            unique_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            unique_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.unique_id).unwrap();
        self.unique_id_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.unique_id_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_unique_id(&mut self, value: u32) {
        self.unique_id = value;
    }
    pub fn set_unique_id_raw(&mut self, value: [u8; 4]) {
        self.unique_id_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<CzPurchaseItemFrommc>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketCzPcPurchaseItemlistFrommc2 {
        PacketCzPcPurchaseItemlistFrommc2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x1]),
        packet_id_raw: [0x80, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        unique_id: 0,
        unique_id_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzPcPurchaseItemlistFrommc2 {
    fn id(&self) -> &str {
       "0x0801"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPcPurchaseItemlistFrommc2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyBookingReqRegister {
    pub fn packet_id() -> &'static str {
        "0x0802"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyBookingReqRegister {
        let mut offset: usize = 0;
        PacketCzPartyBookingReqRegister {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            register_info: {
                let field = PartyBookingDetail::from(&buffer[offset..offset + PartyBookingDetail::base_len(packetver)], packetver);
                field
            },
            register_info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.register_info.fill_raw_with_packetver(packetver);
        self.register_info_raw = self.register_info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.register_info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_register_info(&mut self, value: PartyBookingDetail) {
        self.register_info = value;
    }
    pub fn set_register_info_raw(&mut self, value: Vec<u8>) {
        self.register_info_raw = value;
    }
    pub fn new() -> PacketCzPartyBookingReqRegister {
        PacketCzPartyBookingReqRegister {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x2]),
        packet_id_raw: [0x80, 0x2],
        register_info: PartyBookingDetail::new(),
        register_info_raw: vec![],
        }
    }
}

impl Packet for PacketCzPartyBookingReqRegister {
    fn id(&self) -> &str {
       "0x0802"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyBookingReqRegister {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyBookingAckRegister {
    pub fn packet_id() -> &'static str {
        "0x0803"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyBookingAckRegister {
        let mut offset: usize = 0;
        PacketZcPartyBookingAckRegister {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcPartyBookingAckRegister {
        PacketZcPartyBookingAckRegister {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x3]),
        packet_id_raw: [0x80, 0x3],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcPartyBookingAckRegister {
    fn id(&self) -> &str {
       "0x0803"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyBookingAckRegister {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyBookingReqSearch {
    pub fn packet_id() -> &'static str {
        "0x0804"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyBookingReqSearch {
        let mut offset: usize = 0;
        PacketCzPartyBookingReqSearch {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            map_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            last_index: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            last_index_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.map_id).unwrap();
        self.map_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.last_index).unwrap();
        self.last_index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result_count).unwrap();
        self.result_count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.map_id_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.last_index_raw.to_vec());
        wtr.append(&mut self.result_count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_map_id(&mut self, value: i16) {
        self.map_id = value;
    }
    pub fn set_map_id_raw(&mut self, value: [u8; 2]) {
        self.map_id_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_last_index(&mut self, value: u32) {
        self.last_index = value;
    }
    pub fn set_last_index_raw(&mut self, value: [u8; 4]) {
        self.last_index_raw = value;
    }
    pub fn set_result_count(&mut self, value: i16) {
        self.result_count = value;
    }
    pub fn set_result_count_raw(&mut self, value: [u8; 2]) {
        self.result_count_raw = value;
    }
    pub fn new() -> PacketCzPartyBookingReqSearch {
        PacketCzPartyBookingReqSearch {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x4]),
        packet_id_raw: [0x80, 0x4],
        level: 0,
        level_raw: [0; 2],
        map_id: 0,
        map_id_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        last_index: 0,
        last_index_raw: [0; 4],
        result_count: 0,
        result_count_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzPartyBookingReqSearch {
    fn id(&self) -> &str {
       "0x0804"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyBookingReqSearch {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyBookingAckSearch {
    pub fn packet_id() -> &'static str {
        "0x0805"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyBookingAckSearch {
        let mut offset: usize = 0;
        let vec_type_len = PartyBookingAdInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 5) / vec_type_len;
        let mut vec_field: Vec<PartyBookingAdInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 5 + (vec_type_len * (i - 1));
            let end_pos = 5 + vec_type_len * i;
            vec_field.push(PartyBookingAdInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcPartyBookingAckSearch {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_exist_more_result: {
                let field = buffer[offset] == 1;
                field
            },
            is_exist_more_result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            info: {
                let field = vec_field.clone();
                field
            },
            info_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_exist_more_result as u8).unwrap();
        self.is_exist_more_result_raw = wtr.try_into().unwrap();
        self.info_raw = {
            self.info.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.info.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.is_exist_more_result_raw.to_vec());
        self.info.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_is_exist_more_result(&mut self, value: bool) {
        self.is_exist_more_result = value;
    }
    pub fn set_is_exist_more_result_raw(&mut self, value: [u8; 1]) {
        self.is_exist_more_result_raw = value;
    }
    pub fn set_info(&mut self, value: Vec<PartyBookingAdInfo>) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<Vec<u8>>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcPartyBookingAckSearch {
        PacketZcPartyBookingAckSearch {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x5]),
        packet_id_raw: [0x80, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        is_exist_more_result: false,
        is_exist_more_result_raw: [0; 1],
        info: vec![],
        info_raw: vec![],
        }
    }
}

impl Packet for PacketZcPartyBookingAckSearch {
    fn id(&self) -> &str {
       "0x0805"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyBookingAckSearch {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyBookingReqDelete {
    pub fn packet_id() -> &'static str {
        "0x0806"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyBookingReqDelete {
        let mut offset: usize = 0;
        PacketCzPartyBookingReqDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzPartyBookingReqDelete {
        PacketCzPartyBookingReqDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x6]),
        packet_id_raw: [0x80, 0x6],
        }
    }
}

impl Packet for PacketCzPartyBookingReqDelete {
    fn id(&self) -> &str {
       "0x0806"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyBookingReqDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyBookingAckDelete {
    pub fn packet_id() -> &'static str {
        "0x0807"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyBookingAckDelete {
        let mut offset: usize = 0;
        PacketZcPartyBookingAckDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcPartyBookingAckDelete {
        PacketZcPartyBookingAckDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x7]),
        packet_id_raw: [0x80, 0x7],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcPartyBookingAckDelete {
    fn id(&self) -> &str {
       "0x0807"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyBookingAckDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPartyBookingReqUpdate {
    pub fn packet_id() -> &'static str {
        "0x0808"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPartyBookingReqUpdate {
        let mut offset: usize = 0;
        PacketCzPartyBookingReqUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field =  {
                let mut dst: [i16; 6] = [0_i16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as i16;
                }
                dst
            };
                field
            },
            job_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.job {
            wtr.write_i16::<LittleEndian>(item).unwrap();
        }
        self.job_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_job(&mut self, value: [i16; 6]) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 6]) {
        self.job_raw = value;
    }
    pub fn new() -> PacketCzPartyBookingReqUpdate {
        PacketCzPartyBookingReqUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x8]),
        packet_id_raw: [0x80, 0x8],
        job: [0; 6],
        job_raw: [0; 6],
        }
    }
}

impl Packet for PacketCzPartyBookingReqUpdate {
    fn id(&self) -> &str {
       "0x0808"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPartyBookingReqUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyBookingNotifyInsert {
    pub fn packet_id() -> &'static str {
        "0x0809"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyBookingNotifyInsert {
        let mut offset: usize = 0;
        PacketZcPartyBookingNotifyInsert {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            info: {
                let field = PartyBookingAdInfo::from(&buffer[offset..offset + PartyBookingAdInfo::base_len(packetver)], packetver);
                field
            },
            info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        self.info.fill_raw_with_packetver(packetver);
        self.info_raw = self.info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 1;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_info(&mut self, value: PartyBookingAdInfo) {
        self.info = value;
    }
    pub fn set_info_raw(&mut self, value: Vec<u8>) {
        self.info_raw = value;
    }
    pub fn new() -> PacketZcPartyBookingNotifyInsert {
        PacketZcPartyBookingNotifyInsert {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0x9]),
        packet_id_raw: [0x80, 0x9],
        info: PartyBookingAdInfo::new(),
        info_raw: vec![],
        }
    }
}

impl Packet for PacketZcPartyBookingNotifyInsert {
    fn id(&self) -> &str {
       "0x0809"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyBookingNotifyInsert {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyBookingNotifyUpdate {
    pub fn packet_id() -> &'static str {
        "0x080a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyBookingNotifyUpdate {
        let mut offset: usize = 0;
        PacketZcPartyBookingNotifyUpdate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job1: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job1_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job2: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job3: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job4: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job4_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job5: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job5_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job6: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job6_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job1).unwrap();
        self.job1_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job2).unwrap();
        self.job2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job3).unwrap();
        self.job3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job4).unwrap();
        self.job4_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job5).unwrap();
        self.job5_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job6).unwrap();
        self.job6_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.job1_raw.to_vec());
        wtr.append(&mut self.job2_raw.to_vec());
        wtr.append(&mut self.job3_raw.to_vec());
        wtr.append(&mut self.job4_raw.to_vec());
        wtr.append(&mut self.job5_raw.to_vec());
        wtr.append(&mut self.job6_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u32) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 4]) {
        self.index_raw = value;
    }
    pub fn set_job1(&mut self, value: i16) {
        self.job1 = value;
    }
    pub fn set_job1_raw(&mut self, value: [u8; 2]) {
        self.job1_raw = value;
    }
    pub fn set_job2(&mut self, value: i16) {
        self.job2 = value;
    }
    pub fn set_job2_raw(&mut self, value: [u8; 2]) {
        self.job2_raw = value;
    }
    pub fn set_job3(&mut self, value: i16) {
        self.job3 = value;
    }
    pub fn set_job3_raw(&mut self, value: [u8; 2]) {
        self.job3_raw = value;
    }
    pub fn set_job4(&mut self, value: i16) {
        self.job4 = value;
    }
    pub fn set_job4_raw(&mut self, value: [u8; 2]) {
        self.job4_raw = value;
    }
    pub fn set_job5(&mut self, value: i16) {
        self.job5 = value;
    }
    pub fn set_job5_raw(&mut self, value: [u8; 2]) {
        self.job5_raw = value;
    }
    pub fn set_job6(&mut self, value: i16) {
        self.job6 = value;
    }
    pub fn set_job6_raw(&mut self, value: [u8; 2]) {
        self.job6_raw = value;
    }
    pub fn new() -> PacketZcPartyBookingNotifyUpdate {
        PacketZcPartyBookingNotifyUpdate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0xa]),
        packet_id_raw: [0x80, 0xa],
        index: 0,
        index_raw: [0; 4],
        job1: 0,
        job1_raw: [0; 2],
        job2: 0,
        job2_raw: [0; 2],
        job3: 0,
        job3_raw: [0; 2],
        job4: 0,
        job4_raw: [0; 2],
        job5: 0,
        job5_raw: [0; 2],
        job6: 0,
        job6_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcPartyBookingNotifyUpdate {
    fn id(&self) -> &str {
       "0x080a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyBookingNotifyUpdate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcPartyBookingNotifyDelete {
    pub fn packet_id() -> &'static str {
        "0x080b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcPartyBookingNotifyDelete {
        let mut offset: usize = 0;
        PacketZcPartyBookingNotifyDelete {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: u32) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 4]) {
        self.index_raw = value;
    }
    pub fn new() -> PacketZcPartyBookingNotifyDelete {
        PacketZcPartyBookingNotifyDelete {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0xb]),
        packet_id_raw: [0x80, 0xb],
        index: 0,
        index_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcPartyBookingNotifyDelete {
    fn id(&self) -> &str {
       "0x080b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcPartyBookingNotifyDelete {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSimpleCashBtnshow {
    pub fn packet_id() -> &'static str {
        "0x080c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSimpleCashBtnshow {
        let mut offset: usize = 0;
        PacketCzSimpleCashBtnshow {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzSimpleCashBtnshow {
        PacketCzSimpleCashBtnshow {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0xc]),
        packet_id_raw: [0x80, 0xc],
        }
    }
}

impl Packet for PacketCzSimpleCashBtnshow {
    fn id(&self) -> &str {
       "0x080c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSimpleCashBtnshow {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSimpleCashBtnshow {
    pub fn packet_id() -> &'static str {
        "0x080d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSimpleCashBtnshow {
        let mut offset: usize = 0;
        PacketZcSimpleCashBtnshow {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            show: {
                let field = buffer[offset] == 1;
                field
            },
            show_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.show as u8).unwrap();
        self.show_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.show_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_show(&mut self, value: bool) {
        self.show = value;
    }
    pub fn set_show_raw(&mut self, value: [u8; 1]) {
        self.show_raw = value;
    }
    pub fn new() -> PacketZcSimpleCashBtnshow {
        PacketZcSimpleCashBtnshow {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0xd]),
        packet_id_raw: [0x80, 0xd],
        show: false,
        show_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSimpleCashBtnshow {
    fn id(&self) -> &str {
       "0x080d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSimpleCashBtnshow {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyHpToGroupmR2 {
    pub fn packet_id() -> &'static str {
        "0x080e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyHpToGroupmR2 {
        let mut offset: usize = 0;
        PacketZcNotifyHpToGroupmR2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            hp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            maxhp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maxhp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.maxhp).unwrap();
        self.maxhp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.maxhp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_hp(&mut self, value: i32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_maxhp(&mut self, value: i32) {
        self.maxhp = value;
    }
    pub fn set_maxhp_raw(&mut self, value: [u8; 4]) {
        self.maxhp_raw = value;
    }
    pub fn new() -> PacketZcNotifyHpToGroupmR2 {
        PacketZcNotifyHpToGroupmR2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0xe]),
        packet_id_raw: [0x80, 0xe],
        aid: 0,
        aid_raw: [0; 4],
        hp: 0,
        hp_raw: [0; 4],
        maxhp: 0,
        maxhp_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyHpToGroupmR2 {
    fn id(&self) -> &str {
       "0x080e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyHpToGroupmR2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAddExchangeItem2 {
    pub fn packet_id() -> &'static str {
        "0x080f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAddExchangeItem2 {
        let mut offset: usize = 0;
        PacketZcAddExchangeItem2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            count: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 20;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_count(&mut self, value: i32) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 4]) {
        self.count_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PacketZcAddExchangeItem2 {
        PacketZcAddExchangeItem2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x80, 0xf]),
        packet_id_raw: [0x80, 0xf],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        count: 0,
        count_raw: [0; 4],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Packet for PacketZcAddExchangeItem2 {
    fn id(&self) -> &str {
       "0x080f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAddExchangeItem2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOpenBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0810"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOpenBuyingStore {
        let mut offset: usize = 0;
        PacketZcOpenBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_count(&mut self, value: u8) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 1]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketZcOpenBuyingStore {
        PacketZcOpenBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x0]),
        packet_id_raw: [0x81, 0x0],
        count: 0,
        count_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcOpenBuyingStore {
    fn id(&self) -> &str {
       "0x0810"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOpenBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqOpenBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0811"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqOpenBuyingStore {
        let mut offset: usize = 0;
        let vec_type_len = ProductinfoInBuyingStore::base_len(packetver);
        let iter_count = (&buffer.len() - 89) / vec_type_len;
        let mut vec_field: Vec<ProductinfoInBuyingStore> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 89 + (vec_type_len * (i - 1));
            let end_pos = 89 + vec_type_len * i;
            vec_field.push(ProductinfoInBuyingStore::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzReqOpenBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            limit_zeny: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            limit_zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            store_name: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            store_name_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.limit_zeny).unwrap();
        self.limit_zeny_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.store_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.store_name_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.limit_zeny_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.store_name_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 89;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_limit_zeny(&mut self, value: u32) {
        self.limit_zeny = value;
    }
    pub fn set_limit_zeny_raw(&mut self, value: [u8; 4]) {
        self.limit_zeny_raw = value;
    }
    pub fn set_result(&mut self, value: u8) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 1]) {
        self.result_raw = value;
    }
    pub fn set_store_name(&mut self, value: [char; 80]) {
        self.store_name = value;
    }
    pub fn set_store_name_raw(&mut self, value: [u8; 80]) {
        self.store_name_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<ProductinfoInBuyingStore>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketCzReqOpenBuyingStore {
        PacketCzReqOpenBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x1]),
        packet_id_raw: [0x81, 0x1],
        packet_length: 0,
        packet_length_raw: [0; 2],
        limit_zeny: 0,
        limit_zeny_raw: [0; 4],
        result: 0,
        result_raw: [0; 1],
        store_name: [0 as char; 80],
        store_name_raw: [0; 80],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqOpenBuyingStore {
    fn id(&self) -> &str {
       "0x0811"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqOpenBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFailedOpenBuyingStoreToBuyer {
    pub fn packet_id() -> &'static str {
        "0x0812"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFailedOpenBuyingStoreToBuyer {
        let mut offset: usize = 0;
        PacketZcFailedOpenBuyingStoreToBuyer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            total_weight: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            total_weight_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.total_weight).unwrap();
        self.total_weight_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.total_weight_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_total_weight(&mut self, value: i32) {
        self.total_weight = value;
    }
    pub fn set_total_weight_raw(&mut self, value: [u8; 4]) {
        self.total_weight_raw = value;
    }
    pub fn new() -> PacketZcFailedOpenBuyingStoreToBuyer {
        PacketZcFailedOpenBuyingStoreToBuyer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x2]),
        packet_id_raw: [0x81, 0x2],
        result: 0,
        result_raw: [0; 2],
        total_weight: 0,
        total_weight_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcFailedOpenBuyingStoreToBuyer {
    fn id(&self) -> &str {
       "0x0812"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFailedOpenBuyingStoreToBuyer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMyitemlistBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0813"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMyitemlistBuyingStore {
        let mut offset: usize = 0;
        let vec_type_len = BuyingStoreItemlist::base_len(packetver);
        let iter_count = (&buffer.len() - 12) / vec_type_len;
        let mut vec_field: Vec<BuyingStoreItemlist> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 + (vec_type_len * (i - 1));
            let end_pos = 12 + vec_type_len * i;
            vec_field.push(BuyingStoreItemlist::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcMyitemlistBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            limit_zeny: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            limit_zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.limit_zeny).unwrap();
        self.limit_zeny_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.limit_zeny_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_limit_zeny(&mut self, value: i32) {
        self.limit_zeny = value;
    }
    pub fn set_limit_zeny_raw(&mut self, value: [u8; 4]) {
        self.limit_zeny_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<BuyingStoreItemlist>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcMyitemlistBuyingStore {
        PacketZcMyitemlistBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x3]),
        packet_id_raw: [0x81, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        limit_zeny: 0,
        limit_zeny_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcMyitemlistBuyingStore {
    fn id(&self) -> &str {
       "0x0813"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMyitemlistBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBuyingStoreEntry {
    pub fn packet_id() -> &'static str {
        "0x0814"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBuyingStoreEntry {
        let mut offset: usize = 0;
        PacketZcBuyingStoreEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            store_name: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            store_name_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.store_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.store_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        wtr.append(&mut self.store_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 86;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn set_store_name(&mut self, value: [char; 80]) {
        self.store_name = value;
    }
    pub fn set_store_name_raw(&mut self, value: [u8; 80]) {
        self.store_name_raw = value;
    }
    pub fn new() -> PacketZcBuyingStoreEntry {
        PacketZcBuyingStoreEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x4]),
        packet_id_raw: [0x81, 0x4],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        store_name: [0 as char; 80],
        store_name_raw: [0; 80],
        }
    }
}

impl Packet for PacketZcBuyingStoreEntry {
    fn id(&self) -> &str {
       "0x0814"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBuyingStoreEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqCloseBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0815"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqCloseBuyingStore {
        let mut offset: usize = 0;
        PacketCzReqCloseBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzReqCloseBuyingStore {
        PacketCzReqCloseBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x5]),
        packet_id_raw: [0x81, 0x5],
        }
    }
}

impl Packet for PacketCzReqCloseBuyingStore {
    fn id(&self) -> &str {
       "0x0815"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqCloseBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcDisappearBuyingStoreEntry {
    pub fn packet_id() -> &'static str {
        "0x0816"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcDisappearBuyingStoreEntry {
        let mut offset: usize = 0;
        PacketZcDisappearBuyingStoreEntry {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn new() -> PacketZcDisappearBuyingStoreEntry {
        PacketZcDisappearBuyingStoreEntry {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x6]),
        packet_id_raw: [0x81, 0x6],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcDisappearBuyingStoreEntry {
    fn id(&self) -> &str {
       "0x0816"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcDisappearBuyingStoreEntry {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqClickToBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0817"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqClickToBuyingStore {
        let mut offset: usize = 0;
        PacketCzReqClickToBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn new() -> PacketCzReqClickToBuyingStore {
        PacketCzReqClickToBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x7]),
        packet_id_raw: [0x81, 0x7],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqClickToBuyingStore {
    fn id(&self) -> &str {
       "0x0817"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqClickToBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckItemlistBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0818"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckItemlistBuyingStore {
        let mut offset: usize = 0;
        let vec_type_len = BuyingStoreItemlist::base_len(packetver);
        let iter_count = (&buffer.len() - 16) / vec_type_len;
        let mut vec_field: Vec<BuyingStoreItemlist> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 16 + (vec_type_len * (i - 1));
            let end_pos = 16 + vec_type_len * i;
            vec_field.push(BuyingStoreItemlist::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcAckItemlistBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            store_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            store_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            limit_zeny: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            limit_zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.store_id).unwrap();
        self.store_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.limit_zeny).unwrap();
        self.limit_zeny_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        wtr.append(&mut self.store_id_raw.to_vec());
        wtr.append(&mut self.limit_zeny_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn set_store_id(&mut self, value: u32) {
        self.store_id = value;
    }
    pub fn set_store_id_raw(&mut self, value: [u8; 4]) {
        self.store_id_raw = value;
    }
    pub fn set_limit_zeny(&mut self, value: i32) {
        self.limit_zeny = value;
    }
    pub fn set_limit_zeny_raw(&mut self, value: [u8; 4]) {
        self.limit_zeny_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<BuyingStoreItemlist>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketZcAckItemlistBuyingStore {
        PacketZcAckItemlistBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x8]),
        packet_id_raw: [0x81, 0x8],
        packet_length: 0,
        packet_length_raw: [0; 2],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        store_id: 0,
        store_id_raw: [0; 4],
        limit_zeny: 0,
        limit_zeny_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketZcAckItemlistBuyingStore {
    fn id(&self) -> &str {
       "0x0818"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckItemlistBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqTradeBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x0819"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqTradeBuyingStore {
        let mut offset: usize = 0;
        let vec_type_len = TradeItemBuyingStore::base_len(packetver);
        let iter_count = (&buffer.len() - 12) / vec_type_len;
        let mut vec_field: Vec<TradeItemBuyingStore> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 12 + (vec_type_len * (i - 1));
            let end_pos = 12 + vec_type_len * i;
            vec_field.push(TradeItemBuyingStore::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketCzReqTradeBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maker_aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            maker_aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            store_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            store_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_list: {
                let field = vec_field.clone();
                field
            },
            item_list_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maker_aid).unwrap();
        self.maker_aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.store_id).unwrap();
        self.store_id_raw = wtr.try_into().unwrap();
        self.item_list_raw = {
            self.item_list.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.item_list.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.maker_aid_raw.to_vec());
        wtr.append(&mut self.store_id_raw.to_vec());
        self.item_list.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_maker_aid(&mut self, value: u32) {
        self.maker_aid = value;
    }
    pub fn set_maker_aid_raw(&mut self, value: [u8; 4]) {
        self.maker_aid_raw = value;
    }
    pub fn set_store_id(&mut self, value: u32) {
        self.store_id = value;
    }
    pub fn set_store_id_raw(&mut self, value: [u8; 4]) {
        self.store_id_raw = value;
    }
    pub fn set_item_list(&mut self, value: Vec<TradeItemBuyingStore>) {
        self.item_list = value;
    }
    pub fn set_item_list_raw(&mut self, value: Vec<Vec<u8>>) {
        self.item_list_raw = value;
    }
    pub fn new() -> PacketCzReqTradeBuyingStore {
        PacketCzReqTradeBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0x9]),
        packet_id_raw: [0x81, 0x9],
        packet_length: 0,
        packet_length_raw: [0; 2],
        maker_aid: 0,
        maker_aid_raw: [0; 4],
        store_id: 0,
        store_id_raw: [0; 4],
        item_list: vec![],
        item_list_raw: vec![],
        }
    }
}

impl Packet for PacketCzReqTradeBuyingStore {
    fn id(&self) -> &str {
       "0x0819"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqTradeBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFailedTradeBuyingStoreToBuyer {
    pub fn packet_id() -> &'static str {
        "0x081a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFailedTradeBuyingStoreToBuyer {
        let mut offset: usize = 0;
        PacketZcFailedTradeBuyingStoreToBuyer {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketZcFailedTradeBuyingStoreToBuyer {
        PacketZcFailedTradeBuyingStoreToBuyer {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0xa]),
        packet_id_raw: [0x81, 0xa],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcFailedTradeBuyingStoreToBuyer {
    fn id(&self) -> &str {
       "0x081a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFailedTradeBuyingStoreToBuyer {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcUpdateItemFromBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x081b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcUpdateItemFromBuyingStore {
        let mut offset: usize = 0;
        PacketZcUpdateItemFromBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            limit_zeny: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            limit_zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.limit_zeny).unwrap();
        self.limit_zeny_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.limit_zeny_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_limit_zeny(&mut self, value: i32) {
        self.limit_zeny = value;
    }
    pub fn set_limit_zeny_raw(&mut self, value: [u8; 4]) {
        self.limit_zeny_raw = value;
    }
    pub fn new() -> PacketZcUpdateItemFromBuyingStore {
        PacketZcUpdateItemFromBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0xb]),
        packet_id_raw: [0x81, 0xb],
        itid: 0,
        itid_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        limit_zeny: 0,
        limit_zeny_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcUpdateItemFromBuyingStore {
    fn id(&self) -> &str {
       "0x081b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcUpdateItemFromBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcItemDeleteBuyingStore {
    pub fn packet_id() -> &'static str {
        "0x081c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcItemDeleteBuyingStore {
        let mut offset: usize = 0;
        PacketZcItemDeleteBuyingStore {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            zeny: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            zeny_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.zeny).unwrap();
        self.zeny_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.zeny_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_zeny(&mut self, value: i32) {
        self.zeny = value;
    }
    pub fn set_zeny_raw(&mut self, value: [u8; 4]) {
        self.zeny_raw = value;
    }
    pub fn new() -> PacketZcItemDeleteBuyingStore {
        PacketZcItemDeleteBuyingStore {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0xc]),
        packet_id_raw: [0x81, 0xc],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        zeny: 0,
        zeny_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcItemDeleteBuyingStore {
    fn id(&self) -> &str {
       "0x081c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcItemDeleteBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcElInit {
    pub fn packet_id() -> &'static str {
        "0x081d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcElInit {
        let mut offset: usize = 0;
        PacketZcElInit {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            hp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_hp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            sp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_sp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_sp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.sp).unwrap();
        self.sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_sp).unwrap();
        self.max_sp_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.sp_raw.to_vec());
        wtr.append(&mut self.max_sp_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_hp(&mut self, value: i32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_max_hp(&mut self, value: i32) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 4]) {
        self.max_hp_raw = value;
    }
    pub fn set_sp(&mut self, value: i32) {
        self.sp = value;
    }
    pub fn set_sp_raw(&mut self, value: [u8; 4]) {
        self.sp_raw = value;
    }
    pub fn set_max_sp(&mut self, value: i32) {
        self.max_sp = value;
    }
    pub fn set_max_sp_raw(&mut self, value: [u8; 4]) {
        self.max_sp_raw = value;
    }
    pub fn new() -> PacketZcElInit {
        PacketZcElInit {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0xd]),
        packet_id_raw: [0x81, 0xd],
        aid: 0,
        aid_raw: [0; 4],
        hp: 0,
        hp_raw: [0; 4],
        max_hp: 0,
        max_hp_raw: [0; 4],
        sp: 0,
        sp_raw: [0; 4],
        max_sp: 0,
        max_sp_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcElInit {
    fn id(&self) -> &str {
       "0x081d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcElInit {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcElParChange {
    pub fn packet_id() -> &'static str {
        "0x081e"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcElParChange {
        let mut offset: usize = 0;
        PacketZcElParChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            var: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            var_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.var).unwrap();
        self.var_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.var_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_var(&mut self, value: u16) {
        self.var = value;
    }
    pub fn set_var_raw(&mut self, value: [u8; 2]) {
        self.var_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcElParChange {
        PacketZcElParChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x81, 0xe]),
        packet_id_raw: [0x81, 0xe],
        var: 0,
        var_raw: [0; 2],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcElParChange {
    fn id(&self) -> &str {
       "0x081e"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcElParChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcBroadcast4 {
    pub fn packet_id() -> &'static str {
        "0x081f"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcBroadcast4 {
        let mut offset: usize = 0;
        PacketZcBroadcast4 {
            pakcet_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            pakcet_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msgtype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            msgtype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            color_rgb: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            color_rgb_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            msg: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            msg_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.pakcet_type).unwrap();
        self.pakcet_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.msgtype).unwrap();
        self.msgtype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.color_rgb).unwrap();
        self.color_rgb_raw = wtr.try_into().unwrap();
        self.msg_raw = self.msg.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.pakcet_type_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.msgtype_raw.to_vec());
        wtr.append(&mut self.color_rgb_raw.to_vec());
        wtr.append(&mut self.msg_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_pakcet_type(&mut self, value: i16) {
        self.pakcet_type = value;
    }
    pub fn set_pakcet_type_raw(&mut self, value: [u8; 2]) {
        self.pakcet_type_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_msgtype(&mut self, value: u8) {
        self.msgtype = value;
    }
    pub fn set_msgtype_raw(&mut self, value: [u8; 1]) {
        self.msgtype_raw = value;
    }
    pub fn set_color_rgb(&mut self, value: u32) {
        self.color_rgb = value;
    }
    pub fn set_color_rgb_raw(&mut self, value: [u8; 4]) {
        self.color_rgb_raw = value;
    }
    pub fn set_msg(&mut self, value: String) {
        self.msg = value;
    }
    pub fn set_msg_raw(&mut self, value: Vec<u8>) {
        self.msg_raw = value;
    }
    pub fn new() -> PacketZcBroadcast4 {
        PacketZcBroadcast4 {
        raw: vec![],
        pakcet_type: 0,
        pakcet_type_raw: [0; 2],
        packet_length: 0,
        packet_length_raw: [0; 2],
        msgtype: 0,
        msgtype_raw: [0; 1],
        color_rgb: 0,
        color_rgb_raw: [0; 4],
        msg: String::new(),
        msg_raw: vec![],
        }
    }
}

impl Packet for PacketZcBroadcast4 {
    fn id(&self) -> &str {
       "0x081f"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcBroadcast4 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcCostumeSpriteChange {
    pub fn packet_id() -> &'static str {
        "0x0820"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcCostumeSpriteChange {
        let mut offset: usize = 0;
        PacketZcCostumeSpriteChange {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            value: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            value_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.value).unwrap();
        self.value_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.value_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_value(&mut self, value: i32) {
        self.value = value;
    }
    pub fn set_value_raw(&mut self, value: [u8; 4]) {
        self.value_raw = value;
    }
    pub fn new() -> PacketZcCostumeSpriteChange {
        PacketZcCostumeSpriteChange {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x0]),
        packet_id_raw: [0x82, 0x0],
        gid: 0,
        gid_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        value: 0,
        value_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcCostumeSpriteChange {
    fn id(&self) -> &str {
       "0x0820"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcCostumeSpriteChange {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcOtpUser {
    pub fn packet_id() -> &'static str {
        "0x0821"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcOtpUser {
        let mut offset: usize = 0;
        PacketAcOtpUser {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketAcOtpUser {
        PacketAcOtpUser {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x1]),
        packet_id_raw: [0x82, 0x1],
        }
    }
}

impl Packet for PacketAcOtpUser {
    fn id(&self) -> &str {
       "0x0821"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcOtpUser {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaOtpAuthReq {
    pub fn packet_id() -> &'static str {
        "0x0822"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaOtpAuthReq {
        let mut offset: usize = 0;
        PacketCaOtpAuthReq {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            otpcode: {
                let field =  {
                let mut dst: [char; 7] = [0 as char; 7];
                for (index, byte) in buffer[offset..offset + 7].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            otpcode_raw: {
                let mut dst: [u8; 7] = [0u8; 7];
                dst.clone_from_slice(&buffer[offset..offset + 7]);
                offset += 7;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.otpcode {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.otpcode_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.otpcode_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_otpcode(&mut self, value: [char; 7]) {
        self.otpcode = value;
    }
    pub fn set_otpcode_raw(&mut self, value: [u8; 7]) {
        self.otpcode_raw = value;
    }
    pub fn new() -> PacketCaOtpAuthReq {
        PacketCaOtpAuthReq {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x2]),
        packet_id_raw: [0x82, 0x2],
        otpcode: [0 as char; 7],
        otpcode_raw: [0; 7],
        }
    }
}

impl Packet for PacketCaOtpAuthReq {
    fn id(&self) -> &str {
       "0x0822"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaOtpAuthReq {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcOtpAuthAck {
    pub fn packet_id() -> &'static str {
        "0x0823"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcOtpAuthAck {
        let mut offset: usize = 0;
        PacketAcOtpAuthAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            login_result: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            login_result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.login_result).unwrap();
        self.login_result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.login_result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_login_result(&mut self, value: u16) {
        self.login_result = value;
    }
    pub fn set_login_result_raw(&mut self, value: [u8; 2]) {
        self.login_result_raw = value;
    }
    pub fn new() -> PacketAcOtpAuthAck {
        PacketAcOtpAuthAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x3]),
        packet_id_raw: [0x82, 0x3],
        packet_length: 0,
        packet_length_raw: [0; 2],
        login_result: 0,
        login_result_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcOtpAuthAck {
    fn id(&self) -> &str {
       "0x0823"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcOtpAuthAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcFailedTradeBuyingStoreToSeller {
    pub fn packet_id() -> &'static str {
        "0x0824"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcFailedTradeBuyingStoreToSeller {
        let mut offset: usize = 0;
        PacketZcFailedTradeBuyingStoreToSeller {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: i16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketZcFailedTradeBuyingStoreToSeller {
        PacketZcFailedTradeBuyingStoreToSeller {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x4]),
        packet_id_raw: [0x82, 0x4],
        result: 0,
        result_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcFailedTradeBuyingStoreToSeller {
    fn id(&self) -> &str {
       "0x0824"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcFailedTradeBuyingStoreToSeller {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaSsoLoginReqa {
    pub fn packet_id() -> &'static str {
        "0x825a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaSsoLoginReqa {
        let mut offset: usize = 0;
        PacketCaSsoLoginReqa {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            mac_addr: {
                let field =  {
                let mut dst: [char; 17] = [0 as char; 17];
                for (index, byte) in buffer[offset..offset + 17].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mac_addr_raw: {
                let mut dst: [u8; 17] = [0u8; 17];
                dst.clone_from_slice(&buffer[offset..offset + 17]);
                offset += 17;
                dst
            },
            ip_addr: {
                let field =  {
                let mut dst: [char; 15] = [0 as char; 15];
                for (index, byte) in buffer[offset..offset + 15].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            ip_addr_raw: {
                let mut dst: [u8; 15] = [0u8; 15];
                dst.clone_from_slice(&buffer[offset..offset + 15]);
                offset += 15;
                dst
            },
            t1: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            t1_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mac_addr {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mac_addr_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.ip_addr {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.ip_addr_raw = wtr.try_into().unwrap();
        self.t1_raw = self.t1.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.mac_addr_raw.to_vec());
        wtr.append(&mut self.ip_addr_raw.to_vec());
        wtr.append(&mut self.t1_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 64;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_mac_addr(&mut self, value: [char; 17]) {
        self.mac_addr = value;
    }
    pub fn set_mac_addr_raw(&mut self, value: [u8; 17]) {
        self.mac_addr_raw = value;
    }
    pub fn set_ip_addr(&mut self, value: [char; 15]) {
        self.ip_addr = value;
    }
    pub fn set_ip_addr_raw(&mut self, value: [u8; 15]) {
        self.ip_addr_raw = value;
    }
    pub fn set_t1(&mut self, value: String) {
        self.t1 = value;
    }
    pub fn set_t1_raw(&mut self, value: Vec<u8>) {
        self.t1_raw = value;
    }
    pub fn new() -> PacketCaSsoLoginReqa {
        PacketCaSsoLoginReqa {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x5a]),
        packet_id_raw: [0x82, 0x5a],
        packet_length: 0,
        packet_length_raw: [0; 2],
        version: 0,
        version_raw: [0; 4],
        clienttype: 0,
        clienttype_raw: [0; 1],
        id: [0 as char; 24],
        id_raw: [0; 24],
        mac_addr: [0 as char; 17],
        mac_addr_raw: [0; 17],
        ip_addr: [0 as char; 15],
        ip_addr_raw: [0; 15],
        t1: String::new(),
        t1_raw: vec![],
        }
    }
}

impl Packet for PacketCaSsoLoginReqa {
    fn id(&self) -> &str {
       "0x825a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaSsoLoginReqa {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCaSsoLoginReq {
    pub fn packet_id() -> &'static str {
        "0x0825"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCaSsoLoginReq {
        let mut offset: usize = 0;
        PacketCaSsoLoginReq {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            version: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            version_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            clienttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            clienttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            id: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            id_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            passwd: {
                let field =  {
                let mut dst: [char; 27] = [0 as char; 27];
                for (index, byte) in buffer[offset..offset + 27].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            passwd_raw: {
                let mut dst: [u8; 27] = [0u8; 27];
                dst.clone_from_slice(&buffer[offset..offset + 27]);
                offset += 27;
                dst
            },
            mac_adress: {
                let field =  {
                let mut dst: [char; 17] = [0 as char; 17];
                for (index, byte) in buffer[offset..offset + 17].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mac_adress_raw: {
                let mut dst: [u8; 17] = [0u8; 17];
                dst.clone_from_slice(&buffer[offset..offset + 17]);
                offset += 17;
                dst
            },
            ip: {
                let field =  {
                let mut dst: [char; 15] = [0 as char; 15];
                for (index, byte) in buffer[offset..offset + 15].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            ip_raw: {
                let mut dst: [u8; 15] = [0u8; 15];
                dst.clone_from_slice(&buffer[offset..offset + 15]);
                offset += 15;
                dst
            },
            t1: {
                let field = String::from_utf8_lossy(&buffer[offset..buffer.len()]).to_string();
                field
            },
            t1_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.version).unwrap();
        self.version_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.clienttype).unwrap();
        self.clienttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.id {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.passwd {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.passwd_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mac_adress {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mac_adress_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.ip {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.ip_raw = wtr.try_into().unwrap();
        self.t1_raw = self.t1.as_bytes().to_vec();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.version_raw.to_vec());
        wtr.append(&mut self.clienttype_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.passwd_raw.to_vec());
        wtr.append(&mut self.mac_adress_raw.to_vec());
        wtr.append(&mut self.ip_raw.to_vec());
        wtr.append(&mut self.t1_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 91;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_version(&mut self, value: u32) {
        self.version = value;
    }
    pub fn set_version_raw(&mut self, value: [u8; 4]) {
        self.version_raw = value;
    }
    pub fn set_clienttype(&mut self, value: u8) {
        self.clienttype = value;
    }
    pub fn set_clienttype_raw(&mut self, value: [u8; 1]) {
        self.clienttype_raw = value;
    }
    pub fn set_id(&mut self, value: [char; 24]) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 24]) {
        self.id_raw = value;
    }
    pub fn set_passwd(&mut self, value: [char; 27]) {
        self.passwd = value;
    }
    pub fn set_passwd_raw(&mut self, value: [u8; 27]) {
        self.passwd_raw = value;
    }
    pub fn set_mac_adress(&mut self, value: [char; 17]) {
        self.mac_adress = value;
    }
    pub fn set_mac_adress_raw(&mut self, value: [u8; 17]) {
        self.mac_adress_raw = value;
    }
    pub fn set_ip(&mut self, value: [char; 15]) {
        self.ip = value;
    }
    pub fn set_ip_raw(&mut self, value: [u8; 15]) {
        self.ip_raw = value;
    }
    pub fn set_t1(&mut self, value: String) {
        self.t1 = value;
    }
    pub fn set_t1_raw(&mut self, value: Vec<u8>) {
        self.t1_raw = value;
    }
    pub fn new() -> PacketCaSsoLoginReq {
        PacketCaSsoLoginReq {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x5]),
        packet_id_raw: [0x82, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        version: 0,
        version_raw: [0; 4],
        clienttype: 0,
        clienttype_raw: [0; 1],
        id: [0 as char; 24],
        id_raw: [0; 24],
        passwd: [0 as char; 27],
        passwd_raw: [0; 27],
        mac_adress: [0 as char; 17],
        mac_adress_raw: [0; 17],
        ip: [0 as char; 15],
        ip_raw: [0; 15],
        t1: String::new(),
        t1_raw: vec![],
        }
    }
}

impl Packet for PacketCaSsoLoginReq {
    fn id(&self) -> &str {
       "0x0825"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCaSsoLoginReq {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcSsoLoginAck {
    pub fn packet_id() -> &'static str {
        "0x0826"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcSsoLoginAck {
        let mut offset: usize = 0;
        PacketAcSsoLoginAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            result: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_result(&mut self, value: u16) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 2]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketAcSsoLoginAck {
        PacketAcSsoLoginAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x6]),
        packet_id_raw: [0x82, 0x6],
        result: 0,
        result_raw: [0; 2],
        }
    }
}

impl Packet for PacketAcSsoLoginAck {
    fn id(&self) -> &str {
       "0x0826"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcSsoLoginAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChDeleteChar3Reserved {
    pub fn packet_id() -> &'static str {
        "0x0827"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChDeleteChar3Reserved {
        let mut offset: usize = 0;
        PacketChDeleteChar3Reserved {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketChDeleteChar3Reserved {
        PacketChDeleteChar3Reserved {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x7]),
        packet_id_raw: [0x82, 0x7],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketChDeleteChar3Reserved {
    fn id(&self) -> &str {
       "0x0827"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChDeleteChar3Reserved {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcDeleteChar3Reserved {
    pub fn packet_id() -> &'static str {
        "0x0828"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcDeleteChar3Reserved {
        let mut offset: usize = 0;
        PacketHcDeleteChar3Reserved {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            delete_reserved_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delete_reserved_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.delete_reserved_date).unwrap();
        self.delete_reserved_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.delete_reserved_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn set_delete_reserved_date(&mut self, value: i32) {
        self.delete_reserved_date = value;
    }
    pub fn set_delete_reserved_date_raw(&mut self, value: [u8; 4]) {
        self.delete_reserved_date_raw = value;
    }
    pub fn new() -> PacketHcDeleteChar3Reserved {
        PacketHcDeleteChar3Reserved {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x8]),
        packet_id_raw: [0x82, 0x8],
        gid: 0,
        gid_raw: [0; 4],
        result: 0,
        result_raw: [0; 4],
        delete_reserved_date: 0,
        delete_reserved_date_raw: [0; 4],
        }
    }
}

impl Packet for PacketHcDeleteChar3Reserved {
    fn id(&self) -> &str {
       "0x0828"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcDeleteChar3Reserved {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChDeleteChar3 {
    pub fn packet_id() -> &'static str {
        "0x0829"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChDeleteChar3 {
        let mut offset: usize = 0;
        PacketChDeleteChar3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            birth: {
                let field =  {
                let mut dst: [char; 6] = [0 as char; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            birth_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.birth {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.birth_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.birth_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_birth(&mut self, value: [char; 6]) {
        self.birth = value;
    }
    pub fn set_birth_raw(&mut self, value: [u8; 6]) {
        self.birth_raw = value;
    }
    pub fn new() -> PacketChDeleteChar3 {
        PacketChDeleteChar3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0x9]),
        packet_id_raw: [0x82, 0x9],
        gid: 0,
        gid_raw: [0; 4],
        birth: [0 as char; 6],
        birth_raw: [0; 6],
        }
    }
}

impl Packet for PacketChDeleteChar3 {
    fn id(&self) -> &str {
       "0x0829"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChDeleteChar3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcDeleteChar3 {
    pub fn packet_id() -> &'static str {
        "0x082a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcDeleteChar3 {
        let mut offset: usize = 0;
        PacketHcDeleteChar3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketHcDeleteChar3 {
        PacketHcDeleteChar3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0xa]),
        packet_id_raw: [0x82, 0xa],
        gid: 0,
        gid_raw: [0; 4],
        result: 0,
        result_raw: [0; 4],
        }
    }
}

impl Packet for PacketHcDeleteChar3 {
    fn id(&self) -> &str {
       "0x082a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcDeleteChar3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChDeleteChar3Cancel {
    pub fn packet_id() -> &'static str {
        "0x082b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChDeleteChar3Cancel {
        let mut offset: usize = 0;
        PacketChDeleteChar3Cancel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketChDeleteChar3Cancel {
        PacketChDeleteChar3Cancel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0xb]),
        packet_id_raw: [0x82, 0xb],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketChDeleteChar3Cancel {
    fn id(&self) -> &str {
       "0x082b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChDeleteChar3Cancel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcDeleteChar3Cancel {
    pub fn packet_id() -> &'static str {
        "0x082c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcDeleteChar3Cancel {
        let mut offset: usize = 0;
        PacketHcDeleteChar3Cancel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn new() -> PacketHcDeleteChar3Cancel {
        PacketHcDeleteChar3Cancel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x82, 0xc]),
        packet_id_raw: [0x82, 0xc],
        gid: 0,
        gid_raw: [0; 4],
        result: 0,
        result_raw: [0; 4],
        }
    }
}

impl Packet for PacketHcDeleteChar3Cancel {
    fn id(&self) -> &str {
       "0x082c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcDeleteChar3Cancel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSearchStoreInfo {
    pub fn packet_id() -> &'static str {
        "0x0835"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSearchStoreInfo {
        let mut offset: usize = 0;
        PacketCzSearchStoreInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            store_type: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            store_type_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            max_price: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            min_price: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            min_price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            item_idlist_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_idlist_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            card_idlist_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            card_idlist_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.store_type).unwrap();
        self.store_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.max_price).unwrap();
        self.max_price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.min_price).unwrap();
        self.min_price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_idlist_size).unwrap();
        self.item_idlist_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.card_idlist_size).unwrap();
        self.card_idlist_size_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.store_type_raw.to_vec());
        wtr.append(&mut self.max_price_raw.to_vec());
        wtr.append(&mut self.min_price_raw.to_vec());
        wtr.append(&mut self.item_idlist_size_raw.to_vec());
        wtr.append(&mut self.card_idlist_size_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 15;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_store_type(&mut self, value: u8) {
        self.store_type = value;
    }
    pub fn set_store_type_raw(&mut self, value: [u8; 1]) {
        self.store_type_raw = value;
    }
    pub fn set_max_price(&mut self, value: u32) {
        self.max_price = value;
    }
    pub fn set_max_price_raw(&mut self, value: [u8; 4]) {
        self.max_price_raw = value;
    }
    pub fn set_min_price(&mut self, value: u32) {
        self.min_price = value;
    }
    pub fn set_min_price_raw(&mut self, value: [u8; 4]) {
        self.min_price_raw = value;
    }
    pub fn set_item_idlist_size(&mut self, value: u8) {
        self.item_idlist_size = value;
    }
    pub fn set_item_idlist_size_raw(&mut self, value: [u8; 1]) {
        self.item_idlist_size_raw = value;
    }
    pub fn set_card_idlist_size(&mut self, value: u8) {
        self.card_idlist_size = value;
    }
    pub fn set_card_idlist_size_raw(&mut self, value: [u8; 1]) {
        self.card_idlist_size_raw = value;
    }
    pub fn new() -> PacketCzSearchStoreInfo {
        PacketCzSearchStoreInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x5]),
        packet_id_raw: [0x83, 0x5],
        packet_length: 0,
        packet_length_raw: [0; 2],
        store_type: 0,
        store_type_raw: [0; 1],
        max_price: 0,
        max_price_raw: [0; 4],
        min_price: 0,
        min_price_raw: [0; 4],
        item_idlist_size: 0,
        item_idlist_size_raw: [0; 1],
        card_idlist_size: 0,
        card_idlist_size_raw: [0; 1],
        }
    }
}

impl Packet for PacketCzSearchStoreInfo {
    fn id(&self) -> &str {
       "0x0835"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSearchStoreInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSearchStoreInfoAck {
    pub fn packet_id() -> &'static str {
        "0x0836"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSearchStoreInfoAck {
        let mut offset: usize = 0;
        let vec_type_len = ResultItemInfo::base_len(packetver);
        let iter_count = (&buffer.len() - 7) / vec_type_len;
        let mut vec_field: Vec<ResultItemInfo> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 7 + (vec_type_len * (i - 1));
            let end_pos = 7 + vec_type_len * i;
            vec_field.push(ResultItemInfo::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcSearchStoreInfoAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_first_page: {
                let field = buffer[offset] == 1;
                field
            },
            is_first_page_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_nex_page: {
                let field = buffer[offset] == 1;
                field
            },
            is_nex_page_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            remained_search_cnt: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            remained_search_cnt_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            ssilist: {
                let field = vec_field.clone();
                field
            },
            ssilist_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_first_page as u8).unwrap();
        self.is_first_page_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_nex_page as u8).unwrap();
        self.is_nex_page_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.remained_search_cnt).unwrap();
        self.remained_search_cnt_raw = wtr.try_into().unwrap();
        self.ssilist_raw = {
            self.ssilist.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.ssilist.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.is_first_page_raw.to_vec());
        wtr.append(&mut self.is_nex_page_raw.to_vec());
        wtr.append(&mut self.remained_search_cnt_raw.to_vec());
        self.ssilist.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_is_first_page(&mut self, value: bool) {
        self.is_first_page = value;
    }
    pub fn set_is_first_page_raw(&mut self, value: [u8; 1]) {
        self.is_first_page_raw = value;
    }
    pub fn set_is_nex_page(&mut self, value: bool) {
        self.is_nex_page = value;
    }
    pub fn set_is_nex_page_raw(&mut self, value: [u8; 1]) {
        self.is_nex_page_raw = value;
    }
    pub fn set_remained_search_cnt(&mut self, value: u8) {
        self.remained_search_cnt = value;
    }
    pub fn set_remained_search_cnt_raw(&mut self, value: [u8; 1]) {
        self.remained_search_cnt_raw = value;
    }
    pub fn set_ssilist(&mut self, value: Vec<ResultItemInfo>) {
        self.ssilist = value;
    }
    pub fn set_ssilist_raw(&mut self, value: Vec<Vec<u8>>) {
        self.ssilist_raw = value;
    }
    pub fn new() -> PacketZcSearchStoreInfoAck {
        PacketZcSearchStoreInfoAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x6]),
        packet_id_raw: [0x83, 0x6],
        packet_length: 0,
        packet_length_raw: [0; 2],
        is_first_page: false,
        is_first_page_raw: [0; 1],
        is_nex_page: false,
        is_nex_page_raw: [0; 1],
        remained_search_cnt: 0,
        remained_search_cnt_raw: [0; 1],
        ssilist: vec![],
        ssilist_raw: vec![],
        }
    }
}

impl Packet for PacketZcSearchStoreInfoAck {
    fn id(&self) -> &str {
       "0x0836"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSearchStoreInfoAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSearchStoreInfoFailed {
    pub fn packet_id() -> &'static str {
        "0x0837"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSearchStoreInfoFailed {
        let mut offset: usize = 0;
        PacketZcSearchStoreInfoFailed {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            reason: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            reason_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.reason).unwrap();
        self.reason_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.reason_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 3;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_reason(&mut self, value: u8) {
        self.reason = value;
    }
    pub fn set_reason_raw(&mut self, value: [u8; 1]) {
        self.reason_raw = value;
    }
    pub fn new() -> PacketZcSearchStoreInfoFailed {
        PacketZcSearchStoreInfoFailed {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x7]),
        packet_id_raw: [0x83, 0x7],
        reason: 0,
        reason_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcSearchStoreInfoFailed {
    fn id(&self) -> &str {
       "0x0837"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSearchStoreInfoFailed {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSearchStoreInfoNextPage {
    pub fn packet_id() -> &'static str {
        "0x0838"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSearchStoreInfoNextPage {
        let mut offset: usize = 0;
        PacketCzSearchStoreInfoNextPage {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzSearchStoreInfoNextPage {
        PacketCzSearchStoreInfoNextPage {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x8]),
        packet_id_raw: [0x83, 0x8],
        }
    }
}

impl Packet for PacketCzSearchStoreInfoNextPage {
    fn id(&self) -> &str {
       "0x0838"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSearchStoreInfoNextPage {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckBanGuildSso {
    pub fn packet_id() -> &'static str {
        "0x0839"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckBanGuildSso {
        let mut offset: usize = 0;
        PacketZcAckBanGuildSso {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            reason_desc: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_desc_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason_desc {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_desc_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        wtr.append(&mut self.reason_desc_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 66;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn set_reason_desc(&mut self, value: [char; 40]) {
        self.reason_desc = value;
    }
    pub fn set_reason_desc_raw(&mut self, value: [u8; 40]) {
        self.reason_desc_raw = value;
    }
    pub fn new() -> PacketZcAckBanGuildSso {
        PacketZcAckBanGuildSso {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x9]),
        packet_id_raw: [0x83, 0x9],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        reason_desc: [0 as char; 40],
        reason_desc_raw: [0; 40],
        }
    }
}

impl Packet for PacketZcAckBanGuildSso {
    fn id(&self) -> &str {
       "0x0839"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckBanGuildSso {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOpenSearchStoreInfo {
    pub fn packet_id() -> &'static str {
        "0x083a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOpenSearchStoreInfo {
        let mut offset: usize = 0;
        PacketZcOpenSearchStoreInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            open_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            open_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            search_cnt_max: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            search_cnt_max_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.open_type).unwrap();
        self.open_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.search_cnt_max).unwrap();
        self.search_cnt_max_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.open_type_raw.to_vec());
        wtr.append(&mut self.search_cnt_max_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_open_type(&mut self, value: i16) {
        self.open_type = value;
    }
    pub fn set_open_type_raw(&mut self, value: [u8; 2]) {
        self.open_type_raw = value;
    }
    pub fn set_search_cnt_max(&mut self, value: u8) {
        self.search_cnt_max = value;
    }
    pub fn set_search_cnt_max_raw(&mut self, value: [u8; 1]) {
        self.search_cnt_max_raw = value;
    }
    pub fn new() -> PacketZcOpenSearchStoreInfo {
        PacketZcOpenSearchStoreInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0xa]),
        packet_id_raw: [0x83, 0xa],
        open_type: 0,
        open_type_raw: [0; 2],
        search_cnt_max: 0,
        search_cnt_max_raw: [0; 1],
        }
    }
}

impl Packet for PacketZcOpenSearchStoreInfo {
    fn id(&self) -> &str {
       "0x083a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOpenSearchStoreInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzCloseSearchStoreInfo {
    pub fn packet_id() -> &'static str {
        "0x083b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzCloseSearchStoreInfo {
        let mut offset: usize = 0;
        PacketCzCloseSearchStoreInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzCloseSearchStoreInfo {
        PacketCzCloseSearchStoreInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0xb]),
        packet_id_raw: [0x83, 0xb],
        }
    }
}

impl Packet for PacketCzCloseSearchStoreInfo {
    fn id(&self) -> &str {
       "0x083b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzCloseSearchStoreInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzSsilistItemClick {
    pub fn packet_id() -> &'static str {
        "0x083c"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzSsilistItemClick {
        let mut offset: usize = 0;
        PacketCzSsilistItemClick {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            ssiid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ssiid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.ssiid).unwrap();
        self.ssiid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.ssiid_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_ssiid(&mut self, value: u32) {
        self.ssiid = value;
    }
    pub fn set_ssiid_raw(&mut self, value: [u8; 4]) {
        self.ssiid_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PacketCzSsilistItemClick {
        PacketCzSsilistItemClick {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0xc]),
        packet_id_raw: [0x83, 0xc],
        aid: 0,
        aid_raw: [0; 4],
        ssiid: 0,
        ssiid_raw: [0; 4],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzSsilistItemClick {
    fn id(&self) -> &str {
       "0x083c"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzSsilistItemClick {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcSsilistItemClickAck {
    pub fn packet_id() -> &'static str {
        "0x083d"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcSsilistItemClickAck {
        let mut offset: usize = 0;
        PacketZcSsilistItemClickAck {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            x: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            x_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            y: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            y_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.x).unwrap();
        self.x_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.y).unwrap();
        self.y_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.x_raw.to_vec());
        wtr.append(&mut self.y_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_x(&mut self, value: i16) {
        self.x = value;
    }
    pub fn set_x_raw(&mut self, value: [u8; 2]) {
        self.x_raw = value;
    }
    pub fn set_y(&mut self, value: i16) {
        self.y = value;
    }
    pub fn set_y_raw(&mut self, value: [u8; 2]) {
        self.y_raw = value;
    }
    pub fn new() -> PacketZcSsilistItemClickAck {
        PacketZcSsilistItemClickAck {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0xd]),
        packet_id_raw: [0x83, 0xd],
        x: 0,
        x_raw: [0; 2],
        y: 0,
        y_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcSsilistItemClickAck {
    fn id(&self) -> &str {
       "0x083d"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcSsilistItemClickAck {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketAcRefuseLoginR2 {
    pub fn packet_id() -> &'static str {
        "0x3e08"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketAcRefuseLoginR2 {
        let mut offset: usize = 0;
        PacketAcRefuseLoginR2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            error_code: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            error_code_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            block_date: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            block_date_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.error_code).unwrap();
        self.error_code_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.block_date {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.block_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.error_code_raw.to_vec());
        wtr.append(&mut self.block_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 26;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_error_code(&mut self, value: u32) {
        self.error_code = value;
    }
    pub fn set_error_code_raw(&mut self, value: [u8; 4]) {
        self.error_code_raw = value;
    }
    pub fn set_block_date(&mut self, value: [char; 20]) {
        self.block_date = value;
    }
    pub fn set_block_date_raw(&mut self, value: [u8; 20]) {
        self.block_date_raw = value;
    }
    pub fn new() -> PacketAcRefuseLoginR2 {
        PacketAcRefuseLoginR2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x3e, 0x08]),
        packet_id_raw: [0x3e, 0x08],
        error_code: 0,
        error_code_raw: [0; 4],
        block_date: [0 as char; 20],
        block_date_raw: [0; 20],
        }
    }
}

impl Packet for PacketAcRefuseLoginR2 {
    fn id(&self) -> &str {
       "0x3e08"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketAcRefuseLoginR2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChSelectAccessibleMapname {
    pub fn packet_id() -> &'static str {
        "0x0841"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChSelectAccessibleMapname {
        let mut offset: usize = 0;
        PacketChSelectAccessibleMapname {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            char_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            map_list_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            map_list_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.char_num).unwrap();
        self.char_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.map_list_num).unwrap();
        self.map_list_num_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.char_num_raw.to_vec());
        wtr.append(&mut self.map_list_num_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_char_num(&mut self, value: u8) {
        self.char_num = value;
    }
    pub fn set_char_num_raw(&mut self, value: [u8; 1]) {
        self.char_num_raw = value;
    }
    pub fn set_map_list_num(&mut self, value: u8) {
        self.map_list_num = value;
    }
    pub fn set_map_list_num_raw(&mut self, value: [u8; 1]) {
        self.map_list_num_raw = value;
    }
    pub fn new() -> PacketChSelectAccessibleMapname {
        PacketChSelectAccessibleMapname {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x84, 0x1]),
        packet_id_raw: [0x84, 0x1],
        char_num: 0,
        char_num_raw: [0; 1],
        map_list_num: 0,
        map_list_num_raw: [0; 1],
        }
    }
}

impl Packet for PacketChSelectAccessibleMapname {
    fn id(&self) -> &str {
       "0x0841"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChSelectAccessibleMapname {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestMove2 {
    pub fn packet_id() -> &'static str {
        "0x5f03"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestMove2 {
        let mut offset: usize = 0;
        PacketCzRequestMove2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dest: {
                let field =  {
                let mut dst: [u16; 3] = [0_u16; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            dest_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.dest {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.dest_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.dest_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_dest(&mut self, value: [u16; 3]) {
        self.dest = value;
    }
    pub fn set_dest_raw(&mut self, value: [u8; 3]) {
        self.dest_raw = value;
    }
    pub fn new() -> PacketCzRequestMove2 {
        PacketCzRequestMove2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x5f, 0x03]),
        packet_id_raw: [0x5f, 0x03],
        dest: [0; 3],
        dest_raw: [0; 3],
        }
    }
}

impl Packet for PacketCzRequestMove2 {
    fn id(&self) -> &str {
       "0x5f03"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestMove2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChSendMapInfo {
    pub fn packet_id() -> &'static str {
        "0xc50a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChSendMapInfo {
        let mut offset: usize = 0;
        PacketChSendMapInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            map_server_ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            map_server_ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            map_server_port: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            map_server_port_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            dns_host: {
                let field =  {
                let mut dst: [char; 128] = [0 as char; 128];
                for (index, byte) in buffer[offset..offset + 128].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            dns_host_raw: {
                let mut dst: [u8; 128] = [0u8; 128];
                dst.clone_from_slice(&buffer[offset..offset + 128]);
                offset += 128;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.map_server_ip).unwrap();
        self.map_server_ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.map_server_port).unwrap();
        self.map_server_port_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.dns_host {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.dns_host_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.map_server_ip_raw.to_vec());
        wtr.append(&mut self.map_server_port_raw.to_vec());
        wtr.append(&mut self.dns_host_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 156;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_map_server_ip(&mut self, value: u32) {
        self.map_server_ip = value;
    }
    pub fn set_map_server_ip_raw(&mut self, value: [u8; 4]) {
        self.map_server_ip_raw = value;
    }
    pub fn set_map_server_port(&mut self, value: i16) {
        self.map_server_port = value;
    }
    pub fn set_map_server_port_raw(&mut self, value: [u8; 2]) {
        self.map_server_port_raw = value;
    }
    pub fn set_dns_host(&mut self, value: [char; 128]) {
        self.dns_host = value;
    }
    pub fn set_dns_host_raw(&mut self, value: [u8; 128]) {
        self.dns_host_raw = value;
    }
    pub fn new() -> PacketChSendMapInfo {
        PacketChSendMapInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc5, 0x0a]),
        packet_id_raw: [0xc5, 0x0a],
        gid: 0,
        gid_raw: [0; 4],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        map_server_ip: 0,
        map_server_ip_raw: [0; 4],
        map_server_port: 0,
        map_server_port_raw: [0; 2],
        dns_host: [0 as char; 128],
        dns_host_raw: [0; 128],
        }
    }
}

impl Packet for PacketChSendMapInfo {
    fn id(&self) -> &str {
       "0xc50a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChSendMapInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcAcceptEnterNeoUnionHeader {
    pub fn packet_id() -> &'static str {
        "0x2d08"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcAcceptEnterNeoUnionHeader {
        let mut offset: usize = 0;
        PacketHcAcceptEnterNeoUnionHeader {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_len: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_len_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            char_slot: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            char_slot_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            max_char: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_char_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            premium_slot_start: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            premium_slot_start_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            premium_slot_end: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            premium_slot_end_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            empty_buffer: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            empty_buffer_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            char_info: {
                let field = PacketHcAcceptEnterNeoUnion::from(&buffer[offset..offset + PacketHcAcceptEnterNeoUnion::base_len(packetver)], packetver);
                field
            },
            char_info_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_len).unwrap();
        self.packet_len_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.char_slot).unwrap();
        self.char_slot_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_char).unwrap();
        self.max_char_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.premium_slot_start).unwrap();
        self.premium_slot_start_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.premium_slot_end).unwrap();
        self.premium_slot_end_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.empty_buffer {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.empty_buffer_raw = wtr.try_into().unwrap();
        self.char_info.fill_raw_with_packetver(packetver);
        self.char_info_raw = self.char_info.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_len_raw.to_vec());
        wtr.append(&mut self.char_slot_raw.to_vec());
        wtr.append(&mut self.max_char_raw.to_vec());
        wtr.append(&mut self.premium_slot_start_raw.to_vec());
        wtr.append(&mut self.premium_slot_end_raw.to_vec());
        wtr.append(&mut self.empty_buffer_raw.to_vec());
        wtr.append(&mut self.char_info_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_len(&mut self, value: i16) {
        self.packet_len = value;
    }
    pub fn set_packet_len_raw(&mut self, value: [u8; 2]) {
        self.packet_len_raw = value;
    }
    pub fn set_char_slot(&mut self, value: i8) {
        self.char_slot = value;
    }
    pub fn set_char_slot_raw(&mut self, value: [u8; 1]) {
        self.char_slot_raw = value;
    }
    pub fn set_max_char(&mut self, value: i16) {
        self.max_char = value;
    }
    pub fn set_max_char_raw(&mut self, value: [u8; 2]) {
        self.max_char_raw = value;
    }
    pub fn set_premium_slot_start(&mut self, value: i8) {
        self.premium_slot_start = value;
    }
    pub fn set_premium_slot_start_raw(&mut self, value: [u8; 1]) {
        self.premium_slot_start_raw = value;
    }
    pub fn set_premium_slot_end(&mut self, value: i8) {
        self.premium_slot_end = value;
    }
    pub fn set_premium_slot_end_raw(&mut self, value: [u8; 1]) {
        self.premium_slot_end_raw = value;
    }
    pub fn set_empty_buffer(&mut self, value: [char; 20]) {
        self.empty_buffer = value;
    }
    pub fn set_empty_buffer_raw(&mut self, value: [u8; 20]) {
        self.empty_buffer_raw = value;
    }
    pub fn set_char_info(&mut self, value: PacketHcAcceptEnterNeoUnion) {
        self.char_info = value;
    }
    pub fn set_char_info_raw(&mut self, value: Vec<u8>) {
        self.char_info_raw = value;
    }
    pub fn new() -> PacketHcAcceptEnterNeoUnionHeader {
        PacketHcAcceptEnterNeoUnionHeader {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x2d, 0x08]),
        packet_id_raw: [0x2d, 0x08],
        packet_len: 0,
        packet_len_raw: [0; 2],
        char_slot: 0,
        char_slot_raw: [0; 1],
        max_char: 0,
        max_char_raw: [0; 2],
        premium_slot_start: 0,
        premium_slot_start_raw: [0; 1],
        premium_slot_end: 0,
        premium_slot_end_raw: [0; 1],
        empty_buffer: [0 as char; 20],
        empty_buffer_raw: [0; 20],
        char_info: PacketHcAcceptEnterNeoUnion::new(),
        char_info_raw: vec![],
        }
    }
}

impl Packet for PacketHcAcceptEnterNeoUnionHeader {
    fn id(&self) -> &str {
       "0x2d08"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcAcceptEnterNeoUnionHeader {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzPing {
    pub fn packet_id() -> &'static str {
        "0x8701"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzPing {
        let mut offset: usize = 0;
        PacketCzPing {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketCzPing {
        PacketCzPing {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x87, 0x01]),
        packet_id_raw: [0x87, 0x01],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzPing {
    fn id(&self) -> &str {
       "0x8701"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzPing {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAid2 {
    pub fn packet_id() -> &'static str {
        "0x8701"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAid2 {
        let mut offset: usize = 0;
        PacketZcAid2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketZcAid2 {
        PacketZcAid2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x87, 0x01]),
        packet_id_raw: [0x87, 0x01],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAid2 {
    fn id(&self) -> &str {
       "0x8701"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAid2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketMapConnection {
    pub fn packet_id() -> &'static str {
        "0x8302"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketMapConnection {
        let mut offset: usize = 0;
        PacketMapConnection {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn new() -> PacketMapConnection {
        PacketMapConnection {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x83, 0x02]),
        packet_id_raw: [0x83, 0x02],
        aid: 0,
        aid_raw: [0; 4],
        }
    }
}

impl Packet for PacketMapConnection {
    fn id(&self) -> &str {
       "0x8302"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketMapConnection {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketPincodeLoginstate {
    pub fn packet_id() -> &'static str {
        "0xb908"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketPincodeLoginstate {
        let mut offset: usize = 0;
        PacketPincodeLoginstate {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            pincode_seed: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            pincode_seed_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            response: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            response_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.pincode_seed).unwrap();
        self.pincode_seed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.response).unwrap();
        self.response_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.pincode_seed_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.response_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_pincode_seed(&mut self, value: i32) {
        self.pincode_seed = value;
    }
    pub fn set_pincode_seed_raw(&mut self, value: [u8; 4]) {
        self.pincode_seed_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_response(&mut self, value: i16) {
        self.response = value;
    }
    pub fn set_response_raw(&mut self, value: [u8; 2]) {
        self.response_raw = value;
    }
    pub fn new() -> PacketPincodeLoginstate {
        PacketPincodeLoginstate {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xb9, 0x08]),
        packet_id_raw: [0xb9, 0x08],
        pincode_seed: 0,
        pincode_seed_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        response: 0,
        response_raw: [0; 2],
        }
    }
}

impl Packet for PacketPincodeLoginstate {
    fn id(&self) -> &str {
       "0xb908"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketPincodeLoginstate {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChMakeChar3 {
    pub fn packet_id() -> &'static str {
        "0x390a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChMakeChar3 {
        let mut offset: usize = 0;
        PacketChMakeChar3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            char_num: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            char_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            head_pal: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_pal_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            class: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            class_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.char_num).unwrap();
        self.char_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_pal).unwrap();
        self.head_pal_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.class).unwrap();
        self.class_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.char_num_raw.to_vec());
        wtr.append(&mut self.head_pal_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.class_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 36;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_char_num(&mut self, value: u8) {
        self.char_num = value;
    }
    pub fn set_char_num_raw(&mut self, value: [u8; 1]) {
        self.char_num_raw = value;
    }
    pub fn set_head_pal(&mut self, value: i16) {
        self.head_pal = value;
    }
    pub fn set_head_pal_raw(&mut self, value: [u8; 2]) {
        self.head_pal_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_class(&mut self, value: i32) {
        self.class = value;
    }
    pub fn set_class_raw(&mut self, value: [u8; 4]) {
        self.class_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn new() -> PacketChMakeChar3 {
        PacketChMakeChar3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x39, 0x0a]),
        packet_id_raw: [0x39, 0x0a],
        name: [0 as char; 24],
        name_raw: [0; 24],
        char_num: 0,
        char_num_raw: [0; 1],
        head_pal: 0,
        head_pal_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        class: 0,
        class_raw: [0; 4],
        sex: 0,
        sex_raw: [0; 1],
        }
    }
}

impl Packet for PacketChMakeChar3 {
    fn id(&self) -> &str {
       "0x390a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChMakeChar3 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketChDeleteChar4Reserved {
    pub fn packet_id() -> &'static str {
        "0x2708"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketChDeleteChar4Reserved {
        let mut offset: usize = 0;
        PacketChDeleteChar4Reserved {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketChDeleteChar4Reserved {
        PacketChDeleteChar4Reserved {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x27, 0x08]),
        packet_id_raw: [0x27, 0x08],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketChDeleteChar4Reserved {
    fn id(&self) -> &str {
       "0x2708"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketChDeleteChar4Reserved {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketHcDeleteChar4Reserved {
    pub fn packet_id() -> &'static str {
        "0x2808"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketHcDeleteChar4Reserved {
        let mut offset: usize = 0;
        PacketHcDeleteChar4Reserved {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            result: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            result_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            delete_reserved_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delete_reserved_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.result).unwrap();
        self.result_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.delete_reserved_date).unwrap();
        self.delete_reserved_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.result_raw.to_vec());
        wtr.append(&mut self.delete_reserved_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_result(&mut self, value: i32) {
        self.result = value;
    }
    pub fn set_result_raw(&mut self, value: [u8; 4]) {
        self.result_raw = value;
    }
    pub fn set_delete_reserved_date(&mut self, value: i32) {
        self.delete_reserved_date = value;
    }
    pub fn set_delete_reserved_date_raw(&mut self, value: [u8; 4]) {
        self.delete_reserved_date_raw = value;
    }
    pub fn new() -> PacketHcDeleteChar4Reserved {
        PacketHcDeleteChar4Reserved {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x28, 0x08]),
        packet_id_raw: [0x28, 0x08],
        gid: 0,
        gid_raw: [0; 4],
        result: 0,
        result_raw: [0; 4],
        delete_reserved_date: 0,
        delete_reserved_date_raw: [0; 4],
        }
    }
}

impl Packet for PacketHcDeleteChar4Reserved {
    fn id(&self) -> &str {
       "0x2808"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketHcDeleteChar4Reserved {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcInventoryExpansionInfo {
    pub fn packet_id() -> &'static str {
        "0x180b"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcInventoryExpansionInfo {
        let mut offset: usize = 0;
        PacketZcInventoryExpansionInfo {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            expansion_size: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            expansion_size_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.expansion_size).unwrap();
        self.expansion_size_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.expansion_size_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_expansion_size(&mut self, value: i16) {
        self.expansion_size = value;
    }
    pub fn set_expansion_size_raw(&mut self, value: [u8; 2]) {
        self.expansion_size_raw = value;
    }
    pub fn new() -> PacketZcInventoryExpansionInfo {
        PacketZcInventoryExpansionInfo {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x18, 0x0b]),
        packet_id_raw: [0x18, 0x0b],
        expansion_size: 0,
        expansion_size_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcInventoryExpansionInfo {
    fn id(&self) -> &str {
       "0x180b"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcInventoryExpansionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcOverweightPercent {
    pub fn packet_id() -> &'static str {
        "0xde0a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcOverweightPercent {
        let mut offset: usize = 0;
        PacketZcOverweightPercent {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            percent: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            percent_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.percent).unwrap();
        self.percent_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.percent_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_percent(&mut self, value: i32) {
        self.percent = value;
    }
    pub fn set_percent_raw(&mut self, value: [u8; 4]) {
        self.percent_raw = value;
    }
    pub fn new() -> PacketZcOverweightPercent {
        PacketZcOverweightPercent {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xde, 0x0a]),
        packet_id_raw: [0xde, 0x0a],
        percent: 0,
        percent_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcOverweightPercent {
    fn id(&self) -> &str {
       "0xde0a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcOverweightPercent {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqDisconnect2 {
    pub fn packet_id() -> &'static str {
        "0x8a01"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqDisconnect2 {
        let mut offset: usize = 0;
        PacketCzReqDisconnect2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            empty: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            empty_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.empty).unwrap();
        self.empty_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.empty_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_empty(&mut self, value: i16) {
        self.empty = value;
    }
    pub fn set_empty_raw(&mut self, value: [u8; 2]) {
        self.empty_raw = value;
    }
    pub fn new() -> PacketCzReqDisconnect2 {
        PacketCzReqDisconnect2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8a, 0x01]),
        packet_id_raw: [0x8a, 0x01],
        empty: 0,
        empty_raw: [0; 2],
        }
    }
}

impl Packet for PacketCzReqDisconnect2 {
    fn id(&self) -> &str {
       "0x8a01"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqDisconnect2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcReqDisconnectAck2 {
    pub fn packet_id() -> &'static str {
        "0x8b01"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcReqDisconnectAck2 {
        let mut offset: usize = 0;
        PacketZcReqDisconnectAck2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            empty: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            empty_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.empty).unwrap();
        self.empty_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.empty_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_empty(&mut self, value: i16) {
        self.empty = value;
    }
    pub fn set_empty_raw(&mut self, value: [u8; 2]) {
        self.empty_raw = value;
    }
    pub fn new() -> PacketZcReqDisconnectAck2 {
        PacketZcReqDisconnectAck2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x8b, 0x01]),
        packet_id_raw: [0x8b, 0x01],
        empty: 0,
        empty_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcReqDisconnectAck2 {
    fn id(&self) -> &str {
       "0x8b01"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcReqDisconnectAck2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzReqnameall2 {
    pub fn packet_id() -> &'static str {
        "0x6803"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzReqnameall2 {
        let mut offset: usize = 0;
        PacketCzReqnameall2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn new() -> PacketCzReqnameall2 {
        PacketCzReqnameall2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x68, 0x03]),
        packet_id_raw: [0x68, 0x03],
        gid: 0,
        gid_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzReqnameall2 {
    fn id(&self) -> &str {
       "0x6803"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzReqnameall2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcAckReqnameall2 {
    pub fn packet_id() -> &'static str {
        "0x300a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcAckReqnameall2 {
        let mut offset: usize = 0;
        PacketZcAckReqnameall2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            party_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            party_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            guild_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guild_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            position_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            position_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            title_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            title_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.party_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.party_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guild_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guild_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.position_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.position_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.title_id).unwrap();
        self.title_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.party_name_raw.to_vec());
        wtr.append(&mut self.guild_name_raw.to_vec());
        wtr.append(&mut self.position_name_raw.to_vec());
        wtr.append(&mut self.title_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 106;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_party_name(&mut self, value: [char; 24]) {
        self.party_name = value;
    }
    pub fn set_party_name_raw(&mut self, value: [u8; 24]) {
        self.party_name_raw = value;
    }
    pub fn set_guild_name(&mut self, value: [char; 24]) {
        self.guild_name = value;
    }
    pub fn set_guild_name_raw(&mut self, value: [u8; 24]) {
        self.guild_name_raw = value;
    }
    pub fn set_position_name(&mut self, value: [char; 24]) {
        self.position_name = value;
    }
    pub fn set_position_name_raw(&mut self, value: [u8; 24]) {
        self.position_name_raw = value;
    }
    pub fn set_title_id(&mut self, value: i32) {
        self.title_id = value;
    }
    pub fn set_title_id_raw(&mut self, value: [u8; 4]) {
        self.title_id_raw = value;
    }
    pub fn new() -> PacketZcAckReqnameall2 {
        PacketZcAckReqnameall2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x30, 0x0a]),
        packet_id_raw: [0x30, 0x0a],
        gid: 0,
        gid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        party_name: [0 as char; 24],
        party_name_raw: [0; 24],
        guild_name: [0 as char; 24],
        guild_name_raw: [0; 24],
        position_name: [0 as char; 24],
        position_name_raw: [0; 24],
        title_id: 0,
        title_id_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcAckReqnameall2 {
    fn id(&self) -> &str {
       "0x300a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcAckReqnameall2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzRequestTime2 {
    pub fn packet_id() -> &'static str {
        "0x6003"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzRequestTime2 {
        let mut offset: usize = 0;
        PacketCzRequestTime2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            client_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            client_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.client_time).unwrap();
        self.client_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.client_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_client_time(&mut self, value: u32) {
        self.client_time = value;
    }
    pub fn set_client_time_raw(&mut self, value: [u8; 4]) {
        self.client_time_raw = value;
    }
    pub fn new() -> PacketCzRequestTime2 {
        PacketCzRequestTime2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x60, 0x03]),
        packet_id_raw: [0x60, 0x03],
        client_time: 0,
        client_time_raw: [0; 4],
        }
    }
}

impl Packet for PacketCzRequestTime2 {
    fn id(&self) -> &str {
       "0x6003"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzRequestTime2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMsgColor {
    pub fn packet_id() -> &'static str {
        "0xcd09"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMsgColor {
        let mut offset: usize = 0;
        PacketZcMsgColor {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg_id: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            msg_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            msg_color: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            msg_color_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.msg_id).unwrap();
        self.msg_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.msg_color).unwrap();
        self.msg_color_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.msg_id_raw.to_vec());
        wtr.append(&mut self.msg_color_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_msg_id(&mut self, value: u16) {
        self.msg_id = value;
    }
    pub fn set_msg_id_raw(&mut self, value: [u8; 2]) {
        self.msg_id_raw = value;
    }
    pub fn set_msg_color(&mut self, value: u32) {
        self.msg_color = value;
    }
    pub fn set_msg_color_raw(&mut self, value: [u8; 4]) {
        self.msg_color_raw = value;
    }
    pub fn new() -> PacketZcMsgColor {
        PacketZcMsgColor {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xcd, 0x09]),
        packet_id_raw: [0xcd, 0x09],
        msg_id: 0,
        msg_id_raw: [0; 2],
        msg_color: 0,
        msg_color_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcMsgColor {
    fn id(&self) -> &str {
       "0xcd09"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcMsgColor {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMapproperty2 {
    pub fn packet_id() -> &'static str {
        "0x9b09"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMapproperty2 {
        let mut offset: usize = 0;
        PacketZcNotifyMapproperty2 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            flags: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            flags_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.flags).unwrap();
        self.flags_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.flags_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_atype(&mut self, value: i16) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 2]) {
        self.atype_raw = value;
    }
    pub fn set_flags(&mut self, value: u32) {
        self.flags = value;
    }
    pub fn set_flags_raw(&mut self, value: [u8; 4]) {
        self.flags_raw = value;
    }
    pub fn new() -> PacketZcNotifyMapproperty2 {
        PacketZcNotifyMapproperty2 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x9b, 0x09]),
        packet_id_raw: [0x9b, 0x09],
        atype: 0,
        atype_raw: [0; 2],
        flags: 0,
        flags_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyMapproperty2 {
    fn id(&self) -> &str {
       "0x9b09"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMapproperty2 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcHatEffect {
    pub fn packet_id() -> &'static str {
        "0x3b0a"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcHatEffect {
        let mut offset: usize = 0;
        PacketZcHatEffect {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            len: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            len_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            status: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            status_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            effect: {
                let field =  {
                let dst: Vec<u8> = buffer[offset..buffer.len()].to_vec();
                dst
            };
                field
            },
            effect_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.len).unwrap();
        self.len_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.status).unwrap();
        self.status_raw = wtr.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.len_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.status_raw.to_vec());
        wtr.append(&mut self.effect_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_len(&mut self, value: i16) {
        self.len = value;
    }
    pub fn set_len_raw(&mut self, value: [u8; 2]) {
        self.len_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_status(&mut self, value: u8) {
        self.status = value;
    }
    pub fn set_status_raw(&mut self, value: [u8; 1]) {
        self.status_raw = value;
    }
    pub fn set_effect(&mut self, value: Vec<u8>) {
        self.effect = value;
    }
    pub fn set_effect_raw(&mut self, value: Vec<u8>) {
        self.effect_raw = value;
    }
    pub fn new() -> PacketZcHatEffect {
        PacketZcHatEffect {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x3b, 0x0a]),
        packet_id_raw: [0x3b, 0x0a],
        len: 0,
        len_raw: [0; 2],
        aid: 0,
        aid_raw: [0; 4],
        status: 0,
        status_raw: [0; 1],
        effect: vec![],
        effect_raw: vec![],
        }
    }
}

impl Packet for PacketZcHatEffect {
    fn id(&self) -> &str {
       "0x3b0a"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcHatEffect {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketCzBlockingPlayCancel {
    pub fn packet_id() -> &'static str {
        "0x4704"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketCzBlockingPlayCancel {
        let mut offset: usize = 0;
        PacketCzBlockingPlayCancel {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketCzBlockingPlayCancel {
        PacketCzBlockingPlayCancel {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x47, 0x04]),
        packet_id_raw: [0x47, 0x04],
        }
    }
}

impl Packet for PacketCzBlockingPlayCancel {
    fn id(&self) -> &str {
       "0x4704"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketCzBlockingPlayCancel {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcLoadConfirm {
    pub fn packet_id() -> &'static str {
        "0x1B0B"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcLoadConfirm {
        let mut offset: usize = 0;
        PacketZcLoadConfirm {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn new() -> PacketZcLoadConfirm {
        PacketZcLoadConfirm {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x1B, 0x0B]),
        packet_id_raw: [0x1B, 0x0B],
        }
    }
}

impl Packet for PacketZcLoadConfirm {
    fn id(&self) -> &str {
       "0x1B0B"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcLoadConfirm {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry6 {
    pub fn packet_id() -> &'static str {
        "0xff09"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry6 {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry6 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory2: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            robe: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            robe_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hp: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            hp: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_boss: {
                let field = buffer[offset] == 1;
                field
            },
            is_boss_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            body: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.robe).unwrap();
        self.robe_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_boss as u8).unwrap();
        self.is_boss_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body).unwrap();
        self.body_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.robe_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.is_boss_raw.to_vec());
        wtr.append(&mut self.body_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 108;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: u32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: u16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_shield(&mut self, value: u32) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 4]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: u16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: u16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: u16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: u16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: u16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_robe(&mut self, value: u16) {
        self.robe = value;
    }
    pub fn set_robe_raw(&mut self, value: [u8; 2]) {
        self.robe_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn set_max_hp(&mut self, value: u32) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 4]) {
        self.max_hp_raw = value;
    }
    pub fn set_hp(&mut self, value: u32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_is_boss(&mut self, value: bool) {
        self.is_boss = value;
    }
    pub fn set_is_boss_raw(&mut self, value: [u8; 1]) {
        self.is_boss_raw = value;
    }
    pub fn set_body(&mut self, value: i16) {
        self.body = value;
    }
    pub fn set_body_raw(&mut self, value: [u8; 2]) {
        self.body_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry6 {
        PacketZcNotifyStandentry6 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xff, 0x09]),
        packet_id_raw: [0xff, 0x09],
        packet_length: 0,
        packet_length_raw: [0; 2],
        objecttype: 0,
        objecttype_raw: [0; 1],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        robe: 0,
        robe_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 4],
        hp: 0,
        hp_raw: [0; 4],
        is_boss: false,
        is_boss_raw: [0; 1],
        body: 0,
        body_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcNotifyStandentry6 {
    fn id(&self) -> &str {
       "0xff09"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry6 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyStandentry7 {
    pub fn packet_id() -> &'static str {
        "0x1509"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyStandentry7 {
        let mut offset: usize = 0;
        PacketZcNotifyStandentry7 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = if packetver >= 20091103 {
                   i16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as i16
                };
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver >= 20091103 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            objecttype: {
                let field = if packetver >= 20091103 {
                   u8::from_le_bytes([buffer[offset]])
                } else {
                   0 as u8
                };
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                if packetver >= 20091103 {
                    dst.clone_from_slice(&buffer[offset..offset + 1]);
                    offset += 1;
                }
                dst
            },
            aid: {
                let field = if packetver >= 20131223 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20131223 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = if packetver >= 20181121 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            shield_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20181121 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            accessory2: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            robe: {
                let field = if packetver >= 20101124 {
                   u16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as u16
                };
                field
            },
            robe_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver >= 20101124 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = if packetver >= 20080102 {
                   i16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as i16
                };
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver >= 20080102 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            max_hp: {
                let field = if packetver >= 20120221 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20120221 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            hp: {
                let field = if packetver >= 20120221 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20120221 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            is_boss: {
                let field = if packetver >= 20120221 {
                   buffer[offset] == 1
                } else {
                   false
                };
                field
            },
            is_boss_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                if packetver >= 20120221 {
                    dst.clone_from_slice(&buffer[offset..offset + 1]);
                    offset += 1;
                }
                dst
            },
            body: {
                let field = if packetver >= 20150513 {
                   i16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as i16
                };
                field
            },
            body_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver >= 20150513 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.robe).unwrap();
        self.robe_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_boss as u8).unwrap();
        self.is_boss_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body).unwrap();
        self.body_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.packet_length_raw.to_vec());
        } else if packetver.unwrap() >= 20091103 {
            wtr.append(&mut self.packet_length_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.objecttype_raw.to_vec());
        } else if packetver.unwrap() >= 20091103 {
            wtr.append(&mut self.objecttype_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.aid_raw.to_vec());
        } else if packetver.unwrap() >= 20131223 {
            wtr.append(&mut self.aid_raw.to_vec());
        }
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.shield_raw.to_vec());
        } else if packetver.unwrap() >= 20181121 {
            wtr.append(&mut self.shield_raw.to_vec());
        }
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.robe_raw.to_vec());
        } else if packetver.unwrap() >= 20101124 {
            wtr.append(&mut self.robe_raw.to_vec());
        }
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.font_raw.to_vec());
        } else if packetver.unwrap() >= 20080102 {
            wtr.append(&mut self.font_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.max_hp_raw.to_vec());
        } else if packetver.unwrap() >= 20120221 {
            wtr.append(&mut self.max_hp_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.hp_raw.to_vec());
        } else if packetver.unwrap() >= 20120221 {
            wtr.append(&mut self.hp_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.is_boss_raw.to_vec());
        } else if packetver.unwrap() >= 20120221 {
            wtr.append(&mut self.is_boss_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.body_raw.to_vec());
        } else if packetver.unwrap() >= 20150513 {
            wtr.append(&mut self.body_raw.to_vec());
        }
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let mut base_len: usize = 58;
        if packetver >= 20091103 {
            base_len += 2;
        }
        if packetver >= 20091103 {
            base_len += 1;
        }
        if packetver >= 20131223 {
            base_len += 4;
        }
        if packetver >= 20181121 {
            base_len += 4;
        }
        if packetver >= 20101124 {
            base_len += 2;
        }
        if packetver >= 20080102 {
            base_len += 2;
        }
        if packetver >= 20120221 {
            base_len += 4;
        }
        if packetver >= 20120221 {
            base_len += 4;
        }
        if packetver >= 20120221 {
            base_len += 1;
        }
        if packetver >= 20150513 {
            base_len += 2;
        }
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: u32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: u16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_shield(&mut self, value: u32) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 4]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: u16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: u16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: u16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: u16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: u16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_robe(&mut self, value: u16) {
        self.robe = value;
    }
    pub fn set_robe_raw(&mut self, value: [u8; 2]) {
        self.robe_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn set_max_hp(&mut self, value: u32) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 4]) {
        self.max_hp_raw = value;
    }
    pub fn set_hp(&mut self, value: u32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_is_boss(&mut self, value: bool) {
        self.is_boss = value;
    }
    pub fn set_is_boss_raw(&mut self, value: [u8; 1]) {
        self.is_boss_raw = value;
    }
    pub fn set_body(&mut self, value: i16) {
        self.body = value;
    }
    pub fn set_body_raw(&mut self, value: [u8; 2]) {
        self.body_raw = value;
    }
    pub fn new() -> PacketZcNotifyStandentry7 {
        PacketZcNotifyStandentry7 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0x15, 0x09]),
        packet_id_raw: [0x15, 0x09],
        packet_length: 0,
        packet_length_raw: [0; 2],
        objecttype: 0,
        objecttype_raw: [0; 1],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        robe: 0,
        robe_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 4],
        hp: 0,
        hp_raw: [0; 4],
        is_boss: false,
        is_boss_raw: [0; 1],
        body: 0,
        body_raw: [0; 2],
        }
    }
}

impl Packet for PacketZcNotifyStandentry7 {
    fn id(&self) -> &str {
       "0x1509"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyStandentry7 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyMoveentry8 {
    pub fn packet_id() -> &'static str {
        "0xfd09"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyMoveentry8 {
        let mut offset: usize = 0;
        PacketZcNotifyMoveentry8 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            packet_length: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_length_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            objecttype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            objecttype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            speed: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            health_state: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            health_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            effect_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effect_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            weapon: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            move_start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            move_start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            shield: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            accessory2: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            accessory3: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            accessory3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            headpalette: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            headpalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            bodypalette: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bodypalette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_dir: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_dir_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            robe: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            robe_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            guid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gemblem_ver: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            gemblem_ver_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            honor: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_pkmode_on: {
                let field = buffer[offset] == 1;
                field
            },
            is_pkmode_on_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            sex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            pos_dir: {
                let field =  {
                let mut dst: [u8; 3] = [0_u8; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u8;
                }
                dst
            };
                field
            },
            pos_dir_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            x_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            x_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            y_size: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            y_size_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            clevel: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            clevel_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            font: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            font_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            max_hp: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            hp: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_boss: {
                let field = buffer[offset] == 1;
                field
            },
            is_boss_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            body: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_length).unwrap();
        self.packet_length_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.objecttype).unwrap();
        self.objecttype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body_state).unwrap();
        self.body_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.health_state).unwrap();
        self.health_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effect_state).unwrap();
        self.effect_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory).unwrap();
        self.accessory_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.move_start_time).unwrap();
        self.move_start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory2).unwrap();
        self.accessory2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.accessory3).unwrap();
        self.accessory3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.headpalette).unwrap();
        self.headpalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.bodypalette).unwrap();
        self.bodypalette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head_dir).unwrap();
        self.head_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.robe).unwrap();
        self.robe_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.guid).unwrap();
        self.guid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.gemblem_ver).unwrap();
        self.gemblem_ver_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_pkmode_on as u8).unwrap();
        self.is_pkmode_on_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_dir {
            wtr.write_u8(item).unwrap();
        }
        self.pos_dir_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.x_size).unwrap();
        self.x_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.y_size).unwrap();
        self.y_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.clevel).unwrap();
        self.clevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.font).unwrap();
        self.font_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.max_hp).unwrap();
        self.max_hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_boss as u8).unwrap();
        self.is_boss_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.body).unwrap();
        self.body_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.packet_length_raw.to_vec());
        wtr.append(&mut self.objecttype_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.body_state_raw.to_vec());
        wtr.append(&mut self.health_state_raw.to_vec());
        wtr.append(&mut self.effect_state_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.accessory_raw.to_vec());
        wtr.append(&mut self.move_start_time_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.accessory2_raw.to_vec());
        wtr.append(&mut self.accessory3_raw.to_vec());
        wtr.append(&mut self.headpalette_raw.to_vec());
        wtr.append(&mut self.bodypalette_raw.to_vec());
        wtr.append(&mut self.head_dir_raw.to_vec());
        wtr.append(&mut self.robe_raw.to_vec());
        wtr.append(&mut self.guid_raw.to_vec());
        wtr.append(&mut self.gemblem_ver_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.is_pkmode_on_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.pos_dir_raw.to_vec());
        wtr.append(&mut self.x_size_raw.to_vec());
        wtr.append(&mut self.y_size_raw.to_vec());
        wtr.append(&mut self.clevel_raw.to_vec());
        wtr.append(&mut self.font_raw.to_vec());
        wtr.append(&mut self.max_hp_raw.to_vec());
        wtr.append(&mut self.hp_raw.to_vec());
        wtr.append(&mut self.is_boss_raw.to_vec());
        wtr.append(&mut self.body_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 111;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_packet_length(&mut self, value: i16) {
        self.packet_length = value;
    }
    pub fn set_packet_length_raw(&mut self, value: [u8; 2]) {
        self.packet_length_raw = value;
    }
    pub fn set_objecttype(&mut self, value: u8) {
        self.objecttype = value;
    }
    pub fn set_objecttype_raw(&mut self, value: [u8; 1]) {
        self.objecttype_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_speed(&mut self, value: i16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_body_state(&mut self, value: i16) {
        self.body_state = value;
    }
    pub fn set_body_state_raw(&mut self, value: [u8; 2]) {
        self.body_state_raw = value;
    }
    pub fn set_health_state(&mut self, value: i16) {
        self.health_state = value;
    }
    pub fn set_health_state_raw(&mut self, value: [u8; 2]) {
        self.health_state_raw = value;
    }
    pub fn set_effect_state(&mut self, value: i32) {
        self.effect_state = value;
    }
    pub fn set_effect_state_raw(&mut self, value: [u8; 4]) {
        self.effect_state_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_weapon(&mut self, value: u32) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 4]) {
        self.weapon_raw = value;
    }
    pub fn set_accessory(&mut self, value: u16) {
        self.accessory = value;
    }
    pub fn set_accessory_raw(&mut self, value: [u8; 2]) {
        self.accessory_raw = value;
    }
    pub fn set_move_start_time(&mut self, value: u32) {
        self.move_start_time = value;
    }
    pub fn set_move_start_time_raw(&mut self, value: [u8; 4]) {
        self.move_start_time_raw = value;
    }
    pub fn set_shield(&mut self, value: u32) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 4]) {
        self.shield_raw = value;
    }
    pub fn set_accessory2(&mut self, value: u16) {
        self.accessory2 = value;
    }
    pub fn set_accessory2_raw(&mut self, value: [u8; 2]) {
        self.accessory2_raw = value;
    }
    pub fn set_accessory3(&mut self, value: u16) {
        self.accessory3 = value;
    }
    pub fn set_accessory3_raw(&mut self, value: [u8; 2]) {
        self.accessory3_raw = value;
    }
    pub fn set_headpalette(&mut self, value: u16) {
        self.headpalette = value;
    }
    pub fn set_headpalette_raw(&mut self, value: [u8; 2]) {
        self.headpalette_raw = value;
    }
    pub fn set_bodypalette(&mut self, value: u16) {
        self.bodypalette = value;
    }
    pub fn set_bodypalette_raw(&mut self, value: [u8; 2]) {
        self.bodypalette_raw = value;
    }
    pub fn set_head_dir(&mut self, value: u16) {
        self.head_dir = value;
    }
    pub fn set_head_dir_raw(&mut self, value: [u8; 2]) {
        self.head_dir_raw = value;
    }
    pub fn set_robe(&mut self, value: u16) {
        self.robe = value;
    }
    pub fn set_robe_raw(&mut self, value: [u8; 2]) {
        self.robe_raw = value;
    }
    pub fn set_guid(&mut self, value: u32) {
        self.guid = value;
    }
    pub fn set_guid_raw(&mut self, value: [u8; 4]) {
        self.guid_raw = value;
    }
    pub fn set_gemblem_ver(&mut self, value: i16) {
        self.gemblem_ver = value;
    }
    pub fn set_gemblem_ver_raw(&mut self, value: [u8; 2]) {
        self.gemblem_ver_raw = value;
    }
    pub fn set_honor(&mut self, value: i16) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 2]) {
        self.honor_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_is_pkmode_on(&mut self, value: bool) {
        self.is_pkmode_on = value;
    }
    pub fn set_is_pkmode_on_raw(&mut self, value: [u8; 1]) {
        self.is_pkmode_on_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn set_pos_dir(&mut self, value: [u8; 3]) {
        self.pos_dir = value;
    }
    pub fn set_pos_dir_raw(&mut self, value: [u8; 3]) {
        self.pos_dir_raw = value;
    }
    pub fn set_x_size(&mut self, value: u8) {
        self.x_size = value;
    }
    pub fn set_x_size_raw(&mut self, value: [u8; 1]) {
        self.x_size_raw = value;
    }
    pub fn set_y_size(&mut self, value: u8) {
        self.y_size = value;
    }
    pub fn set_y_size_raw(&mut self, value: [u8; 1]) {
        self.y_size_raw = value;
    }
    pub fn set_clevel(&mut self, value: i16) {
        self.clevel = value;
    }
    pub fn set_clevel_raw(&mut self, value: [u8; 2]) {
        self.clevel_raw = value;
    }
    pub fn set_font(&mut self, value: i16) {
        self.font = value;
    }
    pub fn set_font_raw(&mut self, value: [u8; 2]) {
        self.font_raw = value;
    }
    pub fn set_max_hp(&mut self, value: u32) {
        self.max_hp = value;
    }
    pub fn set_max_hp_raw(&mut self, value: [u8; 4]) {
        self.max_hp_raw = value;
    }
    pub fn set_hp(&mut self, value: u32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_is_boss(&mut self, value: bool) {
        self.is_boss = value;
    }
    pub fn set_is_boss_raw(&mut self, value: [u8; 1]) {
        self.is_boss_raw = value;
    }
    pub fn set_body(&mut self, value: i16) {
        self.body = value;
    }
    pub fn set_body_raw(&mut self, value: [u8; 2]) {
        self.body_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> PacketZcNotifyMoveentry8 {
        PacketZcNotifyMoveentry8 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xfd, 0x09]),
        packet_id_raw: [0xfd, 0x09],
        packet_length: 0,
        packet_length_raw: [0; 2],
        objecttype: 0,
        objecttype_raw: [0; 1],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        speed: 0,
        speed_raw: [0; 2],
        body_state: 0,
        body_state_raw: [0; 2],
        health_state: 0,
        health_state_raw: [0; 2],
        effect_state: 0,
        effect_state_raw: [0; 4],
        job: 0,
        job_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 4],
        accessory: 0,
        accessory_raw: [0; 2],
        move_start_time: 0,
        move_start_time_raw: [0; 4],
        shield: 0,
        shield_raw: [0; 4],
        accessory2: 0,
        accessory2_raw: [0; 2],
        accessory3: 0,
        accessory3_raw: [0; 2],
        headpalette: 0,
        headpalette_raw: [0; 2],
        bodypalette: 0,
        bodypalette_raw: [0; 2],
        head_dir: 0,
        head_dir_raw: [0; 2],
        robe: 0,
        robe_raw: [0; 2],
        guid: 0,
        guid_raw: [0; 4],
        gemblem_ver: 0,
        gemblem_ver_raw: [0; 2],
        honor: 0,
        honor_raw: [0; 2],
        virtue: 0,
        virtue_raw: [0; 4],
        is_pkmode_on: false,
        is_pkmode_on_raw: [0; 1],
        sex: 0,
        sex_raw: [0; 1],
        pos_dir: [0; 3],
        pos_dir_raw: [0; 3],
        x_size: 0,
        x_size_raw: [0; 1],
        y_size: 0,
        y_size_raw: [0; 1],
        clevel: 0,
        clevel_raw: [0; 2],
        font: 0,
        font_raw: [0; 2],
        max_hp: 0,
        max_hp_raw: [0; 4],
        hp: 0,
        hp_raw: [0; 4],
        is_boss: false,
        is_boss_raw: [0; 1],
        body: 0,
        body_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Packet for PacketZcNotifyMoveentry8 {
    fn id(&self) -> &str {
       "0xfd09"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyMoveentry8 {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcNotifyAct3 {
    pub fn packet_id() -> &'static str {
        "0xc808"
    }
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcNotifyAct3 {
        let mut offset: usize = 0;
        PacketZcNotifyAct3 {
            packet_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            packet_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            target_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            target_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            start_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            start_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attack_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attack_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            attacked_mt: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            attacked_mt_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            damage: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            damage_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            is_sp_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_sp_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            action: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            action_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            left_damage: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            left_damage_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.packet_id).unwrap();
        self.packet_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.target_gid).unwrap();
        self.target_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.start_time).unwrap();
        self.start_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attack_mt).unwrap();
        self.attack_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.attacked_mt).unwrap();
        self.attacked_mt_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.damage).unwrap();
        self.damage_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_sp_damaged as u8).unwrap();
        self.is_sp_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.action).unwrap();
        self.action_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.left_damage).unwrap();
        self.left_damage_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.packet_id_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.target_gid_raw.to_vec());
        wtr.append(&mut self.start_time_raw.to_vec());
        wtr.append(&mut self.attack_mt_raw.to_vec());
        wtr.append(&mut self.attacked_mt_raw.to_vec());
        wtr.append(&mut self.damage_raw.to_vec());
        wtr.append(&mut self.is_sp_damaged_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.action_raw.to_vec());
        wtr.append(&mut self.left_damage_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 34;
        base_len
    }
    pub fn set_packet_id(&mut self, value: i16) {
        self.packet_id = value;
    }
    pub fn set_packet_id_raw(&mut self, value: [u8; 2]) {
        self.packet_id_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_target_gid(&mut self, value: u32) {
        self.target_gid = value;
    }
    pub fn set_target_gid_raw(&mut self, value: [u8; 4]) {
        self.target_gid_raw = value;
    }
    pub fn set_start_time(&mut self, value: u32) {
        self.start_time = value;
    }
    pub fn set_start_time_raw(&mut self, value: [u8; 4]) {
        self.start_time_raw = value;
    }
    pub fn set_attack_mt(&mut self, value: i32) {
        self.attack_mt = value;
    }
    pub fn set_attack_mt_raw(&mut self, value: [u8; 4]) {
        self.attack_mt_raw = value;
    }
    pub fn set_attacked_mt(&mut self, value: i32) {
        self.attacked_mt = value;
    }
    pub fn set_attacked_mt_raw(&mut self, value: [u8; 4]) {
        self.attacked_mt_raw = value;
    }
    pub fn set_damage(&mut self, value: i32) {
        self.damage = value;
    }
    pub fn set_damage_raw(&mut self, value: [u8; 4]) {
        self.damage_raw = value;
    }
    pub fn set_is_sp_damaged(&mut self, value: bool) {
        self.is_sp_damaged = value;
    }
    pub fn set_is_sp_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_sp_damaged_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_action(&mut self, value: u8) {
        self.action = value;
    }
    pub fn set_action_raw(&mut self, value: [u8; 1]) {
        self.action_raw = value;
    }
    pub fn set_left_damage(&mut self, value: i32) {
        self.left_damage = value;
    }
    pub fn set_left_damage_raw(&mut self, value: [u8; 4]) {
        self.left_damage_raw = value;
    }
    pub fn new() -> PacketZcNotifyAct3 {
        PacketZcNotifyAct3 {
        raw: vec![],
        packet_id: i16::from_le_bytes([0xc8, 0x08]),
        packet_id_raw: [0xc8, 0x08],
        gid: 0,
        gid_raw: [0; 4],
        target_gid: 0,
        target_gid_raw: [0; 4],
        start_time: 0,
        start_time_raw: [0; 4],
        attack_mt: 0,
        attack_mt_raw: [0; 4],
        attacked_mt: 0,
        attacked_mt_raw: [0; 4],
        damage: 0,
        damage_raw: [0; 4],
        is_sp_damaged: false,
        is_sp_damaged_raw: [0; 1],
        count: 0,
        count_raw: [0; 2],
        action: 0,
        action_raw: [0; 1],
        left_damage: 0,
        left_damage_raw: [0; 4],
        }
    }
}

impl Packet for PacketZcNotifyAct3 {
    fn id(&self) -> &str {
       "0xc808"
    }
    fn debug(&self) {
            println!("{:?}", self)
    }
    fn display(&self) {
            println!("{}", self)
    }
    fn pretty_debug(&self) {
            println!("{:#?}", self)
    }
    fn raw(&self) -> &Vec<u8> {
            &self.raw
    }
    fn raw_mut(&mut self) -> &mut Vec<u8> {
            &mut self.raw
    }
    fn as_any(&self) -> &dyn Any{
        self
    }
    fn as_any_mut(&mut self) -> &mut dyn Any{
        self
    }
    fn base_len(&self, packetver: u32) -> usize {
        Self::base_len(packetver)
    }
}

impl Default for PacketZcNotifyAct3 {
    fn default() -> Self {

       Self::new()
    }
}

impl Default for ServerAddr {
    fn default() -> Self {

       Self::new()
    }
}

impl ServerAddr {
    pub fn from(buffer: &[u8], packetver: u32) -> ServerAddr {
        let mut offset: usize = 0;
        ServerAddr {
            ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            port: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            port_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            user_count: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            user_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            property: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            property_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.ip).unwrap();
        self.ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.port).unwrap();
        self.port_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.user_count).unwrap();
        self.user_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.property).unwrap();
        self.property_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.ip_raw.to_vec());
        wtr.append(&mut self.port_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.user_count_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.property_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_ip(&mut self, value: u32) {
        self.ip = value;
    }
    pub fn set_ip_raw(&mut self, value: [u8; 4]) {
        self.ip_raw = value;
    }
    pub fn set_port(&mut self, value: i16) {
        self.port = value;
    }
    pub fn set_port_raw(&mut self, value: [u8; 2]) {
        self.port_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 20]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 20]) {
        self.name_raw = value;
    }
    pub fn set_user_count(&mut self, value: u16) {
        self.user_count = value;
    }
    pub fn set_user_count_raw(&mut self, value: [u8; 2]) {
        self.user_count_raw = value;
    }
    pub fn set_state(&mut self, value: u16) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 2]) {
        self.state_raw = value;
    }
    pub fn set_property(&mut self, value: u16) {
        self.property = value;
    }
    pub fn set_property_raw(&mut self, value: [u8; 2]) {
        self.property_raw = value;
    }
    pub fn new() -> ServerAddr {
        ServerAddr {
        raw: vec![],
        ip: 0,
        ip_raw: [0; 4],
        port: 0,
        port_raw: [0; 2],
        name: [0 as char; 20],
        name_raw: [0; 20],
        user_count: 0,
        user_count_raw: [0; 2],
        state: 0,
        state_raw: [0; 2],
        property: 0,
        property_raw: [0; 2],
        }
    }
}

impl Default for ServerAddr2 {
    fn default() -> Self {

       Self::new()
    }
}

impl ServerAddr2 {
    pub fn from(buffer: &[u8], packetver: u32) -> ServerAddr2 {
        let mut offset: usize = 0;
        ServerAddr2 {
            ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            port: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            port_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            user_count: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            user_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            property: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            property_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            unknown2: {
                let field =  {
                let mut dst: [char; 128] = [0 as char; 128];
                for (index, byte) in buffer[offset..offset + 128].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            unknown2_raw: {
                let mut dst: [u8; 128] = [0u8; 128];
                dst.clone_from_slice(&buffer[offset..offset + 128]);
                offset += 128;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.ip).unwrap();
        self.ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.port).unwrap();
        self.port_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.user_count).unwrap();
        self.user_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.property).unwrap();
        self.property_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.unknown2 {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.unknown2_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.ip_raw.to_vec());
        wtr.append(&mut self.port_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.user_count_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        wtr.append(&mut self.property_raw.to_vec());
        wtr.append(&mut self.unknown2_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 160;
        base_len
    }
    pub fn set_ip(&mut self, value: u32) {
        self.ip = value;
    }
    pub fn set_ip_raw(&mut self, value: [u8; 4]) {
        self.ip_raw = value;
    }
    pub fn set_port(&mut self, value: i16) {
        self.port = value;
    }
    pub fn set_port_raw(&mut self, value: [u8; 2]) {
        self.port_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 20]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 20]) {
        self.name_raw = value;
    }
    pub fn set_user_count(&mut self, value: u16) {
        self.user_count = value;
    }
    pub fn set_user_count_raw(&mut self, value: [u8; 2]) {
        self.user_count_raw = value;
    }
    pub fn set_state(&mut self, value: u16) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 2]) {
        self.state_raw = value;
    }
    pub fn set_property(&mut self, value: u16) {
        self.property = value;
    }
    pub fn set_property_raw(&mut self, value: [u8; 2]) {
        self.property_raw = value;
    }
    pub fn set_unknown2(&mut self, value: [char; 128]) {
        self.unknown2 = value;
    }
    pub fn set_unknown2_raw(&mut self, value: [u8; 128]) {
        self.unknown2_raw = value;
    }
    pub fn new() -> ServerAddr2 {
        ServerAddr2 {
        raw: vec![],
        ip: 0,
        ip_raw: [0; 4],
        port: 0,
        port_raw: [0; 2],
        name: [0 as char; 20],
        name_raw: [0; 20],
        user_count: 0,
        user_count_raw: [0; 2],
        state: 0,
        state_raw: [0; 2],
        property: 0,
        property_raw: [0; 2],
        unknown2: [0 as char; 128],
        unknown2_raw: [0; 128],
        }
    }
}

impl Default for CharacterInfoNeoUnion {
    fn default() -> Self {

       Self::new()
    }
}

impl CharacterInfoNeoUnion {
    pub fn from(buffer: &[u8], packetver: u32) -> CharacterInfoNeoUnion {
        let mut offset: usize = 0;
        CharacterInfoNeoUnion {
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            exp_64: {
                let field = if packetver >= 20170830 {
                   u64::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3], buffer[offset + 4], buffer[offset + 5], buffer[offset + 6], buffer[offset + 7]])
                } else {
                   0 as u64
                };
                field
            },
            exp_64_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                if packetver >= 20170830 {
                    dst.clone_from_slice(&buffer[offset..offset + 8]);
                    offset += 8;
                }
                dst
            },
            exp: {
                let field = if packetver < 20170830 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver < 20170830 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            money: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            money_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            jobexp_64: {
                let field = if packetver >= 20170830 {
                   u64::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3], buffer[offset + 4], buffer[offset + 5], buffer[offset + 6], buffer[offset + 7]])
                } else {
                   0 as u64
                };
                field
            },
            jobexp_64_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                if packetver >= 20170830 {
                    dst.clone_from_slice(&buffer[offset..offset + 8]);
                    offset += 8;
                }
                dst
            },
            jobexp: {
                let field = if packetver < 20170830 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            jobexp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver < 20170830 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            joblevel: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            joblevel_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            bodystate: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bodystate_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            healthstate: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            healthstate_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            effectstate: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            effectstate_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            virtue: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            virtue_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            honor: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            honor_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            status_point: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            status_point_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hp: {
                let field = if packetver > 20081217 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            hp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver > 20081217 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            hp_16: {
                let field = if packetver <= 20081217 {
                   u16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as u16
                };
                field
            },
            hp_16_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver <= 20081217 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            maxhp: {
                let field = if packetver > 20081217 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            maxhp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver > 20081217 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            maxhp_16: {
                let field = if packetver <= 20081217 {
                   u16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as u16
                };
                field
            },
            maxhp_16_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver <= 20081217 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            sp: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            maxsp: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            maxsp_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            speed: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            speed_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            class: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            class_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body: {
                let field = if packetver >= 20141022 {
                   u16::from_le_bytes([buffer[offset], buffer[offset + 1]])
                } else {
                   0 as u16
                };
                field
            },
            body_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                if packetver >= 20141022 {
                    dst.clone_from_slice(&buffer[offset..offset + 2]);
                    offset += 2;
                }
                dst
            },
            weapon: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            weapon_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skill_point: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skill_point_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_bottom: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_bottom_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            shield: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            shield_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_top: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_top_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_mid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_mid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hair_color: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hair_color_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            body_color: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            body_color_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            str: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            str_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            agi: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            agi_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            vit: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            vit_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            int: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            int_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dex: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            luk: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            luk_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            char_num: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            char_num_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            haircolor: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            haircolor_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            b_is_changed_char_name: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            b_is_changed_char_name_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            last_map: {
                let field = if packetver >= 20100720 {
                    {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            }
                } else {
                   [0 as char; 16]
                };
                field
            },
            last_map_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                if packetver >= 20100720 {
                    dst.clone_from_slice(&buffer[offset..offset + 16]);
                    offset += 16;
                }
                dst
            },
            delete_date: {
                let field = if packetver >= 20100803 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            delete_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20100803 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            robe: {
                let field = if packetver >= 20110111 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            robe_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20110111 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            slot_addon: {
                let field = if packetver >= 20110928 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            slot_addon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20110928 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            rename_addon: {
                let field = if packetver >= 20111025 {
                   u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]])
                } else {
                   0 as u32
                };
                field
            },
            rename_addon_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                if packetver >= 20111025 {
                    dst.clone_from_slice(&buffer[offset..offset + 4]);
                    offset += 4;
                }
                dst
            },
            sex: {
                let field = if packetver >= 20141016 {
                   u8::from_le_bytes([buffer[offset]])
                } else {
                   0 as u8
                };
                field
            },
            sex_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                if packetver >= 20141016 {
                    dst.clone_from_slice(&buffer[offset..offset + 1]);
                    offset += 1;
                }
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u64::<LittleEndian>(self.exp_64).unwrap();
        self.exp_64_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.exp).unwrap();
        self.exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.money).unwrap();
        self.money_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u64::<LittleEndian>(self.jobexp_64).unwrap();
        self.jobexp_64_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.jobexp).unwrap();
        self.jobexp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.joblevel).unwrap();
        self.joblevel_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bodystate).unwrap();
        self.bodystate_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.healthstate).unwrap();
        self.healthstate_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.effectstate).unwrap();
        self.effectstate_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.virtue).unwrap();
        self.virtue_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.honor).unwrap();
        self.honor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.status_point).unwrap();
        self.status_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.hp).unwrap();
        self.hp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.hp_16).unwrap();
        self.hp_16_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.maxhp).unwrap();
        self.maxhp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.maxhp_16).unwrap();
        self.maxhp_16_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.sp).unwrap();
        self.sp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.maxsp).unwrap();
        self.maxsp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.speed).unwrap();
        self.speed_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.class).unwrap();
        self.class_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.body).unwrap();
        self.body_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.weapon).unwrap();
        self.weapon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skill_point).unwrap();
        self.skill_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head_bottom).unwrap();
        self.head_bottom_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.shield).unwrap();
        self.shield_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head_top).unwrap();
        self.head_top_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.head_mid).unwrap();
        self.head_mid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.hair_color).unwrap();
        self.hair_color_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.body_color).unwrap();
        self.body_color_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.str).unwrap();
        self.str_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.agi).unwrap();
        self.agi_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.vit).unwrap();
        self.vit_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.int).unwrap();
        self.int_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dex).unwrap();
        self.dex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.luk).unwrap();
        self.luk_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.char_num).unwrap();
        self.char_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.haircolor).unwrap();
        self.haircolor_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.b_is_changed_char_name).unwrap();
        self.b_is_changed_char_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.last_map {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.last_map_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.delete_date).unwrap();
        self.delete_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.robe).unwrap();
        self.robe_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.slot_addon).unwrap();
        self.slot_addon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.rename_addon).unwrap();
        self.rename_addon_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.gid_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.exp_64_raw.to_vec());
        } else if packetver.unwrap() >= 20170830 {
            wtr.append(&mut self.exp_64_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.exp_raw.to_vec());
        } else if packetver.unwrap() < 20170830 {
            wtr.append(&mut self.exp_raw.to_vec());
        }
        wtr.append(&mut self.money_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.jobexp_64_raw.to_vec());
        } else if packetver.unwrap() >= 20170830 {
            wtr.append(&mut self.jobexp_64_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.jobexp_raw.to_vec());
        } else if packetver.unwrap() < 20170830 {
            wtr.append(&mut self.jobexp_raw.to_vec());
        }
        wtr.append(&mut self.joblevel_raw.to_vec());
        wtr.append(&mut self.bodystate_raw.to_vec());
        wtr.append(&mut self.healthstate_raw.to_vec());
        wtr.append(&mut self.effectstate_raw.to_vec());
        wtr.append(&mut self.virtue_raw.to_vec());
        wtr.append(&mut self.honor_raw.to_vec());
        wtr.append(&mut self.status_point_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.hp_raw.to_vec());
        } else if packetver.unwrap() > 20081217 {
            wtr.append(&mut self.hp_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.hp_16_raw.to_vec());
        } else if packetver.unwrap() <= 20081217 {
            wtr.append(&mut self.hp_16_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.maxhp_raw.to_vec());
        } else if packetver.unwrap() > 20081217 {
            wtr.append(&mut self.maxhp_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.maxhp_16_raw.to_vec());
        } else if packetver.unwrap() <= 20081217 {
            wtr.append(&mut self.maxhp_16_raw.to_vec());
        }
        wtr.append(&mut self.sp_raw.to_vec());
        wtr.append(&mut self.maxsp_raw.to_vec());
        wtr.append(&mut self.speed_raw.to_vec());
        wtr.append(&mut self.class_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.body_raw.to_vec());
        } else if packetver.unwrap() >= 20141022 {
            wtr.append(&mut self.body_raw.to_vec());
        }
        wtr.append(&mut self.weapon_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.skill_point_raw.to_vec());
        wtr.append(&mut self.head_bottom_raw.to_vec());
        wtr.append(&mut self.shield_raw.to_vec());
        wtr.append(&mut self.head_top_raw.to_vec());
        wtr.append(&mut self.head_mid_raw.to_vec());
        wtr.append(&mut self.hair_color_raw.to_vec());
        wtr.append(&mut self.body_color_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        wtr.append(&mut self.str_raw.to_vec());
        wtr.append(&mut self.agi_raw.to_vec());
        wtr.append(&mut self.vit_raw.to_vec());
        wtr.append(&mut self.int_raw.to_vec());
        wtr.append(&mut self.dex_raw.to_vec());
        wtr.append(&mut self.luk_raw.to_vec());
        wtr.append(&mut self.char_num_raw.to_vec());
        wtr.append(&mut self.haircolor_raw.to_vec());
        wtr.append(&mut self.b_is_changed_char_name_raw.to_vec());
        if packetver.is_none() {
          wtr.append(&mut self.last_map_raw.to_vec());
        } else if packetver.unwrap() >= 20100720 {
            wtr.append(&mut self.last_map_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.delete_date_raw.to_vec());
        } else if packetver.unwrap() >= 20100803 {
            wtr.append(&mut self.delete_date_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.robe_raw.to_vec());
        } else if packetver.unwrap() >= 20110111 {
            wtr.append(&mut self.robe_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.slot_addon_raw.to_vec());
        } else if packetver.unwrap() >= 20110928 {
            wtr.append(&mut self.slot_addon_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.rename_addon_raw.to_vec());
        } else if packetver.unwrap() >= 20111025 {
            wtr.append(&mut self.rename_addon_raw.to_vec());
        }
        if packetver.is_none() {
          wtr.append(&mut self.sex_raw.to_vec());
        } else if packetver.unwrap() >= 20141016 {
            wtr.append(&mut self.sex_raw.to_vec());
        }
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let mut base_len: usize = 96;
        if packetver >= 20170830 {
            base_len += 8;
        }
        if packetver < 20170830 {
            base_len += 4;
        }
        if packetver >= 20170830 {
            base_len += 8;
        }
        if packetver < 20170830 {
            base_len += 4;
        }
        if packetver > 20081217 {
            base_len += 4;
        }
        if packetver <= 20081217 {
            base_len += 2;
        }
        if packetver > 20081217 {
            base_len += 4;
        }
        if packetver <= 20081217 {
            base_len += 2;
        }
        if packetver >= 20141022 {
            base_len += 2;
        }
        if packetver >= 20100720 {
            base_len += 16;
        }
        if packetver >= 20100803 {
            base_len += 4;
        }
        if packetver >= 20110111 {
            base_len += 4;
        }
        if packetver >= 20110928 {
            base_len += 4;
        }
        if packetver >= 20111025 {
            base_len += 4;
        }
        if packetver >= 20141016 {
            base_len += 1;
        }
        base_len
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_exp_64(&mut self, value: u64) {
        self.exp_64 = value;
    }
    pub fn set_exp_64_raw(&mut self, value: [u8; 8]) {
        self.exp_64_raw = value;
    }
    pub fn set_exp(&mut self, value: u32) {
        self.exp = value;
    }
    pub fn set_exp_raw(&mut self, value: [u8; 4]) {
        self.exp_raw = value;
    }
    pub fn set_money(&mut self, value: u32) {
        self.money = value;
    }
    pub fn set_money_raw(&mut self, value: [u8; 4]) {
        self.money_raw = value;
    }
    pub fn set_jobexp_64(&mut self, value: u64) {
        self.jobexp_64 = value;
    }
    pub fn set_jobexp_64_raw(&mut self, value: [u8; 8]) {
        self.jobexp_64_raw = value;
    }
    pub fn set_jobexp(&mut self, value: u32) {
        self.jobexp = value;
    }
    pub fn set_jobexp_raw(&mut self, value: [u8; 4]) {
        self.jobexp_raw = value;
    }
    pub fn set_joblevel(&mut self, value: u32) {
        self.joblevel = value;
    }
    pub fn set_joblevel_raw(&mut self, value: [u8; 4]) {
        self.joblevel_raw = value;
    }
    pub fn set_bodystate(&mut self, value: u32) {
        self.bodystate = value;
    }
    pub fn set_bodystate_raw(&mut self, value: [u8; 4]) {
        self.bodystate_raw = value;
    }
    pub fn set_healthstate(&mut self, value: u32) {
        self.healthstate = value;
    }
    pub fn set_healthstate_raw(&mut self, value: [u8; 4]) {
        self.healthstate_raw = value;
    }
    pub fn set_effectstate(&mut self, value: i32) {
        self.effectstate = value;
    }
    pub fn set_effectstate_raw(&mut self, value: [u8; 4]) {
        self.effectstate_raw = value;
    }
    pub fn set_virtue(&mut self, value: i32) {
        self.virtue = value;
    }
    pub fn set_virtue_raw(&mut self, value: [u8; 4]) {
        self.virtue_raw = value;
    }
    pub fn set_honor(&mut self, value: i32) {
        self.honor = value;
    }
    pub fn set_honor_raw(&mut self, value: [u8; 4]) {
        self.honor_raw = value;
    }
    pub fn set_status_point(&mut self, value: u16) {
        self.status_point = value;
    }
    pub fn set_status_point_raw(&mut self, value: [u8; 2]) {
        self.status_point_raw = value;
    }
    pub fn set_hp(&mut self, value: u32) {
        self.hp = value;
    }
    pub fn set_hp_raw(&mut self, value: [u8; 4]) {
        self.hp_raw = value;
    }
    pub fn set_hp_16(&mut self, value: u16) {
        self.hp_16 = value;
    }
    pub fn set_hp_16_raw(&mut self, value: [u8; 2]) {
        self.hp_16_raw = value;
    }
    pub fn set_maxhp(&mut self, value: u32) {
        self.maxhp = value;
    }
    pub fn set_maxhp_raw(&mut self, value: [u8; 4]) {
        self.maxhp_raw = value;
    }
    pub fn set_maxhp_16(&mut self, value: u16) {
        self.maxhp_16 = value;
    }
    pub fn set_maxhp_16_raw(&mut self, value: [u8; 2]) {
        self.maxhp_16_raw = value;
    }
    pub fn set_sp(&mut self, value: u16) {
        self.sp = value;
    }
    pub fn set_sp_raw(&mut self, value: [u8; 2]) {
        self.sp_raw = value;
    }
    pub fn set_maxsp(&mut self, value: u16) {
        self.maxsp = value;
    }
    pub fn set_maxsp_raw(&mut self, value: [u8; 2]) {
        self.maxsp_raw = value;
    }
    pub fn set_speed(&mut self, value: u16) {
        self.speed = value;
    }
    pub fn set_speed_raw(&mut self, value: [u8; 2]) {
        self.speed_raw = value;
    }
    pub fn set_class(&mut self, value: u16) {
        self.class = value;
    }
    pub fn set_class_raw(&mut self, value: [u8; 2]) {
        self.class_raw = value;
    }
    pub fn set_head(&mut self, value: u16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_body(&mut self, value: u16) {
        self.body = value;
    }
    pub fn set_body_raw(&mut self, value: [u8; 2]) {
        self.body_raw = value;
    }
    pub fn set_weapon(&mut self, value: u16) {
        self.weapon = value;
    }
    pub fn set_weapon_raw(&mut self, value: [u8; 2]) {
        self.weapon_raw = value;
    }
    pub fn set_level(&mut self, value: u16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_skill_point(&mut self, value: u16) {
        self.skill_point = value;
    }
    pub fn set_skill_point_raw(&mut self, value: [u8; 2]) {
        self.skill_point_raw = value;
    }
    pub fn set_head_bottom(&mut self, value: u16) {
        self.head_bottom = value;
    }
    pub fn set_head_bottom_raw(&mut self, value: [u8; 2]) {
        self.head_bottom_raw = value;
    }
    pub fn set_shield(&mut self, value: u16) {
        self.shield = value;
    }
    pub fn set_shield_raw(&mut self, value: [u8; 2]) {
        self.shield_raw = value;
    }
    pub fn set_head_top(&mut self, value: u16) {
        self.head_top = value;
    }
    pub fn set_head_top_raw(&mut self, value: [u8; 2]) {
        self.head_top_raw = value;
    }
    pub fn set_head_mid(&mut self, value: u16) {
        self.head_mid = value;
    }
    pub fn set_head_mid_raw(&mut self, value: [u8; 2]) {
        self.head_mid_raw = value;
    }
    pub fn set_hair_color(&mut self, value: u16) {
        self.hair_color = value;
    }
    pub fn set_hair_color_raw(&mut self, value: [u8; 2]) {
        self.hair_color_raw = value;
    }
    pub fn set_body_color(&mut self, value: u16) {
        self.body_color = value;
    }
    pub fn set_body_color_raw(&mut self, value: [u8; 2]) {
        self.body_color_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn set_str(&mut self, value: u8) {
        self.str = value;
    }
    pub fn set_str_raw(&mut self, value: [u8; 1]) {
        self.str_raw = value;
    }
    pub fn set_agi(&mut self, value: u8) {
        self.agi = value;
    }
    pub fn set_agi_raw(&mut self, value: [u8; 1]) {
        self.agi_raw = value;
    }
    pub fn set_vit(&mut self, value: u8) {
        self.vit = value;
    }
    pub fn set_vit_raw(&mut self, value: [u8; 1]) {
        self.vit_raw = value;
    }
    pub fn set_int(&mut self, value: u8) {
        self.int = value;
    }
    pub fn set_int_raw(&mut self, value: [u8; 1]) {
        self.int_raw = value;
    }
    pub fn set_dex(&mut self, value: u8) {
        self.dex = value;
    }
    pub fn set_dex_raw(&mut self, value: [u8; 1]) {
        self.dex_raw = value;
    }
    pub fn set_luk(&mut self, value: u8) {
        self.luk = value;
    }
    pub fn set_luk_raw(&mut self, value: [u8; 1]) {
        self.luk_raw = value;
    }
    pub fn set_char_num(&mut self, value: i8) {
        self.char_num = value;
    }
    pub fn set_char_num_raw(&mut self, value: [u8; 1]) {
        self.char_num_raw = value;
    }
    pub fn set_haircolor(&mut self, value: u8) {
        self.haircolor = value;
    }
    pub fn set_haircolor_raw(&mut self, value: [u8; 1]) {
        self.haircolor_raw = value;
    }
    pub fn set_b_is_changed_char_name(&mut self, value: u16) {
        self.b_is_changed_char_name = value;
    }
    pub fn set_b_is_changed_char_name_raw(&mut self, value: [u8; 2]) {
        self.b_is_changed_char_name_raw = value;
    }
    pub fn set_last_map(&mut self, value: [char; 16]) {
        self.last_map = value;
    }
    pub fn set_last_map_raw(&mut self, value: [u8; 16]) {
        self.last_map_raw = value;
    }
    pub fn set_delete_date(&mut self, value: u32) {
        self.delete_date = value;
    }
    pub fn set_delete_date_raw(&mut self, value: [u8; 4]) {
        self.delete_date_raw = value;
    }
    pub fn set_robe(&mut self, value: u32) {
        self.robe = value;
    }
    pub fn set_robe_raw(&mut self, value: [u8; 4]) {
        self.robe_raw = value;
    }
    pub fn set_slot_addon(&mut self, value: u32) {
        self.slot_addon = value;
    }
    pub fn set_slot_addon_raw(&mut self, value: [u8; 4]) {
        self.slot_addon_raw = value;
    }
    pub fn set_rename_addon(&mut self, value: u32) {
        self.rename_addon = value;
    }
    pub fn set_rename_addon_raw(&mut self, value: [u8; 4]) {
        self.rename_addon_raw = value;
    }
    pub fn set_sex(&mut self, value: u8) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 1]) {
        self.sex_raw = value;
    }
    pub fn new() -> CharacterInfoNeoUnion {
        CharacterInfoNeoUnion {
        raw: vec![],
        gid: 0,
        gid_raw: [0; 4],
        exp_64: 0,
        exp_64_raw: [0; 8],
        exp: 0,
        exp_raw: [0; 4],
        money: 0,
        money_raw: [0; 4],
        jobexp_64: 0,
        jobexp_64_raw: [0; 8],
        jobexp: 0,
        jobexp_raw: [0; 4],
        joblevel: 0,
        joblevel_raw: [0; 4],
        bodystate: 0,
        bodystate_raw: [0; 4],
        healthstate: 0,
        healthstate_raw: [0; 4],
        effectstate: 0,
        effectstate_raw: [0; 4],
        virtue: 0,
        virtue_raw: [0; 4],
        honor: 0,
        honor_raw: [0; 4],
        status_point: 0,
        status_point_raw: [0; 2],
        hp: 0,
        hp_raw: [0; 4],
        hp_16: 0,
        hp_16_raw: [0; 2],
        maxhp: 0,
        maxhp_raw: [0; 4],
        maxhp_16: 0,
        maxhp_16_raw: [0; 2],
        sp: 0,
        sp_raw: [0; 2],
        maxsp: 0,
        maxsp_raw: [0; 2],
        speed: 0,
        speed_raw: [0; 2],
        class: 0,
        class_raw: [0; 2],
        head: 0,
        head_raw: [0; 2],
        body: 0,
        body_raw: [0; 2],
        weapon: 0,
        weapon_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        skill_point: 0,
        skill_point_raw: [0; 2],
        head_bottom: 0,
        head_bottom_raw: [0; 2],
        shield: 0,
        shield_raw: [0; 2],
        head_top: 0,
        head_top_raw: [0; 2],
        head_mid: 0,
        head_mid_raw: [0; 2],
        hair_color: 0,
        hair_color_raw: [0; 2],
        body_color: 0,
        body_color_raw: [0; 2],
        name: [0 as char; 24],
        name_raw: [0; 24],
        str: 0,
        str_raw: [0; 1],
        agi: 0,
        agi_raw: [0; 1],
        vit: 0,
        vit_raw: [0; 1],
        int: 0,
        int_raw: [0; 1],
        dex: 0,
        dex_raw: [0; 1],
        luk: 0,
        luk_raw: [0; 1],
        char_num: 0,
        char_num_raw: [0; 1],
        haircolor: 0,
        haircolor_raw: [0; 1],
        b_is_changed_char_name: 0,
        b_is_changed_char_name_raw: [0; 2],
        last_map: [0 as char; 16],
        last_map_raw: [0; 16],
        delete_date: 0,
        delete_date_raw: [0; 4],
        robe: 0,
        robe_raw: [0; 4],
        slot_addon: 0,
        slot_addon_raw: [0; 4],
        rename_addon: 0,
        rename_addon_raw: [0; 4],
        sex: 0,
        sex_raw: [0; 1],
        }
    }
}

impl Default for ZserverAddr {
    fn default() -> Self {

       Self::new()
    }
}

impl ZserverAddr {
    pub fn from(buffer: &[u8], packetver: u32) -> ZserverAddr {
        let mut offset: usize = 0;
        ZserverAddr {
            ip: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ip_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            port: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            port_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.ip).unwrap();
        self.ip_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.port).unwrap();
        self.port_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.ip_raw.to_vec());
        wtr.append(&mut self.port_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_ip(&mut self, value: u32) {
        self.ip = value;
    }
    pub fn set_ip_raw(&mut self, value: [u8; 4]) {
        self.ip_raw = value;
    }
    pub fn set_port(&mut self, value: i16) {
        self.port = value;
    }
    pub fn set_port_raw(&mut self, value: [u8; 2]) {
        self.port_raw = value;
    }
    pub fn new() -> ZserverAddr {
        ZserverAddr {
        raw: vec![],
        ip: 0,
        ip_raw: [0; 4],
        port: 0,
        port_raw: [0; 2],
        }
    }
}

impl Default for EQUIPSLOTINFO {
    fn default() -> Self {

       Self::new()
    }
}

impl EQUIPSLOTINFO {
    pub fn from(buffer: &[u8], packetver: u32) -> EQUIPSLOTINFO {
        let mut offset: usize = 0;
        EQUIPSLOTINFO {
            card1: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card1_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card2: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card3: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card4: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card4_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card1).unwrap();
        self.card1_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card2).unwrap();
        self.card2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card3).unwrap();
        self.card3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card4).unwrap();
        self.card4_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.card1_raw.to_vec());
        wtr.append(&mut self.card2_raw.to_vec());
        wtr.append(&mut self.card3_raw.to_vec());
        wtr.append(&mut self.card4_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_card1(&mut self, value: u16) {
        self.card1 = value;
    }
    pub fn set_card1_raw(&mut self, value: [u8; 2]) {
        self.card1_raw = value;
    }
    pub fn set_card2(&mut self, value: u16) {
        self.card2 = value;
    }
    pub fn set_card2_raw(&mut self, value: [u8; 2]) {
        self.card2_raw = value;
    }
    pub fn set_card3(&mut self, value: u16) {
        self.card3 = value;
    }
    pub fn set_card3_raw(&mut self, value: [u8; 2]) {
        self.card3_raw = value;
    }
    pub fn set_card4(&mut self, value: u16) {
        self.card4 = value;
    }
    pub fn set_card4_raw(&mut self, value: [u8; 2]) {
        self.card4_raw = value;
    }
    pub fn new() -> EQUIPSLOTINFO {
        EQUIPSLOTINFO {
        raw: vec![],
        card1: 0,
        card1_raw: [0; 2],
        card2: 0,
        card2_raw: [0; 2],
        card3: 0,
        card3_raw: [0; 2],
        card4: 0,
        card4_raw: [0; 2],
        }
    }
}

impl Default for NormalitemExtrainfo {
    fn default() -> Self {

       Self::new()
    }
}

impl NormalitemExtrainfo {
    pub fn from(buffer: &[u8], packetver: u32) -> NormalitemExtrainfo {
        let mut offset: usize = 0;
        NormalitemExtrainfo {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_state).unwrap();
        self.wear_state_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.wear_state_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_wear_state(&mut self, value: u16) {
        self.wear_state = value;
    }
    pub fn set_wear_state_raw(&mut self, value: [u8; 2]) {
        self.wear_state_raw = value;
    }
    pub fn new() -> NormalitemExtrainfo {
        NormalitemExtrainfo {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        count: 0,
        count_raw: [0; 2],
        wear_state: 0,
        wear_state_raw: [0; 2],
        }
    }
}

impl Default for EquipmentitemExtrainfo {
    fn default() -> Self {

       Self::new()
    }
}

impl EquipmentitemExtrainfo {
    pub fn from(buffer: &[u8], packetver: u32) -> EquipmentitemExtrainfo {
        let mut offset: usize = 0;
        EquipmentitemExtrainfo {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_state).unwrap();
        self.wear_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.wear_state_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 20;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_wear_state(&mut self, value: u16) {
        self.wear_state = value;
    }
    pub fn set_wear_state_raw(&mut self, value: [u8; 2]) {
        self.wear_state_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> EquipmentitemExtrainfo {
        EquipmentitemExtrainfo {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        location: 0,
        location_raw: [0; 2],
        wear_state: 0,
        wear_state_raw: [0; 2],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Default for PurchaseItem {
    fn default() -> Self {

       Self::new()
    }
}

impl PurchaseItem {
    pub fn from(buffer: &[u8], packetver: u32) -> PurchaseItem {
        let mut offset: usize = 0;
        PurchaseItem {
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            discountprice: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            discountprice_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.discountprice).unwrap();
        self.discountprice_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.price_raw.to_vec());
        wtr.append(&mut self.discountprice_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 11;
        base_len
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn set_discountprice(&mut self, value: i32) {
        self.discountprice = value;
    }
    pub fn set_discountprice_raw(&mut self, value: [u8; 4]) {
        self.discountprice_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> PurchaseItem {
        PurchaseItem {
        raw: vec![],
        price: 0,
        price_raw: [0; 4],
        discountprice: 0,
        discountprice_raw: [0; 4],
        atype: 0,
        atype_raw: [0; 1],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Default for SellItem {
    fn default() -> Self {

       Self::new()
    }
}

impl SellItem {
    pub fn from(buffer: &[u8], packetver: u32) -> SellItem {
        let mut offset: usize = 0;
        SellItem {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            overchargeprice: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            overchargeprice_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.overchargeprice).unwrap();
        self.overchargeprice_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.price_raw.to_vec());
        wtr.append(&mut self.overchargeprice_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn set_overchargeprice(&mut self, value: i32) {
        self.overchargeprice = value;
    }
    pub fn set_overchargeprice_raw(&mut self, value: [u8; 4]) {
        self.overchargeprice_raw = value;
    }
    pub fn new() -> SellItem {
        SellItem {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        price: 0,
        price_raw: [0; 4],
        overchargeprice: 0,
        overchargeprice_raw: [0; 4],
        }
    }
}

impl Default for CzPurchaseItem {
    fn default() -> Self {

       Self::new()
    }
}

impl CzPurchaseItem {
    pub fn from(buffer: &[u8], packetver: u32) -> CzPurchaseItem {
        let mut offset: usize = 0;
        CzPurchaseItem {
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> CzPurchaseItem {
        CzPurchaseItem {
        raw: vec![],
        count: 0,
        count_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Default for CzSellItem {
    fn default() -> Self {

       Self::new()
    }
}

impl CzSellItem {
    pub fn from(buffer: &[u8], packetver: u32) -> CzSellItem {
        let mut offset: usize = 0;
        CzSellItem {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> CzSellItem {
        CzSellItem {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Default for WhisperItem {
    fn default() -> Self {

       Self::new()
    }
}

impl WhisperItem {
    pub fn from(buffer: &[u8], packetver: u32) -> WhisperItem {
        let mut offset: usize = 0;
        WhisperItem {
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 24;
        base_len
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> WhisperItem {
        WhisperItem {
        raw: vec![],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Default for RoomMember {
    fn default() -> Self {

       Self::new()
    }
}

impl RoomMember {
    pub fn from(buffer: &[u8], packetver: u32) -> RoomMember {
        let mut offset: usize = 0;
        RoomMember {
            role: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            role_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.role).unwrap();
        self.role_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.role_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_role(&mut self, value: u32) {
        self.role = value;
    }
    pub fn set_role_raw(&mut self, value: [u8; 4]) {
        self.role_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> RoomMember {
        RoomMember {
        raw: vec![],
        role: 0,
        role_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Default for GroupmemberInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl GroupmemberInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> GroupmemberInfo {
        let mut offset: usize = 0;
        GroupmemberInfo {
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            character_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            character_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            map_name: {
                let field =  {
                let mut dst: [char; 16] = [0 as char; 16];
                for (index, byte) in buffer[offset..offset + 16].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            map_name_raw: {
                let mut dst: [u8; 16] = [0u8; 16];
                dst.clone_from_slice(&buffer[offset..offset + 16]);
                offset += 16;
                dst
            },
            role: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            role_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            state: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            state_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.character_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.character_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.map_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.map_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.role).unwrap();
        self.role_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.state).unwrap();
        self.state_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.character_name_raw.to_vec());
        wtr.append(&mut self.map_name_raw.to_vec());
        wtr.append(&mut self.role_raw.to_vec());
        wtr.append(&mut self.state_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 46;
        base_len
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_character_name(&mut self, value: [char; 24]) {
        self.character_name = value;
    }
    pub fn set_character_name_raw(&mut self, value: [u8; 24]) {
        self.character_name_raw = value;
    }
    pub fn set_map_name(&mut self, value: [char; 16]) {
        self.map_name = value;
    }
    pub fn set_map_name_raw(&mut self, value: [u8; 16]) {
        self.map_name_raw = value;
    }
    pub fn set_role(&mut self, value: u8) {
        self.role = value;
    }
    pub fn set_role_raw(&mut self, value: [u8; 1]) {
        self.role_raw = value;
    }
    pub fn set_state(&mut self, value: u8) {
        self.state = value;
    }
    pub fn set_state_raw(&mut self, value: [u8; 1]) {
        self.state_raw = value;
    }
    pub fn new() -> GroupmemberInfo {
        GroupmemberInfo {
        raw: vec![],
        aid: 0,
        aid_raw: [0; 4],
        character_name: [0 as char; 24],
        character_name_raw: [0; 24],
        map_name: [0 as char; 16],
        map_name_raw: [0; 16],
        role: 0,
        role_raw: [0; 1],
        state: 0,
        state_raw: [0; 1],
        }
    }
}

impl Default for SKILLINFO {
    fn default() -> Self {

       Self::new()
    }
}

impl SKILLINFO {
    pub fn from(buffer: &[u8], packetver: u32) -> SKILLINFO {
        let mut offset: usize = 0;
        SKILLINFO {
            skid: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            spcost: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            spcost_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            attack_range: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            attack_range_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            skill_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            skill_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            upgradable: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            upgradable_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.spcost).unwrap();
        self.spcost_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.attack_range).unwrap();
        self.attack_range_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.skill_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.skill_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.upgradable).unwrap();
        self.upgradable_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.spcost_raw.to_vec());
        wtr.append(&mut self.attack_range_raw.to_vec());
        wtr.append(&mut self.skill_name_raw.to_vec());
        wtr.append(&mut self.upgradable_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 37;
        base_len
    }
    pub fn set_skid(&mut self, value: i16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_spcost(&mut self, value: i16) {
        self.spcost = value;
    }
    pub fn set_spcost_raw(&mut self, value: [u8; 2]) {
        self.spcost_raw = value;
    }
    pub fn set_attack_range(&mut self, value: i16) {
        self.attack_range = value;
    }
    pub fn set_attack_range_raw(&mut self, value: [u8; 2]) {
        self.attack_range_raw = value;
    }
    pub fn set_skill_name(&mut self, value: [char; 24]) {
        self.skill_name = value;
    }
    pub fn set_skill_name_raw(&mut self, value: [u8; 24]) {
        self.skill_name_raw = value;
    }
    pub fn set_upgradable(&mut self, value: i8) {
        self.upgradable = value;
    }
    pub fn set_upgradable_raw(&mut self, value: [u8; 1]) {
        self.upgradable_raw = value;
    }
    pub fn new() -> SKILLINFO {
        SKILLINFO {
        raw: vec![],
        skid: 0,
        skid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 4],
        level: 0,
        level_raw: [0; 2],
        spcost: 0,
        spcost_raw: [0; 2],
        attack_range: 0,
        attack_range_raw: [0; 2],
        skill_name: [0 as char; 24],
        skill_name_raw: [0; 24],
        upgradable: 0,
        upgradable_raw: [0; 1],
        }
    }
}

impl Default for StoreItem {
    fn default() -> Self {

       Self::new()
    }
}

impl StoreItem {
    pub fn from(buffer: &[u8], packetver: u32) -> StoreItem {
        let mut offset: usize = 0;
        StoreItem {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.price_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn new() -> StoreItem {
        StoreItem {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        price: 0,
        price_raw: [0; 4],
        }
    }
}

impl Default for PurchaseItemFrommc {
    fn default() -> Self {

       Self::new()
    }
}

impl PurchaseItemFrommc {
    pub fn from(buffer: &[u8], packetver: u32) -> PurchaseItemFrommc {
        let mut offset: usize = 0;
        PurchaseItemFrommc {
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.price_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: u8) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: u8) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PurchaseItemFrommc {
        PurchaseItemFrommc {
        raw: vec![],
        price: 0,
        price_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        index: 0,
        index_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: 0,
        is_identified_raw: [0; 1],
        is_damaged: 0,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Default for CzPurchaseItemFrommc {
    fn default() -> Self {

       Self::new()
    }
}

impl CzPurchaseItemFrommc {
    pub fn from(buffer: &[u8], packetver: u32) -> CzPurchaseItemFrommc {
        let mut offset: usize = 0;
        CzPurchaseItemFrommc {
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 4;
        base_len
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> CzPurchaseItemFrommc {
        CzPurchaseItemFrommc {
        raw: vec![],
        count: 0,
        count_raw: [0; 2],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Default for PurchaseMyitem {
    fn default() -> Self {

       Self::new()
    }
}

impl PurchaseMyitem {
    pub fn from(buffer: &[u8], packetver: u32) -> PurchaseMyitem {
        let mut offset: usize = 0;
        PurchaseMyitem {
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.price_raw.to_vec());
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_is_identified(&mut self, value: u8) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: u8) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> PurchaseMyitem {
        PurchaseMyitem {
        raw: vec![],
        price: 0,
        price_raw: [0; 4],
        index: 0,
        index_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        itid: 0,
        itid_raw: [0; 2],
        is_identified: 0,
        is_identified_raw: [0; 1],
        is_damaged: 0,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Default for RelatedGuild {
    fn default() -> Self {

       Self::new()
    }
}

impl RelatedGuild {
    pub fn from(buffer: &[u8], packetver: u32) -> RelatedGuild {
        let mut offset: usize = 0;
        RelatedGuild {
            gdid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            relation: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            relation_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guild_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guild_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.relation).unwrap();
        self.relation_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guild_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guild_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.relation_raw.to_vec());
        wtr.append(&mut self.guild_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_gdid(&mut self, value: i32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_relation(&mut self, value: i32) {
        self.relation = value;
    }
    pub fn set_relation_raw(&mut self, value: [u8; 4]) {
        self.relation_raw = value;
    }
    pub fn set_guild_name(&mut self, value: [char; 24]) {
        self.guild_name = value;
    }
    pub fn set_guild_name_raw(&mut self, value: [u8; 24]) {
        self.guild_name_raw = value;
    }
    pub fn new() -> RelatedGuild {
        RelatedGuild {
        raw: vec![],
        gdid: 0,
        gdid_raw: [0; 4],
        relation: 0,
        relation_raw: [0; 4],
        guild_name: [0 as char; 24],
        guild_name_raw: [0; 24],
        }
    }
}

impl Default for GuildMembermgrInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl GuildMembermgrInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> GuildMembermgrInfo {
        let mut offset: usize = 0;
        GuildMembermgrInfo {
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            head_type: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_palette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_palette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sex: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            member_exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            member_exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            current_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            current_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gposition_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gposition_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            memo: {
                let field =  {
                let mut dst: [char; 50] = [0 as char; 50];
                for (index, byte) in buffer[offset..offset + 50].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            memo_raw: {
                let mut dst: [u8; 50] = [0u8; 50];
                dst.clone_from_slice(&buffer[offset..offset + 50]);
                offset += 50;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_type).unwrap();
        self.head_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_palette).unwrap();
        self.head_palette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.member_exp).unwrap();
        self.member_exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.current_state).unwrap();
        self.current_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gposition_id).unwrap();
        self.gposition_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.memo {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.memo_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.head_type_raw.to_vec());
        wtr.append(&mut self.head_palette_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.member_exp_raw.to_vec());
        wtr.append(&mut self.current_state_raw.to_vec());
        wtr.append(&mut self.gposition_id_raw.to_vec());
        wtr.append(&mut self.memo_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 104;
        base_len
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_head_type(&mut self, value: i16) {
        self.head_type = value;
    }
    pub fn set_head_type_raw(&mut self, value: [u8; 2]) {
        self.head_type_raw = value;
    }
    pub fn set_head_palette(&mut self, value: i16) {
        self.head_palette = value;
    }
    pub fn set_head_palette_raw(&mut self, value: [u8; 2]) {
        self.head_palette_raw = value;
    }
    pub fn set_sex(&mut self, value: i16) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 2]) {
        self.sex_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_member_exp(&mut self, value: i32) {
        self.member_exp = value;
    }
    pub fn set_member_exp_raw(&mut self, value: [u8; 4]) {
        self.member_exp_raw = value;
    }
    pub fn set_current_state(&mut self, value: i32) {
        self.current_state = value;
    }
    pub fn set_current_state_raw(&mut self, value: [u8; 4]) {
        self.current_state_raw = value;
    }
    pub fn set_gposition_id(&mut self, value: i32) {
        self.gposition_id = value;
    }
    pub fn set_gposition_id_raw(&mut self, value: [u8; 4]) {
        self.gposition_id_raw = value;
    }
    pub fn set_memo(&mut self, value: [char; 50]) {
        self.memo = value;
    }
    pub fn set_memo_raw(&mut self, value: [u8; 50]) {
        self.memo_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn new() -> GuildMembermgrInfo {
        GuildMembermgrInfo {
        raw: vec![],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        head_type: 0,
        head_type_raw: [0; 2],
        head_palette: 0,
        head_palette_raw: [0; 2],
        sex: 0,
        sex_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        member_exp: 0,
        member_exp_raw: [0; 4],
        current_state: 0,
        current_state_raw: [0; 4],
        gposition_id: 0,
        gposition_id_raw: [0; 4],
        memo: [0 as char; 50],
        memo_raw: [0; 50],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        }
    }
}

impl Default for MemberPositionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl MemberPositionInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> MemberPositionInfo {
        let mut offset: usize = 0;
        MemberPositionInfo {
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            position_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            position_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.position_id).unwrap();
        self.position_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.position_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_position_id(&mut self, value: i32) {
        self.position_id = value;
    }
    pub fn set_position_id_raw(&mut self, value: [u8; 4]) {
        self.position_id_raw = value;
    }
    pub fn new() -> MemberPositionInfo {
        MemberPositionInfo {
        raw: vec![],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        position_id: 0,
        position_id_raw: [0; 4],
        }
    }
}

impl Default for GuildMemberPositionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl GuildMemberPositionInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> GuildMemberPositionInfo {
        let mut offset: usize = 0;
        GuildMemberPositionInfo {
            position_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            position_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            right: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            right_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            ranking: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ranking_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pay_rate: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            pay_rate_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.position_id).unwrap();
        self.position_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.right).unwrap();
        self.right_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.ranking).unwrap();
        self.ranking_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.pay_rate).unwrap();
        self.pay_rate_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.position_id_raw.to_vec());
        wtr.append(&mut self.right_raw.to_vec());
        wtr.append(&mut self.ranking_raw.to_vec());
        wtr.append(&mut self.pay_rate_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_position_id(&mut self, value: i32) {
        self.position_id = value;
    }
    pub fn set_position_id_raw(&mut self, value: [u8; 4]) {
        self.position_id_raw = value;
    }
    pub fn set_right(&mut self, value: i32) {
        self.right = value;
    }
    pub fn set_right_raw(&mut self, value: [u8; 4]) {
        self.right_raw = value;
    }
    pub fn set_ranking(&mut self, value: i32) {
        self.ranking = value;
    }
    pub fn set_ranking_raw(&mut self, value: [u8; 4]) {
        self.ranking_raw = value;
    }
    pub fn set_pay_rate(&mut self, value: i32) {
        self.pay_rate = value;
    }
    pub fn set_pay_rate_raw(&mut self, value: [u8; 4]) {
        self.pay_rate_raw = value;
    }
    pub fn new() -> GuildMemberPositionInfo {
        GuildMemberPositionInfo {
        raw: vec![],
        position_id: 0,
        position_id_raw: [0; 4],
        right: 0,
        right_raw: [0; 4],
        ranking: 0,
        ranking_raw: [0; 4],
        pay_rate: 0,
        pay_rate_raw: [0; 4],
        }
    }
}

impl Default for GuildRegPositionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl GuildRegPositionInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> GuildRegPositionInfo {
        let mut offset: usize = 0;
        GuildRegPositionInfo {
            position_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            position_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            right: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            right_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            ranking: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ranking_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pay_rate: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            pay_rate_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pos_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            pos_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.position_id).unwrap();
        self.position_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.right).unwrap();
        self.right_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.ranking).unwrap();
        self.ranking_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.pay_rate).unwrap();
        self.pay_rate_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.pos_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.position_id_raw.to_vec());
        wtr.append(&mut self.right_raw.to_vec());
        wtr.append(&mut self.ranking_raw.to_vec());
        wtr.append(&mut self.pay_rate_raw.to_vec());
        wtr.append(&mut self.pos_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 40;
        base_len
    }
    pub fn set_position_id(&mut self, value: i32) {
        self.position_id = value;
    }
    pub fn set_position_id_raw(&mut self, value: [u8; 4]) {
        self.position_id_raw = value;
    }
    pub fn set_right(&mut self, value: i32) {
        self.right = value;
    }
    pub fn set_right_raw(&mut self, value: [u8; 4]) {
        self.right_raw = value;
    }
    pub fn set_ranking(&mut self, value: i32) {
        self.ranking = value;
    }
    pub fn set_ranking_raw(&mut self, value: [u8; 4]) {
        self.ranking_raw = value;
    }
    pub fn set_pay_rate(&mut self, value: i32) {
        self.pay_rate = value;
    }
    pub fn set_pay_rate_raw(&mut self, value: [u8; 4]) {
        self.pay_rate_raw = value;
    }
    pub fn set_pos_name(&mut self, value: [char; 24]) {
        self.pos_name = value;
    }
    pub fn set_pos_name_raw(&mut self, value: [u8; 24]) {
        self.pos_name_raw = value;
    }
    pub fn new() -> GuildRegPositionInfo {
        GuildRegPositionInfo {
        raw: vec![],
        position_id: 0,
        position_id_raw: [0; 4],
        right: 0,
        right_raw: [0; 4],
        ranking: 0,
        ranking_raw: [0; 4],
        pay_rate: 0,
        pay_rate_raw: [0; 4],
        pos_name: [0 as char; 24],
        pos_name_raw: [0; 24],
        }
    }
}

impl Default for GuildBanInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl GuildBanInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> GuildBanInfo {
        let mut offset: usize = 0;
        GuildBanInfo {
            charname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            charname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            account: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            account_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            reason: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            reason_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        for item in self.charname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.charname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.account {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.account_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.reason {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.reason_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.charname_raw.to_vec());
        wtr.append(&mut self.account_raw.to_vec());
        wtr.append(&mut self.reason_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 88;
        base_len
    }
    pub fn set_charname(&mut self, value: [char; 24]) {
        self.charname = value;
    }
    pub fn set_charname_raw(&mut self, value: [u8; 24]) {
        self.charname_raw = value;
    }
    pub fn set_account(&mut self, value: [char; 24]) {
        self.account = value;
    }
    pub fn set_account_raw(&mut self, value: [u8; 24]) {
        self.account_raw = value;
    }
    pub fn set_reason(&mut self, value: [char; 40]) {
        self.reason = value;
    }
    pub fn set_reason_raw(&mut self, value: [u8; 40]) {
        self.reason_raw = value;
    }
    pub fn new() -> GuildBanInfo {
        GuildBanInfo {
        raw: vec![],
        charname: [0 as char; 24],
        charname_raw: [0; 24],
        account: [0 as char; 24],
        account_raw: [0; 24],
        reason: [0 as char; 40],
        reason_raw: [0; 40],
        }
    }
}

impl Default for OtherGuildInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl OtherGuildInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> OtherGuildInfo {
        let mut offset: usize = 0;
        OtherGuildInfo {
            guildname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guildname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            guild_level: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guild_level_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guild_member_size: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guild_member_size_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guild_ranking: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            guild_ranking_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        for item in self.guildname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guildname_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.guild_level).unwrap();
        self.guild_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.guild_member_size).unwrap();
        self.guild_member_size_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.guild_ranking).unwrap();
        self.guild_ranking_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.guildname_raw.to_vec());
        wtr.append(&mut self.guild_level_raw.to_vec());
        wtr.append(&mut self.guild_member_size_raw.to_vec());
        wtr.append(&mut self.guild_ranking_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 36;
        base_len
    }
    pub fn set_guildname(&mut self, value: [char; 24]) {
        self.guildname = value;
    }
    pub fn set_guildname_raw(&mut self, value: [u8; 24]) {
        self.guildname_raw = value;
    }
    pub fn set_guild_level(&mut self, value: i32) {
        self.guild_level = value;
    }
    pub fn set_guild_level_raw(&mut self, value: [u8; 4]) {
        self.guild_level_raw = value;
    }
    pub fn set_guild_member_size(&mut self, value: i32) {
        self.guild_member_size = value;
    }
    pub fn set_guild_member_size_raw(&mut self, value: [u8; 4]) {
        self.guild_member_size_raw = value;
    }
    pub fn set_guild_ranking(&mut self, value: i32) {
        self.guild_ranking = value;
    }
    pub fn set_guild_ranking_raw(&mut self, value: [u8; 4]) {
        self.guild_ranking_raw = value;
    }
    pub fn new() -> OtherGuildInfo {
        OtherGuildInfo {
        raw: vec![],
        guildname: [0 as char; 24],
        guildname_raw: [0; 24],
        guild_level: 0,
        guild_level_raw: [0; 4],
        guild_member_size: 0,
        guild_member_size_raw: [0; 4],
        guild_ranking: 0,
        guild_ranking_raw: [0; 4],
        }
    }
}

impl Default for MemberPositionIdNameInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl MemberPositionIdNameInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> MemberPositionIdNameInfo {
        let mut offset: usize = 0;
        MemberPositionIdNameInfo {
            position_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            position_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            pos_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            pos_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.position_id).unwrap();
        self.position_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.pos_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.pos_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.position_id_raw.to_vec());
        wtr.append(&mut self.pos_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_position_id(&mut self, value: i32) {
        self.position_id = value;
    }
    pub fn set_position_id_raw(&mut self, value: [u8; 4]) {
        self.position_id_raw = value;
    }
    pub fn set_pos_name(&mut self, value: [char; 24]) {
        self.pos_name = value;
    }
    pub fn set_pos_name_raw(&mut self, value: [u8; 24]) {
        self.pos_name_raw = value;
    }
    pub fn new() -> MemberPositionIdNameInfo {
        MemberPositionIdNameInfo {
        raw: vec![],
        position_id: 0,
        position_id_raw: [0; 4],
        pos_name: [0 as char; 24],
        pos_name_raw: [0; 24],
        }
    }
}

impl Default for GuildMemberInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl GuildMemberInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> GuildMemberInfo {
        let mut offset: usize = 0;
        GuildMemberInfo {
            aid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            head: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            head_palette: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            head_palette_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            sex: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            sex_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            job_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            contribution_exp: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            contribution_exp_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            current_state: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            current_state_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            position_id: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            position_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            intro: {
                let field =  {
                let mut dst: [char; 50] = [0 as char; 50];
                for (index, byte) in buffer[offset..offset + 50].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            intro_raw: {
                let mut dst: [u8; 50] = [0u8; 50];
                dst.clone_from_slice(&buffer[offset..offset + 50]);
                offset += 50;
                dst
            },
            charname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            charname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head).unwrap();
        self.head_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.head_palette).unwrap();
        self.head_palette_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.sex).unwrap();
        self.sex_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.job).unwrap();
        self.job_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.contribution_exp).unwrap();
        self.contribution_exp_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.current_state).unwrap();
        self.current_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.position_id).unwrap();
        self.position_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.intro {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.intro_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.charname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.charname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.head_raw.to_vec());
        wtr.append(&mut self.head_palette_raw.to_vec());
        wtr.append(&mut self.sex_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.contribution_exp_raw.to_vec());
        wtr.append(&mut self.current_state_raw.to_vec());
        wtr.append(&mut self.position_id_raw.to_vec());
        wtr.append(&mut self.intro_raw.to_vec());
        wtr.append(&mut self.charname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 104;
        base_len
    }
    pub fn set_aid(&mut self, value: i32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: i32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_head(&mut self, value: i16) {
        self.head = value;
    }
    pub fn set_head_raw(&mut self, value: [u8; 2]) {
        self.head_raw = value;
    }
    pub fn set_head_palette(&mut self, value: i16) {
        self.head_palette = value;
    }
    pub fn set_head_palette_raw(&mut self, value: [u8; 2]) {
        self.head_palette_raw = value;
    }
    pub fn set_sex(&mut self, value: i16) {
        self.sex = value;
    }
    pub fn set_sex_raw(&mut self, value: [u8; 2]) {
        self.sex_raw = value;
    }
    pub fn set_job(&mut self, value: i16) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 2]) {
        self.job_raw = value;
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_contribution_exp(&mut self, value: i32) {
        self.contribution_exp = value;
    }
    pub fn set_contribution_exp_raw(&mut self, value: [u8; 4]) {
        self.contribution_exp_raw = value;
    }
    pub fn set_current_state(&mut self, value: i32) {
        self.current_state = value;
    }
    pub fn set_current_state_raw(&mut self, value: [u8; 4]) {
        self.current_state_raw = value;
    }
    pub fn set_position_id(&mut self, value: i32) {
        self.position_id = value;
    }
    pub fn set_position_id_raw(&mut self, value: [u8; 4]) {
        self.position_id_raw = value;
    }
    pub fn set_intro(&mut self, value: [char; 50]) {
        self.intro = value;
    }
    pub fn set_intro_raw(&mut self, value: [u8; 50]) {
        self.intro_raw = value;
    }
    pub fn set_charname(&mut self, value: [char; 24]) {
        self.charname = value;
    }
    pub fn set_charname_raw(&mut self, value: [u8; 24]) {
        self.charname_raw = value;
    }
    pub fn new() -> GuildMemberInfo {
        GuildMemberInfo {
        raw: vec![],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        head: 0,
        head_raw: [0; 2],
        head_palette: 0,
        head_palette_raw: [0; 2],
        sex: 0,
        sex_raw: [0; 2],
        job: 0,
        job_raw: [0; 2],
        level: 0,
        level_raw: [0; 2],
        contribution_exp: 0,
        contribution_exp_raw: [0; 4],
        current_state: 0,
        current_state_raw: [0; 4],
        position_id: 0,
        position_id_raw: [0; 4],
        intro: [0 as char; 50],
        intro_raw: [0; 50],
        charname: [0 as char; 24],
        charname_raw: [0; 24],
        }
    }
}

impl Default for RelatedGuildInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl RelatedGuildInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> RelatedGuildInfo {
        let mut offset: usize = 0;
        RelatedGuildInfo {
            relation: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            relation_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gdid: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gdid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            guildname: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            guildname_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.relation).unwrap();
        self.relation_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.gdid).unwrap();
        self.gdid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.guildname {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.guildname_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.relation_raw.to_vec());
        wtr.append(&mut self.gdid_raw.to_vec());
        wtr.append(&mut self.guildname_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_relation(&mut self, value: i32) {
        self.relation = value;
    }
    pub fn set_relation_raw(&mut self, value: [u8; 4]) {
        self.relation_raw = value;
    }
    pub fn set_gdid(&mut self, value: i32) {
        self.gdid = value;
    }
    pub fn set_gdid_raw(&mut self, value: [u8; 4]) {
        self.gdid_raw = value;
    }
    pub fn set_guildname(&mut self, value: [char; 24]) {
        self.guildname = value;
    }
    pub fn set_guildname_raw(&mut self, value: [u8; 24]) {
        self.guildname_raw = value;
    }
    pub fn new() -> RelatedGuildInfo {
        RelatedGuildInfo {
        raw: vec![],
        relation: 0,
        relation_raw: [0; 4],
        gdid: 0,
        gdid_raw: [0; 4],
        guildname: [0 as char; 24],
        guildname_raw: [0; 24],
        }
    }
}

impl Default for MonsterInfoElement {
    fn default() -> Self {

       Self::new()
    }
}

impl MonsterInfoElement {
    pub fn from(buffer: &[u8], packetver: u32) -> MonsterInfoElement {
        let mut offset: usize = 0;
        MonsterInfoElement {
            water: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            water_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            earth: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            earth_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            fire: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            fire_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            wind: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            wind_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            poison: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            poison_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            saint: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            saint_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            dark: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            dark_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            mental: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            mental_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            undead: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            undead_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u8(self.water).unwrap();
        self.water_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.earth).unwrap();
        self.earth_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.fire).unwrap();
        self.fire_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.wind).unwrap();
        self.wind_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.poison).unwrap();
        self.poison_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.saint).unwrap();
        self.saint_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.dark).unwrap();
        self.dark_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.mental).unwrap();
        self.mental_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.undead).unwrap();
        self.undead_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.water_raw.to_vec());
        wtr.append(&mut self.earth_raw.to_vec());
        wtr.append(&mut self.fire_raw.to_vec());
        wtr.append(&mut self.wind_raw.to_vec());
        wtr.append(&mut self.poison_raw.to_vec());
        wtr.append(&mut self.saint_raw.to_vec());
        wtr.append(&mut self.dark_raw.to_vec());
        wtr.append(&mut self.mental_raw.to_vec());
        wtr.append(&mut self.undead_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_water(&mut self, value: u8) {
        self.water = value;
    }
    pub fn set_water_raw(&mut self, value: [u8; 1]) {
        self.water_raw = value;
    }
    pub fn set_earth(&mut self, value: u8) {
        self.earth = value;
    }
    pub fn set_earth_raw(&mut self, value: [u8; 1]) {
        self.earth_raw = value;
    }
    pub fn set_fire(&mut self, value: u8) {
        self.fire = value;
    }
    pub fn set_fire_raw(&mut self, value: [u8; 1]) {
        self.fire_raw = value;
    }
    pub fn set_wind(&mut self, value: u8) {
        self.wind = value;
    }
    pub fn set_wind_raw(&mut self, value: [u8; 1]) {
        self.wind_raw = value;
    }
    pub fn set_poison(&mut self, value: u8) {
        self.poison = value;
    }
    pub fn set_poison_raw(&mut self, value: [u8; 1]) {
        self.poison_raw = value;
    }
    pub fn set_saint(&mut self, value: u8) {
        self.saint = value;
    }
    pub fn set_saint_raw(&mut self, value: [u8; 1]) {
        self.saint_raw = value;
    }
    pub fn set_dark(&mut self, value: u8) {
        self.dark = value;
    }
    pub fn set_dark_raw(&mut self, value: [u8; 1]) {
        self.dark_raw = value;
    }
    pub fn set_mental(&mut self, value: u8) {
        self.mental = value;
    }
    pub fn set_mental_raw(&mut self, value: [u8; 1]) {
        self.mental_raw = value;
    }
    pub fn set_undead(&mut self, value: u8) {
        self.undead = value;
    }
    pub fn set_undead_raw(&mut self, value: [u8; 1]) {
        self.undead_raw = value;
    }
    pub fn new() -> MonsterInfoElement {
        MonsterInfoElement {
        raw: vec![],
        water: 0,
        water_raw: [0; 1],
        earth: 0,
        earth_raw: [0; 1],
        fire: 0,
        fire_raw: [0; 1],
        wind: 0,
        wind_raw: [0; 1],
        poison: 0,
        poison_raw: [0; 1],
        saint: 0,
        saint_raw: [0; 1],
        dark: 0,
        dark_raw: [0; 1],
        mental: 0,
        mental_raw: [0; 1],
        undead: 0,
        undead_raw: [0; 1],
        }
    }
}

impl Default for MakableitemInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl MakableitemInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> MakableitemInfo {
        let mut offset: usize = 0;
        MakableitemInfo {
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            material_id: {
                let field =  {
                let mut dst: [u16; 3] = [0_u16; 3];
                for (index, byte) in buffer[offset..offset + 3].iter().enumerate() {
                    dst[index] = *byte as u16;
                }
                dst
            };
                field
            },
            material_id_raw: {
                let mut dst: [u8; 3] = [0u8; 3];
                dst.clone_from_slice(&buffer[offset..offset + 3]);
                offset += 3;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.material_id {
            wtr.write_u16::<LittleEndian>(item).unwrap();
        }
        self.material_id_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.material_id_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_material_id(&mut self, value: [u16; 3]) {
        self.material_id = value;
    }
    pub fn set_material_id_raw(&mut self, value: [u8; 3]) {
        self.material_id_raw = value;
    }
    pub fn new() -> MakableitemInfo {
        MakableitemInfo {
        raw: vec![],
        itid: 0,
        itid_raw: [0; 2],
        material_id: [0; 3],
        material_id_raw: [0; 3],
        }
    }
}

impl Default for PeteggitemInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PeteggitemInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> PeteggitemInfo {
        let mut offset: usize = 0;
        PeteggitemInfo {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> PeteggitemInfo {
        PeteggitemInfo {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Default for ArrowitemInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl ArrowitemInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> ArrowitemInfo {
        let mut offset: usize = 0;
        ArrowitemInfo {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 2;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn new() -> ArrowitemInfo {
        ArrowitemInfo {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        }
    }
}

impl Default for NormalitemExtrainfo2 {
    fn default() -> Self {

       Self::new()
    }
}

impl NormalitemExtrainfo2 {
    pub fn from(buffer: &[u8], packetver: u32) -> NormalitemExtrainfo2 {
        let mut offset: usize = 0;
        NormalitemExtrainfo2 {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_state).unwrap();
        self.wear_state_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.wear_state_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 18;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_wear_state(&mut self, value: u16) {
        self.wear_state = value;
    }
    pub fn set_wear_state_raw(&mut self, value: [u8; 2]) {
        self.wear_state_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> NormalitemExtrainfo2 {
        NormalitemExtrainfo2 {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        count: 0,
        count_raw: [0; 2],
        wear_state: 0,
        wear_state_raw: [0; 2],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Default for RepairitemInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl RepairitemInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> RepairitemInfo {
        let mut offset: usize = 0;
        RepairitemInfo {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();


        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 13;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn new() -> RepairitemInfo {
        RepairitemInfo {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        }
    }
}

impl Default for FRIEND {
    fn default() -> Self {

       Self::new()
    }
}

impl FRIEND {
    pub fn from(buffer: &[u8], packetver: u32) -> FRIEND {
        let mut offset: usize = 0;
        FRIEND {
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 32;
        base_len
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_name(&mut self, value: [char; 24]) {
        self.name = value;
    }
    pub fn set_name_raw(&mut self, value: [u8; 24]) {
        self.name_raw = value;
    }
    pub fn new() -> FRIEND {
        FRIEND {
        raw: vec![],
        aid: 0,
        aid_raw: [0; 4],
        gid: 0,
        gid_raw: [0; 4],
        name: [0 as char; 24],
        name_raw: [0; 24],
        }
    }
}

impl Default for TagCharacterBlockInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl TagCharacterBlockInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> TagCharacterBlockInfo {
        let mut offset: usize = 0;
        TagCharacterBlockInfo {
            gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            sz_expire_date: {
                let field =  {
                let mut dst: [char; 20] = [0 as char; 20];
                for (index, byte) in buffer[offset..offset + 20].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            sz_expire_date_raw: {
                let mut dst: [u8; 20] = [0u8; 20];
                dst.clone_from_slice(&buffer[offset..offset + 20]);
                offset += 20;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.gid).unwrap();
        self.gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.sz_expire_date {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.sz_expire_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.gid_raw.to_vec());
        wtr.append(&mut self.sz_expire_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 24;
        base_len
    }
    pub fn set_gid(&mut self, value: u32) {
        self.gid = value;
    }
    pub fn set_gid_raw(&mut self, value: [u8; 4]) {
        self.gid_raw = value;
    }
    pub fn set_sz_expire_date(&mut self, value: [char; 20]) {
        self.sz_expire_date = value;
    }
    pub fn set_sz_expire_date_raw(&mut self, value: [u8; 20]) {
        self.sz_expire_date_raw = value;
    }
    pub fn new() -> TagCharacterBlockInfo {
        TagCharacterBlockInfo {
        raw: vec![],
        gid: 0,
        gid_raw: [0; 4],
        sz_expire_date: [0 as char; 20],
        sz_expire_date_raw: [0; 20],
        }
    }
}

impl Default for PVPINFO {
    fn default() -> Self {

       Self::new()
    }
}

impl PVPINFO {
    pub fn from(buffer: &[u8], packetver: u32) -> PVPINFO {
        let mut offset: usize = 0;
        PVPINFO {
            win_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            win_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            lose_point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            lose_point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            point: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            point_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.win_point).unwrap();
        self.win_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.lose_point).unwrap();
        self.lose_point_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.point).unwrap();
        self.point_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.win_point_raw.to_vec());
        wtr.append(&mut self.lose_point_raw.to_vec());
        wtr.append(&mut self.point_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_win_point(&mut self, value: i32) {
        self.win_point = value;
    }
    pub fn set_win_point_raw(&mut self, value: [u8; 4]) {
        self.win_point_raw = value;
    }
    pub fn set_lose_point(&mut self, value: i32) {
        self.lose_point = value;
    }
    pub fn set_lose_point_raw(&mut self, value: [u8; 4]) {
        self.lose_point_raw = value;
    }
    pub fn set_point(&mut self, value: i32) {
        self.point = value;
    }
    pub fn set_point_raw(&mut self, value: [u8; 4]) {
        self.point_raw = value;
    }
    pub fn new() -> PVPINFO {
        PVPINFO {
        raw: vec![],
        win_point: 0,
        win_point_raw: [0; 4],
        lose_point: 0,
        lose_point_raw: [0; 4],
        point: 0,
        point_raw: [0; 4],
        }
    }
}

impl Default for Filetime {
    fn default() -> Self {

       Self::new()
    }
}

impl Filetime {
    pub fn from(buffer: &[u8], packetver: u32) -> Filetime {
        let mut offset: usize = 0;
        Filetime {
            dw_low_date_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_low_date_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_high_date_time: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_high_date_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_low_date_time).unwrap();
        self.dw_low_date_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_high_date_time).unwrap();
        self.dw_high_date_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.dw_low_date_time_raw.to_vec());
        wtr.append(&mut self.dw_high_date_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_dw_low_date_time(&mut self, value: u32) {
        self.dw_low_date_time = value;
    }
    pub fn set_dw_low_date_time_raw(&mut self, value: [u8; 4]) {
        self.dw_low_date_time_raw = value;
    }
    pub fn set_dw_high_date_time(&mut self, value: u32) {
        self.dw_high_date_time = value;
    }
    pub fn set_dw_high_date_time_raw(&mut self, value: [u8; 4]) {
        self.dw_high_date_time_raw = value;
    }
    pub fn new() -> Filetime {
        Filetime {
        raw: vec![],
        dw_low_date_time: 0,
        dw_low_date_time_raw: [0; 4],
        dw_high_date_time: 0,
        dw_high_date_time_raw: [0; 4],
        }
    }
}

impl Default for MailList {
    fn default() -> Self {

       Self::new()
    }
}

impl MailList {
    pub fn from(buffer: &[u8], packetver: u32) -> MailList {
        let mut offset: usize = 0;
        MailList {
            mail_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mail_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            header: {
                let field =  {
                let mut dst: [char; 40] = [0 as char; 40];
                for (index, byte) in buffer[offset..offset + 40].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            header_raw: {
                let mut dst: [u8; 40] = [0u8; 40];
                dst.clone_from_slice(&buffer[offset..offset + 40]);
                offset += 40;
                dst
            },
            is_open: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            is_open_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            from_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            from_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            delete_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delete_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.mail_id).unwrap();
        self.mail_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.header {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.header_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i8(self.is_open).unwrap();
        self.is_open_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.from_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.from_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.delete_time).unwrap();
        self.delete_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.mail_id_raw.to_vec());
        wtr.append(&mut self.header_raw.to_vec());
        wtr.append(&mut self.is_open_raw.to_vec());
        wtr.append(&mut self.from_name_raw.to_vec());
        wtr.append(&mut self.delete_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 73;
        base_len
    }
    pub fn set_mail_id(&mut self, value: u32) {
        self.mail_id = value;
    }
    pub fn set_mail_id_raw(&mut self, value: [u8; 4]) {
        self.mail_id_raw = value;
    }
    pub fn set_header(&mut self, value: [char; 40]) {
        self.header = value;
    }
    pub fn set_header_raw(&mut self, value: [u8; 40]) {
        self.header_raw = value;
    }
    pub fn set_is_open(&mut self, value: i8) {
        self.is_open = value;
    }
    pub fn set_is_open_raw(&mut self, value: [u8; 1]) {
        self.is_open_raw = value;
    }
    pub fn set_from_name(&mut self, value: [char; 24]) {
        self.from_name = value;
    }
    pub fn set_from_name_raw(&mut self, value: [u8; 24]) {
        self.from_name_raw = value;
    }
    pub fn set_delete_time(&mut self, value: i32) {
        self.delete_time = value;
    }
    pub fn set_delete_time_raw(&mut self, value: [u8; 4]) {
        self.delete_time_raw = value;
    }
    pub fn new() -> MailList {
        MailList {
        raw: vec![],
        mail_id: 0,
        mail_id_raw: [0; 4],
        header: [0 as char; 40],
        header_raw: [0; 40],
        is_open: 0,
        is_open_raw: [0; 1],
        from_name: [0 as char; 24],
        from_name_raw: [0; 24],
        delete_time: 0,
        delete_time_raw: [0; 4],
        }
    }
}

impl Default for AuctionItemSearchInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl AuctionItemSearchInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> AuctionItemSearchInfo {
        let mut offset: usize = 0;
        AuctionItemSearchInfo {
            auction_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            auction_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            seller_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            seller_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            now_price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            now_price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            max_price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            buyer_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            buyer_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            delete_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delete_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.auction_id).unwrap();
        self.auction_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.seller_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.seller_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.now_price).unwrap();
        self.now_price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.max_price).unwrap();
        self.max_price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.buyer_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.buyer_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.delete_time).unwrap();
        self.delete_time_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.auction_id_raw.to_vec());
        wtr.append(&mut self.seller_name_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.now_price_raw.to_vec());
        wtr.append(&mut self.max_price_raw.to_vec());
        wtr.append(&mut self.buyer_name_raw.to_vec());
        wtr.append(&mut self.delete_time_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 83;
        base_len
    }
    pub fn set_auction_id(&mut self, value: u32) {
        self.auction_id = value;
    }
    pub fn set_auction_id_raw(&mut self, value: [u8; 4]) {
        self.auction_id_raw = value;
    }
    pub fn set_seller_name(&mut self, value: [char; 24]) {
        self.seller_name = value;
    }
    pub fn set_seller_name_raw(&mut self, value: [u8; 24]) {
        self.seller_name_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: i32) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 4]) {
        self.atype_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_now_price(&mut self, value: i32) {
        self.now_price = value;
    }
    pub fn set_now_price_raw(&mut self, value: [u8; 4]) {
        self.now_price_raw = value;
    }
    pub fn set_max_price(&mut self, value: i32) {
        self.max_price = value;
    }
    pub fn set_max_price_raw(&mut self, value: [u8; 4]) {
        self.max_price_raw = value;
    }
    pub fn set_buyer_name(&mut self, value: [char; 24]) {
        self.buyer_name = value;
    }
    pub fn set_buyer_name_raw(&mut self, value: [u8; 24]) {
        self.buyer_name_raw = value;
    }
    pub fn set_delete_time(&mut self, value: i32) {
        self.delete_time = value;
    }
    pub fn set_delete_time_raw(&mut self, value: [u8; 4]) {
        self.delete_time_raw = value;
    }
    pub fn new() -> AuctionItemSearchInfo {
        AuctionItemSearchInfo {
        raw: vec![],
        auction_id: 0,
        auction_id_raw: [0; 4],
        seller_name: [0 as char; 24],
        seller_name_raw: [0; 24],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        is_identified: false,
        is_identified_raw: [0; 1],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        now_price: 0,
        now_price_raw: [0; 4],
        max_price: 0,
        max_price_raw: [0; 4],
        buyer_name: [0 as char; 24],
        buyer_name_raw: [0; 24],
        delete_time: 0,
        delete_time_raw: [0; 4],
        }
    }
}

impl Default for PacketMobHunting {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketMobHunting {
    pub fn from(buffer: &[u8], packetver: u32) -> PacketMobHunting {
        let mut offset: usize = 0;
        PacketMobHunting {
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            mob_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mob_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            max_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            max_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.mob_gid).unwrap();
        self.mob_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.max_count).unwrap();
        self.max_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.quest_id_raw.to_vec());
        wtr.append(&mut self.mob_gid_raw.to_vec());
        wtr.append(&mut self.max_count_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 12;
        base_len
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn set_mob_gid(&mut self, value: u32) {
        self.mob_gid = value;
    }
    pub fn set_mob_gid_raw(&mut self, value: [u8; 4]) {
        self.mob_gid_raw = value;
    }
    pub fn set_max_count(&mut self, value: i16) {
        self.max_count = value;
    }
    pub fn set_max_count_raw(&mut self, value: [u8; 2]) {
        self.max_count_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> PacketMobHunting {
        PacketMobHunting {
        raw: vec![],
        quest_id: 0,
        quest_id_raw: [0; 4],
        mob_gid: 0,
        mob_gid_raw: [0; 4],
        max_count: 0,
        max_count_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Default for EquipmentitemExtrainfo2 {
    fn default() -> Self {

       Self::new()
    }
}

impl EquipmentitemExtrainfo2 {
    pub fn from(buffer: &[u8], packetver: u32) -> EquipmentitemExtrainfo2 {
        let mut offset: usize = 0;
        EquipmentitemExtrainfo2 {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            hire_expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hire_expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_state).unwrap();
        self.wear_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hire_expire_date).unwrap();
        self.hire_expire_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.wear_state_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.hire_expire_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 24;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_wear_state(&mut self, value: u16) {
        self.wear_state = value;
    }
    pub fn set_wear_state_raw(&mut self, value: [u8; 2]) {
        self.wear_state_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_hire_expire_date(&mut self, value: i32) {
        self.hire_expire_date = value;
    }
    pub fn set_hire_expire_date_raw(&mut self, value: [u8; 4]) {
        self.hire_expire_date_raw = value;
    }
    pub fn new() -> EquipmentitemExtrainfo2 {
        EquipmentitemExtrainfo2 {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        location: 0,
        location_raw: [0; 2],
        wear_state: 0,
        wear_state_raw: [0; 2],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        hire_expire_date: 0,
        hire_expire_date_raw: [0; 4],
        }
    }
}

impl Default for PggLingoKeyTemp {
    fn default() -> Self {

       Self::new()
    }
}

impl PggLingoKeyTemp {
    pub fn from(buffer: &[u8], packetver: u32) -> PggLingoKeyTemp {
        let mut offset: usize = 0;
        PggLingoKeyTemp {
            dw_alg_num: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_alg_num_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_alg_key1: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_alg_key1_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_alg_key2: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_alg_key2_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            dw_seed: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_seed_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_alg_num).unwrap();
        self.dw_alg_num_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_alg_key1).unwrap();
        self.dw_alg_key1_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_alg_key2).unwrap();
        self.dw_alg_key2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_seed).unwrap();
        self.dw_seed_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.dw_alg_num_raw.to_vec());
        wtr.append(&mut self.dw_alg_key1_raw.to_vec());
        wtr.append(&mut self.dw_alg_key2_raw.to_vec());
        wtr.append(&mut self.dw_seed_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 16;
        base_len
    }
    pub fn set_dw_alg_num(&mut self, value: u32) {
        self.dw_alg_num = value;
    }
    pub fn set_dw_alg_num_raw(&mut self, value: [u8; 4]) {
        self.dw_alg_num_raw = value;
    }
    pub fn set_dw_alg_key1(&mut self, value: u32) {
        self.dw_alg_key1 = value;
    }
    pub fn set_dw_alg_key1_raw(&mut self, value: [u8; 4]) {
        self.dw_alg_key1_raw = value;
    }
    pub fn set_dw_alg_key2(&mut self, value: u32) {
        self.dw_alg_key2 = value;
    }
    pub fn set_dw_alg_key2_raw(&mut self, value: [u8; 4]) {
        self.dw_alg_key2_raw = value;
    }
    pub fn set_dw_seed(&mut self, value: u32) {
        self.dw_seed = value;
    }
    pub fn set_dw_seed_raw(&mut self, value: [u8; 4]) {
        self.dw_seed_raw = value;
    }
    pub fn new() -> PggLingoKeyTemp {
        PggLingoKeyTemp {
        raw: vec![],
        dw_alg_num: 0,
        dw_alg_num_raw: [0; 4],
        dw_alg_key1: 0,
        dw_alg_key1_raw: [0; 4],
        dw_alg_key2: 0,
        dw_alg_key2_raw: [0; 4],
        dw_seed: 0,
        dw_seed_raw: [0; 4],
        }
    }
}

impl Default for PacketZcQuestInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcQuestInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcQuestInfo {
        let mut offset: usize = 0;
        PacketZcQuestInfo {
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            active: {
                let field = buffer[offset] == 1;
                field
            },
            active_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.active as u8).unwrap();
        self.active_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.quest_id_raw.to_vec());
        wtr.append(&mut self.active_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn set_active(&mut self, value: bool) {
        self.active = value;
    }
    pub fn set_active_raw(&mut self, value: [u8; 1]) {
        self.active_raw = value;
    }
    pub fn new() -> PacketZcQuestInfo {
        PacketZcQuestInfo {
        raw: vec![],
        quest_id: 0,
        quest_id_raw: [0; 4],
        active: false,
        active_raw: [0; 1],
        }
    }
}

impl Default for PacketZcMissionHunt {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcMissionHunt {
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcMissionHunt {
        let mut offset: usize = 0;
        PacketZcMissionHunt {
            mob_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            mob_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            hunt_count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            hunt_count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            mob_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            mob_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.mob_gid).unwrap();
        self.mob_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.hunt_count).unwrap();
        self.hunt_count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.mob_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.mob_name_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.mob_gid_raw.to_vec());
        wtr.append(&mut self.hunt_count_raw.to_vec());
        wtr.append(&mut self.mob_name_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 30;
        base_len
    }
    pub fn set_mob_gid(&mut self, value: u32) {
        self.mob_gid = value;
    }
    pub fn set_mob_gid_raw(&mut self, value: [u8; 4]) {
        self.mob_gid_raw = value;
    }
    pub fn set_hunt_count(&mut self, value: i16) {
        self.hunt_count = value;
    }
    pub fn set_hunt_count_raw(&mut self, value: [u8; 2]) {
        self.hunt_count_raw = value;
    }
    pub fn set_mob_name(&mut self, value: [char; 24]) {
        self.mob_name = value;
    }
    pub fn set_mob_name_raw(&mut self, value: [u8; 24]) {
        self.mob_name_raw = value;
    }
    pub fn new() -> PacketZcMissionHunt {
        PacketZcMissionHunt {
        raw: vec![],
        mob_gid: 0,
        mob_gid_raw: [0; 4],
        hunt_count: 0,
        hunt_count_raw: [0; 2],
        mob_name: [0 as char; 24],
        mob_name_raw: [0; 24],
        }
    }
}

impl Default for PacketZcQuestMissionInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PacketZcQuestMissionInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> PacketZcQuestMissionInfo {
        let mut offset: usize = 0;
        let vec_type_len = PacketZcMissionHunt::base_len(packetver);
        let iter_count = (&buffer.len() - 14) / vec_type_len;
        let mut vec_field: Vec<PacketZcMissionHunt> = Vec::new();
        let mut i = 1;
        while i <= iter_count {
            let start_pos = 14 + (vec_type_len * (i - 1));
            let end_pos = 14 + vec_type_len * i;
            vec_field.push(PacketZcMissionHunt::from(&buffer[start_pos..end_pos], packetver));
            i += 1;
        }
        PacketZcQuestMissionInfo {
            quest_id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            quest_svr_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_svr_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            quest_end_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            quest_end_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            hunt: {
                let field = vec_field.clone();
                field
            },
            hunt_raw: {
                vec_field.iter().map(|item| {
                  offset += item.raw.len();
                  item.raw.clone()
                }).collect::<Vec<Vec<u8>>>()
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.quest_id).unwrap();
        self.quest_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.quest_svr_time).unwrap();
        self.quest_svr_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.quest_end_time).unwrap();
        self.quest_end_time_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        self.hunt_raw = {
            self.hunt.iter_mut().for_each(|item| item.fill_raw_with_packetver(packetver));
            self.hunt.iter().map(|item| item.raw.clone()).collect()
      };


        wtr = vec![];
        wtr.append(&mut self.quest_id_raw.to_vec());
        wtr.append(&mut self.quest_svr_time_raw.to_vec());
        wtr.append(&mut self.quest_end_time_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.hunt.iter_mut().for_each(|item| wtr.append(&mut item.raw));
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 14;
        base_len
    }
    pub fn set_quest_id(&mut self, value: u32) {
        self.quest_id = value;
    }
    pub fn set_quest_id_raw(&mut self, value: [u8; 4]) {
        self.quest_id_raw = value;
    }
    pub fn set_quest_svr_time(&mut self, value: i32) {
        self.quest_svr_time = value;
    }
    pub fn set_quest_svr_time_raw(&mut self, value: [u8; 4]) {
        self.quest_svr_time_raw = value;
    }
    pub fn set_quest_end_time(&mut self, value: i32) {
        self.quest_end_time = value;
    }
    pub fn set_quest_end_time_raw(&mut self, value: [u8; 4]) {
        self.quest_end_time_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_hunt(&mut self, value: Vec<PacketZcMissionHunt>) {
        self.hunt = value;
    }
    pub fn set_hunt_raw(&mut self, value: Vec<Vec<u8>>) {
        self.hunt_raw = value;
    }
    pub fn new() -> PacketZcQuestMissionInfo {
        PacketZcQuestMissionInfo {
        raw: vec![],
        quest_id: 0,
        quest_id_raw: [0; 4],
        quest_svr_time: 0,
        quest_svr_time_raw: [0; 4],
        quest_end_time: 0,
        quest_end_time_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        hunt: vec![],
        hunt_raw: vec![],
        }
    }
}

impl Default for ShortCutKey {
    fn default() -> Self {

       Self::new()
    }
}

impl ShortCutKey {
    pub fn from(buffer: &[u8], packetver: u32) -> ShortCutKey {
        let mut offset: usize = 0;
        ShortCutKey {
            is_skill: {
                let field = i8::from_le_bytes([buffer[offset]]);
                field
            },
            is_skill_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            id: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            id_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i8(self.is_skill).unwrap();
        self.is_skill_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.id).unwrap();
        self.id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.is_skill_raw.to_vec());
        wtr.append(&mut self.id_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 7;
        base_len
    }
    pub fn set_is_skill(&mut self, value: i8) {
        self.is_skill = value;
    }
    pub fn set_is_skill_raw(&mut self, value: [u8; 1]) {
        self.is_skill_raw = value;
    }
    pub fn set_id(&mut self, value: u32) {
        self.id = value;
    }
    pub fn set_id_raw(&mut self, value: [u8; 4]) {
        self.id_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> ShortCutKey {
        ShortCutKey {
        raw: vec![],
        is_skill: 0,
        is_skill_raw: [0; 1],
        id: 0,
        id_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Default for EquipmentitemExtrainfo301 {
    fn default() -> Self {

       Self::new()
    }
}

impl EquipmentitemExtrainfo301 {
    pub fn from(buffer: &[u8], packetver: u32) -> EquipmentitemExtrainfo301 {
        let mut offset: usize = 0;
        EquipmentitemExtrainfo301 {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            location: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            location_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            is_damaged: {
                let field = buffer[offset] == 1;
                field
            },
            is_damaged_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            hire_expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hire_expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            bind_on_equip_type: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            bind_on_equip_type_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            w_item_sprite_number: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            w_item_sprite_number_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.location).unwrap();
        self.location_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_state).unwrap();
        self.wear_state_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_damaged as u8).unwrap();
        self.is_damaged_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hire_expire_date).unwrap();
        self.hire_expire_date_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.bind_on_equip_type).unwrap();
        self.bind_on_equip_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.w_item_sprite_number).unwrap();
        self.w_item_sprite_number_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.location_raw.to_vec());
        wtr.append(&mut self.wear_state_raw.to_vec());
        wtr.append(&mut self.is_damaged_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.hire_expire_date_raw.to_vec());
        wtr.append(&mut self.bind_on_equip_type_raw.to_vec());
        wtr.append(&mut self.w_item_sprite_number_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 28;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_location(&mut self, value: u16) {
        self.location = value;
    }
    pub fn set_location_raw(&mut self, value: [u8; 2]) {
        self.location_raw = value;
    }
    pub fn set_wear_state(&mut self, value: u16) {
        self.wear_state = value;
    }
    pub fn set_wear_state_raw(&mut self, value: [u8; 2]) {
        self.wear_state_raw = value;
    }
    pub fn set_is_damaged(&mut self, value: bool) {
        self.is_damaged = value;
    }
    pub fn set_is_damaged_raw(&mut self, value: [u8; 1]) {
        self.is_damaged_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_hire_expire_date(&mut self, value: i32) {
        self.hire_expire_date = value;
    }
    pub fn set_hire_expire_date_raw(&mut self, value: [u8; 4]) {
        self.hire_expire_date_raw = value;
    }
    pub fn set_bind_on_equip_type(&mut self, value: u16) {
        self.bind_on_equip_type = value;
    }
    pub fn set_bind_on_equip_type_raw(&mut self, value: [u8; 2]) {
        self.bind_on_equip_type_raw = value;
    }
    pub fn set_w_item_sprite_number(&mut self, value: u16) {
        self.w_item_sprite_number = value;
    }
    pub fn set_w_item_sprite_number_raw(&mut self, value: [u8; 2]) {
        self.w_item_sprite_number_raw = value;
    }
    pub fn new() -> EquipmentitemExtrainfo301 {
        EquipmentitemExtrainfo301 {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        location: 0,
        location_raw: [0; 2],
        wear_state: 0,
        wear_state_raw: [0; 2],
        is_damaged: false,
        is_damaged_raw: [0; 1],
        refining_level: 0,
        refining_level_raw: [0; 1],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        hire_expire_date: 0,
        hire_expire_date_raw: [0; 4],
        bind_on_equip_type: 0,
        bind_on_equip_type_raw: [0; 2],
        w_item_sprite_number: 0,
        w_item_sprite_number_raw: [0; 2],
        }
    }
}

impl Default for NormalitemExtrainfo3 {
    fn default() -> Self {

       Self::new()
    }
}

impl NormalitemExtrainfo3 {
    pub fn from(buffer: &[u8], packetver: u32) -> NormalitemExtrainfo3 {
        let mut offset: usize = 0;
        NormalitemExtrainfo3 {
            index: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            is_identified: {
                let field = buffer[offset] == 1;
                field
            },
            is_identified_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            wear_state: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            wear_state_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            slot: {
                let field = EQUIPSLOTINFO::from(&buffer[offset..offset + EQUIPSLOTINFO::base_len(packetver)], packetver);
                field
            },
            slot_raw: {
                let mut dst: [u8; 8] = [0u8; 8];
                dst.clone_from_slice(&buffer[offset..offset + 8]);
                offset += 8;
                dst
            },
            hire_expire_date: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            hire_expire_date_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.is_identified as u8).unwrap();
        self.is_identified_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.wear_state).unwrap();
        self.wear_state_raw = wtr.try_into().unwrap();
        self.slot.fill_raw_with_packetver(packetver);
        self.slot_raw = self.slot.clone().raw.try_into().unwrap();

        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.hire_expire_date).unwrap();
        self.hire_expire_date_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.is_identified_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.wear_state_raw.to_vec());
        wtr.append(&mut self.slot_raw.to_vec());
        wtr.append(&mut self.hire_expire_date_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 22;
        base_len
    }
    pub fn set_index(&mut self, value: i16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_is_identified(&mut self, value: bool) {
        self.is_identified = value;
    }
    pub fn set_is_identified_raw(&mut self, value: [u8; 1]) {
        self.is_identified_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_wear_state(&mut self, value: u16) {
        self.wear_state = value;
    }
    pub fn set_wear_state_raw(&mut self, value: [u8; 2]) {
        self.wear_state_raw = value;
    }
    pub fn set_slot(&mut self, value: EQUIPSLOTINFO) {
        self.slot = value;
    }
    pub fn set_slot_raw(&mut self, value: [u8; 8]) {
        self.slot_raw = value;
    }
    pub fn set_hire_expire_date(&mut self, value: i32) {
        self.hire_expire_date = value;
    }
    pub fn set_hire_expire_date_raw(&mut self, value: [u8; 4]) {
        self.hire_expire_date_raw = value;
    }
    pub fn new() -> NormalitemExtrainfo3 {
        NormalitemExtrainfo3 {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        is_identified: false,
        is_identified_raw: [0; 1],
        count: 0,
        count_raw: [0; 2],
        wear_state: 0,
        wear_state_raw: [0; 2],
        slot: EQUIPSLOTINFO::new(),
        slot_raw: [0; 8],
        hire_expire_date: 0,
        hire_expire_date_raw: [0; 4],
        }
    }
}

impl Default for SkillPostdelay {
    fn default() -> Self {

       Self::new()
    }
}

impl SkillPostdelay {
    pub fn from(buffer: &[u8], packetver: u32) -> SkillPostdelay {
        let mut offset: usize = 0;
        SkillPostdelay {
            skid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            skid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            delay_tm: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            delay_tm_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.skid).unwrap();
        self.skid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.delay_tm).unwrap();
        self.delay_tm_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.skid_raw.to_vec());
        wtr.append(&mut self.delay_tm_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_skid(&mut self, value: u16) {
        self.skid = value;
    }
    pub fn set_skid_raw(&mut self, value: [u8; 2]) {
        self.skid_raw = value;
    }
    pub fn set_delay_tm(&mut self, value: u32) {
        self.delay_tm = value;
    }
    pub fn set_delay_tm_raw(&mut self, value: [u8; 4]) {
        self.delay_tm_raw = value;
    }
    pub fn new() -> SkillPostdelay {
        SkillPostdelay {
        raw: vec![],
        skid: 0,
        skid_raw: [0; 2],
        delay_tm: 0,
        delay_tm_raw: [0; 4],
        }
    }
}

impl Default for CharacterList {
    fn default() -> Self {

       Self::new()
    }
}

impl CharacterList {
    pub fn from(buffer: &[u8], packetver: u32) -> CharacterList {
        let mut offset: usize = 0;
        CharacterList {
            dw_gid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            dw_gid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            slot_idx: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            slot_idx_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.dw_gid).unwrap();
        self.dw_gid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.slot_idx).unwrap();
        self.slot_idx_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.dw_gid_raw.to_vec());
        wtr.append(&mut self.slot_idx_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 5;
        base_len
    }
    pub fn set_dw_gid(&mut self, value: u32) {
        self.dw_gid = value;
    }
    pub fn set_dw_gid_raw(&mut self, value: [u8; 4]) {
        self.dw_gid_raw = value;
    }
    pub fn set_slot_idx(&mut self, value: u8) {
        self.slot_idx = value;
    }
    pub fn set_slot_idx_raw(&mut self, value: [u8; 1]) {
        self.slot_idx_raw = value;
    }
    pub fn new() -> CharacterList {
        CharacterList {
        raw: vec![],
        dw_gid: 0,
        dw_gid_raw: [0; 4],
        slot_idx: 0,
        slot_idx_raw: [0; 1],
        }
    }
}

impl Default for BattleFieldInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl BattleFieldInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> BattleFieldInfo {
        let mut offset: usize = 0;
        BattleFieldInfo {
            bfno: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            bfno_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            battle_field_name: {
                let field =  {
                let mut dst: [char; 56] = [0 as char; 56];
                for (index, byte) in buffer[offset..offset + 56].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            battle_field_name_raw: {
                let mut dst: [u8; 56] = [0u8; 56];
                dst.clone_from_slice(&buffer[offset..offset + 56]);
                offset += 56;
                dst
            },
            join_team: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            join_team_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.bfno).unwrap();
        self.bfno_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.battle_field_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.battle_field_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.join_team).unwrap();
        self.join_team_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.bfno_raw.to_vec());
        wtr.append(&mut self.battle_field_name_raw.to_vec());
        wtr.append(&mut self.join_team_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 62;
        base_len
    }
    pub fn set_bfno(&mut self, value: u32) {
        self.bfno = value;
    }
    pub fn set_bfno_raw(&mut self, value: [u8; 4]) {
        self.bfno_raw = value;
    }
    pub fn set_battle_field_name(&mut self, value: [char; 56]) {
        self.battle_field_name = value;
    }
    pub fn set_battle_field_name_raw(&mut self, value: [u8; 56]) {
        self.battle_field_name_raw = value;
    }
    pub fn set_join_team(&mut self, value: i16) {
        self.join_team = value;
    }
    pub fn set_join_team_raw(&mut self, value: [u8; 2]) {
        self.join_team_raw = value;
    }
    pub fn new() -> BattleFieldInfo {
        BattleFieldInfo {
        raw: vec![],
        bfno: 0,
        bfno_raw: [0; 4],
        battle_field_name: [0 as char; 56],
        battle_field_name_raw: [0; 56],
        join_team: 0,
        join_team_raw: [0; 2],
        }
    }
}

impl Default for PartyBookingDetail {
    fn default() -> Self {

       Self::new()
    }
}

impl PartyBookingDetail {
    pub fn from(buffer: &[u8], packetver: u32) -> PartyBookingDetail {
        let mut offset: usize = 0;
        PartyBookingDetail {
            level: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            level_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            map_id: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            map_id_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            job: {
                let field =  {
                let mut dst: [i16; 6] = [0_i16; 6];
                for (index, byte) in buffer[offset..offset + 6].iter().enumerate() {
                    dst[index] = *byte as i16;
                }
                dst
            };
                field
            },
            job_raw: {
                let mut dst: [u8; 6] = [0u8; 6];
                dst.clone_from_slice(&buffer[offset..offset + 6]);
                offset += 6;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.level).unwrap();
        self.level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.map_id).unwrap();
        self.map_id_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.job {
            wtr.write_i16::<LittleEndian>(item).unwrap();
        }
        self.job_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.level_raw.to_vec());
        wtr.append(&mut self.map_id_raw.to_vec());
        wtr.append(&mut self.job_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 10;
        base_len
    }
    pub fn set_level(&mut self, value: i16) {
        self.level = value;
    }
    pub fn set_level_raw(&mut self, value: [u8; 2]) {
        self.level_raw = value;
    }
    pub fn set_map_id(&mut self, value: i16) {
        self.map_id = value;
    }
    pub fn set_map_id_raw(&mut self, value: [u8; 2]) {
        self.map_id_raw = value;
    }
    pub fn set_job(&mut self, value: [i16; 6]) {
        self.job = value;
    }
    pub fn set_job_raw(&mut self, value: [u8; 6]) {
        self.job_raw = value;
    }
    pub fn new() -> PartyBookingDetail {
        PartyBookingDetail {
        raw: vec![],
        level: 0,
        level_raw: [0; 2],
        map_id: 0,
        map_id_raw: [0; 2],
        job: [0; 6],
        job_raw: [0; 6],
        }
    }
}

impl Default for PartyBookingAdInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl PartyBookingAdInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> PartyBookingAdInfo {
        let mut offset: usize = 0;
        PartyBookingAdInfo {
            index: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            char_name: {
                let field =  {
                let mut dst: [char; 24] = [0 as char; 24];
                for (index, byte) in buffer[offset..offset + 24].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            char_name_raw: {
                let mut dst: [u8; 24] = [0u8; 24];
                dst.clone_from_slice(&buffer[offset..offset + 24]);
                offset += 24;
                dst
            },
            expire_time: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            expire_time_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            detail: {
                let field = PartyBookingDetail::from(&buffer[offset..offset + PartyBookingDetail::base_len(packetver)], packetver);
                field
            },
            detail_raw: {
                let raw = buffer[offset..buffer.len()].to_vec();
                offset += raw.len();
                raw
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.char_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.char_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.expire_time).unwrap();
        self.expire_time_raw = wtr.try_into().unwrap();
        self.detail.fill_raw_with_packetver(packetver);
        self.detail_raw = self.detail.clone().raw;


        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.char_name_raw.to_vec());
        wtr.append(&mut self.expire_time_raw.to_vec());
        wtr.append(&mut self.detail_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 31;
        base_len
    }
    pub fn set_index(&mut self, value: u32) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 4]) {
        self.index_raw = value;
    }
    pub fn set_char_name(&mut self, value: [char; 24]) {
        self.char_name = value;
    }
    pub fn set_char_name_raw(&mut self, value: [u8; 24]) {
        self.char_name_raw = value;
    }
    pub fn set_expire_time(&mut self, value: i32) {
        self.expire_time = value;
    }
    pub fn set_expire_time_raw(&mut self, value: [u8; 4]) {
        self.expire_time_raw = value;
    }
    pub fn set_detail(&mut self, value: PartyBookingDetail) {
        self.detail = value;
    }
    pub fn set_detail_raw(&mut self, value: Vec<u8>) {
        self.detail_raw = value;
    }
    pub fn new() -> PartyBookingAdInfo {
        PartyBookingAdInfo {
        raw: vec![],
        index: 0,
        index_raw: [0; 4],
        char_name: [0 as char; 24],
        char_name_raw: [0; 24],
        expire_time: 0,
        expire_time_raw: [0; 4],
        detail: PartyBookingDetail::new(),
        detail_raw: vec![],
        }
    }
}

impl Default for ProductinfoInBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl ProductinfoInBuyingStore {
    pub fn from(buffer: &[u8], packetver: u32) -> ProductinfoInBuyingStore {
        let mut offset: usize = 0;
        ProductinfoInBuyingStore {
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.price_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 8;
        base_len
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn new() -> ProductinfoInBuyingStore {
        ProductinfoInBuyingStore {
        raw: vec![],
        itid: 0,
        itid_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        price: 0,
        price_raw: [0; 4],
        }
    }
}

impl Default for BuyingStoreItemlist {
    fn default() -> Self {

       Self::new()
    }
}

impl BuyingStoreItemlist {
    pub fn from(buffer: &[u8], packetver: u32) -> BuyingStoreItemlist {
        let mut offset: usize = 0;
        BuyingStoreItemlist {
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            atype: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            atype_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.atype).unwrap();
        self.atype_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.price_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.atype_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 9;
        base_len
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_atype(&mut self, value: u8) {
        self.atype = value;
    }
    pub fn set_atype_raw(&mut self, value: [u8; 1]) {
        self.atype_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn new() -> BuyingStoreItemlist {
        BuyingStoreItemlist {
        raw: vec![],
        price: 0,
        price_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        atype: 0,
        atype_raw: [0; 1],
        itid: 0,
        itid_raw: [0; 2],
        }
    }
}

impl Default for TradeItemBuyingStore {
    fn default() -> Self {

       Self::new()
    }
}

impl TradeItemBuyingStore {
    pub fn from(buffer: &[u8], packetver: u32) -> TradeItemBuyingStore {
        let mut offset: usize = 0;
        TradeItemBuyingStore {
            index: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            index_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            count: {
                let field = i16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.index).unwrap();
        self.index_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.index_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 6;
        base_len
    }
    pub fn set_index(&mut self, value: u16) {
        self.index = value;
    }
    pub fn set_index_raw(&mut self, value: [u8; 2]) {
        self.index_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_count(&mut self, value: i16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn new() -> TradeItemBuyingStore {
        TradeItemBuyingStore {
        raw: vec![],
        index: 0,
        index_raw: [0; 2],
        itid: 0,
        itid_raw: [0; 2],
        count: 0,
        count_raw: [0; 2],
        }
    }
}

impl Default for ResultItemInfo {
    fn default() -> Self {

       Self::new()
    }
}

impl ResultItemInfo {
    pub fn from(buffer: &[u8], packetver: u32) -> ResultItemInfo {
        let mut offset: usize = 0;
        ResultItemInfo {
            ssiid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            ssiid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            aid: {
                let field = u32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            aid_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            store_name: {
                let field =  {
                let mut dst: [char; 80] = [0 as char; 80];
                for (index, byte) in buffer[offset..offset + 80].iter().enumerate() {
                    dst[index] = *byte as char;
                }
                dst
            };
                field
            },
            store_name_raw: {
                let mut dst: [u8; 80] = [0u8; 80];
                dst.clone_from_slice(&buffer[offset..offset + 80]);
                offset += 80;
                dst
            },
            itid: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            itid_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            item_type: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            item_type_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            price: {
                let field = i32::from_le_bytes([buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3]]);
                field
            },
            price_raw: {
                let mut dst: [u8; 4] = [0u8; 4];
                dst.clone_from_slice(&buffer[offset..offset + 4]);
                offset += 4;
                dst
            },
            count: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            count_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            refining_level: {
                let field = u8::from_le_bytes([buffer[offset]]);
                field
            },
            refining_level_raw: {
                let mut dst: [u8; 1] = [0u8; 1];
                dst.clone_from_slice(&buffer[offset..offset + 1]);
                offset += 1;
                dst
            },
            card1: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card1_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card2: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card2_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card3: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card3_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            card4: {
                let field = u16::from_le_bytes([buffer[offset], buffer[offset + 1]]);
                field
            },
            card4_raw: {
                let mut dst: [u8; 2] = [0u8; 2];
                dst.clone_from_slice(&buffer[offset..offset + 2]);
                offset += 2;
                dst
            },
            raw: (&buffer[..offset]).to_vec(),
        }
    }
    pub fn fill_raw(&mut self) {
      self.fill_raw_with_packetver(None)
    }
    pub fn fill_raw_with_packetver(&mut self, packetver: Option<u32>) {
    let mut wtr;
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.ssiid).unwrap();
        self.ssiid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u32::<LittleEndian>(self.aid).unwrap();
        self.aid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        for item in self.store_name {
            wtr.write_u8(item as u8 ).unwrap();
        }
        self.store_name_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.itid).unwrap();
        self.itid_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.item_type).unwrap();
        self.item_type_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_i32::<LittleEndian>(self.price).unwrap();
        self.price_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.count).unwrap();
        self.count_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u8(self.refining_level).unwrap();
        self.refining_level_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card1).unwrap();
        self.card1_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card2).unwrap();
        self.card2_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card3).unwrap();
        self.card3_raw = wtr.try_into().unwrap();
        wtr = vec![];
        wtr.write_u16::<LittleEndian>(self.card4).unwrap();
        self.card4_raw = wtr.try_into().unwrap();

        wtr = vec![];
        wtr.append(&mut self.ssiid_raw.to_vec());
        wtr.append(&mut self.aid_raw.to_vec());
        wtr.append(&mut self.store_name_raw.to_vec());
        wtr.append(&mut self.itid_raw.to_vec());
        wtr.append(&mut self.item_type_raw.to_vec());
        wtr.append(&mut self.price_raw.to_vec());
        wtr.append(&mut self.count_raw.to_vec());
        wtr.append(&mut self.refining_level_raw.to_vec());
        wtr.append(&mut self.card1_raw.to_vec());
        wtr.append(&mut self.card2_raw.to_vec());
        wtr.append(&mut self.card3_raw.to_vec());
        wtr.append(&mut self.card4_raw.to_vec());
        self.raw = wtr;
    }
    pub fn base_len(packetver: u32) -> usize {
        let  base_len: usize = 106;
        base_len
    }
    pub fn set_ssiid(&mut self, value: u32) {
        self.ssiid = value;
    }
    pub fn set_ssiid_raw(&mut self, value: [u8; 4]) {
        self.ssiid_raw = value;
    }
    pub fn set_aid(&mut self, value: u32) {
        self.aid = value;
    }
    pub fn set_aid_raw(&mut self, value: [u8; 4]) {
        self.aid_raw = value;
    }
    pub fn set_store_name(&mut self, value: [char; 80]) {
        self.store_name = value;
    }
    pub fn set_store_name_raw(&mut self, value: [u8; 80]) {
        self.store_name_raw = value;
    }
    pub fn set_itid(&mut self, value: u16) {
        self.itid = value;
    }
    pub fn set_itid_raw(&mut self, value: [u8; 2]) {
        self.itid_raw = value;
    }
    pub fn set_item_type(&mut self, value: u8) {
        self.item_type = value;
    }
    pub fn set_item_type_raw(&mut self, value: [u8; 1]) {
        self.item_type_raw = value;
    }
    pub fn set_price(&mut self, value: i32) {
        self.price = value;
    }
    pub fn set_price_raw(&mut self, value: [u8; 4]) {
        self.price_raw = value;
    }
    pub fn set_count(&mut self, value: u16) {
        self.count = value;
    }
    pub fn set_count_raw(&mut self, value: [u8; 2]) {
        self.count_raw = value;
    }
    pub fn set_refining_level(&mut self, value: u8) {
        self.refining_level = value;
    }
    pub fn set_refining_level_raw(&mut self, value: [u8; 1]) {
        self.refining_level_raw = value;
    }
    pub fn set_card1(&mut self, value: u16) {
        self.card1 = value;
    }
    pub fn set_card1_raw(&mut self, value: [u8; 2]) {
        self.card1_raw = value;
    }
    pub fn set_card2(&mut self, value: u16) {
        self.card2 = value;
    }
    pub fn set_card2_raw(&mut self, value: [u8; 2]) {
        self.card2_raw = value;
    }
    pub fn set_card3(&mut self, value: u16) {
        self.card3 = value;
    }
    pub fn set_card3_raw(&mut self, value: [u8; 2]) {
        self.card3_raw = value;
    }
    pub fn set_card4(&mut self, value: u16) {
        self.card4 = value;
    }
    pub fn set_card4_raw(&mut self, value: [u8; 2]) {
        self.card4_raw = value;
    }
    pub fn new() -> ResultItemInfo {
        ResultItemInfo {
        raw: vec![],
        ssiid: 0,
        ssiid_raw: [0; 4],
        aid: 0,
        aid_raw: [0; 4],
        store_name: [0 as char; 80],
        store_name_raw: [0; 80],
        itid: 0,
        itid_raw: [0; 2],
        item_type: 0,
        item_type_raw: [0; 1],
        price: 0,
        price_raw: [0; 4],
        count: 0,
        count_raw: [0; 2],
        refining_level: 0,
        refining_level_raw: [0; 1],
        card1: 0,
        card1_raw: [0; 2],
        card2: 0,
        card2_raw: [0; 2],
        card3: 0,
        card3_raw: [0; 2],
        card4: 0,
        card4_raw: [0; 2],
        }
    }
}

