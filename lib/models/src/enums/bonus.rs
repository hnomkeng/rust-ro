use crate::enums::element::Element;
use crate::enums::skill_enums::SkillEnum;
use crate::status::{StatusBonus, StatusSnapshot};

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum BonusType {
    Str(i8),
    Agi(i8),
    Vit(i8),
    Int(i8),
    Dex(i8),
    Luk(i8),
    AllStats(i8),
    Hit(i16),
    HitPercentage(i8),
    Flee(i16),
    Crit(i8),
    PerfectDodge(i8),
    Aspd(i8),
    AspdPercentage(i8),
    Maxhp(i32),
    Maxsp(i32),
    MaxhpPercentage(i8),
    MaxspPercentage(i8),
    Atk(i16),
    Def(i16),
    VitDefPercentage(i8),
    DefPercentage(i8),
    Mdef(i16),
    Matk(i16),
    MatkBasedOnStaffPercentage(i8),
    MatkPercentage(i8),
    AtkPercentage(i8),
    PerfectHitPercentage(i8),
    ElementWeapon(Element),
    ElementDefense(Element),
    CriticalDamagePercentage(i8),
    CastTimePercentage(i8),
    CastTimeWhenUsingSkillIdPercentage(u32, i8),
    AfterCastDelayPercentage(i8),
    NaturalHpRecoveryPercentage(i8),
    NaturalSpRecoveryPercentage(i8),
    HpRegenFromItemPercentage(i8),
    HpRegenFromItemIDPercentage(u32, i8),
    HpRegenFromHerbPercentage(i8),
    HpRegenFromFruitPercentage(i8),
    HpRegenFromMeatPercentage(i8),
    HpRegenFromCandyPercentage(i8),
    HpRegenFromJuicePercentage(i8),
    HpRegenFromFishPercentage(i8),
    HpRegenFromFoodPercentage(i8),
    HpRegenFromPotionPercentage(i8),
    GainHpWhenKillingEnemy(i8),
    GainHpWhenKillingEnemyWithMagicAttack(i8),
    GainSpWhenKillingEnemyWithMagicAttack(i8),
    HpRegenFromSkillPercentage(i8),
    DisableHpRegen,
    DisableSpRegen,
    GainSpWhenHittingEnemy(i8),
    GainSpWhenKillingEnemy(i8),
    SpConsumption(i8),
    NormalAttackPercentage(i8),
    PhysicalDamageAgainstSizeSmallPercentage(i8),
    PhysicalDamageAgainstSizeMediumPercentage(i8),
    PhysicalDamageAgainstSizeLargePercentage(i8),
    MagicalDamageAgainstSizeSmallPercentage(i8),
    MagicalDamageAgainstSizeMediumPercentage(i8),
    MagicalDamageAgainstSizeLargePercentage(i8),
    PhysicalDamageAgainstRaceFormlessPercentage(i8),
    PhysicalDamageAgainstRaceUndeadPercentage(i8),
    PhysicalDamageAgainstRaceBrutePercentage(i8),
    PhysicalDamageAgainstRacePlantPercentage(i8),
    PhysicalDamageAgainstRaceInsectPercentage(i8),
    PhysicalDamageAgainstRaceFishPercentage(i8),
    PhysicalDamageAgainstRaceDemonPercentage(i8),
    PhysicalDamageAgainstRaceDemiHumanPercentage(i8),
    PhysicalDamageAgainstRaceAngelPercentage(i8),
    PhysicalDamageAgainstRaceDragonPercentage(i8),
    MagicalDamageAgainstRaceFormlessPercentage(i8),
    MagicalDamageAgainstRaceUndeadPercentage(i8),
    MagicalDamageAgainstRaceBrutePercentage(i8),
    MagicalDamageAgainstRacePlantPercentage(i8),
    MagicalDamageAgainstRaceInsectPercentage(i8),
    MagicalDamageAgainstRaceFishPercentage(i8),
    MagicalDamageAgainstRaceDemonPercentage(i8),
    MagicalDamageAgainstRaceDemiHumanPercentage(i8),
    MagicalDamageAgainstRaceAngelPercentage(i8),
    MagicalDamageAgainstRaceDragonPercentage(i8),
    PhysicalDamageAgainstElementNeutralPercentage(i8),
    PhysicalDamageAgainstElementWaterPercentage(i8),
    PhysicalDamageAgainstElementEarthPercentage(i8),
    PhysicalDamageAgainstElementFirePercentage(i8),
    PhysicalDamageAgainstElementWindPercentage(i8),
    PhysicalDamageAgainstElementPoisonPercentage(i8),
    PhysicalDamageAgainstElementHolyPercentage(i8),
    PhysicalDamageAgainstElementDarkPercentage(i8),
    PhysicalDamageAgainstElementGhostPercentage(i8),
    PhysicalDamageAgainstElementUndeadPercentage(i8),
    DamageAgainstMobGroupGoblinPercentage(i8),
    DamageAgainstMobGroupKoboldPercentage(i8),
    DamageAgainstMobGroupOrcPercentage(i8),
    DamageAgainstMobGroupGolemPercentage(i8),
    DamageAgainstMobGroupGuardianPercentage(i8),
    CriticalAgainstRaceFormlessPercentage(i8),
    CriticalAgainstRaceUndeadPercentage(i8),
    CriticalAgainstRaceBrutePercentage(i8),
    CriticalAgainstRacePlantPercentage(i8),
    CriticalAgainstRaceInsectPercentage(i8),
    CriticalAgainstRaceFishPercentage(i8),
    CriticalAgainstRaceDemonPercentage(i8),
    CriticalAgainstRaceDemiHumanPercentage(i8),
    CriticalAgainstRaceAngelPercentage(i8),
    CriticalAgainstRaceDragonPercentage(i8),
    ChanceToInflictStatusPoisonOnAttackPercentage(f32),
    ChanceToInflictStatusStunOnAttackPercentage(f32),
    ChanceToInflictStatusFreezeOnAttackPercentage(f32),
    ChanceToInflictStatusCurseOnAttackPercentage(f32),
    ChanceToInflictStatusBlindOnAttackPercentage(f32),
    ChanceToInflictStatusSleepOnAttackPercentage(f32),
    ChanceToInflictStatusSilenceOnAttackPercentage(f32),
    ChanceToInflictStatusBurningOnAttackPercentage(f32),
    ChanceToInflictStatusChaosOnAttackPercentage(f32),
    ChanceToInflictStatusBleedingOnAttackPercentage(f32),
    ChanceToInflictStatusStoneOnAttackPercentage(f32),
    ChanceToInflictStatusConfuseOnAttackPercentage(f32),
    ChanceToInflictStatusWeaponBreakOnAttackPercentage(f32),
    ChanceToInflictStatusArmorBreakOnAttackPercentage(f32),
    ChanceToInflictStatusComaOnAttackPercentage(f32),
    ChanceToInflictStatusComaOnAttackOnBossClassPercentage(f32),
    ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(f32),
    ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceBrutePercentage(f32),
    ChanceToInflictStatusComaOnAttackRacePlantPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceInsectPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceFishPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceDemonPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceAngelPercentage(f32),
    ChanceToInflictStatusComaOnAttackRaceDragonPercentage(f32),
    ChanceToInflictStatusPoisonToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusStunToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusFreezeToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusCurseToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusBlindToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusSleepToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusSilenceToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusBurningToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusChaosToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusBleedingToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusStoneToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusConfuseToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusComaToSelfOnAttackPercentage(f32),
    ChanceToInflictStatusPoisonWhenHitPercentage(f32),
    ChanceToInflictStatusStunWhenHitPercentage(f32),
    ChanceToInflictStatusFreezeWhenHitPercentage(f32),
    ChanceToInflictStatusCurseWhenHitPercentage(f32),
    ChanceToInflictStatusBlindWhenHitPercentage(f32),
    ChanceToInflictStatusSleepWhenHitPercentage(f32),
    ChanceToInflictStatusSilenceWhenHitPercentage(f32),
    ChanceToInflictStatusBurningWhenHitPercentage(f32),
    ChanceToInflictStatusChaosWhenHitPercentage(f32),
    ChanceToInflictStatusBleedingWhenHitPercentage(f32),
    ChanceToInflictStatusStoneWhenHitPercentage(f32),
    ChanceToInflictStatusConfuseWhenHitPercentage(f32),
    ChanceToInflictStatusWeaponBreakWhenHitPercentage(f32),
    ChanceToInflictStatusArmorBreakWhenHitPercentage(f32),
    ChanceToInflictStatusComaWhenHitPercentage(f32),
    ResistanceToStatusPoisonPercentage(i8),
    ResistanceToStatusStunPercentage(i8),
    ResistanceToStatusFreezePercentage(i8),
    ResistanceToStatusCursePercentage(i8),
    ResistanceToStatusConfusePercentage(i8),
    ResistanceToStatusBurningPercentage(i8),
    ResistanceToStatusBlindPercentage(i8),
    ResistanceToStatusSleepPercentage(i8),
    ResistanceToStatusSilencePercentage(i8),
    ResistanceToStatusChaosPercentage(i8),
    ResistanceToStatusBleedingPercentage(i8),
    ResistanceToStatusStonePercentage(i8),
    ResistanceToStatusWeaponBreakPercentage(i8),
    ResistanceToStatusArmorBreakPercentage(i8),
    BreakArmorPercentage(i8),
    BreakWeaponPercentage(i8),
    ClassChangePercentageOnHit(i8),
    LongRangeCriticalChance(i8),
    // Only when attacking with ranged weapon
    IncreaseDamageAgainstClassBossBaseOnDef,
    IncreaseDamageAgainstClassNormalBaseOnDef,
    IncreaseDamageAgainstClassGuardianBaseOnDef,
    PhysicalDamageAgainstClassBossPercentage(i8),
    PhysicalDamageAgainstClassNormalPercentage(i8),
    PhysicalDamageAgainstClassGuardianPercentage(i8),
    PhysicalDamageAgainstMobIdPercentage(u32, i8),
    ResistanceDamageFromClassBossPercentage(i8),
    ResistanceDamageFromClassNormalPercentage(i8),
    ResistanceDamageFromClassGuardianPercentage(i8),
    ResistanceDamageFromElementNeutralPercentage(i8),
    ResistanceDamageFromElementWaterPercentage(i8),
    ResistanceDamageFromElementEarthPercentage(i8),
    ResistanceDamageFromElementFirePercentage(i8),
    ResistanceDamageFromElementWindPercentage(i8),
    ResistanceDamageFromElementPoisonPercentage(i8),
    ResistanceDamageFromElementHolyPercentage(i8),
    ResistanceDamageFromElementDarkPercentage(i8),
    ResistanceDamageFromElementGhostPercentage(i8),
    ResistanceDamageFromElementUndeadPercentage(i8),
    ResistanceDamageFromRaceFormlessPercentage(i8),
    ResistanceDamageFromRaceUndeadPercentage(i8),
    ResistanceDamageFromRaceBrutePercentage(i8),
    ResistanceDamageFromRacePlantPercentage(i8),
    ResistanceDamageFromRaceInsectPercentage(i8),
    ResistanceDamageFromRaceFishPercentage(i8),
    ResistanceDamageFromRaceDemonPercentage(i8),
    ResistanceDamageFromRaceDemiHumanPercentage(i8),
    ResistanceDamageFromRaceAngelPercentage(i8),
    ResistanceDamageFromRaceDragonPercentage(i8),
    ResistanceDamageFromSizeSmallPercentage(i8),
    ResistanceDamageFromSizeMediumPercentage(i8),
    ResistanceDamageFromSizeLargePercentage(i8),

    SkillDelayIncDecPercentage(i8),
    DoubleAttackChancePercentage(i8),
    HealSkillPercentage(i8),
    HealSkillIdPercentage(u32, i8),
    IgnoreDefClassNormal,
    IgnoreDefClassBoss,
    IgnoreDefClassGuardian,
    IgnoreDefRaceAngel,
    IgnoreDefRaceBrute,
    IgnoreDefRaceDemiHuman,
    IgnoreDefRaceDemon,
    IgnoreDefRaceDragon,
    IgnoreDefRaceFish,
    IgnoreDefRaceFormless,
    IgnoreDefRaceInsect,
    IgnoreDefRacePlant,
    IgnoreDefRacePlayerHuman,
    IgnoreDefRacePlayerDoram,
    IgnoreDefRaceUndead,
    IgnoreDefRaceFormlessPercentage(i8),
    IgnoreDefRaceUndeadPercentage(i8),
    IgnoreDefRaceBrutePercentage(i8),
    IgnoreDefRacePlantPercentage(i8),
    IgnoreDefRaceInsectPercentage(i8),
    IgnoreDefRaceFishPercentage(i8),
    IgnoreDefRaceDemonPercentage(i8),
    IgnoreDefRaceDemiHumanPercentage(i8),
    IgnoreDefRaceAngelPercentage(i8),
    IgnoreDefRaceDragonPercentage(i8),
    IgnoreMDefRaceFormlessPercentage(i8),
    IgnoreMDefRaceUndeadPercentage(i8),
    IgnoreMDefRaceBrutePercentage(i8),
    IgnoreMDefRacePlantPercentage(i8),
    IgnoreMDefRaceInsectPercentage(i8),
    IgnoreMDefRaceFishPercentage(i8),
    IgnoreMDefRaceDemonPercentage(i8),
    IgnoreMDefRaceDemiHumanPercentage(i8),
    IgnoreMDefRaceAngelPercentage(i8),
    IgnoreMDefRaceDragonPercentage(i8),
    IgnoreMDefClassNormalPercentage(i8),
    IgnoreMDefClassBossPercentage(i8),
    IgnoreMDefClassGuardianPercentage(i8),

    ResistanceRangeAttackPercentage(i8),
    DamageRangedAtkPercentage(i8),
    ResistanceMagicAttackPercentage(i8),
    MagicAttackReflectChancePercentage(i8),
    MeleeAttackReflectChancePercentage(i8),
    SplashRadius(i8),
    SpeedPercentage(i8),
    EnableFullHpSpRecoverOnResurrect,
    EnableSeeHidden,
    EnableNoCancelCast,
    EnableNoGemstoneRequired,
    EnableIgnoreSizeModifier,
    EnableNoKnockback,
    EnableNoWalkDelay,
    UnbreakableArmor,
    UnbreakableShoulder,
    UnbreakableHelm,
    UnbreakableShield,
    UnbreakableShoes,
    UnbreakableWeapon,
    ResistancePhysicalAttackFromMobIdPercentage(u32, i8),
    DropChanceItemIdPercentage(u32, i8),
    DropChanceJewelPercentage(i8),
    DropChanceOrePercentage(i8),
    DropChanceRecoveryPercentage(i8),
    DropChanceFoodPercentage(i8),
    KnockbackWhenUsingSkillId(u32, i8),
    GainExpWhenKillingRaceFormlessPercentage(i8),
    GainExpWhenKillingRaceUndeadPercentage(i8),
    GainExpWhenKillingRaceBrutePercentage(i8),
    GainExpWhenKillingRacePlantPercentage(i8),
    GainExpWhenKillingRaceInsectPercentage(i8),
    GainExpWhenKillingRaceFishPercentage(i8),
    GainExpWhenKillingRaceDemonPercentage(i8),
    GainExpWhenKillingRaceDemiHumanPercentage(i8),
    GainExpWhenKillingRaceAngelPercentage(i8),
    GainExpWhenKillingRaceDragonPercentage(i8),
    GainZenyWhenKillingMonster(u16, i8),
    // zeny, chance
    HpDrainWhenAttackingPercentage(i8, i8),
    // hp percentage, chance
    SpDrainWhenAttackingPercentage(i8, i8),
    // sp percentage, chance
    SpDrainWhenAttackingRaceFormless(u16),
    SpDrainWhenAttackingRaceUndead(u16),
    SpDrainWhenAttackingRaceBrute(u16),
    SpDrainWhenAttackingRacePlant(u16),
    SpDrainWhenAttackingRaceInsect(u16),
    SpDrainWhenAttackingRaceFish(u16),
    SpDrainWhenAttackingRaceDemon(u16),
    SpDrainWhenAttackingRaceDemiHuman(u16),
    SpDrainWhenAttackingRaceAngel(u16),
    SpDrainWhenAttackingRaceDragon(u16),
    SpDrainWhenKillingRaceFormless(u16),
    SpDrainWhenKillingRaceUndead(u16),
    SpDrainWhenKillingRaceBrute(u16),
    SpDrainWhenKillingRacePlant(u16),
    SpDrainWhenKillingRaceInsect(u16),
    SpDrainWhenKillingRaceFish(u16),
    SpDrainWhenKillingRaceDemon(u16),
    SpDrainWhenKillingRaceDemiHuman(u16),
    SpDrainWhenKillingRaceAngel(u16),
    SpDrainWhenKillingRaceDragon(u16),
    SpBurnOnTargetWhenAttackingPercentage(i8, u16),
    // percentage, chance
    HpLossEveryMs(u16, u16),
    //amount, every ms
    HpRegenEveryMs(u16, u16),
    //amount, every ms
    SpLossEveryMs(u16, u16),
    //amount, every ms
    SpRegenEveryMs(u16, u16),
    //amount, every ms
    SkillIdDamagePercentage(u32, i8),
    EnableSkillId(u32, u8),
}

impl BonusType {
    pub fn value(&self) -> i32 {
        match *self {
            BonusType::Str(val) => val as i32,
            BonusType::Agi(val) => val as i32,
            BonusType::Vit(val) => val as i32,
            BonusType::Int(val) => val as i32,
            BonusType::Dex(val) => val as i32,
            BonusType::Luk(val) => val as i32,
            BonusType::AllStats(val) => val as i32,
            BonusType::Hit(val) => val as i32,
            BonusType::HitPercentage(val) => val as i32,
            BonusType::Flee(val) => val as i32,
            BonusType::Crit(val) => val as i32,
            BonusType::PerfectDodge(val) => val as i32,
            BonusType::Aspd(val) => val as i32,
            BonusType::AspdPercentage(val) => val as i32,
            BonusType::Maxhp(val) => val as i32,
            BonusType::Maxsp(val) => val as i32,
            BonusType::MaxhpPercentage(val) => val as i32,
            BonusType::MaxspPercentage(val) => val as i32,
            BonusType::Atk(val) => val as i32,
            BonusType::Def(val) => val as i32,
            BonusType::VitDefPercentage(val) => val as i32,
            BonusType::DefPercentage(val) => val as i32,
            BonusType::Mdef(val) => val as i32,
            BonusType::Matk(val) => val as i32,
            BonusType::MatkBasedOnStaffPercentage(val) => val as i32,
            BonusType::MatkPercentage(val) => val as i32,
            BonusType::AtkPercentage(val) => val as i32,
            BonusType::PerfectHitPercentage(val) => val as i32,
            BonusType::ElementWeapon(val) => val as i32,
            BonusType::ElementDefense(val) => val as i32,
            BonusType::CriticalDamagePercentage(val) => val as i32,
            BonusType::CastTimePercentage(val) => val as i32,
            BonusType::CastTimeWhenUsingSkillIdPercentage(val, _) => val as i32,
            BonusType::AfterCastDelayPercentage(val) => val as i32,
            BonusType::NaturalHpRecoveryPercentage(val) => val as i32,
            BonusType::NaturalSpRecoveryPercentage(val) => val as i32,
            BonusType::HpRegenFromItemPercentage(val) => val as i32,
            BonusType::HpRegenFromItemIDPercentage(val, _) => val as i32,
            BonusType::HpRegenFromHerbPercentage(val) => val as i32,
            BonusType::HpRegenFromFruitPercentage(val) => val as i32,
            BonusType::HpRegenFromMeatPercentage(val) => val as i32,
            BonusType::HpRegenFromCandyPercentage(val) => val as i32,
            BonusType::HpRegenFromJuicePercentage(val) => val as i32,
            BonusType::HpRegenFromFishPercentage(val) => val as i32,
            BonusType::HpRegenFromFoodPercentage(val) => val as i32,
            BonusType::HpRegenFromPotionPercentage(val) => val as i32,
            BonusType::GainHpWhenKillingEnemy(val) => val as i32,
            BonusType::GainHpWhenKillingEnemyWithMagicAttack(val) => val as i32,
            BonusType::GainSpWhenKillingEnemyWithMagicAttack(val) => val as i32,
            BonusType::HpRegenFromSkillPercentage(val) => val as i32,
            BonusType::DisableHpRegen => 0_i32,
            BonusType::DisableSpRegen => 0_i32,
            BonusType::GainSpWhenHittingEnemy(val) => val as i32,
            BonusType::GainSpWhenKillingEnemy(val) => val as i32,
            BonusType::SpConsumption(val) => val as i32,
            BonusType::ResistanceRangeAttackPercentage(val) => val as i32,
            BonusType::NormalAttackPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstSizeSmallPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstSizeMediumPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstSizeLargePercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstSizeSmallPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstSizeMediumPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstSizeLargePercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceFormlessPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceUndeadPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceBrutePercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRacePlantPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceInsectPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceFishPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceDemonPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceAngelPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstRaceDragonPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceFormlessPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceUndeadPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceBrutePercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRacePlantPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceInsectPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceFishPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceDemonPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceAngelPercentage(val) => val as i32,
            BonusType::MagicalDamageAgainstRaceDragonPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementNeutralPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementWaterPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementEarthPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementFirePercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementWindPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementPoisonPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementHolyPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementDarkPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementGhostPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstElementUndeadPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceFormlessPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceUndeadPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceBrutePercentage(val) => val as i32,
            BonusType::CriticalAgainstRacePlantPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceInsectPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceFishPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceDemonPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceDemiHumanPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceAngelPercentage(val) => val as i32,
            BonusType::CriticalAgainstRaceDragonPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusStunOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusCurseOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBlindOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusSleepOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBurningOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusChaosOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusStoneOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusStunWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusCurseWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBlindWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusSleepWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBurningWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusChaosWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusStoneWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(val) => val as i32,
            BonusType::ChanceToInflictStatusComaWhenHitPercentage(val) => val as i32,
            BonusType::ResistanceToStatusPoisonPercentage(val) => val as i32,
            BonusType::ResistanceToStatusStunPercentage(val) => val as i32,
            BonusType::ResistanceToStatusFreezePercentage(val) => val as i32,
            BonusType::ResistanceToStatusCursePercentage(val) => val as i32,
            BonusType::ResistanceToStatusConfusePercentage(val) => val as i32,
            BonusType::ResistanceToStatusBurningPercentage(val) => val as i32,
            BonusType::ResistanceToStatusBlindPercentage(val) => val as i32,
            BonusType::ResistanceToStatusSleepPercentage(val) => val as i32,
            BonusType::ResistanceToStatusSilencePercentage(val) => val as i32,
            BonusType::ResistanceToStatusChaosPercentage(val) => val as i32,
            BonusType::ResistanceToStatusBleedingPercentage(val) => val as i32,
            BonusType::ResistanceToStatusStonePercentage(val) => val as i32,
            BonusType::ResistanceToStatusWeaponBreakPercentage(val) => val as i32,
            BonusType::ResistanceToStatusArmorBreakPercentage(val) => val as i32,
            BonusType::BreakArmorPercentage(val) => val as i32,
            BonusType::BreakWeaponPercentage(val) => val as i32,
            BonusType::ClassChangePercentageOnHit(val) => val as i32,
            BonusType::LongRangeCriticalChance(val) => val as i32,
            BonusType::IncreaseDamageAgainstClassBossBaseOnDef => 0_i32,
            BonusType::IncreaseDamageAgainstClassNormalBaseOnDef => 0_i32,
            BonusType::IncreaseDamageAgainstClassGuardianBaseOnDef => 0_i32,
            BonusType::PhysicalDamageAgainstClassBossPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstClassNormalPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstClassGuardianPercentage(val) => val as i32,
            BonusType::PhysicalDamageAgainstMobIdPercentage(val, _) => val as i32,
            BonusType::ResistanceDamageFromClassBossPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromClassNormalPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromClassGuardianPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementNeutralPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementWaterPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementEarthPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementFirePercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementWindPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementPoisonPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementHolyPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementDarkPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementGhostPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromElementUndeadPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceFormlessPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceUndeadPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceBrutePercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRacePlantPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceInsectPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceFishPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceDemonPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceDemiHumanPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceAngelPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromRaceDragonPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromSizeSmallPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromSizeMediumPercentage(val) => val as i32,
            BonusType::ResistanceDamageFromSizeLargePercentage(val) => val as i32,
            BonusType::SkillDelayIncDecPercentage(val) => val as i32,
            BonusType::DoubleAttackChancePercentage(val) => val as i32,
            BonusType::HealSkillPercentage(val) => val as i32,
            BonusType::HealSkillIdPercentage(val, _) => val as i32,
            BonusType::IgnoreDefClassNormal => 0_i32,
            BonusType::IgnoreDefClassBoss => 0_i32,
            BonusType::IgnoreDefClassGuardian => 0_i32,
            BonusType::IgnoreDefRaceAngel => 0_i32,
            BonusType::IgnoreDefRaceBrute => 0_i32,
            BonusType::IgnoreDefRaceDemiHuman => 0_i32,
            BonusType::IgnoreDefRaceDemon => 0_i32,
            BonusType::IgnoreDefRaceDragon => 0_i32,
            BonusType::IgnoreDefRaceFish => 0_i32,
            BonusType::IgnoreDefRaceFormless => 0_i32,
            BonusType::IgnoreDefRaceInsect => 0_i32,
            BonusType::IgnoreDefRacePlant => 0_i32,
            BonusType::IgnoreDefRacePlayerHuman => 0_i32,
            BonusType::IgnoreDefRacePlayerDoram => 0_i32,
            BonusType::IgnoreDefRaceUndead => 0_i32,
            BonusType::IgnoreDefRaceFormlessPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceUndeadPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceBrutePercentage(val) => val as i32,
            BonusType::IgnoreDefRacePlantPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceInsectPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceFishPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceDemonPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceDemiHumanPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceAngelPercentage(val) => val as i32,
            BonusType::IgnoreDefRaceDragonPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceFormlessPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceUndeadPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceBrutePercentage(val) => val as i32,
            BonusType::IgnoreMDefRacePlantPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceInsectPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceFishPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceDemonPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceDemiHumanPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceAngelPercentage(val) => val as i32,
            BonusType::IgnoreMDefRaceDragonPercentage(val) => val as i32,
            BonusType::IgnoreMDefClassNormalPercentage(val) => val as i32,
            BonusType::IgnoreMDefClassBossPercentage(val) => val as i32,
            BonusType::IgnoreMDefClassGuardianPercentage(val) => val as i32,
            BonusType::DamageRangedAtkPercentage(val) => val as i32,
            BonusType::ResistanceMagicAttackPercentage(val) => val as i32,
            BonusType::MagicAttackReflectChancePercentage(val) => val as i32,
            BonusType::MeleeAttackReflectChancePercentage(val) => val as i32,
            BonusType::SplashRadius(val) => val as i32,
            BonusType::SpeedPercentage(val) => val as i32,
            BonusType::EnableFullHpSpRecoverOnResurrect => 0_i32,
            BonusType::EnableSeeHidden => 0_i32,
            BonusType::EnableNoCancelCast => 0_i32,
            BonusType::EnableNoGemstoneRequired => 0_i32,
            BonusType::EnableIgnoreSizeModifier => 0_i32,
            BonusType::EnableNoKnockback => 0_i32,
            BonusType::EnableNoWalkDelay => 0_i32,
            BonusType::UnbreakableArmor => 0_i32,
            BonusType::UnbreakableShoulder => 0_i32,
            BonusType::UnbreakableHelm => 0_i32,
            BonusType::UnbreakableShield => 0_i32,
            BonusType::UnbreakableShoes => 0_i32,
            BonusType::UnbreakableWeapon => 0_i32,
            BonusType::ResistancePhysicalAttackFromMobIdPercentage(val, _) => val as i32,
            BonusType::DropChanceItemIdPercentage(val, _) => val as i32,
            BonusType::DropChanceJewelPercentage(val) => val as i32,
            BonusType::DropChanceOrePercentage(val) => val as i32,
            BonusType::DropChanceRecoveryPercentage(val) => val as i32,
            BonusType::DropChanceFoodPercentage(val) => val as i32,
            BonusType::KnockbackWhenUsingSkillId(val, _) => val as i32,
            BonusType::GainExpWhenKillingRaceFormlessPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceUndeadPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceBrutePercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRacePlantPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceInsectPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceFishPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceDemonPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceDemiHumanPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceAngelPercentage(val) => val as i32,
            BonusType::GainExpWhenKillingRaceDragonPercentage(val) => val as i32,
            BonusType::GainZenyWhenKillingMonster(val, _) => val as i32,
            BonusType::HpDrainWhenAttackingPercentage(val, _) => val as i32,
            BonusType::SpDrainWhenAttackingPercentage(val, _) => val as i32,
            BonusType::SpDrainWhenAttackingRaceFormless(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceUndead(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceBrute(val) => val as i32,
            BonusType::SpDrainWhenAttackingRacePlant(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceInsect(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceFish(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceDemon(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceDemiHuman(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceAngel(val) => val as i32,
            BonusType::SpDrainWhenAttackingRaceDragon(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceFormless(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceUndead(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceBrute(val) => val as i32,
            BonusType::SpDrainWhenKillingRacePlant(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceInsect(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceFish(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceDemon(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceDemiHuman(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceAngel(val) => val as i32,
            BonusType::SpDrainWhenKillingRaceDragon(val) => val as i32,
            BonusType::SpBurnOnTargetWhenAttackingPercentage(val, _) => val as i32,
            BonusType::HpLossEveryMs(val, _) => val as i32,
            BonusType::HpRegenEveryMs(val, _) => val as i32,
            BonusType::SpLossEveryMs(val, _) => val as i32,
            BonusType::SpRegenEveryMs(val, _) => val as i32,
            BonusType::SkillIdDamagePercentage(val, _) => val as i32,
            BonusType::DamageAgainstMobGroupGoblinPercentage(val) => val as i32,
            BonusType::DamageAgainstMobGroupKoboldPercentage(val) => val as i32,
            BonusType::DamageAgainstMobGroupOrcPercentage(val) => val as i32,
            BonusType::DamageAgainstMobGroupGolemPercentage(val) => val as i32,
            BonusType::DamageAgainstMobGroupGuardianPercentage(val) => val as i32,
            BonusType::EnableSkillId(_, _) => 0_i32,
        }
    }
    pub fn add_bonus_to_status(&self, status_snapshot: &mut StatusSnapshot) {
        match self {
            BonusType::Str(str) => { status_snapshot.set_bonus_str(status_snapshot.bonus_str() + *str as i16) }
            BonusType::Agi(agi) => { status_snapshot.set_bonus_agi(status_snapshot.bonus_agi() + *agi as i16) }
            BonusType::Vit(vit) => { status_snapshot.set_bonus_vit(status_snapshot.bonus_vit() + *vit as i16) }
            BonusType::Int(int) => { status_snapshot.set_bonus_int(status_snapshot.bonus_int() + *int as i16) }
            BonusType::Dex(dex) => { status_snapshot.set_bonus_dex(status_snapshot.bonus_dex() + *dex as i16) }
            BonusType::Luk(luk) => { status_snapshot.set_bonus_luk(status_snapshot.bonus_luk() + *luk as i16) }
            BonusType::AllStats(all) => {
                status_snapshot.set_bonus_str(status_snapshot.bonus_str() + *all as i16);
                status_snapshot.set_bonus_agi(status_snapshot.bonus_agi() + *all as i16);
                status_snapshot.set_bonus_vit(status_snapshot.bonus_vit() + *all as i16);
                status_snapshot.set_bonus_int(status_snapshot.bonus_int() + *all as i16);
                status_snapshot.set_bonus_dex(status_snapshot.bonus_dex() + *all as i16);
                status_snapshot.set_bonus_luk(status_snapshot.bonus_luk() + *all as i16);
            }
            BonusType::Hit(hit) => { status_snapshot.set_hit(status_snapshot.hit() + *hit as i16) }
            BonusType::Flee(flee) => { status_snapshot.set_flee(status_snapshot.flee() + *flee as i16) }
            BonusType::Crit(crit) => { status_snapshot.set_crit(status_snapshot.crit() + *crit as f32) }
            BonusType::Aspd(aspd) => { status_snapshot.set_aspd(status_snapshot.aspd() + *aspd as f32) }
            BonusType::Maxhp(hp) => { status_snapshot.set_hp(status_snapshot.hp() + *hp as u32) }
            BonusType::Maxsp(sp) => { status_snapshot.set_sp(status_snapshot.sp() + *sp as u32) }
            BonusType::MatkPercentage(matk_percentage) => { status_snapshot.set_matk_item_modifier(status_snapshot.matk_item_modifier() + (*matk_percentage as f32 / 100.0)) }
            BonusType::Atk(atk) => { status_snapshot.set_bonus_atk(status_snapshot.bonus_atk() + *atk as u16) }
            BonusType::Def(def) => { status_snapshot.set_def(status_snapshot.def() + *def as i16) }
            BonusType::Mdef(mdef) => { status_snapshot.set_mdef(status_snapshot.mdef() + *mdef as i16) }
            BonusType::Matk(matk) => {
                status_snapshot.set_matk_min(status_snapshot.matk_min() + *matk as u16);
                status_snapshot.set_matk_max(status_snapshot.matk_max() + *matk as u16);
            }
            BonusType::ElementDefense(element) => { status_snapshot.set_element(element.clone()) }
            _ => {}
        }
    }

    pub fn add_percentage_bonus_to_status(&self, status_snapshot: &mut StatusSnapshot) {
        match self {
            BonusType::HitPercentage(value) => { status_snapshot.set_hit((status_snapshot.hit() as f32 * (1.0 + *value as f32 / 100.0)).floor() as i16); }
            BonusType::AspdPercentage(value) => { status_snapshot.set_aspd((status_snapshot.aspd() + ((200.0 - status_snapshot.aspd()) * (*value as f32 / 100.0)))); }
            BonusType::MaxhpPercentage(value) => { status_snapshot.set_max_hp((status_snapshot.max_hp() as f32 * (1.0 + *value as f32 / 100.0)).floor() as u32); }
            BonusType::MaxspPercentage(value) => { status_snapshot.set_max_sp((status_snapshot.max_sp() as f32 * (1.0 + *value as f32 / 100.0)).floor() as u32); }
            BonusType::VitDefPercentage(_) => {}
            BonusType::DefPercentage(value) => { status_snapshot.set_def((status_snapshot.def() as f32 * (1.0 + *value as f32 / 100.0)).floor() as i16); }
            BonusType::MatkBasedOnStaffPercentage(_) => {}
            BonusType::AtkPercentage(value) => { status_snapshot.set_bonus_atk((status_snapshot.bonus_atk() as f32 * (1.0 + *value as f32 / 100.0)).floor() as u16); }
            BonusType::PerfectHitPercentage(_) => {}
            BonusType::CriticalDamagePercentage(value) => { status_snapshot.set_bonus_atk((status_snapshot.bonus_atk() as f32 * (1.0 + *value as f32 / 100.0)).floor() as u16); }
            BonusType::CastTimePercentage(_) => {}
            BonusType::CastTimeWhenUsingSkillIdPercentage(_, _) => {}
            BonusType::AfterCastDelayPercentage(_) => {}
            BonusType::NaturalHpRecoveryPercentage(_) => {}
            BonusType::NaturalSpRecoveryPercentage(_) => {}
            _ => {}
        };
    }

    pub fn merge_bonuses(bonuses: &Vec<BonusType>) -> Vec<BonusType> {
        let mut merged_bonuses: Vec<BonusType> = Vec::with_capacity(bonuses.len());
        for bonus in bonuses.iter() {
            Self::get_bonus_sum(bonus, &bonuses).map(|b| merged_bonuses.push(b));
            match bonus {
                BonusType::EnableSkillId(_, _) => { merged_bonuses.push(bonus.clone()) }
                _ => {}
            }
        }
        merged_bonuses
    }
    pub fn get_bonus_sum(bonus: &BonusType, bonuses: &Vec<BonusType>) -> Option<BonusType> {
        let val: i32 = bonuses.into_iter().filter_map(|b| match (bonus, b) {
            (BonusType::Str(_), BonusType::Str(val)) => Some(*val as i32),
            (BonusType::Agi(_), BonusType::Agi(val)) => Some(*val as i32),
            (BonusType::Vit(_), BonusType::Vit(val)) => Some(*val as i32),
            (BonusType::Int(_), BonusType::Int(val)) => Some(*val as i32),
            (BonusType::Dex(_), BonusType::Dex(val)) => Some(*val as i32),
            (BonusType::Luk(_), BonusType::Luk(val)) => Some(*val as i32),

            (BonusType::AllStats(_), BonusType::AllStats(val)) => Some(*val as i32),
            (BonusType::Hit(_), BonusType::Hit(val)) => Some(*val as i32),
            (BonusType::HitPercentage(_), BonusType::HitPercentage(val)) => Some(*val as i32),
            (BonusType::Flee(_), BonusType::Flee(val)) => Some(*val as i32),
            (BonusType::Crit(_), BonusType::Crit(val)) => Some(*val as i32),
            (BonusType::PerfectDodge(_), BonusType::PerfectDodge(val)) => Some(*val as i32),
            (BonusType::Aspd(_), BonusType::Aspd(val)) => Some(*val as i32),
            (BonusType::AspdPercentage(_), BonusType::AspdPercentage(val)) => Some(*val as i32),
            (BonusType::Maxhp(_), BonusType::Maxhp(val)) => Some(*val as i32),
            (BonusType::Maxsp(_), BonusType::Maxsp(val)) => Some(*val as i32),
            (BonusType::MaxhpPercentage(_), BonusType::MaxhpPercentage(val)) => Some(*val as i32),
            (BonusType::MaxspPercentage(_), BonusType::MaxspPercentage(val)) => Some(*val as i32),
            (BonusType::Atk(_), BonusType::Atk(val)) => Some(*val as i32),
            (BonusType::Def(_), BonusType::Def(val)) => Some(*val as i32),
            (BonusType::VitDefPercentage(_), BonusType::VitDefPercentage(val)) => Some(*val as i32),
            (BonusType::DefPercentage(_), BonusType::DefPercentage(val)) => Some(*val as i32),
            (BonusType::Mdef(_), BonusType::Mdef(val)) => Some(*val as i32),
            (BonusType::Matk(_), BonusType::Matk(val)) => Some(*val as i32),
            (BonusType::MatkBasedOnStaffPercentage(_), BonusType::MatkBasedOnStaffPercentage(val)) => Some(*val as i32),
            (BonusType::MatkPercentage(_), BonusType::MatkPercentage(val)) => Some(*val as i32),
            (BonusType::AtkPercentage(_), BonusType::AtkPercentage(val)) => Some(*val as i32),
            (BonusType::PerfectHitPercentage(_), BonusType::PerfectHitPercentage(val)) => Some(*val as i32),
            (BonusType::ElementWeapon(_), BonusType::ElementWeapon(val)) => Some(*val as i32),
            (BonusType::ElementDefense(_), BonusType::ElementDefense(val)) => Some(*val as i32),
            (BonusType::CriticalDamagePercentage(_), BonusType::CriticalDamagePercentage(val)) => Some(*val as i32),
            (BonusType::CastTimePercentage(_), BonusType::CastTimePercentage(val)) => Some(*val as i32),
            (BonusType::AfterCastDelayPercentage(_), BonusType::AfterCastDelayPercentage(val)) => Some(*val as i32),
            (BonusType::NaturalHpRecoveryPercentage(_), BonusType::NaturalHpRecoveryPercentage(val)) => Some(*val as i32),
            (BonusType::NaturalSpRecoveryPercentage(_), BonusType::NaturalSpRecoveryPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromItemPercentage(_), BonusType::HpRegenFromItemPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromHerbPercentage(_), BonusType::HpRegenFromHerbPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromFruitPercentage(_), BonusType::HpRegenFromFruitPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromMeatPercentage(_), BonusType::HpRegenFromMeatPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromCandyPercentage(_), BonusType::HpRegenFromCandyPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromJuicePercentage(_), BonusType::HpRegenFromJuicePercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromFishPercentage(_), BonusType::HpRegenFromFishPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromFoodPercentage(_), BonusType::HpRegenFromFoodPercentage(val)) => Some(*val as i32),
            (BonusType::HpRegenFromPotionPercentage(_), BonusType::HpRegenFromPotionPercentage(val)) => Some(*val as i32),
            (BonusType::GainHpWhenKillingEnemy(_), BonusType::GainHpWhenKillingEnemy(val)) => Some(*val as i32),
            (BonusType::GainHpWhenKillingEnemyWithMagicAttack(_), BonusType::GainHpWhenKillingEnemyWithMagicAttack(val)) => Some(*val as i32),
            (BonusType::GainSpWhenKillingEnemyWithMagicAttack(_), BonusType::GainSpWhenKillingEnemyWithMagicAttack(val)) => Some(*val as i32),
            (BonusType::HpRegenFromSkillPercentage(_), BonusType::HpRegenFromSkillPercentage(val)) => Some(*val as i32),
            (BonusType::GainSpWhenHittingEnemy(_), BonusType::GainSpWhenHittingEnemy(val)) => Some(*val as i32),
            (BonusType::GainSpWhenKillingEnemy(_), BonusType::GainSpWhenKillingEnemy(val)) => Some(*val as i32),
            (BonusType::SpConsumption(_), BonusType::SpConsumption(val)) => Some(*val as i32),
            (BonusType::ResistanceRangeAttackPercentage(_), BonusType::ResistanceRangeAttackPercentage(val)) => Some(*val as i32),
            (BonusType::NormalAttackPercentage(_), BonusType::NormalAttackPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstSizeSmallPercentage(_), BonusType::PhysicalDamageAgainstSizeSmallPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstSizeMediumPercentage(_), BonusType::PhysicalDamageAgainstSizeMediumPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstSizeLargePercentage(_), BonusType::PhysicalDamageAgainstSizeLargePercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstSizeSmallPercentage(_), BonusType::MagicalDamageAgainstSizeSmallPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstSizeMediumPercentage(_), BonusType::MagicalDamageAgainstSizeMediumPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstSizeLargePercentage(_), BonusType::MagicalDamageAgainstSizeLargePercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceFormlessPercentage(_), BonusType::PhysicalDamageAgainstRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceUndeadPercentage(_), BonusType::PhysicalDamageAgainstRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceBrutePercentage(_), BonusType::PhysicalDamageAgainstRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRacePlantPercentage(_), BonusType::PhysicalDamageAgainstRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceInsectPercentage(_), BonusType::PhysicalDamageAgainstRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceFishPercentage(_), BonusType::PhysicalDamageAgainstRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceDemonPercentage(_), BonusType::PhysicalDamageAgainstRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(_), BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceAngelPercentage(_), BonusType::PhysicalDamageAgainstRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstRaceDragonPercentage(_), BonusType::PhysicalDamageAgainstRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceFormlessPercentage(_), BonusType::MagicalDamageAgainstRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceUndeadPercentage(_), BonusType::MagicalDamageAgainstRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceBrutePercentage(_), BonusType::MagicalDamageAgainstRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRacePlantPercentage(_), BonusType::MagicalDamageAgainstRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceInsectPercentage(_), BonusType::MagicalDamageAgainstRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceFishPercentage(_), BonusType::MagicalDamageAgainstRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceDemonPercentage(_), BonusType::MagicalDamageAgainstRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(_), BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceAngelPercentage(_), BonusType::MagicalDamageAgainstRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::MagicalDamageAgainstRaceDragonPercentage(_), BonusType::MagicalDamageAgainstRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementNeutralPercentage(_), BonusType::PhysicalDamageAgainstElementNeutralPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementWaterPercentage(_), BonusType::PhysicalDamageAgainstElementWaterPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementEarthPercentage(_), BonusType::PhysicalDamageAgainstElementEarthPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementFirePercentage(_), BonusType::PhysicalDamageAgainstElementFirePercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementWindPercentage(_), BonusType::PhysicalDamageAgainstElementWindPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementPoisonPercentage(_), BonusType::PhysicalDamageAgainstElementPoisonPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementHolyPercentage(_), BonusType::PhysicalDamageAgainstElementHolyPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementDarkPercentage(_), BonusType::PhysicalDamageAgainstElementDarkPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementGhostPercentage(_), BonusType::PhysicalDamageAgainstElementGhostPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstElementUndeadPercentage(_), BonusType::PhysicalDamageAgainstElementUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceFormlessPercentage(_), BonusType::CriticalAgainstRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceUndeadPercentage(_), BonusType::CriticalAgainstRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceBrutePercentage(_), BonusType::CriticalAgainstRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRacePlantPercentage(_), BonusType::CriticalAgainstRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceInsectPercentage(_), BonusType::CriticalAgainstRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceFishPercentage(_), BonusType::CriticalAgainstRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceDemonPercentage(_), BonusType::CriticalAgainstRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceDemiHumanPercentage(_), BonusType::CriticalAgainstRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceAngelPercentage(_), BonusType::CriticalAgainstRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::CriticalAgainstRaceDragonPercentage(_), BonusType::CriticalAgainstRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(_), BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusStunOnAttackPercentage(_), BonusType::ChanceToInflictStatusStunOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(_), BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusCurseOnAttackPercentage(_), BonusType::ChanceToInflictStatusCurseOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBlindOnAttackPercentage(_), BonusType::ChanceToInflictStatusBlindOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusSleepOnAttackPercentage(_), BonusType::ChanceToInflictStatusSleepOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(_), BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBurningOnAttackPercentage(_), BonusType::ChanceToInflictStatusBurningOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusChaosOnAttackPercentage(_), BonusType::ChanceToInflictStatusChaosOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(_), BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusStoneOnAttackPercentage(_), BonusType::ChanceToInflictStatusStoneOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(_), BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(_), BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(_), BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(_), BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(_), BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(_), BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusStunWhenHitPercentage(_), BonusType::ChanceToInflictStatusStunWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(_), BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusCurseWhenHitPercentage(_), BonusType::ChanceToInflictStatusCurseWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBlindWhenHitPercentage(_), BonusType::ChanceToInflictStatusBlindWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusSleepWhenHitPercentage(_), BonusType::ChanceToInflictStatusSleepWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(_), BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBurningWhenHitPercentage(_), BonusType::ChanceToInflictStatusBurningWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusChaosWhenHitPercentage(_), BonusType::ChanceToInflictStatusChaosWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(_), BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusStoneWhenHitPercentage(_), BonusType::ChanceToInflictStatusStoneWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(_), BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(_), BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(_), BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ChanceToInflictStatusComaWhenHitPercentage(_), BonusType::ChanceToInflictStatusComaWhenHitPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusPoisonPercentage(_), BonusType::ResistanceToStatusPoisonPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusStunPercentage(_), BonusType::ResistanceToStatusStunPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusFreezePercentage(_), BonusType::ResistanceToStatusFreezePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusCursePercentage(_), BonusType::ResistanceToStatusCursePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusConfusePercentage(_), BonusType::ResistanceToStatusConfusePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusBurningPercentage(_), BonusType::ResistanceToStatusBurningPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusBlindPercentage(_), BonusType::ResistanceToStatusBlindPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusSleepPercentage(_), BonusType::ResistanceToStatusSleepPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusSilencePercentage(_), BonusType::ResistanceToStatusSilencePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusChaosPercentage(_), BonusType::ResistanceToStatusChaosPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusBleedingPercentage(_), BonusType::ResistanceToStatusBleedingPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusStonePercentage(_), BonusType::ResistanceToStatusStonePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusWeaponBreakPercentage(_), BonusType::ResistanceToStatusWeaponBreakPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceToStatusArmorBreakPercentage(_), BonusType::ResistanceToStatusArmorBreakPercentage(val)) => Some(*val as i32),
            (BonusType::BreakArmorPercentage(_), BonusType::BreakArmorPercentage(val)) => Some(*val as i32),
            (BonusType::BreakWeaponPercentage(_), BonusType::BreakWeaponPercentage(val)) => Some(*val as i32),
            (BonusType::ClassChangePercentageOnHit(_), BonusType::ClassChangePercentageOnHit(val)) => Some(*val as i32),
            (BonusType::LongRangeCriticalChance(_), BonusType::LongRangeCriticalChance(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstClassBossPercentage(_), BonusType::PhysicalDamageAgainstClassBossPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstClassNormalPercentage(_), BonusType::PhysicalDamageAgainstClassNormalPercentage(val)) => Some(*val as i32),
            (BonusType::PhysicalDamageAgainstClassGuardianPercentage(_), BonusType::PhysicalDamageAgainstClassGuardianPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromClassBossPercentage(_), BonusType::ResistanceDamageFromClassBossPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromClassNormalPercentage(_), BonusType::ResistanceDamageFromClassNormalPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromClassGuardianPercentage(_), BonusType::ResistanceDamageFromClassGuardianPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementNeutralPercentage(_), BonusType::ResistanceDamageFromElementNeutralPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementWaterPercentage(_), BonusType::ResistanceDamageFromElementWaterPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementEarthPercentage(_), BonusType::ResistanceDamageFromElementEarthPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementFirePercentage(_), BonusType::ResistanceDamageFromElementFirePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementWindPercentage(_), BonusType::ResistanceDamageFromElementWindPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementPoisonPercentage(_), BonusType::ResistanceDamageFromElementPoisonPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementHolyPercentage(_), BonusType::ResistanceDamageFromElementHolyPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementDarkPercentage(_), BonusType::ResistanceDamageFromElementDarkPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementGhostPercentage(_), BonusType::ResistanceDamageFromElementGhostPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromElementUndeadPercentage(_), BonusType::ResistanceDamageFromElementUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceFormlessPercentage(_), BonusType::ResistanceDamageFromRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceUndeadPercentage(_), BonusType::ResistanceDamageFromRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceBrutePercentage(_), BonusType::ResistanceDamageFromRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRacePlantPercentage(_), BonusType::ResistanceDamageFromRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceInsectPercentage(_), BonusType::ResistanceDamageFromRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceFishPercentage(_), BonusType::ResistanceDamageFromRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceDemonPercentage(_), BonusType::ResistanceDamageFromRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceDemiHumanPercentage(_), BonusType::ResistanceDamageFromRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceAngelPercentage(_), BonusType::ResistanceDamageFromRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromRaceDragonPercentage(_), BonusType::ResistanceDamageFromRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromSizeSmallPercentage(_), BonusType::ResistanceDamageFromSizeSmallPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromSizeMediumPercentage(_), BonusType::ResistanceDamageFromSizeMediumPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceDamageFromSizeLargePercentage(_), BonusType::ResistanceDamageFromSizeLargePercentage(val)) => Some(*val as i32),
            (BonusType::SkillDelayIncDecPercentage(_), BonusType::SkillDelayIncDecPercentage(val)) => Some(*val as i32),
            (BonusType::DoubleAttackChancePercentage(_), BonusType::DoubleAttackChancePercentage(val)) => Some(*val as i32),
            (BonusType::HealSkillPercentage(_), BonusType::HealSkillPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceFormlessPercentage(_), BonusType::IgnoreDefRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceUndeadPercentage(_), BonusType::IgnoreDefRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceBrutePercentage(_), BonusType::IgnoreDefRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRacePlantPercentage(_), BonusType::IgnoreDefRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceInsectPercentage(_), BonusType::IgnoreDefRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceFishPercentage(_), BonusType::IgnoreDefRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceDemonPercentage(_), BonusType::IgnoreDefRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceDemiHumanPercentage(_), BonusType::IgnoreDefRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceAngelPercentage(_), BonusType::IgnoreDefRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreDefRaceDragonPercentage(_), BonusType::IgnoreDefRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceFormlessPercentage(_), BonusType::IgnoreMDefRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceUndeadPercentage(_), BonusType::IgnoreMDefRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceBrutePercentage(_), BonusType::IgnoreMDefRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRacePlantPercentage(_), BonusType::IgnoreMDefRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceInsectPercentage(_), BonusType::IgnoreMDefRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceFishPercentage(_), BonusType::IgnoreMDefRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceDemonPercentage(_), BonusType::IgnoreMDefRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceDemiHumanPercentage(_), BonusType::IgnoreMDefRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceAngelPercentage(_), BonusType::IgnoreMDefRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefRaceDragonPercentage(_), BonusType::IgnoreMDefRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefClassNormalPercentage(_), BonusType::IgnoreMDefClassNormalPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefClassBossPercentage(_), BonusType::IgnoreMDefClassBossPercentage(val)) => Some(*val as i32),
            (BonusType::IgnoreMDefClassGuardianPercentage(_), BonusType::IgnoreMDefClassGuardianPercentage(val)) => Some(*val as i32),
            (BonusType::DamageRangedAtkPercentage(_), BonusType::DamageRangedAtkPercentage(val)) => Some(*val as i32),
            (BonusType::ResistanceMagicAttackPercentage(_), BonusType::ResistanceMagicAttackPercentage(val)) => Some(*val as i32),
            (BonusType::MagicAttackReflectChancePercentage(_), BonusType::MagicAttackReflectChancePercentage(val)) => Some(*val as i32),
            (BonusType::MeleeAttackReflectChancePercentage(_), BonusType::MeleeAttackReflectChancePercentage(val)) => Some(*val as i32),
            (BonusType::SplashRadius(_), BonusType::SplashRadius(val)) => Some(*val as i32),
            (BonusType::SpeedPercentage(_), BonusType::SpeedPercentage(val)) => Some(*val as i32),
            (BonusType::DropChanceJewelPercentage(_), BonusType::DropChanceJewelPercentage(val)) => Some(*val as i32),
            (BonusType::DropChanceOrePercentage(_), BonusType::DropChanceOrePercentage(val)) => Some(*val as i32),
            (BonusType::DropChanceRecoveryPercentage(_), BonusType::DropChanceRecoveryPercentage(val)) => Some(*val as i32),
            (BonusType::DropChanceFoodPercentage(_), BonusType::DropChanceFoodPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceFormlessPercentage(_), BonusType::GainExpWhenKillingRaceFormlessPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceUndeadPercentage(_), BonusType::GainExpWhenKillingRaceUndeadPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceBrutePercentage(_), BonusType::GainExpWhenKillingRaceBrutePercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRacePlantPercentage(_), BonusType::GainExpWhenKillingRacePlantPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceInsectPercentage(_), BonusType::GainExpWhenKillingRaceInsectPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceFishPercentage(_), BonusType::GainExpWhenKillingRaceFishPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceDemonPercentage(_), BonusType::GainExpWhenKillingRaceDemonPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceDemiHumanPercentage(_), BonusType::GainExpWhenKillingRaceDemiHumanPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceAngelPercentage(_), BonusType::GainExpWhenKillingRaceAngelPercentage(val)) => Some(*val as i32),
            (BonusType::GainExpWhenKillingRaceDragonPercentage(_), BonusType::GainExpWhenKillingRaceDragonPercentage(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceFormless(_), BonusType::SpDrainWhenAttackingRaceFormless(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceUndead(_), BonusType::SpDrainWhenAttackingRaceUndead(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceBrute(_), BonusType::SpDrainWhenAttackingRaceBrute(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRacePlant(_), BonusType::SpDrainWhenAttackingRacePlant(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceInsect(_), BonusType::SpDrainWhenAttackingRaceInsect(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceFish(_), BonusType::SpDrainWhenAttackingRaceFish(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceDemon(_), BonusType::SpDrainWhenAttackingRaceDemon(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceDemiHuman(_), BonusType::SpDrainWhenAttackingRaceDemiHuman(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceAngel(_), BonusType::SpDrainWhenAttackingRaceAngel(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenAttackingRaceDragon(_), BonusType::SpDrainWhenAttackingRaceDragon(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceFormless(_), BonusType::SpDrainWhenKillingRaceFormless(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceUndead(_), BonusType::SpDrainWhenKillingRaceUndead(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceBrute(_), BonusType::SpDrainWhenKillingRaceBrute(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRacePlant(_), BonusType::SpDrainWhenKillingRacePlant(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceInsect(_), BonusType::SpDrainWhenKillingRaceInsect(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceFish(_), BonusType::SpDrainWhenKillingRaceFish(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceDemon(_), BonusType::SpDrainWhenKillingRaceDemon(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceDemiHuman(_), BonusType::SpDrainWhenKillingRaceDemiHuman(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceAngel(_), BonusType::SpDrainWhenKillingRaceAngel(val)) => Some(*val as i32),
            (BonusType::SpDrainWhenKillingRaceDragon(_), BonusType::SpDrainWhenKillingRaceDragon(val)) => Some(*val as i32),
            _ => None
        }).sum();

        match bonus {
            BonusType::Str(_) => Some(BonusType::Str(val as i8)),
            BonusType::Agi(_) => Some(BonusType::Agi(val as i8)),
            BonusType::Vit(_) => Some(BonusType::Vit(val as i8)),
            BonusType::Int(_) => Some(BonusType::Int(val as i8)),
            BonusType::Dex(_) => Some(BonusType::Dex(val as i8)),
            BonusType::Luk(_) => Some(BonusType::Luk(val as i8)),
            BonusType::AllStats(_) => Some(BonusType::AllStats(val as i8)),
            BonusType::Hit(_) => Some(BonusType::Hit(val as i16)),
            BonusType::HitPercentage(_) => Some(BonusType::HitPercentage(val as i8)),
            BonusType::Flee(_) => Some(BonusType::Flee(val as i16)),
            BonusType::Crit(_) => Some(BonusType::Crit(val as i8)),
            BonusType::PerfectDodge(_) => Some(BonusType::PerfectDodge(val as i8)),
            BonusType::Aspd(_) => Some(BonusType::Aspd(val as i8)),
            BonusType::AspdPercentage(_) => Some(BonusType::AspdPercentage(val as i8)),
            BonusType::Maxhp(_) => Some(BonusType::Maxhp(val as i32)),
            BonusType::Maxsp(_) => Some(BonusType::Maxsp(val as i32)),
            BonusType::MaxhpPercentage(_) => Some(BonusType::MaxhpPercentage(val as i8)),
            BonusType::MaxspPercentage(_) => Some(BonusType::MaxspPercentage(val as i8)),
            BonusType::Atk(_) => Some(BonusType::Atk(val as i16)),
            BonusType::Def(_) => Some(BonusType::Def(val as i16)),
            BonusType::VitDefPercentage(_) => Some(BonusType::VitDefPercentage(val as i8)),
            BonusType::DefPercentage(_) => Some(BonusType::DefPercentage(val as i8)),
            BonusType::Mdef(_) => Some(BonusType::Mdef(val as i16)),
            BonusType::Matk(_) => Some(BonusType::Matk(val as i16)),
            BonusType::MatkBasedOnStaffPercentage(_) => Some(BonusType::MatkBasedOnStaffPercentage(val as i8)),
            BonusType::MatkPercentage(_) => Some(BonusType::MatkPercentage(val as i8)),
            BonusType::AtkPercentage(_) => Some(BonusType::AtkPercentage(val as i8)),
            BonusType::PerfectHitPercentage(_) => Some(BonusType::PerfectHitPercentage(val as i8)),
            BonusType::CriticalDamagePercentage(_) => Some(BonusType::CriticalDamagePercentage(val as i8)),
            BonusType::CastTimePercentage(_) => Some(BonusType::CastTimePercentage(val as i8)),
            BonusType::AfterCastDelayPercentage(_) => Some(BonusType::AfterCastDelayPercentage(val as i8)),
            BonusType::NaturalHpRecoveryPercentage(_) => Some(BonusType::NaturalHpRecoveryPercentage(val as i8)),
            BonusType::NaturalSpRecoveryPercentage(_) => Some(BonusType::NaturalSpRecoveryPercentage(val as i8)),
            BonusType::HpRegenFromItemPercentage(_) => Some(BonusType::HpRegenFromItemPercentage(val as i8)),
            BonusType::HpRegenFromHerbPercentage(_) => Some(BonusType::HpRegenFromHerbPercentage(val as i8)),
            BonusType::HpRegenFromFruitPercentage(_) => Some(BonusType::HpRegenFromFruitPercentage(val as i8)),
            BonusType::HpRegenFromMeatPercentage(_) => Some(BonusType::HpRegenFromMeatPercentage(val as i8)),
            BonusType::HpRegenFromCandyPercentage(_) => Some(BonusType::HpRegenFromCandyPercentage(val as i8)),
            BonusType::HpRegenFromJuicePercentage(_) => Some(BonusType::HpRegenFromJuicePercentage(val as i8)),
            BonusType::HpRegenFromFishPercentage(_) => Some(BonusType::HpRegenFromFishPercentage(val as i8)),
            BonusType::HpRegenFromFoodPercentage(_) => Some(BonusType::HpRegenFromFoodPercentage(val as i8)),
            BonusType::HpRegenFromPotionPercentage(_) => Some(BonusType::HpRegenFromPotionPercentage(val as i8)),
            BonusType::GainHpWhenKillingEnemy(_) => Some(BonusType::GainHpWhenKillingEnemy(val as i8)),
            BonusType::GainHpWhenKillingEnemyWithMagicAttack(_) => Some(BonusType::GainHpWhenKillingEnemyWithMagicAttack(val as i8)),
            BonusType::GainSpWhenKillingEnemyWithMagicAttack(_) => Some(BonusType::GainSpWhenKillingEnemyWithMagicAttack(val as i8)),
            BonusType::HpRegenFromSkillPercentage(_) => Some(BonusType::HpRegenFromSkillPercentage(val as i8)),
            BonusType::GainSpWhenHittingEnemy(_) => Some(BonusType::GainSpWhenHittingEnemy(val as i8)),
            BonusType::GainSpWhenKillingEnemy(_) => Some(BonusType::GainSpWhenKillingEnemy(val as i8)),
            BonusType::SpConsumption(_) => Some(BonusType::SpConsumption(val as i8)),
            BonusType::ResistanceRangeAttackPercentage(_) => Some(BonusType::ResistanceRangeAttackPercentage(val as i8)),
            BonusType::NormalAttackPercentage(_) => Some(BonusType::NormalAttackPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstSizeSmallPercentage(_) => Some(BonusType::PhysicalDamageAgainstSizeSmallPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstSizeMediumPercentage(_) => Some(BonusType::PhysicalDamageAgainstSizeMediumPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstSizeLargePercentage(_) => Some(BonusType::PhysicalDamageAgainstSizeLargePercentage(val as i8)),
            BonusType::MagicalDamageAgainstSizeSmallPercentage(_) => Some(BonusType::MagicalDamageAgainstSizeSmallPercentage(val as i8)),
            BonusType::MagicalDamageAgainstSizeMediumPercentage(_) => Some(BonusType::MagicalDamageAgainstSizeMediumPercentage(val as i8)),
            BonusType::MagicalDamageAgainstSizeLargePercentage(_) => Some(BonusType::MagicalDamageAgainstSizeLargePercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceFormlessPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceFormlessPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceUndeadPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceUndeadPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceBrutePercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceBrutePercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRacePlantPercentage(_) => Some(BonusType::PhysicalDamageAgainstRacePlantPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceInsectPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceInsectPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceFishPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceFishPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceDemonPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceDemonPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceAngelPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceAngelPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstRaceDragonPercentage(_) => Some(BonusType::PhysicalDamageAgainstRaceDragonPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceFormlessPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceFormlessPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceUndeadPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceUndeadPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceBrutePercentage(_) => Some(BonusType::MagicalDamageAgainstRaceBrutePercentage(val as i8)),
            BonusType::MagicalDamageAgainstRacePlantPercentage(_) => Some(BonusType::MagicalDamageAgainstRacePlantPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceInsectPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceInsectPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceFishPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceFishPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceDemonPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceDemonPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceAngelPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceAngelPercentage(val as i8)),
            BonusType::MagicalDamageAgainstRaceDragonPercentage(_) => Some(BonusType::MagicalDamageAgainstRaceDragonPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementNeutralPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementNeutralPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementWaterPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementWaterPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementEarthPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementEarthPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementFirePercentage(_) => Some(BonusType::PhysicalDamageAgainstElementFirePercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementWindPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementWindPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementPoisonPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementPoisonPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementHolyPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementHolyPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementDarkPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementDarkPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementGhostPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementGhostPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstElementUndeadPercentage(_) => Some(BonusType::PhysicalDamageAgainstElementUndeadPercentage(val as i8)),
            BonusType::CriticalAgainstRaceFormlessPercentage(_) => Some(BonusType::CriticalAgainstRaceFormlessPercentage(val as i8)),
            BonusType::CriticalAgainstRaceUndeadPercentage(_) => Some(BonusType::CriticalAgainstRaceUndeadPercentage(val as i8)),
            BonusType::CriticalAgainstRaceBrutePercentage(_) => Some(BonusType::CriticalAgainstRaceBrutePercentage(val as i8)),
            BonusType::CriticalAgainstRacePlantPercentage(_) => Some(BonusType::CriticalAgainstRacePlantPercentage(val as i8)),
            BonusType::CriticalAgainstRaceInsectPercentage(_) => Some(BonusType::CriticalAgainstRaceInsectPercentage(val as i8)),
            BonusType::CriticalAgainstRaceFishPercentage(_) => Some(BonusType::CriticalAgainstRaceFishPercentage(val as i8)),
            BonusType::CriticalAgainstRaceDemonPercentage(_) => Some(BonusType::CriticalAgainstRaceDemonPercentage(val as i8)),
            BonusType::CriticalAgainstRaceDemiHumanPercentage(_) => Some(BonusType::CriticalAgainstRaceDemiHumanPercentage(val as i8)),
            BonusType::CriticalAgainstRaceAngelPercentage(_) => Some(BonusType::CriticalAgainstRaceAngelPercentage(val as i8)),
            BonusType::CriticalAgainstRaceDragonPercentage(_) => Some(BonusType::CriticalAgainstRaceDragonPercentage(val as i8)),
            BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusStunOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusStunOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusCurseOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusCurseOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBlindOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusBlindOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusSleepOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusSleepOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBurningOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusBurningOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusChaosOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusChaosOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusStoneOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusStoneOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(_) => Some(BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(val as f32)),
            BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(_) => Some(BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(val as f32)),
            BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusStunWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusStunWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusCurseWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusCurseWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBlindWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusBlindWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusSleepWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusSleepWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBurningWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusBurningWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusChaosWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusChaosWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusStoneWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusStoneWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(val as f32)),
            BonusType::ChanceToInflictStatusComaWhenHitPercentage(_) => Some(BonusType::ChanceToInflictStatusComaWhenHitPercentage(val as f32)),
            BonusType::ResistanceToStatusPoisonPercentage(_) => Some(BonusType::ResistanceToStatusPoisonPercentage(val as i8)),
            BonusType::ResistanceToStatusStunPercentage(_) => Some(BonusType::ResistanceToStatusStunPercentage(val as i8)),
            BonusType::ResistanceToStatusFreezePercentage(_) => Some(BonusType::ResistanceToStatusFreezePercentage(val as i8)),
            BonusType::ResistanceToStatusCursePercentage(_) => Some(BonusType::ResistanceToStatusCursePercentage(val as i8)),
            BonusType::ResistanceToStatusConfusePercentage(_) => Some(BonusType::ResistanceToStatusConfusePercentage(val as i8)),
            BonusType::ResistanceToStatusBurningPercentage(_) => Some(BonusType::ResistanceToStatusBurningPercentage(val as i8)),
            BonusType::ResistanceToStatusBlindPercentage(_) => Some(BonusType::ResistanceToStatusBlindPercentage(val as i8)),
            BonusType::ResistanceToStatusSleepPercentage(_) => Some(BonusType::ResistanceToStatusSleepPercentage(val as i8)),
            BonusType::ResistanceToStatusSilencePercentage(_) => Some(BonusType::ResistanceToStatusSilencePercentage(val as i8)),
            BonusType::ResistanceToStatusChaosPercentage(_) => Some(BonusType::ResistanceToStatusChaosPercentage(val as i8)),
            BonusType::ResistanceToStatusBleedingPercentage(_) => Some(BonusType::ResistanceToStatusBleedingPercentage(val as i8)),
            BonusType::ResistanceToStatusStonePercentage(_) => Some(BonusType::ResistanceToStatusStonePercentage(val as i8)),
            BonusType::ResistanceToStatusWeaponBreakPercentage(_) => Some(BonusType::ResistanceToStatusWeaponBreakPercentage(val as i8)),
            BonusType::ResistanceToStatusArmorBreakPercentage(_) => Some(BonusType::ResistanceToStatusArmorBreakPercentage(val as i8)),
            BonusType::BreakArmorPercentage(_) => Some(BonusType::BreakArmorPercentage(val as i8)),
            BonusType::BreakWeaponPercentage(_) => Some(BonusType::BreakWeaponPercentage(val as i8)),
            BonusType::ClassChangePercentageOnHit(_) => Some(BonusType::ClassChangePercentageOnHit(val as i8)),
            BonusType::LongRangeCriticalChance(_) => Some(BonusType::LongRangeCriticalChance(val as i8)),
            BonusType::PhysicalDamageAgainstClassBossPercentage(_) => Some(BonusType::PhysicalDamageAgainstClassBossPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstClassNormalPercentage(_) => Some(BonusType::PhysicalDamageAgainstClassNormalPercentage(val as i8)),
            BonusType::PhysicalDamageAgainstClassGuardianPercentage(_) => Some(BonusType::PhysicalDamageAgainstClassGuardianPercentage(val as i8)),
            BonusType::ResistanceDamageFromClassBossPercentage(_) => Some(BonusType::ResistanceDamageFromClassBossPercentage(val as i8)),
            BonusType::ResistanceDamageFromClassNormalPercentage(_) => Some(BonusType::ResistanceDamageFromClassNormalPercentage(val as i8)),
            BonusType::ResistanceDamageFromClassGuardianPercentage(_) => Some(BonusType::ResistanceDamageFromClassGuardianPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementNeutralPercentage(_) => Some(BonusType::ResistanceDamageFromElementNeutralPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementWaterPercentage(_) => Some(BonusType::ResistanceDamageFromElementWaterPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementEarthPercentage(_) => Some(BonusType::ResistanceDamageFromElementEarthPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementFirePercentage(_) => Some(BonusType::ResistanceDamageFromElementFirePercentage(val as i8)),
            BonusType::ResistanceDamageFromElementWindPercentage(_) => Some(BonusType::ResistanceDamageFromElementWindPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementPoisonPercentage(_) => Some(BonusType::ResistanceDamageFromElementPoisonPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementHolyPercentage(_) => Some(BonusType::ResistanceDamageFromElementHolyPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementDarkPercentage(_) => Some(BonusType::ResistanceDamageFromElementDarkPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementGhostPercentage(_) => Some(BonusType::ResistanceDamageFromElementGhostPercentage(val as i8)),
            BonusType::ResistanceDamageFromElementUndeadPercentage(_) => Some(BonusType::ResistanceDamageFromElementUndeadPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceFormlessPercentage(_) => Some(BonusType::ResistanceDamageFromRaceFormlessPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceUndeadPercentage(_) => Some(BonusType::ResistanceDamageFromRaceUndeadPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceBrutePercentage(_) => Some(BonusType::ResistanceDamageFromRaceBrutePercentage(val as i8)),
            BonusType::ResistanceDamageFromRacePlantPercentage(_) => Some(BonusType::ResistanceDamageFromRacePlantPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceInsectPercentage(_) => Some(BonusType::ResistanceDamageFromRaceInsectPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceFishPercentage(_) => Some(BonusType::ResistanceDamageFromRaceFishPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceDemonPercentage(_) => Some(BonusType::ResistanceDamageFromRaceDemonPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceDemiHumanPercentage(_) => Some(BonusType::ResistanceDamageFromRaceDemiHumanPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceAngelPercentage(_) => Some(BonusType::ResistanceDamageFromRaceAngelPercentage(val as i8)),
            BonusType::ResistanceDamageFromRaceDragonPercentage(_) => Some(BonusType::ResistanceDamageFromRaceDragonPercentage(val as i8)),
            BonusType::ResistanceDamageFromSizeSmallPercentage(_) => Some(BonusType::ResistanceDamageFromSizeSmallPercentage(val as i8)),
            BonusType::ResistanceDamageFromSizeMediumPercentage(_) => Some(BonusType::ResistanceDamageFromSizeMediumPercentage(val as i8)),
            BonusType::ResistanceDamageFromSizeLargePercentage(_) => Some(BonusType::ResistanceDamageFromSizeLargePercentage(val as i8)),
            BonusType::SkillDelayIncDecPercentage(_) => Some(BonusType::SkillDelayIncDecPercentage(val as i8)),
            BonusType::DoubleAttackChancePercentage(_) => Some(BonusType::DoubleAttackChancePercentage(val as i8)),
            BonusType::HealSkillPercentage(_) => Some(BonusType::HealSkillPercentage(val as i8)),
            BonusType::IgnoreDefRaceFormlessPercentage(_) => Some(BonusType::IgnoreDefRaceFormlessPercentage(val as i8)),
            BonusType::IgnoreDefRaceUndeadPercentage(_) => Some(BonusType::IgnoreDefRaceUndeadPercentage(val as i8)),
            BonusType::IgnoreDefRaceBrutePercentage(_) => Some(BonusType::IgnoreDefRaceBrutePercentage(val as i8)),
            BonusType::IgnoreDefRacePlantPercentage(_) => Some(BonusType::IgnoreDefRacePlantPercentage(val as i8)),
            BonusType::IgnoreDefRaceInsectPercentage(_) => Some(BonusType::IgnoreDefRaceInsectPercentage(val as i8)),
            BonusType::IgnoreDefRaceFishPercentage(_) => Some(BonusType::IgnoreDefRaceFishPercentage(val as i8)),
            BonusType::IgnoreDefRaceDemonPercentage(_) => Some(BonusType::IgnoreDefRaceDemonPercentage(val as i8)),
            BonusType::IgnoreDefRaceDemiHumanPercentage(_) => Some(BonusType::IgnoreDefRaceDemiHumanPercentage(val as i8)),
            BonusType::IgnoreDefRaceAngelPercentage(_) => Some(BonusType::IgnoreDefRaceAngelPercentage(val as i8)),
            BonusType::IgnoreDefRaceDragonPercentage(_) => Some(BonusType::IgnoreDefRaceDragonPercentage(val as i8)),
            BonusType::IgnoreMDefRaceFormlessPercentage(_) => Some(BonusType::IgnoreMDefRaceFormlessPercentage(val as i8)),
            BonusType::IgnoreMDefRaceUndeadPercentage(_) => Some(BonusType::IgnoreMDefRaceUndeadPercentage(val as i8)),
            BonusType::IgnoreMDefRaceBrutePercentage(_) => Some(BonusType::IgnoreMDefRaceBrutePercentage(val as i8)),
            BonusType::IgnoreMDefRacePlantPercentage(_) => Some(BonusType::IgnoreMDefRacePlantPercentage(val as i8)),
            BonusType::IgnoreMDefRaceInsectPercentage(_) => Some(BonusType::IgnoreMDefRaceInsectPercentage(val as i8)),
            BonusType::IgnoreMDefRaceFishPercentage(_) => Some(BonusType::IgnoreMDefRaceFishPercentage(val as i8)),
            BonusType::IgnoreMDefRaceDemonPercentage(_) => Some(BonusType::IgnoreMDefRaceDemonPercentage(val as i8)),
            BonusType::IgnoreMDefRaceDemiHumanPercentage(_) => Some(BonusType::IgnoreMDefRaceDemiHumanPercentage(val as i8)),
            BonusType::IgnoreMDefRaceAngelPercentage(_) => Some(BonusType::IgnoreMDefRaceAngelPercentage(val as i8)),
            BonusType::IgnoreMDefRaceDragonPercentage(_) => Some(BonusType::IgnoreMDefRaceDragonPercentage(val as i8)),
            BonusType::IgnoreMDefClassNormalPercentage(_) => Some(BonusType::IgnoreMDefClassNormalPercentage(val as i8)),
            BonusType::IgnoreMDefClassBossPercentage(_) => Some(BonusType::IgnoreMDefClassBossPercentage(val as i8)),
            BonusType::IgnoreMDefClassGuardianPercentage(_) => Some(BonusType::IgnoreMDefClassGuardianPercentage(val as i8)),
            BonusType::DamageRangedAtkPercentage(_) => Some(BonusType::DamageRangedAtkPercentage(val as i8)),
            BonusType::ResistanceMagicAttackPercentage(_) => Some(BonusType::ResistanceMagicAttackPercentage(val as i8)),
            BonusType::MagicAttackReflectChancePercentage(_) => Some(BonusType::MagicAttackReflectChancePercentage(val as i8)),
            BonusType::MeleeAttackReflectChancePercentage(_) => Some(BonusType::MeleeAttackReflectChancePercentage(val as i8)),
            BonusType::SplashRadius(_) => Some(BonusType::SplashRadius(val as i8)),
            BonusType::SpeedPercentage(_) => Some(BonusType::SpeedPercentage(val as i8)),
            BonusType::DropChanceJewelPercentage(_) => Some(BonusType::DropChanceJewelPercentage(val as i8)),
            BonusType::DropChanceOrePercentage(_) => Some(BonusType::DropChanceOrePercentage(val as i8)),
            BonusType::DropChanceRecoveryPercentage(_) => Some(BonusType::DropChanceRecoveryPercentage(val as i8)),
            BonusType::DropChanceFoodPercentage(_) => Some(BonusType::DropChanceFoodPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceFormlessPercentage(_) => Some(BonusType::GainExpWhenKillingRaceFormlessPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceUndeadPercentage(_) => Some(BonusType::GainExpWhenKillingRaceUndeadPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceBrutePercentage(_) => Some(BonusType::GainExpWhenKillingRaceBrutePercentage(val as i8)),
            BonusType::GainExpWhenKillingRacePlantPercentage(_) => Some(BonusType::GainExpWhenKillingRacePlantPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceInsectPercentage(_) => Some(BonusType::GainExpWhenKillingRaceInsectPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceFishPercentage(_) => Some(BonusType::GainExpWhenKillingRaceFishPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceDemonPercentage(_) => Some(BonusType::GainExpWhenKillingRaceDemonPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceDemiHumanPercentage(_) => Some(BonusType::GainExpWhenKillingRaceDemiHumanPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceAngelPercentage(_) => Some(BonusType::GainExpWhenKillingRaceAngelPercentage(val as i8)),
            BonusType::GainExpWhenKillingRaceDragonPercentage(_) => Some(BonusType::GainExpWhenKillingRaceDragonPercentage(val as i8)),
            BonusType::SpDrainWhenAttackingRaceFormless(_) => Some(BonusType::SpDrainWhenAttackingRaceFormless(val as u16)),
            BonusType::SpDrainWhenAttackingRaceUndead(_) => Some(BonusType::SpDrainWhenAttackingRaceUndead(val as u16)),
            BonusType::SpDrainWhenAttackingRaceBrute(_) => Some(BonusType::SpDrainWhenAttackingRaceBrute(val as u16)),
            BonusType::SpDrainWhenAttackingRacePlant(_) => Some(BonusType::SpDrainWhenAttackingRacePlant(val as u16)),
            BonusType::SpDrainWhenAttackingRaceInsect(_) => Some(BonusType::SpDrainWhenAttackingRaceInsect(val as u16)),
            BonusType::SpDrainWhenAttackingRaceFish(_) => Some(BonusType::SpDrainWhenAttackingRaceFish(val as u16)),
            BonusType::SpDrainWhenAttackingRaceDemon(_) => Some(BonusType::SpDrainWhenAttackingRaceDemon(val as u16)),
            BonusType::SpDrainWhenAttackingRaceDemiHuman(_) => Some(BonusType::SpDrainWhenAttackingRaceDemiHuman(val as u16)),
            BonusType::SpDrainWhenAttackingRaceAngel(_) => Some(BonusType::SpDrainWhenAttackingRaceAngel(val as u16)),
            BonusType::SpDrainWhenAttackingRaceDragon(_) => Some(BonusType::SpDrainWhenAttackingRaceDragon(val as u16)),
            BonusType::SpDrainWhenKillingRaceFormless(_) => Some(BonusType::SpDrainWhenKillingRaceFormless(val as u16)),
            BonusType::SpDrainWhenKillingRaceUndead(_) => Some(BonusType::SpDrainWhenKillingRaceUndead(val as u16)),
            BonusType::SpDrainWhenKillingRaceBrute(_) => Some(BonusType::SpDrainWhenKillingRaceBrute(val as u16)),
            BonusType::SpDrainWhenKillingRacePlant(_) => Some(BonusType::SpDrainWhenKillingRacePlant(val as u16)),
            BonusType::SpDrainWhenKillingRaceInsect(_) => Some(BonusType::SpDrainWhenKillingRaceInsect(val as u16)),
            BonusType::SpDrainWhenKillingRaceFish(_) => Some(BonusType::SpDrainWhenKillingRaceFish(val as u16)),
            BonusType::SpDrainWhenKillingRaceDemon(_) => Some(BonusType::SpDrainWhenKillingRaceDemon(val as u16)),
            BonusType::SpDrainWhenKillingRaceDemiHuman(_) => Some(BonusType::SpDrainWhenKillingRaceDemiHuman(val as u16)),
            BonusType::SpDrainWhenKillingRaceAngel(_) => Some(BonusType::SpDrainWhenKillingRaceAngel(val as u16)),
            BonusType::SpDrainWhenKillingRaceDragon(_) => Some(BonusType::SpDrainWhenKillingRaceDragon(val as u16)),
            BonusType::EnableSkillId(_, _) => None,
            _ => Self::get_bonus(bonus, bonuses)
        }
    }

    pub fn get_bonus(bonus: &BonusType, bonuses: &Vec<BonusType>) -> Option<BonusType> {
        match bonus {
            BonusType::Str(_) => bonuses.iter().find(|b| matches!(b, BonusType::Str(_))).map(|b| b.clone()),
            BonusType::Agi(_) => bonuses.iter().find(|b| matches!(b, BonusType::Agi(_))).map(|b| b.clone()),
            BonusType::Vit(_) => bonuses.iter().find(|b| matches!(b, BonusType::Vit(_))).map(|b| b.clone()),
            BonusType::Int(_) => bonuses.iter().find(|b| matches!(b, BonusType::Int(_))).map(|b| b.clone()),
            BonusType::Dex(_) => bonuses.iter().find(|b| matches!(b, BonusType::Dex(_))).map(|b| b.clone()),
            BonusType::Luk(_) => bonuses.iter().find(|b| matches!(b, BonusType::Luk(_))).map(|b| b.clone()),
            BonusType::AllStats(_) => bonuses.iter().find(|b| matches!(b, BonusType::AllStats(_))).map(|b| b.clone()),
            BonusType::Hit(_) => bonuses.iter().find(|b| matches!(b, BonusType::Hit(_))).map(|b| b.clone()),
            BonusType::HitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HitPercentage(_))).map(|b| b.clone()),
            BonusType::Flee(_) => bonuses.iter().find(|b| matches!(b, BonusType::Flee(_))).map(|b| b.clone()),
            BonusType::Crit(_) => bonuses.iter().find(|b| matches!(b, BonusType::Crit(_))).map(|b| b.clone()),
            BonusType::PerfectDodge(_) => bonuses.iter().find(|b| matches!(b, BonusType::PerfectDodge(_))).map(|b| b.clone()),
            BonusType::Aspd(_) => bonuses.iter().find(|b| matches!(b, BonusType::Aspd(_))).map(|b| b.clone()),
            BonusType::AspdPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::AspdPercentage(_))).map(|b| b.clone()),
            BonusType::Maxhp(_) => bonuses.iter().find(|b| matches!(b, BonusType::Maxhp(_))).map(|b| b.clone()),
            BonusType::Maxsp(_) => bonuses.iter().find(|b| matches!(b, BonusType::Maxsp(_))).map(|b| b.clone()),
            BonusType::MaxhpPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MaxhpPercentage(_))).map(|b| b.clone()),
            BonusType::MaxspPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MaxspPercentage(_))).map(|b| b.clone()),
            BonusType::Atk(_) => bonuses.iter().find(|b| matches!(b, BonusType::Atk(_))).map(|b| b.clone()),
            BonusType::Def(_) => bonuses.iter().find(|b| matches!(b, BonusType::Def(_))).map(|b| b.clone()),
            BonusType::VitDefPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::VitDefPercentage(_))).map(|b| b.clone()),
            BonusType::DefPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DefPercentage(_))).map(|b| b.clone()),
            BonusType::Mdef(_) => bonuses.iter().find(|b| matches!(b, BonusType::Mdef(_))).map(|b| b.clone()),
            BonusType::Matk(_) => bonuses.iter().find(|b| matches!(b, BonusType::Matk(_))).map(|b| b.clone()),
            BonusType::MatkBasedOnStaffPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MatkBasedOnStaffPercentage(_))).map(|b| b.clone()),
            BonusType::MatkPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MatkPercentage(_))).map(|b| b.clone()),
            BonusType::AtkPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::AtkPercentage(_))).map(|b| b.clone()),
            BonusType::PerfectHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PerfectHitPercentage(_))).map(|b| b.clone()),
            BonusType::ElementWeapon(_) => bonuses.iter().find(|b| matches!(b, BonusType::ElementWeapon(_))).map(|b| b.clone()),
            BonusType::ElementDefense(_) => bonuses.iter().find(|b| matches!(b, BonusType::ElementDefense(_))).map(|b| b.clone()),
            BonusType::CriticalDamagePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalDamagePercentage(_))).map(|b| b.clone()),
            BonusType::CastTimePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CastTimePercentage(_))).map(|b| b.clone()),
            BonusType::CastTimeWhenUsingSkillIdPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::CastTimeWhenUsingSkillIdPercentage(_, _))).map(|b| b.clone()),
            BonusType::AfterCastDelayPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::AfterCastDelayPercentage(_))).map(|b| b.clone()),
            BonusType::NaturalHpRecoveryPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::NaturalHpRecoveryPercentage(_))).map(|b| b.clone()),
            BonusType::NaturalSpRecoveryPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::NaturalSpRecoveryPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromItemPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromItemPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromItemIDPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromItemIDPercentage(_, _))).map(|b| b.clone()),
            BonusType::HpRegenFromHerbPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromHerbPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromFruitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromFruitPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromMeatPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromMeatPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromCandyPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromCandyPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromJuicePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromJuicePercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromFishPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromFoodPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromFoodPercentage(_))).map(|b| b.clone()),
            BonusType::HpRegenFromPotionPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromPotionPercentage(_))).map(|b| b.clone()),
            BonusType::GainHpWhenKillingEnemy(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainHpWhenKillingEnemy(_))).map(|b| b.clone()),
            BonusType::GainHpWhenKillingEnemyWithMagicAttack(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainHpWhenKillingEnemyWithMagicAttack(_))).map(|b| b.clone()),
            BonusType::GainSpWhenKillingEnemyWithMagicAttack(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainSpWhenKillingEnemyWithMagicAttack(_))).map(|b| b.clone()),
            BonusType::HpRegenFromSkillPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenFromSkillPercentage(_))).map(|b| b.clone()),
            BonusType::DisableHpRegen => bonuses.iter().find(|b| matches!(b, BonusType::DisableHpRegen)).map(|b| b.clone()),
            BonusType::DisableSpRegen => bonuses.iter().find(|b| matches!(b, BonusType::DisableSpRegen)).map(|b| b.clone()),
            BonusType::GainSpWhenHittingEnemy(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainSpWhenHittingEnemy(_))).map(|b| b.clone()),
            BonusType::GainSpWhenKillingEnemy(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainSpWhenKillingEnemy(_))).map(|b| b.clone()),
            BonusType::SpConsumption(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpConsumption(_))).map(|b| b.clone()),
            BonusType::ResistanceRangeAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceRangeAttackPercentage(_))).map(|b| b.clone()),
            BonusType::NormalAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::NormalAttackPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstSizeSmallPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstSizeSmallPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstSizeMediumPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstSizeMediumPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstSizeLargePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstSizeLargePercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstSizeSmallPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstSizeSmallPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstSizeMediumPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstSizeMediumPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstSizeLargePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstSizeLargePercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::MagicalDamageAgainstRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicalDamageAgainstRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementNeutralPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementNeutralPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementWaterPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementWaterPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementEarthPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementEarthPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementFirePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementFirePercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementWindPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementWindPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementPoisonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementPoisonPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementHolyPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementHolyPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementDarkPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementDarkPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementGhostPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementGhostPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstElementUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstElementUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::CriticalAgainstRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::CriticalAgainstRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusPoisonOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusStunOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusStunOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusFreezeOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusCurseOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusCurseOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBlindOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBlindOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusSleepOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusSleepOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusSilenceOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBurningOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBurningOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusChaosOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusChaosOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBleedingOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusStoneOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusStoneOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusConfuseOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusWeaponBreakOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusArmorBreakOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackOnBossClassPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackOnNormalClassPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackOnGuardianClassPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaOnAttackRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusPoisonToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusStunToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusFreezeToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusCurseToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBlindToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusSleepToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusSilenceToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBurningToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusChaosToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBleedingToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusStoneToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusConfuseToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusWeaponBreakToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusArmorBreakToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaToSelfOnAttackPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusPoisonWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusStunWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusStunWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusFreezeWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusCurseWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusCurseWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBlindWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBlindWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusSleepWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusSleepWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusSilenceWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBurningWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBurningWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusChaosWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusChaosWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusBleedingWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusStoneWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusStoneWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusConfuseWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusWeaponBreakWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusArmorBreakWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ChanceToInflictStatusComaWhenHitPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ChanceToInflictStatusComaWhenHitPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusPoisonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusPoisonPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusStunPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusStunPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusFreezePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusFreezePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusCursePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusCursePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusConfusePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusConfusePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusBurningPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusBurningPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusBlindPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusBlindPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusSleepPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusSleepPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusSilencePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusSilencePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusChaosPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusChaosPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusBleedingPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusBleedingPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusStonePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusStonePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusWeaponBreakPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusWeaponBreakPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceToStatusArmorBreakPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceToStatusArmorBreakPercentage(_))).map(|b| b.clone()),
            BonusType::BreakArmorPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::BreakArmorPercentage(_))).map(|b| b.clone()),
            BonusType::BreakWeaponPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::BreakWeaponPercentage(_))).map(|b| b.clone()),
            BonusType::ClassChangePercentageOnHit(_) => bonuses.iter().find(|b| matches!(b, BonusType::ClassChangePercentageOnHit(_))).map(|b| b.clone()),
            BonusType::LongRangeCriticalChance(_) => bonuses.iter().find(|b| matches!(b, BonusType::LongRangeCriticalChance(_))).map(|b| b.clone()),
            BonusType::IncreaseDamageAgainstClassBossBaseOnDef => bonuses.iter().find(|b| matches!(b, BonusType::IncreaseDamageAgainstClassBossBaseOnDef)).map(|b| b.clone()),
            BonusType::IncreaseDamageAgainstClassNormalBaseOnDef => bonuses.iter().find(|b| matches!(b, BonusType::IncreaseDamageAgainstClassNormalBaseOnDef)).map(|b| b.clone()),
            BonusType::IncreaseDamageAgainstClassGuardianBaseOnDef => bonuses.iter().find(|b| matches!(b, BonusType::IncreaseDamageAgainstClassGuardianBaseOnDef)).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstClassBossPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstClassBossPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstClassNormalPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstClassNormalPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstClassGuardianPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstClassGuardianPercentage(_))).map(|b| b.clone()),
            BonusType::PhysicalDamageAgainstMobIdPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::PhysicalDamageAgainstMobIdPercentage(_, _))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromClassBossPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromClassBossPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromClassNormalPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromClassNormalPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromClassGuardianPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromClassGuardianPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementNeutralPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementNeutralPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementWaterPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementWaterPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementEarthPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementEarthPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementFirePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementFirePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementWindPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementWindPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementPoisonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementPoisonPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementHolyPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementHolyPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementDarkPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementDarkPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementGhostPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementGhostPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromElementUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromElementUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromSizeSmallPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromSizeSmallPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromSizeMediumPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromSizeMediumPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceDamageFromSizeLargePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceDamageFromSizeLargePercentage(_))).map(|b| b.clone()),
            BonusType::SkillDelayIncDecPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::SkillDelayIncDecPercentage(_))).map(|b| b.clone()),
            BonusType::DoubleAttackChancePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DoubleAttackChancePercentage(_))).map(|b| b.clone()),
            BonusType::HealSkillPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::HealSkillPercentage(_))).map(|b| b.clone()),
            BonusType::HealSkillIdPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::HealSkillIdPercentage(_, _))).map(|b| b.clone()),
            BonusType::IgnoreDefClassNormal => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefClassNormal)).map(|b| b.clone()),
            BonusType::IgnoreDefClassBoss => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefClassBoss)).map(|b| b.clone()),
            BonusType::IgnoreDefClassGuardian => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefClassGuardian)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceAngel => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceAngel)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceBrute => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceBrute)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceDemiHuman => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceDemiHuman)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceDemon => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceDemon)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceDragon => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceDragon)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceFish => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceFish)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceFormless => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceFormless)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceInsect => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceInsect)).map(|b| b.clone()),
            BonusType::IgnoreDefRacePlant => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRacePlant)).map(|b| b.clone()),
            BonusType::IgnoreDefRacePlayerHuman => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRacePlayerHuman)).map(|b| b.clone()),
            BonusType::IgnoreDefRacePlayerDoram => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRacePlayerDoram)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceUndead => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceUndead)).map(|b| b.clone()),
            BonusType::IgnoreDefRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreDefRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreDefRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefClassNormalPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefClassNormalPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefClassBossPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefClassBossPercentage(_))).map(|b| b.clone()),
            BonusType::IgnoreMDefClassGuardianPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::IgnoreMDefClassGuardianPercentage(_))).map(|b| b.clone()),
            BonusType::DamageRangedAtkPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DamageRangedAtkPercentage(_))).map(|b| b.clone()),
            BonusType::ResistanceMagicAttackPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::ResistanceMagicAttackPercentage(_))).map(|b| b.clone()),
            BonusType::MagicAttackReflectChancePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MagicAttackReflectChancePercentage(_))).map(|b| b.clone()),
            BonusType::MeleeAttackReflectChancePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::MeleeAttackReflectChancePercentage(_))).map(|b| b.clone()),
            BonusType::SplashRadius(_) => bonuses.iter().find(|b| matches!(b, BonusType::SplashRadius(_))).map(|b| b.clone()),
            BonusType::SpeedPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpeedPercentage(_))).map(|b| b.clone()),
            BonusType::EnableFullHpSpRecoverOnResurrect => bonuses.iter().find(|b| matches!(b, BonusType::EnableFullHpSpRecoverOnResurrect)).map(|b| b.clone()),
            BonusType::EnableSeeHidden => bonuses.iter().find(|b| matches!(b, BonusType::EnableSeeHidden)).map(|b| b.clone()),
            BonusType::EnableNoCancelCast => bonuses.iter().find(|b| matches!(b, BonusType::EnableNoCancelCast)).map(|b| b.clone()),
            BonusType::EnableNoGemstoneRequired => bonuses.iter().find(|b| matches!(b, BonusType::EnableNoGemstoneRequired)).map(|b| b.clone()),
            BonusType::EnableIgnoreSizeModifier => bonuses.iter().find(|b| matches!(b, BonusType::EnableIgnoreSizeModifier)).map(|b| b.clone()),
            BonusType::EnableNoKnockback => bonuses.iter().find(|b| matches!(b, BonusType::EnableNoKnockback)).map(|b| b.clone()),
            BonusType::EnableNoWalkDelay => bonuses.iter().find(|b| matches!(b, BonusType::EnableNoWalkDelay)).map(|b| b.clone()),
            BonusType::UnbreakableArmor => bonuses.iter().find(|b| matches!(b, BonusType::UnbreakableArmor)).map(|b| b.clone()),
            BonusType::UnbreakableShoulder => bonuses.iter().find(|b| matches!(b, BonusType::UnbreakableShoulder)).map(|b| b.clone()),
            BonusType::UnbreakableHelm => bonuses.iter().find(|b| matches!(b, BonusType::UnbreakableHelm)).map(|b| b.clone()),
            BonusType::UnbreakableShield => bonuses.iter().find(|b| matches!(b, BonusType::UnbreakableShield)).map(|b| b.clone()),
            BonusType::UnbreakableShoes => bonuses.iter().find(|b| matches!(b, BonusType::UnbreakableShoes)).map(|b| b.clone()),
            BonusType::UnbreakableWeapon => bonuses.iter().find(|b| matches!(b, BonusType::UnbreakableWeapon)).map(|b| b.clone()),
            BonusType::ResistancePhysicalAttackFromMobIdPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::ResistancePhysicalAttackFromMobIdPercentage(_, _))).map(|b| b.clone()),
            BonusType::DropChanceItemIdPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::DropChanceItemIdPercentage(_, _))).map(|b| b.clone()),
            BonusType::DropChanceJewelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DropChanceJewelPercentage(_))).map(|b| b.clone()),
            BonusType::DropChanceOrePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DropChanceOrePercentage(_))).map(|b| b.clone()),
            BonusType::DropChanceRecoveryPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DropChanceRecoveryPercentage(_))).map(|b| b.clone()),
            BonusType::DropChanceFoodPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DropChanceFoodPercentage(_))).map(|b| b.clone()),
            BonusType::KnockbackWhenUsingSkillId(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::KnockbackWhenUsingSkillId(_, _))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceFormlessPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceFormlessPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceUndeadPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceUndeadPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceBrutePercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceBrutePercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRacePlantPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRacePlantPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceInsectPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceInsectPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceFishPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceFishPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceDemonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceDemonPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceDemiHumanPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceDemiHumanPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceAngelPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceAngelPercentage(_))).map(|b| b.clone()),
            BonusType::GainExpWhenKillingRaceDragonPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::GainExpWhenKillingRaceDragonPercentage(_))).map(|b| b.clone()),
            BonusType::GainZenyWhenKillingMonster(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::GainZenyWhenKillingMonster(_, _))).map(|b| b.clone()),
            BonusType::HpDrainWhenAttackingPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::HpDrainWhenAttackingPercentage(_, _))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingPercentage(_, _))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceFormless(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceFormless(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceUndead(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceUndead(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceBrute(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceBrute(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRacePlant(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRacePlant(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceInsect(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceInsect(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceFish(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceFish(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceDemon(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceDemon(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceDemiHuman(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceDemiHuman(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceAngel(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceAngel(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenAttackingRaceDragon(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenAttackingRaceDragon(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceFormless(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceFormless(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceUndead(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceUndead(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceBrute(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceBrute(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRacePlant(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRacePlant(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceInsect(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceInsect(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceFish(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceFish(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceDemon(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceDemon(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceDemiHuman(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceDemiHuman(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceAngel(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceAngel(_))).map(|b| b.clone()),
            BonusType::SpDrainWhenKillingRaceDragon(_) => bonuses.iter().find(|b| matches!(b, BonusType::SpDrainWhenKillingRaceDragon(_))).map(|b| b.clone()),
            BonusType::SpBurnOnTargetWhenAttackingPercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::SpBurnOnTargetWhenAttackingPercentage(_, _))).map(|b| b.clone()),
            BonusType::HpLossEveryMs(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::HpLossEveryMs(_, _))).map(|b| b.clone()),
            BonusType::HpRegenEveryMs(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::HpRegenEveryMs(_, _))).map(|b| b.clone()),
            BonusType::SpLossEveryMs(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::SpLossEveryMs(_, _))).map(|b| b.clone()),
            BonusType::SpRegenEveryMs(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::SpRegenEveryMs(_, _))).map(|b| b.clone()),
            BonusType::SkillIdDamagePercentage(_, _) => bonuses.iter().find(|b| matches!(b, BonusType::SkillIdDamagePercentage(_, _))).map(|b| b.clone()),
            BonusType::DamageAgainstMobGroupGoblinPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DamageAgainstMobGroupGoblinPercentage(_))).map(|b| b.clone()),
            BonusType::DamageAgainstMobGroupKoboldPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DamageAgainstMobGroupKoboldPercentage(_))).map(|b| b.clone()),
            BonusType::DamageAgainstMobGroupOrcPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DamageAgainstMobGroupOrcPercentage(_))).map(|b| b.clone()),
            BonusType::DamageAgainstMobGroupGolemPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DamageAgainstMobGroupGolemPercentage(_))).map(|b| b.clone()),
            BonusType::DamageAgainstMobGroupGuardianPercentage(_) => bonuses.iter().find(|b| matches!(b, BonusType::DamageAgainstMobGroupGuardianPercentage(_))).map(|b| b.clone()),
            BonusType::EnableSkillId(_, _) => None,
        }
    }

    pub fn get_bonuses(bonus: &BonusType, bonuses: &Vec<BonusType>) -> Vec<BonusType> {
        match bonus {
            BonusType::EnableSkillId(_, _) => bonuses.iter().filter(|b| matches!(b, BonusType::EnableSkillId(_, _))).cloned().collect::<Vec<BonusType>>(),
            _ => Vec::new()
        }
    }
}
